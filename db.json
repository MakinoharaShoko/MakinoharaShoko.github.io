{"meta":{"version":1,"warehouse":"3.0.2"},"models":{"Asset":[{"_id":"source/img/2018end.png","path":"img/2018end.png","modified":0,"renderable":0},{"_id":"source/img/60.png","path":"img/60.png","modified":0,"renderable":0},{"_id":"source/img/Linux.jpg","path":"img/Linux.jpg","modified":0,"renderable":0},{"_id":"source/img/Java.jpg","path":"img/Java.jpg","modified":0,"renderable":0},{"_id":"source/img/about-bg-walle.jpg","path":"img/about-bg-walle.jpg","modified":0,"renderable":0},{"_id":"source/img/cpp.jpg","path":"img/cpp.jpg","modified":0,"renderable":0},{"_id":"source/img/graph.jpg","path":"img/graph.jpg","modified":0,"renderable":0},{"_id":"source/img/confortZone.jfif","path":"img/confortZone.jfif","modified":0,"renderable":0},{"_id":"source/img/eng.jpg","path":"img/eng.jpg","modified":0,"renderable":0},{"_id":"source/img/py.jfif","path":"img/py.jfif","modified":0,"renderable":0},{"_id":"source/img/tree1.jpg","path":"img/tree1.jpg","modified":0,"renderable":0},{"_id":"themes/osx/source/favicon.ico","path":"favicon.ico","modified":0,"renderable":1},{"_id":"source/img/favicon.ico","path":"img/favicon.ico","modified":0,"renderable":0},{"_id":"source/img/maths.jpg","path":"img/maths.jpg","modified":0,"renderable":0},{"_id":"source/img/icu.png","path":"img/icu.png","modified":0,"renderable":0},{"_id":"source/img/post-bg-2015.jpg","path":"img/post-bg-2015.jpg","modified":0,"renderable":0},{"_id":"source/img/post-bg-web.jpg","path":"img/post-bg-web.jpg","modified":0,"renderable":0},{"_id":"source/img/score.png","path":"img/score.png","modified":0,"renderable":0},{"_id":"themes/osx/source/css/aside.css","path":"css/aside.css","modified":0,"renderable":1},{"_id":"themes/osx/source/css/highlight.css","path":"css/highlight.css","modified":0,"renderable":1},{"_id":"themes/osx/source/css/index.css","path":"css/index.css","modified":0,"renderable":1},{"_id":"themes/osx/source/css/osx.css","path":"css/osx.css","modified":1,"renderable":1},{"_id":"themes/osx/source/css/tags.css","path":"css/tags.css","modified":0,"renderable":1},{"_id":"themes/osx/source/css/post.css","path":"css/post.css","modified":0,"renderable":1},{"_id":"themes/osx/source/img/apple.png","path":"img/apple.png","modified":0,"renderable":1},{"_id":"themes/osx/source/img/iconsTop.png","path":"img/iconsTop.png","modified":0,"renderable":1},{"_id":"themes/osx/source/img/nav.png","path":"img/nav.png","modified":0,"renderable":1},{"_id":"themes/osx/source/js/osx.js","path":"js/osx.js","modified":0,"renderable":1},{"_id":"themes/osx/source/photos/index.html","path":"photos/index.html","modified":0,"renderable":1},{"_id":"source/img/ahu.jfif","path":"img/ahu.jfif","modified":0,"renderable":0},{"_id":"source/img/to.jpg","path":"img/to.jpg","modified":0,"renderable":0},{"_id":"themes/osx/source/img/bg.jpg","path":"img/bg.jpg","modified":0,"renderable":1},{"_id":"source/img/headpic.jpg","path":"img/headpic.jpg","modified":0,"renderable":0},{"_id":"source/img/TIM截图20200106220245.png","path":"img/TIM截图20200106220245.png","modified":0,"renderable":0},{"_id":"source/img/TIM截图20200106182148.png","path":"img/TIM截图20200106182148.png","modified":0,"renderable":0},{"_id":"source/img/post-bg-css.jpg","path":"img/post-bg-css.jpg","modified":0,"renderable":0},{"_id":"source/img/DSC_0392.jpg","path":"img/DSC_0392.jpg","modified":0,"renderable":0},{"_id":"source/img/zx.png","path":"img/zx.png","modified":0,"renderable":0},{"_id":"source/img/One_year_later.png","path":"img/One_year_later.png","modified":0,"renderable":0},{"_id":"source/img/home2.png","path":"img/home2.png","modified":0,"renderable":0},{"_id":"source/img/ahu.night.png","path":"img/ahu.night.png","modified":0,"renderable":0},{"_id":"source/img/2020.jpg","path":"img/2020.jpg","modified":0,"renderable":0},{"_id":"themes/colorful/source/favicon.ico","path":"favicon.ico","modified":0,"renderable":1},{"_id":"themes/colorful/source/css/highlight.css","path":"css/highlight.css","modified":0,"renderable":1},{"_id":"themes/colorful/source/css/aside.css","path":"css/aside.css","modified":0,"renderable":1},{"_id":"themes/colorful/source/css/osx.css","path":"css/osx.css","modified":0,"renderable":1},{"_id":"themes/colorful/source/css/post.css","path":"css/post.css","modified":0,"renderable":1},{"_id":"themes/colorful/source/css/index.css","path":"css/index.css","modified":0,"renderable":1},{"_id":"themes/colorful/source/css/tags.css","path":"css/tags.css","modified":0,"renderable":1},{"_id":"themes/colorful/source/js/osx.js","path":"js/osx.js","modified":0,"renderable":1},{"_id":"themes/colorful/source/photos/index.html","path":"photos/index.html","modified":0,"renderable":1},{"_id":"themes/colorful/source/img/nav.png","path":"img/nav.png","modified":0,"renderable":1},{"_id":"themes/colorful/source/img/iconsTop.png","path":"img/iconsTop.png","modified":0,"renderable":1},{"_id":"themes/colorful/source/img/apple.png","path":"img/apple.png","modified":0,"renderable":1},{"_id":"themes/colorful/source/img/bg.jpg","path":"img/bg.jpg","modified":0,"renderable":1},{"_id":"themes/colorful/source/img/title-logo.png","path":"img/title-logo.png","modified":0,"renderable":1},{"_id":"themes/colorful/source/img/title-logo_s.png","path":"img/title-logo_s.png","modified":0,"renderable":1},{"_id":"source/img/TIM图片20200217150443.jpg","path":"img/TIM图片20200217150443.jpg","modified":0,"renderable":0},{"_id":"themes/colorful/source/CNAME","path":"CNAME","modified":0,"renderable":1},{"_id":"source/img/1版样式.png","path":"img/1版样式.png","modified":0,"renderable":0},{"_id":"source/img/1版主页.png","path":"img/1版主页.png","modified":0,"renderable":0},{"_id":"source/img/WebGAL_1.png","path":"img/WebGAL_1.png","modified":0,"renderable":0},{"_id":"source/img/WebGAL_2.png","path":"img/WebGAL_2.png","modified":0,"renderable":0},{"_id":"source/img/WebGAL_0.png","path":"img/WebGAL_0.png","modified":0,"renderable":0},{"_id":"source/img/20170523230144.jpg","path":"img/20170523230144.jpg","modified":0,"renderable":0},{"_id":"themes/colorful/source/LetterGothicStd-BoldSlanted.otf","path":"LetterGothicStd-BoldSlanted.otf","modified":0,"renderable":1},{"_id":"themes/colorful/source/LetterGothicStd-Bold.otf","path":"LetterGothicStd-Bold.otf","modified":0,"renderable":1},{"_id":"themes/colorful/source/LetterGothicStd-Slanted.otf","path":"LetterGothicStd-Slanted.otf","modified":0,"renderable":1},{"_id":"themes/colorful/source/LetterGothicStd.otf","path":"LetterGothicStd.otf","modified":0,"renderable":1},{"_id":"themes/colorful/source/苹方-简.ttf","path":"苹方-简.ttf","modified":0,"renderable":1},{"_id":"source/links/index.md","path":"links/index.md","modified":0,"renderable":0},{"_id":"source/about/index.md","path":"about/index.md","modified":0,"renderable":0},{"_id":"themes/colorful/source/aboutNew/logo192.png","path":"aboutNew/logo192.png","modified":0,"renderable":1},{"_id":"themes/colorful/source/aboutNew/logo512.png","path":"aboutNew/logo512.png","modified":0,"renderable":1},{"_id":"themes/colorful/source/aboutNew/asset-manifest.json","path":"aboutNew/asset-manifest.json","modified":1,"renderable":1},{"_id":"themes/colorful/source/aboutNew/favicon.ico","path":"aboutNew/favicon.ico","modified":0,"renderable":1},{"_id":"themes/colorful/source/aboutNew/index.html","path":"aboutNew/index.html","modified":1,"renderable":1},{"_id":"themes/colorful/source/aboutNew/robots.txt","path":"aboutNew/robots.txt","modified":0,"renderable":1},{"_id":"themes/colorful/source/aboutNew/manifest.json","path":"aboutNew/manifest.json","modified":0,"renderable":1},{"_id":"themes/colorful/source/aboutNew/static/css/main.577a40f7.chunk.css","path":"aboutNew/static/css/main.577a40f7.chunk.css","modified":0,"renderable":1},{"_id":"themes/colorful/source/aboutNew/static/css/main.577a40f7.chunk.css.map","path":"aboutNew/static/css/main.577a40f7.chunk.css.map","modified":0,"renderable":1},{"_id":"themes/colorful/source/aboutNew/static/js/3.f00e6ab9.chunk.js","path":"aboutNew/static/js/3.f00e6ab9.chunk.js","modified":1,"renderable":1},{"_id":"themes/colorful/source/aboutNew/static/js/2.42fc1989.chunk.js.LICENSE.txt","path":"aboutNew/static/js/2.42fc1989.chunk.js.LICENSE.txt","modified":1,"renderable":1},{"_id":"themes/colorful/source/aboutNew/static/js/3.f00e6ab9.chunk.js.map","path":"aboutNew/static/js/3.f00e6ab9.chunk.js.map","modified":0,"renderable":1},{"_id":"themes/colorful/source/aboutNew/static/js/main.40891906.chunk.js","path":"aboutNew/static/js/main.40891906.chunk.js","modified":0,"renderable":1},{"_id":"themes/colorful/source/aboutNew/static/js/main.40891906.chunk.js.map","path":"aboutNew/static/js/main.40891906.chunk.js.map","modified":0,"renderable":1},{"_id":"themes/colorful/source/aboutNew/static/js/runtime-main.a8a470da.js","path":"aboutNew/static/js/runtime-main.a8a470da.js","modified":1,"renderable":1},{"_id":"themes/colorful/source/aboutNew/static/js/runtime-main.a8a470da.js.map","path":"aboutNew/static/js/runtime-main.a8a470da.js.map","modified":0,"renderable":1},{"_id":"themes/colorful/source/aboutNew/static/js/2.42fc1989.chunk.js","path":"aboutNew/static/js/2.42fc1989.chunk.js","modified":1,"renderable":1},{"_id":"themes/colorful/source/aboutNew/static/css/2.27ae4eb7.chunk.css","path":"aboutNew/static/css/2.27ae4eb7.chunk.css","modified":1,"renderable":1},{"_id":"themes/colorful/source/aboutNew/static/css/2.27ae4eb7.chunk.css.map","path":"aboutNew/static/css/2.27ae4eb7.chunk.css.map","modified":0,"renderable":1},{"_id":"themes/colorful/source/aboutNew/static/js/2.42fc1989.chunk.js.map","path":"aboutNew/static/js/2.42fc1989.chunk.js.map","modified":0,"renderable":1},{"_id":"source/img/redux.jpg","path":"img/redux.jpg","modified":1,"renderable":0},{"_id":"themes/colorful/source/aboutNew/static/css/main.c179e432.chunk.css","path":"aboutNew/static/css/main.c179e432.chunk.css","modified":1,"renderable":1},{"_id":"themes/colorful/source/aboutNew/static/css/main.c179e432.chunk.css.map","path":"aboutNew/static/css/main.c179e432.chunk.css.map","modified":1,"renderable":1},{"_id":"themes/colorful/source/aboutNew/static/js/main.bc8741ba.chunk.js","path":"aboutNew/static/js/main.bc8741ba.chunk.js","modified":1,"renderable":1},{"_id":"themes/colorful/source/aboutNew/static/js/main.bc8741ba.chunk.js.map","path":"aboutNew/static/js/main.bc8741ba.chunk.js.map","modified":1,"renderable":1}],"Cache":[{"_id":"themes/osx/.editorconfig","hash":"3036325288c2bdf484691e761250264acdf9916c","modified":1599827749676},{"_id":"themes/osx/README.md","hash":"b34f08859dd8fb41a70e06a749cc605899c45c2f","modified":1599827723112},{"_id":"themes/osx/_config.yml","hash":"d73de0abb507aa63224f57347824929e494d915a","modified":1599827701362},{"_id":"themes/osx/package.json","hash":"3503262c7f3a97ed713e4c9b87d7f5294795a39d","modified":1599827723494},{"_id":"themes/osx/layout/aside.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1599827722581},{"_id":"themes/osx/layout/archive.ejs","hash":"9e5626b577b3dbce14fb72c01ab68578e33f2fc1","modified":1599827716388},{"_id":"themes/osx/layout/category.ejs","hash":"eff775fe7fd96bf30b3b5b785a047903c22cd702","modified":1599827717621},{"_id":"themes/osx/layout/layout.ejs","hash":"2575902837b47da33b059dc15d2b459435c8cca3","modified":1628859329621},{"_id":"themes/osx/layout/index.ejs","hash":"5845dd628010ec4d150de07f1097f15849689d29","modified":1599827722592},{"_id":"themes/osx/layout/post.ejs","hash":"a80630268caef277680d80ab43fc19d12200ff72","modified":1599827719618},{"_id":"themes/osx/layout/tag.ejs","hash":"a1d5e1a9dc1afd00b857b3a1baa6d9ade4230a90","modified":1599827718523},{"_id":"themes/osx/layout/page.ejs","hash":"2e53811dda487a8faf75b3c3372fc8b8726d1f55","modified":1599827722450},{"_id":"themes/osx/.idea/misc.xml","hash":"7df46872d1421797d543d0323da2e81710cc573d","modified":1599827747979},{"_id":"themes/osx/.idea/osx.iml","hash":"980957b57c4f1eae5e85d664d8375f83d47d3e5a","modified":1599827748767},{"_id":"themes/osx/.idea/workspace.xml","hash":"f3c7856f3c248bd1c908a818ece2f97c84e6fa49","modified":1599827749643},{"_id":"themes/osx/.idea/modules.xml","hash":"8277b43940a40e5abd53631fd69364daf34be43d","modified":1599827749232},{"_id":"themes/osx/.idea/vcs.xml","hash":"c92f3eb0ad1c70371e177a4d7d741f90af3f902c","modified":1599827749199},{"_id":"themes/osx/scripts/readme.md","hash":"41e7abdb8b07d0cf855ffb74a8efb502e4ae0e6f","modified":1599827750832},{"_id":"source/_posts/2019-10-25-Python.markdown","hash":"d569f9a8e2fec835871385520b926b26d779ebe2","modified":1635041075817},{"_id":"source/_posts/2019-09-30-OneYearLater.markdown","hash":"b6174debe0c74a7f712dfccb8826c2aa83f9ff63","modified":1635041075814},{"_id":"source/_posts/2019-09-30-Hello 2019.markdown","hash":"342c6d7624d4afe9e4cc9edb8996fdd44ba00435","modified":1635041075813},{"_id":"source/_posts/2019-11-10-SaveMaths.md","hash":"2026c5773f09f6804ab2543ac4983e0d8dfb803f","modified":1635041075818},{"_id":"source/_posts/2019-10-03-Chinese Phone.markdown","hash":"22cf1cd8fbe2456bd5d9a96d710fee1d9ca88a9a","modified":1635041075815},{"_id":"source/_posts/2019-11-12-C.md","hash":"09d330ad14085d3a07669775351034e2919a0fba","modified":1635041075820},{"_id":"source/_posts/2019-11-13-English articles.md","hash":"f92324ca7d122973fedf951cf813f54a3af4222e","modified":1581924789724},{"_id":"source/_posts/2019-10-25-Java.markdown","hash":"2cdbfdc6a54edbc37bdd1c3863fe7ddc15058f79","modified":1635041075816},{"_id":"source/_posts/2019-11-14-Clife.md","hash":"dfadb94e5a82e052c4e9ce0eeeb9715ed1fb23f3","modified":1581856660587},{"_id":"source/_posts/2019-11-19-Cpp.markdown","hash":"7d927a5c182d8363bd0984b3f8a3fa4ae59e679c","modified":1640967851770},{"_id":"source/_posts/2019-11-26-Linux.markdown","hash":"3125f4d0c1419b7fb422e35106ba62a21f9af624","modified":1635041075822},{"_id":"source/_posts/2020-2-16-DevelopingTheme.md","hash":"026e5b4cace5461e3b90f1eeae4501208b2d58ca","modified":1635041075825},{"_id":"source/_posts/2020-1-20-Programmer's advancement.md","hash":"57f925eee83b0a09f7e2844b6a4671a4504ab5f8","modified":1635041075824},{"_id":"source/_posts/2019-12-27-19End.md","hash":"7b76796bee9911e6c938e1b2bd8644e837b01707","modified":1635329726320},{"_id":"source/_posts/2020-2-17-Data1.md","hash":"26c01c6c4d18562254722fbf39fd67d93a54a4d8","modified":1635041075827},{"_id":"source/_posts/2020-2-17-Data2.md","hash":"82017b5e7258d13eb4671e50c1af754a5d7ed1ad","modified":1635041075829},{"_id":"source/_posts/2020-2-18-Web.markdown","hash":"a52064ace4b5bf0c0fc15c0454e44d9ca9176ce1","modified":1639366197680},{"_id":"source/_posts/links.md","hash":"feeced362f410bd1a50a7e1cab13c35df7373689","modified":1635041075845},{"_id":"source/_posts/2020-2-17-Algorithm.md","hash":"da73a8fd2253f18cfe4a40cb9c5d6bdeb3a40291","modified":1635041075826},{"_id":"source/_posts/2020-2-18-JavaScript.markdown","hash":"7a454a6c2235476f0f51ca396298f2185b9273c8","modified":1635041075830},{"_id":"source/_posts/About.md","hash":"8f208813f70312c470a2f32b956533ec62db9825","modified":1635041075845},{"_id":"source/img/2018end.png","hash":"881611acc59dc48d42ae4c950af426c844bb7e0d","modified":1581566740605},{"_id":"source/_posts/2020-2-24-HowToWeb.md","hash":"f67abd891a2dbc1062b1f25336ad5cda829aa250","modified":1635041075830},{"_id":"source/img/60.png","hash":"be7ef2b708729bdc2d9b3fa007418deba8d86ce2","modified":1581566743983},{"_id":"source/img/Linux.jpg","hash":"e032d9b23c6d7857f326833babaf90ca16a1f139","modified":1581566740668},{"_id":"source/img/Java.jpg","hash":"e8f6219abfb2558bc178628739b185279c3c5e28","modified":1581566741480},{"_id":"source/img/about-bg-walle.jpg","hash":"23e7e02ad063ed8d5eaba97f7a8183c92a26976f","modified":1581566742136},{"_id":"source/img/cpp.jpg","hash":"812708edf680888ce32fc74506e8167404a7ae53","modified":1581566741184},{"_id":"source/img/graph.jpg","hash":"583739e3a447abd8175fb00e516ec184f2c3b319","modified":1581566743561},{"_id":"source/img/confortZone.jfif","hash":"e9fbf93f08c334a2089fd4c275d51e08f7ca980e","modified":1581566743811},{"_id":"source/img/eng.jpg","hash":"dc04e6451958cba177cf8652ca85d7e7f283b1c6","modified":1581566740887},{"_id":"source/img/py.jfif","hash":"2fc1817bcaa56b6e5cb8e49580af1353e1011271","modified":1581566739278},{"_id":"source/img/tree1.jpg","hash":"8d4b92a096cdf18649de185b29ac9e49c89f4478","modified":1581566742042},{"_id":"source/links/index.md","hash":"4ff57faf71864e6ba0e74200fa19556b45c86e33","modified":1635041076104},{"_id":"source/about/index.md","hash":"22c586c424b1eb7b215df693d5719156769d5902","modified":1635041075845},{"_id":"themes/osx/source/favicon.ico","hash":"629e6024e1999cbf3cbede637b3c531263079a2b","modified":1599827705900},{"_id":"source/img/favicon.ico","hash":"629e6024e1999cbf3cbede637b3c531263079a2b","modified":1581566740449},{"_id":"source/img/maths.jpg","hash":"d224d739e82d99dbae8d9d071602d87cac796a8e","modified":1581566739652},{"_id":"source/img/icu.png","hash":"9a4a24a340de9180ab1053098f86ffcf6e4622ff","modified":1581566742405},{"_id":"source/img/post-bg-2015.jpg","hash":"e5d68d31f507de3b0879143851211c851b9de203","modified":1581566739184},{"_id":"source/img/post-bg-web.jpg","hash":"a32b3811759b4d982dd2c46eaf2853557806f5e3","modified":1581566738965},{"_id":"source/img/score.png","hash":"1a7882d33cdde0348f18c8b63650adeabf9c7a7f","modified":1581566742655},{"_id":"themes/osx/layout/partials/recent-posts.ejs","hash":"9d78ffdf10146fa5e7aaa1adc012939cbbfd9d76","modified":1599827722076},{"_id":"themes/osx/source/css/aside.css","hash":"6a2925d6da901bf823f1733f4cd7c965930ed922","modified":1599827704803},{"_id":"themes/osx/source/css/highlight.css","hash":"26e0b2b7f937142ccfe0435ad0e9b40219c669f9","modified":1599827704218},{"_id":"themes/osx/source/css/index.css","hash":"bc24c3bb010be5fd7efe17fee76d1d86a7bc112b","modified":1599827705003},{"_id":"themes/osx/source/css/osx.css","hash":"d593240a08ea10b82005b1f82a1b12c3c27a31e3","modified":1628859327617},{"_id":"themes/osx/source/css/tags.css","hash":"49dd52825660e1af8eedcb7da206bf4896930116","modified":1599827703758},{"_id":"themes/osx/source/css/post.css","hash":"dac9b3c37f28293e66a68e386244e0b449fbf27b","modified":1628859328245},{"_id":"themes/osx/source/img/apple.png","hash":"b865282c4398b70270d8442ac0ea2d8f01f906b1","modified":1599827713703},{"_id":"themes/osx/source/img/iconsTop.png","hash":"a5e30900b5458e7116313042d50a5073a3737cce","modified":1599827712565},{"_id":"themes/osx/source/img/nav.png","hash":"4e303a39918673f792a40f96aff3038431c404a0","modified":1599827710210},{"_id":"themes/osx/source/js/osx.js","hash":"eb29f277d9fc2fd93b00617a3897b509519ee907","modified":1628859329235},{"_id":"themes/osx/source/photos/index.html","hash":"8dc65575d8aaa083fdb6c29cded519d597c516b7","modified":1599827703652},{"_id":"source/img/ahu.jfif","hash":"fec1274747613aea62abd3e98f15f7fa17de396d","modified":1581566741792},{"_id":"source/img/to.jpg","hash":"25463b4ff5dea5d1b56f59a7d85f81e0a32b3a71","modified":1581566742764},{"_id":"themes/osx/source/img/bg.jpg","hash":"e96863d0fe18a7fdf4ba1fb8bf36408a203024f3","modified":1599827711193},{"_id":"source/img/headpic.jpg","hash":"f9722e87634baf781f702243e97560a74d9694b9","modified":1581566738871},{"_id":"source/img/TIM截图20200106220245.png","hash":"4394b97e9dc36e427b08b6a557c156db0f86ef0d","modified":1581566739746},{"_id":"source/img/TIM截图20200106182148.png","hash":"12beda924034fcdbf9af405b51efe5fdfcd9f932","modified":1581566742514},{"_id":"source/img/post-bg-css.jpg","hash":"fbaa72fe1417d6715fa4403dd51f731427269f7b","modified":1581566740106},{"_id":"source/img/DSC_0392.jpg","hash":"16d534516905f3338b45cdbb4e207a3c745277cd","modified":1581566741902},{"_id":"source/img/zx.png","hash":"2312f1bc8900608b72c426c2ff06ac70577bad86","modified":1581566738463},{"_id":"themes/osx/source/fonts/consola.ttf","hash":"2c3f9080c8eb055da7afd9c43cfc5fc5e9510df6","modified":1599827707857},{"_id":"source/img/One_year_later.png","hash":"75d2f3a87a909fbfbb70a4be36fcd35650b94ac7","modified":1581566743233},{"_id":"source/img/home2.png","hash":"7919a06000fbc5d6e71ea7572b6808244cc996c9","modified":1581566740418},{"_id":"source/img/ahu.night.png","hash":"da04c0e60f47cace87a9038ba39a46fcec671a0d","modified":1581566741480},{"_id":"source/img/2020.jpg","hash":"569dc1a83c996f41876ed60dab54dae2b51967df","modified":1581566743780},{"_id":"themes/osx/source/fonts/Pf.ttf","hash":"416e4f7442216589b367e1edbb2d24e1f63dd38f","modified":1599827721914},{"_id":"public/links/index.html","hash":"48554f7b8223df329d639f2b00dcc38bd922e7b9","modified":1599827793998},{"_id":"public/about/index.html","hash":"dff824f2a601818e2ab2330ad7e12d47634d1a6b","modified":1599827793998},{"_id":"public/2019/10/25/2019-10-25-Python/index.html","hash":"8170bcb29e8d455e147dc217d478039759ec9517","modified":1599827793998},{"_id":"public/2019/09/30/2019-09-30-Hello 2019/index.html","hash":"7a06a6d639bf3a3aefcae1ee228193dc245671f4","modified":1599827793998},{"_id":"public/2019/08/20/links/index.html","hash":"8fdc0e65e2805093acf1cfe776a9a00bb579987b","modified":1599827793998},{"_id":"public/archives/index.html","hash":"1a4b9f7f0e7dde828309f40f7447598e5adb9b08","modified":1599827793998},{"_id":"public/archives/page/2/index.html","hash":"f1af68e6bc22f8ffe6437b686bd73f6cea7f0d3c","modified":1599827793998},{"_id":"public/archives/page/3/index.html","hash":"d2a1a2561b630ad3da570b848f41805517cdb5d3","modified":1599827793998},{"_id":"public/archives/2019/index.html","hash":"8526d84d76c6cfa96d6b0694b085b6bc22902319","modified":1599827793998},{"_id":"public/archives/2019/page/2/index.html","hash":"3883feb338000f61d6b056a89390658b9c4a57da","modified":1599827793998},{"_id":"public/archives/2019/08/index.html","hash":"6fbe8d69028635c60433da8df7e47784e0337635","modified":1599827793998},{"_id":"public/archives/2019/09/index.html","hash":"a65ff5536f280ef19e6a45522ac9a17b0d2afff2","modified":1599827793998},{"_id":"public/archives/2019/10/index.html","hash":"e2cfd306ae2d4295077e67eb2dd520385828cd5d","modified":1599827793998},{"_id":"public/archives/2019/11/index.html","hash":"d5936a3c3438cdf6f462dc23b46db4aa4b49ddaf","modified":1599827793998},{"_id":"public/archives/2019/12/index.html","hash":"30f591405d7fca01145019edff41af4952d80b49","modified":1599827793998},{"_id":"public/archives/2020/index.html","hash":"309a93120faf28a9ba002a2327e7b4f77c8a336f","modified":1599827793998},{"_id":"public/archives/2020/01/index.html","hash":"d14550626c5c48cbf3b12864d655a693d5f299c3","modified":1599827793998},{"_id":"public/archives/2020/02/index.html","hash":"a2da58c1d5fdc44e56138a74eb121fb132895501","modified":1599827793998},{"_id":"public/index.html","hash":"4b7ef0e1f135c6d4d3c309944630ea9d3a78c309","modified":1599827793998},{"_id":"public/page/2/index.html","hash":"be98b10d9b7337ba8d9e0a3a4c28fad0f3733a4c","modified":1599827793998},{"_id":"public/page/3/index.html","hash":"1a856660fc1a75ce74710fb6b6250d2dbd4b4fe9","modified":1599827793998},{"_id":"public/tags/Life/index.html","hash":"d7c024ea92e0bb73138b042d6235f2d045d7f881","modified":1599827793998},{"_id":"public/tags/学习笔记/index.html","hash":"d79a21a4f5b2cef5fea7cf4df1b2da9a50976e1e","modified":1599827793998},{"_id":"public/tags/Python/index.html","hash":"b921552d56fb10d305d797b0adb28b221cc37204","modified":1599827793998},{"_id":"public/tags/Study/index.html","hash":"36767ceaf89f4f0588f25b592fdc768b9af27f98","modified":1599827793998},{"_id":"public/tags/C/index.html","hash":"753aef99fc2cfb090d8187afe6d9a1806670ae60","modified":1599827793998},{"_id":"public/tags/Java/index.html","hash":"1783da9ef7144b53524912745db954950e7c037f","modified":1599827793998},{"_id":"public/tags/Web-Developing/index.html","hash":"7c139a11d7bd47bb023600a5b09b823530da16dd","modified":1599827793998},{"_id":"public/tags/Coding/index.html","hash":"c8cd2f7a81bb0ca608467ef40c4025e222351498","modified":1599827793998},{"_id":"public/tags/Data-Structure/index.html","hash":"3ec2c5136702cb88b034c1a4aa786d4aef38581e","modified":1599827793998},{"_id":"public/tags/Algorithm/index.html","hash":"922ac1415f97d8200706b793a2197c0f88969b60","modified":1599827793998},{"_id":"public/2020/02/24/2020-2-24-HowToWeb/index.html","hash":"207eb472f0147c38c8fdc6c79e6d6d90ea9d97be","modified":1599827793998},{"_id":"public/2020/02/18/2020-2-18-Web/index.html","hash":"5165976b6ce4fa6aef9c1d5c028f31f44c4da0a3","modified":1599827793998},{"_id":"public/2020/02/18/2020-2-18-JavaScript/index.html","hash":"3bff7cfcc0f99841dac517bbaa35735f4f68dac5","modified":1599827793998},{"_id":"public/2020/02/17/2020-2-17-Data1/index.html","hash":"3f026df78f3f65d74b4e1530ec76270afffed8cc","modified":1599827793998},{"_id":"public/2020/02/17/2020-2-17-Data2/index.html","hash":"7d98f5ce164c7309dbdeffbc15ed9c4457700bd1","modified":1599827793998},{"_id":"public/2020/02/17/2020-2-17-Algorithm/index.html","hash":"b090ac6587191255a21e43cfcd2c737336fbbea9","modified":1599827793998},{"_id":"public/2020/02/16/2020-2-16-DevelopingTheme/index.html","hash":"5bb53c5810c68a1620a513d61532ee3aed918ad0","modified":1599827793998},{"_id":"public/2020/01/20/2020-1-20-Programmer's advancement/index.html","hash":"dee39551fdfd29dbe551e074a66136c5995a2442","modified":1599827793998},{"_id":"public/2019/12/27/2019-12-27-19End/index.html","hash":"b667cf054a974eefec8df45260cd7251841b4ac4","modified":1599827793998},{"_id":"public/2019/11/26/2019-11-26-Linux/index.html","hash":"3d393a46bab6f1c578a023b427ad89d9559b175b","modified":1599827793998},{"_id":"public/2019/11/19/2019-11-19-Cpp/index.html","hash":"99ad6c60b6623df25b0c92091590f77026a3a2a7","modified":1599827793998},{"_id":"public/2019/11/14/2019-11-14-Clife/index.html","hash":"a2f6ab82f033385a00fde76d1c231b48dbf68d63","modified":1599827793998},{"_id":"public/2019/11/13/2019-11-13-English articles/index.html","hash":"aabb29eb1475a6822c56eada5c5df98c1db33345","modified":1599827793998},{"_id":"public/2019/11/12/2019-11-12-C/index.html","hash":"23606be1d1561f903215701ef5f0d4bd0b327272","modified":1599827793998},{"_id":"public/2019/11/10/2019-11-10-SaveMaths/index.html","hash":"9339b396759e6c94c2a185a4566fa4e33cb6694e","modified":1599827793998},{"_id":"public/2019/10/25/2019-10-25-Java/index.html","hash":"4e6598391f5ad1a7d642f3ef1eb4457b0feb227b","modified":1599827793998},{"_id":"public/2019/10/03/2019-10-03-Chinese Phone/index.html","hash":"013e59eedc621bf2287371cd3fd13118a1f0edae","modified":1599827793998},{"_id":"public/2019/09/30/2019-09-30-OneYearLater/index.html","hash":"d8c40c1b3ad36a79323f8e39b4ba780684ae9f35","modified":1599827793998},{"_id":"public/2019/08/20/About/index.html","hash":"2b6882e36a89482d02f24afbdf55772c8e6a7413","modified":1599827793998},{"_id":"public/img/2018end.png","hash":"881611acc59dc48d42ae4c950af426c844bb7e0d","modified":1599827793998},{"_id":"public/img/Linux.jpg","hash":"e032d9b23c6d7857f326833babaf90ca16a1f139","modified":1599827793998},{"_id":"public/img/60.png","hash":"be7ef2b708729bdc2d9b3fa007418deba8d86ce2","modified":1599827793998},{"_id":"public/img/Java.jpg","hash":"e8f6219abfb2558bc178628739b185279c3c5e28","modified":1599827793998},{"_id":"public/img/cpp.jpg","hash":"812708edf680888ce32fc74506e8167404a7ae53","modified":1599827793998},{"_id":"public/img/about-bg-walle.jpg","hash":"23e7e02ad063ed8d5eaba97f7a8183c92a26976f","modified":1599827793998},{"_id":"public/img/graph.jpg","hash":"583739e3a447abd8175fb00e516ec184f2c3b319","modified":1599827793998},{"_id":"public/img/confortZone.jfif","hash":"e9fbf93f08c334a2089fd4c275d51e08f7ca980e","modified":1599827793998},{"_id":"public/img/eng.jpg","hash":"dc04e6451958cba177cf8652ca85d7e7f283b1c6","modified":1599827793998},{"_id":"public/img/py.jfif","hash":"2fc1817bcaa56b6e5cb8e49580af1353e1011271","modified":1599827793998},{"_id":"public/img/tree1.jpg","hash":"8d4b92a096cdf18649de185b29ac9e49c89f4478","modified":1599827793998},{"_id":"public/img/iconsTop.png","hash":"a5e30900b5458e7116313042d50a5073a3737cce","modified":1599827793998},{"_id":"public/img/nav.png","hash":"4e303a39918673f792a40f96aff3038431c404a0","modified":1599827793998},{"_id":"public/img/apple.png","hash":"b865282c4398b70270d8442ac0ea2d8f01f906b1","modified":1599827793998},{"_id":"public/favicon.ico","hash":"629e6024e1999cbf3cbede637b3c531263079a2b","modified":1599827793998},{"_id":"public/img/favicon.ico","hash":"629e6024e1999cbf3cbede637b3c531263079a2b","modified":1599827793998},{"_id":"public/img/icu.png","hash":"9a4a24a340de9180ab1053098f86ffcf6e4622ff","modified":1599827793998},{"_id":"public/img/maths.jpg","hash":"d224d739e82d99dbae8d9d071602d87cac796a8e","modified":1599827793998},{"_id":"public/img/post-bg-web.jpg","hash":"a32b3811759b4d982dd2c46eaf2853557806f5e3","modified":1599827793998},{"_id":"public/img/score.png","hash":"1a7882d33cdde0348f18c8b63650adeabf9c7a7f","modified":1599827793998},{"_id":"public/img/post-bg-2015.jpg","hash":"e5d68d31f507de3b0879143851211c851b9de203","modified":1599827793998},{"_id":"public/css/aside.css","hash":"466a71c528d06babb3df3675966900ae6306a3c4","modified":1599827793998},{"_id":"public/css/highlight.css","hash":"34d3a0474d4e7bc93fc5ac615b138c19e9afe8f8","modified":1599827793998},{"_id":"public/css/index.css","hash":"cb0f5cbe59712fb69ea1f27e61a025f848c12582","modified":1599827793998},{"_id":"public/css/osx.css","hash":"20b791db032907b326538bce1b6f33c2103e320a","modified":1599827793998},{"_id":"public/css/tags.css","hash":"4215b43eff0f565a849c1fe22d97a5a903cf1c44","modified":1599827793998},{"_id":"public/css/post.css","hash":"046ddc291181a6b95bc49897bcc2091ca0473184","modified":1599827793998},{"_id":"public/js/osx.js","hash":"7f6dfdb8dede0983f9573d15db343c9fb939c6a9","modified":1599827793998},{"_id":"public/photos/index.html","hash":"a65e0a51335487478a222b346e36649f76777c9c","modified":1599827793998},{"_id":"public/img/bg.jpg","hash":"e96863d0fe18a7fdf4ba1fb8bf36408a203024f3","modified":1599827793998},{"_id":"public/img/to.jpg","hash":"25463b4ff5dea5d1b56f59a7d85f81e0a32b3a71","modified":1599827793998},{"_id":"public/img/ahu.jfif","hash":"fec1274747613aea62abd3e98f15f7fa17de396d","modified":1599827793998},{"_id":"public/img/headpic.jpg","hash":"f9722e87634baf781f702243e97560a74d9694b9","modified":1599827793998},{"_id":"public/img/TIM截图20200106220245.png","hash":"4394b97e9dc36e427b08b6a557c156db0f86ef0d","modified":1599827793998},{"_id":"public/img/post-bg-css.jpg","hash":"fbaa72fe1417d6715fa4403dd51f731427269f7b","modified":1599827793998},{"_id":"public/img/zx.png","hash":"2312f1bc8900608b72c426c2ff06ac70577bad86","modified":1599827793998},{"_id":"public/fonts/consola.ttf","hash":"2c3f9080c8eb055da7afd9c43cfc5fc5e9510df6","modified":1599827793998},{"_id":"public/img/TIM截图20200106182148.png","hash":"12beda924034fcdbf9af405b51efe5fdfcd9f932","modified":1599827793998},{"_id":"public/img/DSC_0392.jpg","hash":"16d534516905f3338b45cdbb4e207a3c745277cd","modified":1599827793998},{"_id":"public/img/One_year_later.png","hash":"75d2f3a87a909fbfbb70a4be36fcd35650b94ac7","modified":1599827793998},{"_id":"public/img/home2.png","hash":"7919a06000fbc5d6e71ea7572b6808244cc996c9","modified":1599827793998},{"_id":"public/img/ahu.night.png","hash":"da04c0e60f47cace87a9038ba39a46fcec671a0d","modified":1599827793998},{"_id":"public/img/2020.jpg","hash":"569dc1a83c996f41876ed60dab54dae2b51967df","modified":1599827793998},{"_id":"public/fonts/Pf.ttf","hash":"416e4f7442216589b367e1edbb2d24e1f63dd38f","modified":1599827793998},{"_id":"themes/colorful/.editorconfig","hash":"57f50fc69fdc98a28c9bb04c338865a8b267b4bc","modified":1635041076106},{"_id":"themes/colorful/README.md","hash":"b34f08859dd8fb41a70e06a749cc605899c45c2f","modified":1628859332760},{"_id":"themes/colorful/_config.yml","hash":"7d7caeb2b4a77c59acc51c710f2433933dff1e43","modified":1635041076116},{"_id":"themes/colorful/package.json","hash":"b1b7ce3e2f8e3e5bb9586e7f050acc92189fe516","modified":1635041076148},{"_id":"themes/colorful/layout/aside.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1628859332331},{"_id":"themes/colorful/.idea/misc.xml","hash":"0d81a7654b3ab7b1fa88a882ac9120820be781d1","modified":1635041076107},{"_id":"themes/colorful/.idea/modules.xml","hash":"a8f7c15594ce8007be362c3453e77cda8cee256f","modified":1635041076109},{"_id":"themes/colorful/.idea/vcs.xml","hash":"d222c1e95ba289f2814d142867f8b3c8b656bcc6","modified":1635041076110},{"_id":"themes/colorful/layout/category.ejs","hash":"fce5d8879516569e7762e5f49e7eb98515088909","modified":1635041076120},{"_id":"themes/colorful/layout/index.ejs","hash":"5845dd628010ec4d150de07f1097f15849689d29","modified":1628859332232},{"_id":"themes/colorful/layout/layout.ejs","hash":"a54d4c9cccb64f55100feafa1114e1ae48042914","modified":1639066139202},{"_id":"themes/colorful/layout/archive.ejs","hash":"d7278c502844ca8e2be46e35d5795e19dab2d49b","modified":1635041076118},{"_id":"themes/colorful/layout/page.ejs","hash":"a55ea2878a5327ef91863d0ce65cea12b2053bc8","modified":1635041076125},{"_id":"themes/colorful/.idea/osx.iml","hash":"402e38def734b476c4c697c9a36892567ab6af8b","modified":1635041076109},{"_id":"themes/colorful/.idea/workspace.xml","hash":"3ebfcd2b847a7c06c057df9e7dea8bfa77041b9d","modified":1635041076112},{"_id":"themes/colorful/layout/post.ejs","hash":"a80630268caef277680d80ab43fc19d12200ff72","modified":1628859331459},{"_id":"themes/colorful/layout/tag.ejs","hash":"55a02fc2876a69ebcb286d7998f9f0fdc375fabc","modified":1635041076147},{"_id":"themes/colorful/scripts/readme.md","hash":"5b4314dabc00e1e3d458279573a613feb6645e85","modified":1635041076150},{"_id":"themes/colorful/source/favicon.ico","hash":"629e6024e1999cbf3cbede637b3c531263079a2b","modified":1628859328566},{"_id":"themes/colorful/layout/partials/recent-posts.ejs","hash":"284243c47461febd352cb16154f4dfd9c85a62b2","modified":1635041076135},{"_id":"themes/colorful/source/css/highlight.css","hash":"26e0b2b7f937142ccfe0435ad0e9b40219c669f9","modified":1628859327473},{"_id":"themes/colorful/source/css/aside.css","hash":"d005c112de0d324d990e0ecff9253b0aced675ac","modified":1635041076155},{"_id":"themes/colorful/source/css/osx.css","hash":"5e5abed09a7e2f972d9a7b53c606ea306c2dbbcb","modified":1639066139235},{"_id":"themes/colorful/source/css/post.css","hash":"7f3edf067216f606559d82c834a46bb99d9df2bf","modified":1639282602058},{"_id":"themes/colorful/source/css/index.css","hash":"bc24c3bb010be5fd7efe17fee76d1d86a7bc112b","modified":1628859327996},{"_id":"themes/colorful/source/css/tags.css","hash":"5a280732c5ea58bae0852dda24621df5a08cf900","modified":1635041076161},{"_id":"themes/colorful/source/js/osx.js","hash":"eb29f277d9fc2fd93b00617a3897b509519ee907","modified":1628859329235},{"_id":"themes/colorful/source/photos/index.html","hash":"8dc65575d8aaa083fdb6c29cded519d597c516b7","modified":1628859327015},{"_id":"themes/colorful/source/img/nav.png","hash":"4e303a39918673f792a40f96aff3038431c404a0","modified":1628859330160},{"_id":"themes/colorful/source/img/iconsTop.png","hash":"a5e30900b5458e7116313042d50a5073a3737cce","modified":1628859330649},{"_id":"themes/colorful/source/img/apple.png","hash":"b865282c4398b70270d8442ac0ea2d8f01f906b1","modified":1628859330897},{"_id":"themes/colorful/source/img/bg.jpg","hash":"e96863d0fe18a7fdf4ba1fb8bf36408a203024f3","modified":1628859330499},{"_id":"themes/colorful/source/img/title-logo.png","hash":"dd7473493f24769ed503ae082fb93349090f7db7","modified":1628862484029},{"_id":"themes/colorful/source/img/title-logo_s.png","hash":"8b62d3c4baefe789b1a187d708ece4b74ebf7f32","modified":1628863024403},{"_id":"source/_posts/2020-3-24-Reduce.md","hash":"3586a40fdbcd3b0c08490ca5e20d184cfc2feed9","modified":1635041075830},{"_id":"source/_posts/2021-6-30-ZX.markdown","hash":"83ca345dadb6247f5b5e362bf54727f9810ada51","modified":1635041075830},{"_id":"source/_posts/2021-3-23-Maven.markdown","hash":"e876daacbd3811b1b07d97ae5dd8231235c8d362","modified":1635041075830},{"_id":"source/_posts/2021-6-16-CV.markdown","hash":"7978d282540d128a2056de6590e8833ee8e57c0f","modified":1635041075830},{"_id":"source/_posts/2021-10-24-WG_3.markdown","hash":"30ecaa1ef49c89d2a0ab9cbe218b97ced2e2f9cc","modified":1635043182181},{"_id":"source/_posts/2021-7-9-计算机组成复习.markdown","hash":"ba581bcff21cf9e01eab2467d77bec9ddd58373f","modified":1635049241360},{"_id":"source/_posts/2021-7-1-sql.markdown","hash":"6b7ef25dedb2dc75e2211691bdff6db60f675970","modified":1635041075830},{"_id":"source/_posts/2021-8-3-ML.markdown","hash":"0d2bcb66e04adc18e3f8c9428cfaf0ab39382d08","modified":1635041075830},{"_id":"source/_posts/2021-7-6-操作系统复习.markdown","hash":"91fc95cec7893fed19c587619095eb17e63eab8f","modified":1635041075830},{"_id":"source/_posts/2021-7-7-没有什么道德.markdown","hash":"de3486df9f4e3283721e0d46b6ea4c41cdbb45e2","modified":1641128010634},{"_id":"source/_posts/2021-9-17-React.markdown","hash":"41a9ac325b822ca74f959815c1e1719c1e71708b","modified":1639281663201},{"_id":"source/_posts/2021-9-12-nodeJs.markdown","hash":"1a7f8a3027fcf5809f2b4f616a84f129cc8a7196","modified":1635041075830},{"_id":"source/_posts/2021-9-27-WG_2.markdown","hash":"01b248a4864dc1cd5b53924b571cbd8e7af163ab","modified":1635041075830},{"_id":"source/_posts/ASR-E1.md","hash":"dc70824bf46555493b7641e2ae88363d3f61a22e","modified":1635041075845},{"_id":"source/_posts/2021-9-27-WG_1.markdown","hash":"c6cb3dccee6a74f9cf0c98e12f2dc7e04f405e4e","modified":1635041075830},{"_id":"source/_posts/TestLatex.markdown","hash":"87c8f79d810b44bb5a5e60a896afa3442eed4dbe","modified":1635041075845},{"_id":"source/img/TIM图片20200217150443.jpg","hash":"8d48ad1734f2f9c4ec5e31dfa154c81126e90720","modified":1635041075960},{"_id":"themes/colorful/source/CNAME","hash":"e74c4f74a3103ce7eb6a1181477179cc30919602","modified":1635041076153},{"_id":"source/img/1版样式.png","hash":"baaf5af273510aa55c6b5743bcdc1c74e55da7ec","modified":1635041075867},{"_id":"source/img/1版主页.png","hash":"ede2b68eddb17b7ffd77a6d498cc0ae946777498","modified":1635041075845},{"_id":"source/img/WebGAL_1.png","hash":"da9b08eb636ce535ea25a6934620cb38952ae41d","modified":1635041076007},{"_id":"source/img/WebGAL_2.png","hash":"8f1b2d17aa1b70adb57f71afff7ca46a5b1e242f","modified":1635041076022},{"_id":"source/img/WebGAL_0.png","hash":"9d89c6cde317ec453577734edc0a262b4e86c576","modified":1635041075991},{"_id":"source/img/20170523230144.jpg","hash":"367d51bca9c4b01eb88ff043a051e7a8b384c445","modified":1635041075913},{"_id":"source/_posts/2021-11-2-JavaScript2.markdown","hash":"5149a6b5fb38f87ec5265fc2989513d2c2249140","modified":1641128189377},{"_id":"themes/colorful/source/LetterGothicStd-BoldSlanted.otf","hash":"8891c07e5f44fd9dff61af18f868e5a21f8b7b0e","modified":1635843368839},{"_id":"themes/colorful/source/LetterGothicStd-Bold.otf","hash":"08f44a2d361199d3561d03137d52ea3d67dc7520","modified":1635843368835},{"_id":"themes/colorful/source/LetterGothicStd-Slanted.otf","hash":"ff2db5ba9fe245f65b241bd8fd7e1cecf9feda91","modified":1635843368847},{"_id":"themes/colorful/source/LetterGothicStd.otf","hash":"3f6ed3cf2c1e072e54a26ec4b8f140eb0f79bdbd","modified":1635843368849},{"_id":"source/_posts/img/2018end.png","hash":"881611acc59dc48d42ae4c950af426c844bb7e0d","modified":1635329726406},{"_id":"source/_posts/img/60.png","hash":"be7ef2b708729bdc2d9b3fa007418deba8d86ce2","modified":1635329726452},{"_id":"source/_posts/img/Java.jpg","hash":"e8f6219abfb2558bc178628739b185279c3c5e28","modified":1635329726462},{"_id":"source/_posts/img/Linux.jpg","hash":"e032d9b23c6d7857f326833babaf90ca16a1f139","modified":1635329726466},{"_id":"source/_posts/img/about-bg-walle.jpg","hash":"23e7e02ad063ed8d5eaba97f7a8183c92a26976f","modified":1635329726572},{"_id":"source/_posts/img/confortZone.jfif","hash":"e9fbf93f08c334a2089fd4c275d51e08f7ca980e","modified":1635329726595},{"_id":"source/_posts/img/cpp.jpg","hash":"812708edf680888ce32fc74506e8167404a7ae53","modified":1635329726596},{"_id":"source/_posts/img/graph.jpg","hash":"583739e3a447abd8175fb00e516ec184f2c3b319","modified":1635329726601},{"_id":"source/_posts/img/eng.jpg","hash":"dc04e6451958cba177cf8652ca85d7e7f283b1c6","modified":1635329726597},{"_id":"source/_posts/img/py.jfif","hash":"2fc1817bcaa56b6e5cb8e49580af1353e1011271","modified":1635329726635},{"_id":"source/_posts/img/tree1.jpg","hash":"8d4b92a096cdf18649de185b29ac9e49c89f4478","modified":1635329726643},{"_id":"source/_posts/img/TIM图片20200217150443.jpg","hash":"8d48ad1734f2f9c4ec5e31dfa154c81126e90720","modified":1635329726477},{"_id":"source/_posts/img/favicon.ico","hash":"629e6024e1999cbf3cbede637b3c531263079a2b","modified":1635329726599},{"_id":"source/_posts/img/icu.png","hash":"9a4a24a340de9180ab1053098f86ffcf6e4622ff","modified":1635329726617},{"_id":"source/_posts/img/maths.jpg","hash":"d224d739e82d99dbae8d9d071602d87cac796a8e","modified":1635329726619},{"_id":"source/_posts/img/post-bg-2015.jpg","hash":"e5d68d31f507de3b0879143851211c851b9de203","modified":1635329726622},{"_id":"source/_posts/img/post-bg-web.jpg","hash":"a32b3811759b4d982dd2c46eaf2853557806f5e3","modified":1635329726634},{"_id":"source/_posts/img/score.png","hash":"1a7882d33cdde0348f18c8b63650adeabf9c7a7f","modified":1635329726637},{"_id":"source/_posts/img/ahu.jfif","hash":"fec1274747613aea62abd3e98f15f7fa17de396d","modified":1635329726574},{"_id":"source/_posts/img/to.jpg","hash":"25463b4ff5dea5d1b56f59a7d85f81e0a32b3a71","modified":1635329726642},{"_id":"source/_posts/img/headpic.jpg","hash":"f9722e87634baf781f702243e97560a74d9694b9","modified":1635329726605},{"_id":"source/_posts/img/1版样式.png","hash":"baaf5af273510aa55c6b5743bcdc1c74e55da7ec","modified":1635329726337},{"_id":"source/_posts/img/post-bg-css.jpg","hash":"fbaa72fe1417d6715fa4403dd51f731427269f7b","modified":1635329726630},{"_id":"source/_posts/img/zx.png","hash":"2312f1bc8900608b72c426c2ff06ac70577bad86","modified":1635329726650},{"_id":"source/_posts/img/TIM截图20200106182148.png","hash":"12beda924034fcdbf9af405b51efe5fdfcd9f932","modified":1635329726484},{"_id":"source/_posts/img/TIM截图20200106220245.png","hash":"4394b97e9dc36e427b08b6a557c156db0f86ef0d","modified":1635329726502},{"_id":"source/_posts/img/DSC_0392.jpg","hash":"16d534516905f3338b45cdbb4e207a3c745277cd","modified":1635329726460},{"_id":"source/_posts/img/1版主页.png","hash":"ede2b68eddb17b7ffd77a6d498cc0ae946777498","modified":1635329726331},{"_id":"source/_posts/img/One_year_later.png","hash":"75d2f3a87a909fbfbb70a4be36fcd35650b94ac7","modified":1635329726475},{"_id":"source/_posts/img/home2.png","hash":"7919a06000fbc5d6e71ea7572b6808244cc996c9","modified":1635329726614},{"_id":"source/_posts/img/WebGAL_2.png","hash":"8f1b2d17aa1b70adb57f71afff7ca46a5b1e242f","modified":1635329726570},{"_id":"source/_posts/img/WebGAL_1.png","hash":"da9b08eb636ce535ea25a6934620cb38952ae41d","modified":1635329726548},{"_id":"source/_posts/img/ahu.night.png","hash":"da04c0e60f47cace87a9038ba39a46fcec671a0d","modified":1635329726593},{"_id":"source/_posts/img/2020.jpg","hash":"569dc1a83c996f41876ed60dab54dae2b51967df","modified":1635329726451},{"_id":"source/_posts/img/WebGAL_0.png","hash":"9d89c6cde317ec453577734edc0a262b4e86c576","modified":1635329726529},{"_id":"source/_posts/img/20170523230144.jpg","hash":"367d51bca9c4b01eb88ff043a051e7a8b384c445","modified":1635329726404},{"_id":"themes/colorful/source/苹方-简.ttf","hash":"f47ab9c6b6d39b720155c1d5f0a7f6f3a05d7dec","modified":1635843369019},{"_id":"themes/colorful/source/aboutNew/logo192.png","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1639066139206},{"_id":"themes/colorful/source/aboutNew/logo512.png","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1639066139206},{"_id":"themes/colorful/source/aboutNew/asset-manifest.json","hash":"c4ed3e6e1b3b6566b9de7302ea5ef8de774de1ba","modified":1639838887953},{"_id":"themes/colorful/source/aboutNew/favicon.ico","hash":"1120538c77ad1f28a89243b4b53fe2ac16cc3bc6","modified":1639066139204},{"_id":"themes/colorful/source/aboutNew/index.html","hash":"52935ffa2cca39bf6fff4927bd53876281cfdde8","modified":1639838887953},{"_id":"themes/colorful/source/aboutNew/robots.txt","hash":"6af64d9ac347b7b0b3cfe234a79073cf05a38982","modified":1639066139208},{"_id":"themes/colorful/source/aboutNew/manifest.json","hash":"acd1533f4e8427a73093135e7fefeb899077ad79","modified":1639066139208},{"_id":"themes/colorful/source/aboutNew/static/css/main.577a40f7.chunk.css","hash":"8371604cba23dd9e9dfe7cd71e0766fd494910bd","modified":1639066139218},{"_id":"themes/colorful/source/aboutNew/static/css/main.577a40f7.chunk.css.map","hash":"0bae93218430a42a047260433a0c6c7481f4d74c","modified":1639066139218},{"_id":"themes/colorful/source/aboutNew/static/js/3.f00e6ab9.chunk.js","hash":"37248b657ce0f9d501a0707b4990a5df8937b9b0","modified":1639838887962},{"_id":"themes/colorful/source/aboutNew/static/js/2.42fc1989.chunk.js.LICENSE.txt","hash":"fa7da0818faae451cd91d1b74beacad6ed92537b","modified":1639838887963},{"_id":"themes/colorful/source/aboutNew/static/js/3.f00e6ab9.chunk.js.map","hash":"2ea2a51b48dd1c6310f239e09244243e33ef09cb","modified":1639066139231},{"_id":"themes/colorful/source/aboutNew/static/js/main.40891906.chunk.js","hash":"bd6c0f895e117c3d3cd93fbbe2360854f0a878c3","modified":1639066139232},{"_id":"themes/colorful/source/aboutNew/static/js/main.40891906.chunk.js.map","hash":"56968754049ff7131a640da3df3da5de59ab429a","modified":1639066139232},{"_id":"themes/colorful/source/aboutNew/static/js/runtime-main.a8a470da.js","hash":"3825c9bb9b604d942c5ffa7b193c0e317f5feb29","modified":1639838887963},{"_id":"themes/colorful/source/aboutNew/static/js/runtime-main.a8a470da.js.map","hash":"32567409f61c176f62b630e8c642af7be6408761","modified":1639066139233},{"_id":"themes/colorful/source/aboutNew/static/js/2.42fc1989.chunk.js","hash":"25b648f6460625d5bdf8c17ad6a5e2d9c33c2a2b","modified":1639838887962},{"_id":"themes/colorful/source/aboutNew/static/css/2.27ae4eb7.chunk.css","hash":"ec8f5a2b9773a3ba78ffb5193de29b44185143a2","modified":1639838887962},{"_id":"themes/colorful/source/aboutNew/static/css/2.27ae4eb7.chunk.css.map","hash":"32d207ca4e61557c1519c858f0aece429588124a","modified":1639066139217},{"_id":"themes/colorful/source/aboutNew/static/js/2.42fc1989.chunk.js.map","hash":"cb257b457cede719825bea191b55c84789b51089","modified":1639066139229},{"_id":"source/_posts/2020-5-8-ASR-E1.md","hash":"dc70824bf46555493b7641e2ae88363d3f61a22e","modified":1639366197682},{"_id":"source/_posts/2021-7-1-TestLatex.markdown","hash":"87c8f79d810b44bb5a5e60a896afa3442eed4dbe","modified":1641128158162},{"_id":"source/_posts/2021-12-14-FE_List.markdown","hash":"5f7bd172a3ca3e16d7f222722df2ff194b0c1356","modified":1641127936490},{"_id":"source/_posts/2021-12-18-Redux1.markdown","hash":"8773819ebf9dd67bef467fa811726ea8e358ff15","modified":1641127888978},{"_id":"source/img/redux.jpg","hash":"a427eebfc536c6d604fd45ffe532a5c96ec0ccc1","modified":1639834757845},{"_id":"themes/colorful/source/aboutNew/static/css/main.c179e432.chunk.css","hash":"8e7c9c90fcf59372cccfa2e31eb91fbc33ae59d1","modified":1639838887955},{"_id":"themes/colorful/source/aboutNew/static/css/main.c179e432.chunk.css.map","hash":"ff887191b9b03f4fd2a65fc643d1ae5cf25fb945","modified":1639838887962},{"_id":"themes/colorful/source/aboutNew/static/js/main.bc8741ba.chunk.js","hash":"939b8184b69e968b48761bf4940b32ff31edc2e4","modified":1639838887957},{"_id":"themes/colorful/source/aboutNew/static/js/main.bc8741ba.chunk.js.map","hash":"0a24b7c137ef9c8f99993a75daed4062a843e81f","modified":1639838887963}],"Category":[],"Data":[],"Page":[{"title":"links","date":"2020-02-13T15:10:02.000Z","_content":"","source":"links/index.md","raw":"---\ntitle: links\ndate: 2020-02-13 23:10:02\n---\n","updated":"2021-10-24T02:04:36.104Z","path":"links/index.html","_id":"ckey85uiz0001ho8adoc16ngn","comments":1,"layout":"page","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"about","date":"2020-02-13T15:08:54.000Z","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2020-02-13 23:08:54\n---\n","updated":"2021-10-24T02:04:35.845Z","path":"about/index.html","_id":"ckey85uj00003ho8aao800kj7","comments":1,"layout":"page","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"layout":"post","title":"TO: YOU. ONE YEAR LATER","intro":"","date":"2019-09-30T04:00:00.000Z","author":"Makinohara","featured_image":"http://msfasr.com/img/One_year_later.png","catalog":true,"_content":"\n> “得到什么,忘记什么 ”\n\n# 愿你不要忘记你想要什么\n\n### **去好好坚持你的爱好,不要因为各类杂事忘记你应该做的事.大学的时间安排会变得很没有规律,若把这当成堕落的理由,碌碌无为地度过一年,没有谁能够饶得了你.**\n\n徜徉于安徽大学的校园中,我时常会有种莫名其妙的感觉.高中三年过得如此之快,竟然就这样恍惚地来到了大学.莫名的感到一种自由的空气包围着我,整日被老师与家长管教,与题目斗智斗勇的日子真的仿佛在昨天.\n\n校园与合肥八中一样美丽,但比高中大多了,能干的事情也多了不少,不必感觉不学习去参加别的活动就有罪恶感,在这种名为\"青春\"的氛围中,好像干什么都是对的,干什么都是错的.这令人感到迷茫,却又感觉到前途光明.\n\n然而很明显,我早就明确了我一生的方向:当个生活舒服的\"普通人\".\n\n事实证明,要是一个人能够过上普通美满的生活,那么其就绝非普通人,其是需要付出艰苦卓绝的努力的.朝九晚五;开车上下班,拿着能无忧无虑过好生活的年薪......这看似很普通,然而这在现实情况下要做到极其困难.加班与房贷几乎无可避免,\"能过好生活\"的要求却常常上不封顶.向往的生活总是如此难以达到,人总是无法迎来一劳永逸的一天.\n\n然而人生正是由许多不同的阶段组成.在一个阶段就开始幻想如何快速进入下一阶段简直就是愚蠢至极.高考完了还有大学,大学完了还要找工作,接下来是买车买房,成家立业,等到这一切办妥,还有子女教育问题烦心.就这样一路下去,人生总是在等待下一个阶段结束中度过,这是何等可惜.\n\n所以,在一个阶段,就好好享受一个阶段.身处青春,就好好享受青春.去玩去疯也罢,潜心学习也罢,青春总不得荒废到只剩游戏与被窝.等到大学毕业,再去做想做的事,怕是机会寥寥.\n\n青春也许是人生最快乐的一个阶段,我又该如何度过?\n\n## 如何做\n\n1. 保持一个规律的生活习惯\n2. 尽可能不要待在宿舍,去图书馆或是都是极好的\n3. \n4. **定期自我总结**\n\n## 写给一年后\n\n就记住一句话就好\n\n**\"过得再不好,也请不要堕落,堕落了,就完了.\"**\n\n为什么我强调这个呢?因为我初中高中都经历过困苦的时候,我都挺过来了,都上大学了,我理应比初中高中更成熟,要是这时候堕落,真说不过去.\n\n去干自己的事,做自己,少管别人怎么看,嘲笑与捧杀的话,一个也不能听.订的目标没达到被嘲讽了也别担心啥,搞得像他们达到了似的*(因为我相信真的有才能的人不会净想着贬低他人为\"原来他和我一样差\",而是会想着成为更好的人)*.\n\n\n\n## 后记\n\n***简单的手势 全是伪装***\n\n***要是逃离 随处都是安全地带***\n\n***得到什么 忘记什么***\n\n***就算世界被破坏 也无法改变***\n\n","source":"_posts/2019-09-30-OneYearLater.markdown","raw":"---\nlayout:     post\ntitle:      \"TO: YOU. ONE YEAR LATER\"\nintro:   \"\"\ndate:       2019-09-30 12:00:00\nauthor:     \"Makinohara\"\nfeatured_image: http://msfasr.com/img/One_year_later.png\ncatalog: true\ntags:\n    - 生活感想\n    \n---\n\n> “得到什么,忘记什么 ”\n\n# 愿你不要忘记你想要什么\n\n### **去好好坚持你的爱好,不要因为各类杂事忘记你应该做的事.大学的时间安排会变得很没有规律,若把这当成堕落的理由,碌碌无为地度过一年,没有谁能够饶得了你.**\n\n徜徉于安徽大学的校园中,我时常会有种莫名其妙的感觉.高中三年过得如此之快,竟然就这样恍惚地来到了大学.莫名的感到一种自由的空气包围着我,整日被老师与家长管教,与题目斗智斗勇的日子真的仿佛在昨天.\n\n校园与合肥八中一样美丽,但比高中大多了,能干的事情也多了不少,不必感觉不学习去参加别的活动就有罪恶感,在这种名为\"青春\"的氛围中,好像干什么都是对的,干什么都是错的.这令人感到迷茫,却又感觉到前途光明.\n\n然而很明显,我早就明确了我一生的方向:当个生活舒服的\"普通人\".\n\n事实证明,要是一个人能够过上普通美满的生活,那么其就绝非普通人,其是需要付出艰苦卓绝的努力的.朝九晚五;开车上下班,拿着能无忧无虑过好生活的年薪......这看似很普通,然而这在现实情况下要做到极其困难.加班与房贷几乎无可避免,\"能过好生活\"的要求却常常上不封顶.向往的生活总是如此难以达到,人总是无法迎来一劳永逸的一天.\n\n然而人生正是由许多不同的阶段组成.在一个阶段就开始幻想如何快速进入下一阶段简直就是愚蠢至极.高考完了还有大学,大学完了还要找工作,接下来是买车买房,成家立业,等到这一切办妥,还有子女教育问题烦心.就这样一路下去,人生总是在等待下一个阶段结束中度过,这是何等可惜.\n\n所以,在一个阶段,就好好享受一个阶段.身处青春,就好好享受青春.去玩去疯也罢,潜心学习也罢,青春总不得荒废到只剩游戏与被窝.等到大学毕业,再去做想做的事,怕是机会寥寥.\n\n青春也许是人生最快乐的一个阶段,我又该如何度过?\n\n## 如何做\n\n1. 保持一个规律的生活习惯\n2. 尽可能不要待在宿舍,去图书馆或是都是极好的\n3. \n4. **定期自我总结**\n\n## 写给一年后\n\n就记住一句话就好\n\n**\"过得再不好,也请不要堕落,堕落了,就完了.\"**\n\n为什么我强调这个呢?因为我初中高中都经历过困苦的时候,我都挺过来了,都上大学了,我理应比初中高中更成熟,要是这时候堕落,真说不过去.\n\n去干自己的事,做自己,少管别人怎么看,嘲笑与捧杀的话,一个也不能听.订的目标没达到被嘲讽了也别担心啥,搞得像他们达到了似的*(因为我相信真的有才能的人不会净想着贬低他人为\"原来他和我一样差\",而是会想着成为更好的人)*.\n\n\n\n## 后记\n\n***简单的手势 全是伪装***\n\n***要是逃离 随处都是安全地带***\n\n***得到什么 忘记什么***\n\n***就算世界被破坏 也无法改变***\n\n","slug":"2019-09-30-OneYearLater","published":1,"updated":"2021-10-24T02:04:35.814Z","_id":"ckey85uiv0000ho8aejntcg0w","comments":1,"photos":[],"link":"","content":"<blockquote>\n<p>“得到什么,忘记什么 ”</p>\n</blockquote>\n<h1 id=\"愿你不要忘记你想要什么\"><a href=\"#愿你不要忘记你想要什么\" class=\"headerlink\" title=\"愿你不要忘记你想要什么\"></a>愿你不要忘记你想要什么</h1><h3 id=\"去好好坚持你的爱好-不要因为各类杂事忘记你应该做的事-大学的时间安排会变得很没有规律-若把这当成堕落的理由-碌碌无为地度过一年-没有谁能够饶得了你\"><a href=\"#去好好坚持你的爱好-不要因为各类杂事忘记你应该做的事-大学的时间安排会变得很没有规律-若把这当成堕落的理由-碌碌无为地度过一年-没有谁能够饶得了你\" class=\"headerlink\" title=\"去好好坚持你的爱好,不要因为各类杂事忘记你应该做的事.大学的时间安排会变得很没有规律,若把这当成堕落的理由,碌碌无为地度过一年,没有谁能够饶得了你.\"></a><strong>去好好坚持你的爱好,不要因为各类杂事忘记你应该做的事.大学的时间安排会变得很没有规律,若把这当成堕落的理由,碌碌无为地度过一年,没有谁能够饶得了你.</strong></h3><p>徜徉于安徽大学的校园中,我时常会有种莫名其妙的感觉.高中三年过得如此之快,竟然就这样恍惚地来到了大学.莫名的感到一种自由的空气包围着我,整日被老师与家长管教,与题目斗智斗勇的日子真的仿佛在昨天.</p>\n<p>校园与合肥八中一样美丽,但比高中大多了,能干的事情也多了不少,不必感觉不学习去参加别的活动就有罪恶感,在这种名为”青春”的氛围中,好像干什么都是对的,干什么都是错的.这令人感到迷茫,却又感觉到前途光明.</p>\n<p>然而很明显,我早就明确了我一生的方向:当个生活舒服的”普通人”.</p>\n<p>事实证明,要是一个人能够过上普通美满的生活,那么其就绝非普通人,其是需要付出艰苦卓绝的努力的.朝九晚五;开车上下班,拿着能无忧无虑过好生活的年薪……这看似很普通,然而这在现实情况下要做到极其困难.加班与房贷几乎无可避免,”能过好生活”的要求却常常上不封顶.向往的生活总是如此难以达到,人总是无法迎来一劳永逸的一天.</p>\n<p>然而人生正是由许多不同的阶段组成.在一个阶段就开始幻想如何快速进入下一阶段简直就是愚蠢至极.高考完了还有大学,大学完了还要找工作,接下来是买车买房,成家立业,等到这一切办妥,还有子女教育问题烦心.就这样一路下去,人生总是在等待下一个阶段结束中度过,这是何等可惜.</p>\n<p>所以,在一个阶段,就好好享受一个阶段.身处青春,就好好享受青春.去玩去疯也罢,潜心学习也罢,青春总不得荒废到只剩游戏与被窝.等到大学毕业,再去做想做的事,怕是机会寥寥.</p>\n<p>青春也许是人生最快乐的一个阶段,我又该如何度过?</p>\n<h2 id=\"如何做\"><a href=\"#如何做\" class=\"headerlink\" title=\"如何做\"></a>如何做</h2><ol>\n<li>保持一个规律的生活习惯</li>\n<li>尽可能不要待在宿舍,去图书馆或是都是极好的</li>\n<li></li>\n<li><strong>定期自我总结</strong></li>\n</ol>\n<h2 id=\"写给一年后\"><a href=\"#写给一年后\" class=\"headerlink\" title=\"写给一年后\"></a>写给一年后</h2><p>就记住一句话就好</p>\n<p><strong>“过得再不好,也请不要堕落,堕落了,就完了.”</strong></p>\n<p>为什么我强调这个呢?因为我初中高中都经历过困苦的时候,我都挺过来了,都上大学了,我理应比初中高中更成熟,要是这时候堕落,真说不过去.</p>\n<p>去干自己的事,做自己,少管别人怎么看,嘲笑与捧杀的话,一个也不能听.订的目标没达到被嘲讽了也别担心啥,搞得像他们达到了似的<em>(因为我相信真的有才能的人不会净想着贬低他人为”原来他和我一样差”,而是会想着成为更好的人)</em>.</p>\n<h2 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h2><p><strong><em>简单的手势 全是伪装</em></strong></p>\n<p><strong><em>要是逃离 随处都是安全地带</em></strong></p>\n<p><strong><em>得到什么 忘记什么</em></strong></p>\n<p><strong><em>就算世界被破坏 也无法改变</em></strong></p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>“得到什么,忘记什么 ”</p>\n</blockquote>\n<h1 id=\"愿你不要忘记你想要什么\"><a href=\"#愿你不要忘记你想要什么\" class=\"headerlink\" title=\"愿你不要忘记你想要什么\"></a>愿你不要忘记你想要什么</h1><h3 id=\"去好好坚持你的爱好-不要因为各类杂事忘记你应该做的事-大学的时间安排会变得很没有规律-若把这当成堕落的理由-碌碌无为地度过一年-没有谁能够饶得了你\"><a href=\"#去好好坚持你的爱好-不要因为各类杂事忘记你应该做的事-大学的时间安排会变得很没有规律-若把这当成堕落的理由-碌碌无为地度过一年-没有谁能够饶得了你\" class=\"headerlink\" title=\"去好好坚持你的爱好,不要因为各类杂事忘记你应该做的事.大学的时间安排会变得很没有规律,若把这当成堕落的理由,碌碌无为地度过一年,没有谁能够饶得了你.\"></a><strong>去好好坚持你的爱好,不要因为各类杂事忘记你应该做的事.大学的时间安排会变得很没有规律,若把这当成堕落的理由,碌碌无为地度过一年,没有谁能够饶得了你.</strong></h3><p>徜徉于安徽大学的校园中,我时常会有种莫名其妙的感觉.高中三年过得如此之快,竟然就这样恍惚地来到了大学.莫名的感到一种自由的空气包围着我,整日被老师与家长管教,与题目斗智斗勇的日子真的仿佛在昨天.</p>\n<p>校园与合肥八中一样美丽,但比高中大多了,能干的事情也多了不少,不必感觉不学习去参加别的活动就有罪恶感,在这种名为”青春”的氛围中,好像干什么都是对的,干什么都是错的.这令人感到迷茫,却又感觉到前途光明.</p>\n<p>然而很明显,我早就明确了我一生的方向:当个生活舒服的”普通人”.</p>\n<p>事实证明,要是一个人能够过上普通美满的生活,那么其就绝非普通人,其是需要付出艰苦卓绝的努力的.朝九晚五;开车上下班,拿着能无忧无虑过好生活的年薪……这看似很普通,然而这在现实情况下要做到极其困难.加班与房贷几乎无可避免,”能过好生活”的要求却常常上不封顶.向往的生活总是如此难以达到,人总是无法迎来一劳永逸的一天.</p>\n<p>然而人生正是由许多不同的阶段组成.在一个阶段就开始幻想如何快速进入下一阶段简直就是愚蠢至极.高考完了还有大学,大学完了还要找工作,接下来是买车买房,成家立业,等到这一切办妥,还有子女教育问题烦心.就这样一路下去,人生总是在等待下一个阶段结束中度过,这是何等可惜.</p>\n<p>所以,在一个阶段,就好好享受一个阶段.身处青春,就好好享受青春.去玩去疯也罢,潜心学习也罢,青春总不得荒废到只剩游戏与被窝.等到大学毕业,再去做想做的事,怕是机会寥寥.</p>\n<p>青春也许是人生最快乐的一个阶段,我又该如何度过?</p>\n<h2 id=\"如何做\"><a href=\"#如何做\" class=\"headerlink\" title=\"如何做\"></a>如何做</h2><ol>\n<li>保持一个规律的生活习惯</li>\n<li>尽可能不要待在宿舍,去图书馆或是都是极好的</li>\n<li></li>\n<li><strong>定期自我总结</strong></li>\n</ol>\n<h2 id=\"写给一年后\"><a href=\"#写给一年后\" class=\"headerlink\" title=\"写给一年后\"></a>写给一年后</h2><p>就记住一句话就好</p>\n<p><strong>“过得再不好,也请不要堕落,堕落了,就完了.”</strong></p>\n<p>为什么我强调这个呢?因为我初中高中都经历过困苦的时候,我都挺过来了,都上大学了,我理应比初中高中更成熟,要是这时候堕落,真说不过去.</p>\n<p>去干自己的事,做自己,少管别人怎么看,嘲笑与捧杀的话,一个也不能听.订的目标没达到被嘲讽了也别担心啥,搞得像他们达到了似的<em>(因为我相信真的有才能的人不会净想着贬低他人为”原来他和我一样差”,而是会想着成为更好的人)</em>.</p>\n<h2 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h2><p><strong><em>简单的手势 全是伪装</em></strong></p>\n<p><strong><em>要是逃离 随处都是安全地带</em></strong></p>\n<p><strong><em>得到什么 忘记什么</em></strong></p>\n<p><strong><em>就算世界被破坏 也无法改变</em></strong></p>\n"},{"layout":"post","title":"Developing in Python","intro":"","date":"2019-10-25T00:00:00.000Z","author":"Makinohara","featured_image":"http://msfasr.com/img/py.jfif","catalog":true,"_content":"\n\n\n\n\n\n\n\n\n## 查看支持的包版本\n\npython -m pip debug --verbose\n\n## Python 变量\n\nPython的变量是自动推断的，但是Python仍旧是强类型语言。\n\n判断变量种类：\n\n```python\ntype()#判断变量类型\nisinstance(var,type)#判断对象是否为制定类型的实例\n```\n\nPython允许多个对象指向一个值\n\n```python\nx = 3\nid(x)\ny = x\nid(y)#此时x，y指向同一对象\nx += 3\nid(x)\ny\nid(y)\n#此时x，y不指向同一对象\n#Python中，每一个值或对象总是有固定的空间，当没有变量指向时，Python将将其删除\n```\n\n变量名命名：\n\n以字母或下划线开头（一般以字母），可带数字和下划线，不能以关键字命名\n\n\n\n### Python 序列\n\n列表[1,2,'file']\n\nsort:原地排序\n\nsorted:返回排序后的列表\n\nrange(start,stop,step)返回一个可迭代对象\n\na = list(range(10))\n\n#### Python运算\n\n字符串：单、双、三引号（三引号包含的字符串可以换行）\n\n字符串合并：+；字符串重复\"a\"*5>>> aaaaa\n\n逻辑运算符：x or y x and y  not x \n\nx in y, x not in y:\n\nPython除法：/除法，//整除\n\n-13//10 >>>-2（本质向下取整）\n\n逗号,仅用于分隔，使用逗号连接的元素会成为元组，优先级低于所有，高于赋值\n\n#### 常用内置函数\n\nmax min sum\n\n输入/输出：\n\n```python\ninput()\nraw_input()#python 2 ,只接受字符串\ninput()#在Python3中仅支持字符串输入，输入后再进行处理\nprint()\nfor i in range(10,20):\n    print(i,end=' ')#终结符为空格\n```\n\n## 模块的使用\n\npip install:安装模块","source":"_posts/2019-10-25-Python.markdown","raw":"---\nlayout:     post\ntitle:      \"Developing in Python\"\nintro:   \"\"\ndate:       2019-10-25 08:00:00\nauthor:     \"Makinohara\"\nfeatured_image: http://msfasr.com/img/py.jfif\ncatalog: true\ntags:\n    - 编程语言\n---\n\n\n\n\n\n\n\n\n\n## 查看支持的包版本\n\npython -m pip debug --verbose\n\n## Python 变量\n\nPython的变量是自动推断的，但是Python仍旧是强类型语言。\n\n判断变量种类：\n\n```python\ntype()#判断变量类型\nisinstance(var,type)#判断对象是否为制定类型的实例\n```\n\nPython允许多个对象指向一个值\n\n```python\nx = 3\nid(x)\ny = x\nid(y)#此时x，y指向同一对象\nx += 3\nid(x)\ny\nid(y)\n#此时x，y不指向同一对象\n#Python中，每一个值或对象总是有固定的空间，当没有变量指向时，Python将将其删除\n```\n\n变量名命名：\n\n以字母或下划线开头（一般以字母），可带数字和下划线，不能以关键字命名\n\n\n\n### Python 序列\n\n列表[1,2,'file']\n\nsort:原地排序\n\nsorted:返回排序后的列表\n\nrange(start,stop,step)返回一个可迭代对象\n\na = list(range(10))\n\n#### Python运算\n\n字符串：单、双、三引号（三引号包含的字符串可以换行）\n\n字符串合并：+；字符串重复\"a\"*5>>> aaaaa\n\n逻辑运算符：x or y x and y  not x \n\nx in y, x not in y:\n\nPython除法：/除法，//整除\n\n-13//10 >>>-2（本质向下取整）\n\n逗号,仅用于分隔，使用逗号连接的元素会成为元组，优先级低于所有，高于赋值\n\n#### 常用内置函数\n\nmax min sum\n\n输入/输出：\n\n```python\ninput()\nraw_input()#python 2 ,只接受字符串\ninput()#在Python3中仅支持字符串输入，输入后再进行处理\nprint()\nfor i in range(10,20):\n    print(i,end=' ')#终结符为空格\n```\n\n## 模块的使用\n\npip install:安装模块","slug":"2019-10-25-Python","published":1,"updated":"2021-10-24T02:04:35.817Z","_id":"ckey85uiz0002ho8agejbbwsu","comments":1,"photos":[],"link":"","content":"<h2 id=\"查看支持的包版本\"><a href=\"#查看支持的包版本\" class=\"headerlink\" title=\"查看支持的包版本\"></a>查看支持的包版本</h2><p>python -m pip debug —verbose</p>\n<h2 id=\"Python-变量\"><a href=\"#Python-变量\" class=\"headerlink\" title=\"Python 变量\"></a>Python 变量</h2><p>Python的变量是自动推断的，但是Python仍旧是强类型语言。</p>\n<p>判断变量种类：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">type()<span class=\"hljs-comment\">#判断变量类型</span><br>isinstance(var,type)<span class=\"hljs-comment\">#判断对象是否为制定类型的实例</span><br></code></pre></td></tr></table></figure>\n<p>Python允许多个对象指向一个值</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">x = <span class=\"hljs-number\">3</span><br>id(x)<br>y = x<br>id(y)<span class=\"hljs-comment\">#此时x，y指向同一对象</span><br>x += <span class=\"hljs-number\">3</span><br>id(x)<br>y<br>id(y)<br><span class=\"hljs-comment\">#此时x，y不指向同一对象</span><br><span class=\"hljs-comment\">#Python中，每一个值或对象总是有固定的空间，当没有变量指向时，Python将将其删除</span><br></code></pre></td></tr></table></figure>\n<p>变量名命名：</p>\n<p>以字母或下划线开头（一般以字母），可带数字和下划线，不能以关键字命名</p>\n<h3 id=\"Python-序列\"><a href=\"#Python-序列\" class=\"headerlink\" title=\"Python 序列\"></a>Python 序列</h3><p>列表[1,2,’file’]</p>\n<p>sort:原地排序</p>\n<p>sorted:返回排序后的列表</p>\n<p>range(start,stop,step)返回一个可迭代对象</p>\n<p>a = list(range(10))</p>\n<h4 id=\"Python运算\"><a href=\"#Python运算\" class=\"headerlink\" title=\"Python运算\"></a>Python运算</h4><p>字符串：单、双、三引号（三引号包含的字符串可以换行）</p>\n<p>字符串合并：+；字符串重复”a”*5&gt;&gt;&gt; aaaaa</p>\n<p>逻辑运算符：x or y x and y  not x </p>\n<p>x in y, x not in y:</p>\n<p>Python除法：/除法，//整除</p>\n<p>-13//10 &gt;&gt;&gt;-2（本质向下取整）</p>\n<p>逗号,仅用于分隔，使用逗号连接的元素会成为元组，优先级低于所有，高于赋值</p>\n<h4 id=\"常用内置函数\"><a href=\"#常用内置函数\" class=\"headerlink\" title=\"常用内置函数\"></a>常用内置函数</h4><p>max min sum</p>\n<p>输入/输出：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">input()<br>raw_input()<span class=\"hljs-comment\">#python 2 ,只接受字符串</span><br>input()<span class=\"hljs-comment\">#在Python3中仅支持字符串输入，输入后再进行处理</span><br>print()<br><span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(<span class=\"hljs-number\">10</span>,<span class=\"hljs-number\">20</span>):<br>    print(i,end=<span class=\"hljs-string\">' '</span>)<span class=\"hljs-comment\">#终结符为空格</span><br></code></pre></td></tr></table></figure>\n<h2 id=\"模块的使用\"><a href=\"#模块的使用\" class=\"headerlink\" title=\"模块的使用\"></a>模块的使用</h2><p>pip install:安装模块</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"查看支持的包版本\"><a href=\"#查看支持的包版本\" class=\"headerlink\" title=\"查看支持的包版本\"></a>查看支持的包版本</h2><p>python -m pip debug —verbose</p>\n<h2 id=\"Python-变量\"><a href=\"#Python-变量\" class=\"headerlink\" title=\"Python 变量\"></a>Python 变量</h2><p>Python的变量是自动推断的，但是Python仍旧是强类型语言。</p>\n<p>判断变量种类：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">type()<span class=\"hljs-comment\">#判断变量类型</span><br>isinstance(var,type)<span class=\"hljs-comment\">#判断对象是否为制定类型的实例</span><br></code></pre></td></tr></table></figure>\n<p>Python允许多个对象指向一个值</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">x = <span class=\"hljs-number\">3</span><br>id(x)<br>y = x<br>id(y)<span class=\"hljs-comment\">#此时x，y指向同一对象</span><br>x += <span class=\"hljs-number\">3</span><br>id(x)<br>y<br>id(y)<br><span class=\"hljs-comment\">#此时x，y不指向同一对象</span><br><span class=\"hljs-comment\">#Python中，每一个值或对象总是有固定的空间，当没有变量指向时，Python将将其删除</span><br></code></pre></td></tr></table></figure>\n<p>变量名命名：</p>\n<p>以字母或下划线开头（一般以字母），可带数字和下划线，不能以关键字命名</p>\n<h3 id=\"Python-序列\"><a href=\"#Python-序列\" class=\"headerlink\" title=\"Python 序列\"></a>Python 序列</h3><p>列表[1,2,’file’]</p>\n<p>sort:原地排序</p>\n<p>sorted:返回排序后的列表</p>\n<p>range(start,stop,step)返回一个可迭代对象</p>\n<p>a = list(range(10))</p>\n<h4 id=\"Python运算\"><a href=\"#Python运算\" class=\"headerlink\" title=\"Python运算\"></a>Python运算</h4><p>字符串：单、双、三引号（三引号包含的字符串可以换行）</p>\n<p>字符串合并：+；字符串重复”a”*5&gt;&gt;&gt; aaaaa</p>\n<p>逻辑运算符：x or y x and y  not x </p>\n<p>x in y, x not in y:</p>\n<p>Python除法：/除法，//整除</p>\n<p>-13//10 &gt;&gt;&gt;-2（本质向下取整）</p>\n<p>逗号,仅用于分隔，使用逗号连接的元素会成为元组，优先级低于所有，高于赋值</p>\n<h4 id=\"常用内置函数\"><a href=\"#常用内置函数\" class=\"headerlink\" title=\"常用内置函数\"></a>常用内置函数</h4><p>max min sum</p>\n<p>输入/输出：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">input()<br>raw_input()<span class=\"hljs-comment\">#python 2 ,只接受字符串</span><br>input()<span class=\"hljs-comment\">#在Python3中仅支持字符串输入，输入后再进行处理</span><br>print()<br><span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(<span class=\"hljs-number\">10</span>,<span class=\"hljs-number\">20</span>):<br>    print(i,end=<span class=\"hljs-string\">' '</span>)<span class=\"hljs-comment\">#终结符为空格</span><br></code></pre></td></tr></table></figure>\n<h2 id=\"模块的使用\"><a href=\"#模块的使用\" class=\"headerlink\" title=\"模块的使用\"></a>模块的使用</h2><p>pip install:安装模块</p>\n"},{"layout":"post","title":"如何拯救我的数学","intro":"","date":"2019-11-10T07:13:00.000Z","author":"Makinohara","featured_image":"http://msfasr.com/img/maths.jpg","catalog":true,"_content":"\n多少年来一直都是这样,从初中开始一路到大学,数学都是我的心头之痛.算不对的表达式,理解不了的计算方法.记不住的公式,看不出来的形式......好像我天生就没有数学方面的天赋,或者是我天生就在数学上不仅没有天赋反而有很严重的负加成......\n\n如今到了大学,开始学高数,这情况还是一如既往.写错点傻逼题目;搞错点定义,弄毁点知识点,最后搞来一个不好看的分数.多少年来都是一个情况,自始至终从未改变过.\n\n从初中开始我数学就很糟糕,100分的卷子考过三十几分,曾经蠢到求根公式都套错;后来到了高中,150的卷子我考过五十几分,后来一对答案才发现我何止是蠢......无论做什么数学都永远在平均分之下......甚至有时候还能和倒数10名一决高下.在如此的劣势下我竟然能考上211高校,我简直怀疑我高考是作弊过的.\n\n数学于我永远都是这样,是一门我需要拿几门课拉分的科目,是一科能让我和一个其他分数差不多的人单科拉开50分的科目,是一科我怎么也找不到方法,找不到切入点的科目......我对此简直就是无能为力,只能看着它就这样烂下去,然后在高考仍旧成为我的最大劣势.\n\n然而此种情况很显然的不能再这样持续下去.我现在就读于计算机专业,若是连高数都玩不转,后面的线性代数,概率论,离散数学还学个鬼......我在数学上的投入总体上也确实不若在学习计算机上面多;我的学习方法也无可辩驳的存在巨大问题:把老师写在黑板上的字都记下来.这种看似认真的学习态度其实比那些带听带玩的学习态度还害人:因为带听带玩的人好歹还能学进去一部分内容,而抄黑板上的笔记则会使我永远都跟不上老师的进度:因为我永远都在抄上一句......这个习惯我直到半个月前才开始改正,然而有点晚了.\n\n在时间投入方面,我确实对其有些冷落的意思.除了上课和写老师布置的作业,我好想也没有对其有过额外的投入.这怎么行!明明我们已经通过各种渠道获取到了正确的学习方案,但不实践这些方案,不还是没有任何屁点作用......每个星期我在数学上的实践时间甚至不到我在计算机编程实践时间的1/9......这个可怕的比例毫无疑问的体现了我对数学的重视程度有极大的不足,而这可能是一个主要的因素.\n\n总而言之.总而言之,大学数学相比于高中,初中,又是一个全新的开始.比较幸运的是我们在开学两个月后就意识到了问题,并开始着手加以改善.这总比稀里糊涂学了两年才发现自己学习路径有误好多了.\n\n接下来我要来讨论一下学习路径的相关问题:\n\n1.刷题方向\n\n刷题方向的话,我建议在做老师布置题目的同时,也要注意多做一些辅导书上的习题.我们买来了辅导书后,好像只看了些概念和例题,却缺少在做题方面的实践......由是,接下来这个阶段的目标就是多写点题,最好能在本子上总结些题解,而不仅仅拘泥于老师上课讲的例题.\n\n2.听课方向\n\n不要排斥拿手机拍照,或者借同学的笔记来抄.上课时听课,跟上思路,和老师一起实践才是正确的听课方式.\n\n3.交流讨论方向\n\n此事待定,因为目前还有一件没有确定的事.\n\n那么,有关如何拯救数学的问题就暂且在此停笔,后面我可能会依学习情况补点东西.\n\nMSFASR中央学管会,2019/11/10签发","source":"_posts/2019-11-10-SaveMaths.md","raw":"---\nlayout:     post\ntitle:      \"如何拯救我的数学\"\nintro:   \"\"\ndate:       2019-11-10 15:13:00\nauthor:     \"Makinohara\"\nfeatured_image: http://msfasr.com/img/maths.jpg\ncatalog: true\ntags:\n    - 学习\n---\n\n多少年来一直都是这样,从初中开始一路到大学,数学都是我的心头之痛.算不对的表达式,理解不了的计算方法.记不住的公式,看不出来的形式......好像我天生就没有数学方面的天赋,或者是我天生就在数学上不仅没有天赋反而有很严重的负加成......\n\n如今到了大学,开始学高数,这情况还是一如既往.写错点傻逼题目;搞错点定义,弄毁点知识点,最后搞来一个不好看的分数.多少年来都是一个情况,自始至终从未改变过.\n\n从初中开始我数学就很糟糕,100分的卷子考过三十几分,曾经蠢到求根公式都套错;后来到了高中,150的卷子我考过五十几分,后来一对答案才发现我何止是蠢......无论做什么数学都永远在平均分之下......甚至有时候还能和倒数10名一决高下.在如此的劣势下我竟然能考上211高校,我简直怀疑我高考是作弊过的.\n\n数学于我永远都是这样,是一门我需要拿几门课拉分的科目,是一科能让我和一个其他分数差不多的人单科拉开50分的科目,是一科我怎么也找不到方法,找不到切入点的科目......我对此简直就是无能为力,只能看着它就这样烂下去,然后在高考仍旧成为我的最大劣势.\n\n然而此种情况很显然的不能再这样持续下去.我现在就读于计算机专业,若是连高数都玩不转,后面的线性代数,概率论,离散数学还学个鬼......我在数学上的投入总体上也确实不若在学习计算机上面多;我的学习方法也无可辩驳的存在巨大问题:把老师写在黑板上的字都记下来.这种看似认真的学习态度其实比那些带听带玩的学习态度还害人:因为带听带玩的人好歹还能学进去一部分内容,而抄黑板上的笔记则会使我永远都跟不上老师的进度:因为我永远都在抄上一句......这个习惯我直到半个月前才开始改正,然而有点晚了.\n\n在时间投入方面,我确实对其有些冷落的意思.除了上课和写老师布置的作业,我好想也没有对其有过额外的投入.这怎么行!明明我们已经通过各种渠道获取到了正确的学习方案,但不实践这些方案,不还是没有任何屁点作用......每个星期我在数学上的实践时间甚至不到我在计算机编程实践时间的1/9......这个可怕的比例毫无疑问的体现了我对数学的重视程度有极大的不足,而这可能是一个主要的因素.\n\n总而言之.总而言之,大学数学相比于高中,初中,又是一个全新的开始.比较幸运的是我们在开学两个月后就意识到了问题,并开始着手加以改善.这总比稀里糊涂学了两年才发现自己学习路径有误好多了.\n\n接下来我要来讨论一下学习路径的相关问题:\n\n1.刷题方向\n\n刷题方向的话,我建议在做老师布置题目的同时,也要注意多做一些辅导书上的习题.我们买来了辅导书后,好像只看了些概念和例题,却缺少在做题方面的实践......由是,接下来这个阶段的目标就是多写点题,最好能在本子上总结些题解,而不仅仅拘泥于老师上课讲的例题.\n\n2.听课方向\n\n不要排斥拿手机拍照,或者借同学的笔记来抄.上课时听课,跟上思路,和老师一起实践才是正确的听课方式.\n\n3.交流讨论方向\n\n此事待定,因为目前还有一件没有确定的事.\n\n那么,有关如何拯救数学的问题就暂且在此停笔,后面我可能会依学习情况补点东西.\n\nMSFASR中央学管会,2019/11/10签发","slug":"2019-11-10-SaveMaths","published":1,"updated":"2021-10-24T02:04:35.818Z","_id":"ckey85uj20005ho8a850ccgjw","comments":1,"photos":[],"link":"","content":"<p>多少年来一直都是这样,从初中开始一路到大学,数学都是我的心头之痛.算不对的表达式,理解不了的计算方法.记不住的公式,看不出来的形式……好像我天生就没有数学方面的天赋,或者是我天生就在数学上不仅没有天赋反而有很严重的负加成……</p>\n<p>如今到了大学,开始学高数,这情况还是一如既往.写错点傻逼题目;搞错点定义,弄毁点知识点,最后搞来一个不好看的分数.多少年来都是一个情况,自始至终从未改变过.</p>\n<p>从初中开始我数学就很糟糕,100分的卷子考过三十几分,曾经蠢到求根公式都套错;后来到了高中,150的卷子我考过五十几分,后来一对答案才发现我何止是蠢……无论做什么数学都永远在平均分之下……甚至有时候还能和倒数10名一决高下.在如此的劣势下我竟然能考上211高校,我简直怀疑我高考是作弊过的.</p>\n<p>数学于我永远都是这样,是一门我需要拿几门课拉分的科目,是一科能让我和一个其他分数差不多的人单科拉开50分的科目,是一科我怎么也找不到方法,找不到切入点的科目……我对此简直就是无能为力,只能看着它就这样烂下去,然后在高考仍旧成为我的最大劣势.</p>\n<p>然而此种情况很显然的不能再这样持续下去.我现在就读于计算机专业,若是连高数都玩不转,后面的线性代数,概率论,离散数学还学个鬼……我在数学上的投入总体上也确实不若在学习计算机上面多;我的学习方法也无可辩驳的存在巨大问题:把老师写在黑板上的字都记下来.这种看似认真的学习态度其实比那些带听带玩的学习态度还害人:因为带听带玩的人好歹还能学进去一部分内容,而抄黑板上的笔记则会使我永远都跟不上老师的进度:因为我永远都在抄上一句……这个习惯我直到半个月前才开始改正,然而有点晚了.</p>\n<p>在时间投入方面,我确实对其有些冷落的意思.除了上课和写老师布置的作业,我好想也没有对其有过额外的投入.这怎么行!明明我们已经通过各种渠道获取到了正确的学习方案,但不实践这些方案,不还是没有任何屁点作用……每个星期我在数学上的实践时间甚至不到我在计算机编程实践时间的1/9……这个可怕的比例毫无疑问的体现了我对数学的重视程度有极大的不足,而这可能是一个主要的因素.</p>\n<p>总而言之.总而言之,大学数学相比于高中,初中,又是一个全新的开始.比较幸运的是我们在开学两个月后就意识到了问题,并开始着手加以改善.这总比稀里糊涂学了两年才发现自己学习路径有误好多了.</p>\n<p>接下来我要来讨论一下学习路径的相关问题:</p>\n<p>1.刷题方向</p>\n<p>刷题方向的话,我建议在做老师布置题目的同时,也要注意多做一些辅导书上的习题.我们买来了辅导书后,好像只看了些概念和例题,却缺少在做题方面的实践……由是,接下来这个阶段的目标就是多写点题,最好能在本子上总结些题解,而不仅仅拘泥于老师上课讲的例题.</p>\n<p>2.听课方向</p>\n<p>不要排斥拿手机拍照,或者借同学的笔记来抄.上课时听课,跟上思路,和老师一起实践才是正确的听课方式.</p>\n<p>3.交流讨论方向</p>\n<p>此事待定,因为目前还有一件没有确定的事.</p>\n<p>那么,有关如何拯救数学的问题就暂且在此停笔,后面我可能会依学习情况补点东西.</p>\n<p>MSFASR中央学管会,2019/11/10签发</p>\n","site":{"data":{}},"excerpt":"","more":"<p>多少年来一直都是这样,从初中开始一路到大学,数学都是我的心头之痛.算不对的表达式,理解不了的计算方法.记不住的公式,看不出来的形式……好像我天生就没有数学方面的天赋,或者是我天生就在数学上不仅没有天赋反而有很严重的负加成……</p>\n<p>如今到了大学,开始学高数,这情况还是一如既往.写错点傻逼题目;搞错点定义,弄毁点知识点,最后搞来一个不好看的分数.多少年来都是一个情况,自始至终从未改变过.</p>\n<p>从初中开始我数学就很糟糕,100分的卷子考过三十几分,曾经蠢到求根公式都套错;后来到了高中,150的卷子我考过五十几分,后来一对答案才发现我何止是蠢……无论做什么数学都永远在平均分之下……甚至有时候还能和倒数10名一决高下.在如此的劣势下我竟然能考上211高校,我简直怀疑我高考是作弊过的.</p>\n<p>数学于我永远都是这样,是一门我需要拿几门课拉分的科目,是一科能让我和一个其他分数差不多的人单科拉开50分的科目,是一科我怎么也找不到方法,找不到切入点的科目……我对此简直就是无能为力,只能看着它就这样烂下去,然后在高考仍旧成为我的最大劣势.</p>\n<p>然而此种情况很显然的不能再这样持续下去.我现在就读于计算机专业,若是连高数都玩不转,后面的线性代数,概率论,离散数学还学个鬼……我在数学上的投入总体上也确实不若在学习计算机上面多;我的学习方法也无可辩驳的存在巨大问题:把老师写在黑板上的字都记下来.这种看似认真的学习态度其实比那些带听带玩的学习态度还害人:因为带听带玩的人好歹还能学进去一部分内容,而抄黑板上的笔记则会使我永远都跟不上老师的进度:因为我永远都在抄上一句……这个习惯我直到半个月前才开始改正,然而有点晚了.</p>\n<p>在时间投入方面,我确实对其有些冷落的意思.除了上课和写老师布置的作业,我好想也没有对其有过额外的投入.这怎么行!明明我们已经通过各种渠道获取到了正确的学习方案,但不实践这些方案,不还是没有任何屁点作用……每个星期我在数学上的实践时间甚至不到我在计算机编程实践时间的1/9……这个可怕的比例毫无疑问的体现了我对数学的重视程度有极大的不足,而这可能是一个主要的因素.</p>\n<p>总而言之.总而言之,大学数学相比于高中,初中,又是一个全新的开始.比较幸运的是我们在开学两个月后就意识到了问题,并开始着手加以改善.这总比稀里糊涂学了两年才发现自己学习路径有误好多了.</p>\n<p>接下来我要来讨论一下学习路径的相关问题:</p>\n<p>1.刷题方向</p>\n<p>刷题方向的话,我建议在做老师布置题目的同时,也要注意多做一些辅导书上的习题.我们买来了辅导书后,好像只看了些概念和例题,却缺少在做题方面的实践……由是,接下来这个阶段的目标就是多写点题,最好能在本子上总结些题解,而不仅仅拘泥于老师上课讲的例题.</p>\n<p>2.听课方向</p>\n<p>不要排斥拿手机拍照,或者借同学的笔记来抄.上课时听课,跟上思路,和老师一起实践才是正确的听课方式.</p>\n<p>3.交流讨论方向</p>\n<p>此事待定,因为目前还有一件没有确定的事.</p>\n<p>那么,有关如何拯救数学的问题就暂且在此停笔,后面我可能会依学习情况补点东西.</p>\n<p>MSFASR中央学管会,2019/11/10签发</p>\n"},{"layout":"post","title":"重返国产机","intro":"","date":"2019-10-03T04:00:00.000Z","author":"Makinohara","featured_image":"http://msfasr.com/img/DSC_0392.jpg","catalog":true,"_content":"\n\n\n> 重返国产机后,我收获了诸如AI拍照,长截屏,本地化服务等诸多实用功能,但随处可见的广告与信息流却使我感到有一些恐慌:我的隐私是否再一次暴露于明处?\n\n\n\n就在今天下午,我将我的手机又SONY XZ2P更换成了魅族 16th 这一次更换我总体上还是非常满意的:回归的耳机插孔就足以给我一直使用这款手机的理由了;线性震动马达的优秀效果更使我不愿换掉这款手机.\n\n这部手机除了没了4K屏幕/ 防水 /IMX400,其余的功能都比XZ2P好了那么些.更轻薄的机身;更好用的UI;更强大的后台管理(果然只有国内ROM能治好流氓)......但是国内ROM多有一个特色:广告与推送.这是我在使用索尼设备时未尝遇到的.\n\n推送广告流,无可避免地要收集个人信息,分析你的喜好.这样的做法一开始使人感到恐慌,但后来人们便习以为常了.你在百度上搜索一个东西,当你打开淘宝时就可能发现那个东西赫然显示在首页上.你在微信里打了几行字,过一会今日头条就可能给你发来有关的推送信息.这些情况我们早已屡见不鲜了......因为我们没有办法.我们没法不用微信,不用百度.就算换成GOOGLE/FACEBOOK,他们一样会收集信息.你又不能不用他们的产品,于是便只好在那个该死的\"我同意以上许可协议\"上打上一个勾,bullshit!\n\n偏题了.我们来讲讲别的吧.我们来讲讲我买这手机的理由.\n\n首先,我极其讨厌刘海屏,挖孔屏等设计.因为这会使我感到屏幕有些不完整,而这种不完整简直会使我震怒.我宁愿不要全面屏也不接纳这种设计.所以我给我妈买了MIX 2,先前买了SONY XPERIA,后来又买了MEIZU 16th.我希望这些该死的厂商赶快研究屏下摄像头,好把这该死的孔和刘海搞走.他们让屏幕变得不完整,这简直不能忍!\n\n所以我对魅族正面的设计还是比较满意的,它足够对称,屏幕足够完整.而背面,除了摄像头凸起以外我也没啥可吐槽的,就这样吧,带上套就不凸起了.\n\n除此以外,魅族的震动马达确实给了人一种不一样的感觉.这种感觉体现在打字上/按HOME键上/呼出菜单上.只是相对于苹果的震动马达,它的震感还不够强,不足以让我觉得爽快.\n\n最后我想吐槽的一点就是屏下指纹了......这个识别率简直是低到令人发指!我平常经常要尝试2-3次才能打开手机!甚至有时候手上有一小点汗就没法识别.虽说它也提供了人脸识别功能,但我不放心啊!\n\n今日关于这手机的总结就先到这吧......可能后面随着我的使用会总结出来一些其他的内容.拭目以待吧.","source":"_posts/2019-10-03-Chinese Phone.markdown","raw":"---\nlayout:     post\ntitle:      \"重返国产机\"\nintro:   \"\"\ndate:       2019-10-03 12:00:00\nauthor:     \"Makinohara\"\nfeatured_image: http://msfasr.com/img/DSC_0392.jpg\ncatalog: true\ntags:\n    - 生活感想\n    \n---\n\n\n\n> 重返国产机后,我收获了诸如AI拍照,长截屏,本地化服务等诸多实用功能,但随处可见的广告与信息流却使我感到有一些恐慌:我的隐私是否再一次暴露于明处?\n\n\n\n就在今天下午,我将我的手机又SONY XZ2P更换成了魅族 16th 这一次更换我总体上还是非常满意的:回归的耳机插孔就足以给我一直使用这款手机的理由了;线性震动马达的优秀效果更使我不愿换掉这款手机.\n\n这部手机除了没了4K屏幕/ 防水 /IMX400,其余的功能都比XZ2P好了那么些.更轻薄的机身;更好用的UI;更强大的后台管理(果然只有国内ROM能治好流氓)......但是国内ROM多有一个特色:广告与推送.这是我在使用索尼设备时未尝遇到的.\n\n推送广告流,无可避免地要收集个人信息,分析你的喜好.这样的做法一开始使人感到恐慌,但后来人们便习以为常了.你在百度上搜索一个东西,当你打开淘宝时就可能发现那个东西赫然显示在首页上.你在微信里打了几行字,过一会今日头条就可能给你发来有关的推送信息.这些情况我们早已屡见不鲜了......因为我们没有办法.我们没法不用微信,不用百度.就算换成GOOGLE/FACEBOOK,他们一样会收集信息.你又不能不用他们的产品,于是便只好在那个该死的\"我同意以上许可协议\"上打上一个勾,bullshit!\n\n偏题了.我们来讲讲别的吧.我们来讲讲我买这手机的理由.\n\n首先,我极其讨厌刘海屏,挖孔屏等设计.因为这会使我感到屏幕有些不完整,而这种不完整简直会使我震怒.我宁愿不要全面屏也不接纳这种设计.所以我给我妈买了MIX 2,先前买了SONY XPERIA,后来又买了MEIZU 16th.我希望这些该死的厂商赶快研究屏下摄像头,好把这该死的孔和刘海搞走.他们让屏幕变得不完整,这简直不能忍!\n\n所以我对魅族正面的设计还是比较满意的,它足够对称,屏幕足够完整.而背面,除了摄像头凸起以外我也没啥可吐槽的,就这样吧,带上套就不凸起了.\n\n除此以外,魅族的震动马达确实给了人一种不一样的感觉.这种感觉体现在打字上/按HOME键上/呼出菜单上.只是相对于苹果的震动马达,它的震感还不够强,不足以让我觉得爽快.\n\n最后我想吐槽的一点就是屏下指纹了......这个识别率简直是低到令人发指!我平常经常要尝试2-3次才能打开手机!甚至有时候手上有一小点汗就没法识别.虽说它也提供了人脸识别功能,但我不放心啊!\n\n今日关于这手机的总结就先到这吧......可能后面随着我的使用会总结出来一些其他的内容.拭目以待吧.","slug":"2019-10-03-Chinese Phone","published":1,"updated":"2021-10-24T02:04:35.815Z","_id":"ckey85uj30006ho8ahh5pcmxe","comments":1,"photos":[],"link":"","content":"<blockquote>\n<p>重返国产机后,我收获了诸如AI拍照,长截屏,本地化服务等诸多实用功能,但随处可见的广告与信息流却使我感到有一些恐慌:我的隐私是否再一次暴露于明处?</p>\n</blockquote>\n<p>就在今天下午,我将我的手机又SONY XZ2P更换成了魅族 16th 这一次更换我总体上还是非常满意的:回归的耳机插孔就足以给我一直使用这款手机的理由了;线性震动马达的优秀效果更使我不愿换掉这款手机.</p>\n<p>这部手机除了没了4K屏幕/ 防水 /IMX400,其余的功能都比XZ2P好了那么些.更轻薄的机身;更好用的UI;更强大的后台管理(果然只有国内ROM能治好流氓)……但是国内ROM多有一个特色:广告与推送.这是我在使用索尼设备时未尝遇到的.</p>\n<p>推送广告流,无可避免地要收集个人信息,分析你的喜好.这样的做法一开始使人感到恐慌,但后来人们便习以为常了.你在百度上搜索一个东西,当你打开淘宝时就可能发现那个东西赫然显示在首页上.你在微信里打了几行字,过一会今日头条就可能给你发来有关的推送信息.这些情况我们早已屡见不鲜了……因为我们没有办法.我们没法不用微信,不用百度.就算换成GOOGLE/FACEBOOK,他们一样会收集信息.你又不能不用他们的产品,于是便只好在那个该死的”我同意以上许可协议”上打上一个勾,bullshit!</p>\n<p>偏题了.我们来讲讲别的吧.我们来讲讲我买这手机的理由.</p>\n<p>首先,我极其讨厌刘海屏,挖孔屏等设计.因为这会使我感到屏幕有些不完整,而这种不完整简直会使我震怒.我宁愿不要全面屏也不接纳这种设计.所以我给我妈买了MIX 2,先前买了SONY XPERIA,后来又买了MEIZU 16th.我希望这些该死的厂商赶快研究屏下摄像头,好把这该死的孔和刘海搞走.他们让屏幕变得不完整,这简直不能忍!</p>\n<p>所以我对魅族正面的设计还是比较满意的,它足够对称,屏幕足够完整.而背面,除了摄像头凸起以外我也没啥可吐槽的,就这样吧,带上套就不凸起了.</p>\n<p>除此以外,魅族的震动马达确实给了人一种不一样的感觉.这种感觉体现在打字上/按HOME键上/呼出菜单上.只是相对于苹果的震动马达,它的震感还不够强,不足以让我觉得爽快.</p>\n<p>最后我想吐槽的一点就是屏下指纹了……这个识别率简直是低到令人发指!我平常经常要尝试2-3次才能打开手机!甚至有时候手上有一小点汗就没法识别.虽说它也提供了人脸识别功能,但我不放心啊!</p>\n<p>今日关于这手机的总结就先到这吧……可能后面随着我的使用会总结出来一些其他的内容.拭目以待吧.</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>重返国产机后,我收获了诸如AI拍照,长截屏,本地化服务等诸多实用功能,但随处可见的广告与信息流却使我感到有一些恐慌:我的隐私是否再一次暴露于明处?</p>\n</blockquote>\n<p>就在今天下午,我将我的手机又SONY XZ2P更换成了魅族 16th 这一次更换我总体上还是非常满意的:回归的耳机插孔就足以给我一直使用这款手机的理由了;线性震动马达的优秀效果更使我不愿换掉这款手机.</p>\n<p>这部手机除了没了4K屏幕/ 防水 /IMX400,其余的功能都比XZ2P好了那么些.更轻薄的机身;更好用的UI;更强大的后台管理(果然只有国内ROM能治好流氓)……但是国内ROM多有一个特色:广告与推送.这是我在使用索尼设备时未尝遇到的.</p>\n<p>推送广告流,无可避免地要收集个人信息,分析你的喜好.这样的做法一开始使人感到恐慌,但后来人们便习以为常了.你在百度上搜索一个东西,当你打开淘宝时就可能发现那个东西赫然显示在首页上.你在微信里打了几行字,过一会今日头条就可能给你发来有关的推送信息.这些情况我们早已屡见不鲜了……因为我们没有办法.我们没法不用微信,不用百度.就算换成GOOGLE/FACEBOOK,他们一样会收集信息.你又不能不用他们的产品,于是便只好在那个该死的”我同意以上许可协议”上打上一个勾,bullshit!</p>\n<p>偏题了.我们来讲讲别的吧.我们来讲讲我买这手机的理由.</p>\n<p>首先,我极其讨厌刘海屏,挖孔屏等设计.因为这会使我感到屏幕有些不完整,而这种不完整简直会使我震怒.我宁愿不要全面屏也不接纳这种设计.所以我给我妈买了MIX 2,先前买了SONY XPERIA,后来又买了MEIZU 16th.我希望这些该死的厂商赶快研究屏下摄像头,好把这该死的孔和刘海搞走.他们让屏幕变得不完整,这简直不能忍!</p>\n<p>所以我对魅族正面的设计还是比较满意的,它足够对称,屏幕足够完整.而背面,除了摄像头凸起以外我也没啥可吐槽的,就这样吧,带上套就不凸起了.</p>\n<p>除此以外,魅族的震动马达确实给了人一种不一样的感觉.这种感觉体现在打字上/按HOME键上/呼出菜单上.只是相对于苹果的震动马达,它的震感还不够强,不足以让我觉得爽快.</p>\n<p>最后我想吐槽的一点就是屏下指纹了……这个识别率简直是低到令人发指!我平常经常要尝试2-3次才能打开手机!甚至有时候手上有一小点汗就没法识别.虽说它也提供了人脸识别功能,但我不放心啊!</p>\n<p>今日关于这手机的总结就先到这吧……可能后面随着我的使用会总结出来一些其他的内容.拭目以待吧.</p>\n"},{"layout":"post","title":"C Programing Language","intro":"","date":"2019-11-12T02:13:00.000Z","author":"Makinohara","featured_image":"http://msfasr.com/img/post-bg-css.jpg","catalog":true,"_content":"\n> This is a note about The C programing language .\n>\n> I'm refactoring this note into English, too. \n\n## C Basic Knowledge\n\n#### C variable , data types\n\nC语言中存在已经定义好的数种数据类型,每种数据类型都有其可表示值的范围.\n\n*接下来要背书了,学个计算机有时候就是和学高中语文一样难受.*\n\n下表列出了关于标准整数类型的存储大小和值范围的细节：\n\n| 类型           | 存储大小    | 值范围                                                       |\n| :------------- | :---------- | :----------------------------------------------------------- |\n| char           | 1 字节      | -128 到 127 或 0 到 255                                      |\n| unsigned char  | 1 字节      | 0 到 255                                                     |\n| signed char    | 1 字节      | -128 到 127                                                  |\n| int            | 2 或 4 字节 | -32,768 到 32,767 或 -2,147,483,648 到 2,147,483,647 `依环境而定` |\n| unsigned int   | 2 或 4 字节 | 0 到 65,535 或 0 到 4,294,967,295 `依环境而定`               |\n| short          | 2 字节      | -32,768 到 32,767                                            |\n| unsigned short | 2 字节      | 0 到 65,535                                                  |\n| long           | 4 字节      | -2,147,483,648 到 2,147,483,647                              |\n| unsigned long  | 4 字节      | 0 到 4,294,967,295                                           |\n\n下表列出了关于标准浮点类型的存储大小、值范围和精度的细节：\n\n| 类型        | 存储大小 | 值范围                 | 精度      |\n| :---------- | :------- | :--------------------- | :-------- |\n| float       | 4 字节   | 1.2E-38 到 3.4E+38     | 6 位小数  |\n| double      | 8 字节   | 2.3E-308 到 1.7E+308   | 15 位小数 |\n| long double | 16 字节  | 3.4E-4932 到 1.1E+4932 | 19 位小数 |\n\n\n\n#### Functions of Input and Output\n\n#### scanf\n\nscanf是格式化输入的函数,可以将用户从键盘输入的内容写到一个地址中去.scanf的使用格式是这样的:\n\nscanf(\"%d\",&a);\n\n%d代表输入的是一个整型变量,相类似的还有%f(浮点型变量),%lf(长浮点型变量),%c(字符型变量),%s(字符串).\n\n### File R/W\n\n```c\n#include<stdio.h>\nint main()\n{\n    //fopen\n    FILE *p = fopen(\"filename\",\"r\");\n    char str[100] = {0};\n    fscanf(p,\"%s\",str);\n    \n    //freopen\n    freopen(\"filename\",\"r\",stdin);\n    scanf(\"%s\",str);\n}\n```\n\n\n\n### Preprocessing command\n\nPreprocessing command normally be placed before the start of function definition. It is used to process something before compile .\n\n#### Macro definition\n\nMacro definition normally starts with # , such as:\n\n```c\n#define\n#include\n```\n\nThe rules of using macro definition:\n\n```c\n#define PI 3.1415926//不含参数的构造,语句结束不需要分号,#include亦然\n//编译器会直接将所有的PI替换为3.1415926\n#define R 3.0\n#define L 2*PI*R\n//以上的两行也是可以的,宏定义会展开.\nprintf(\"L\");//格式控制输出时不置反\n\n#define S(a,b) a*b//含参构造,遇到S(数字,数字),替换为a*b\n```\n\n宏名一般使用大写字母表示,这是一种约定俗成的规则.\n\n宏定义不会为标识符分配内存空间\n\n宏定义的终止:\n\n```c\n#undefine PI\n```\n\n#### File includes\n\n```c\n#include<file name>\n#include\"file name\"//偏向于用户自定义部分\n```\n\n#### Conditional Compile\n\n```c\n#ifdef //flag\n#define LETTER 1\n\n#if LETTER\n//code\n#else\n//code\n```\n\n### Pointer\n\nPointer is a sort of variable that storages address.\n\nHere are some basic operations of using pointer.\n\n```c\nint a=3;\nint *ptr = &a;//ptr is a variable that points to the address of a\n*ptr;//use * to access the data at the address which ptr points to.\n*(ptr++);//returns *ptr,and then ptr++\n```\n\n#### **Use pointer to access array:**\n\n```c\nint a[]={1,2,3,5,2,6,2,5}\nint *ptr = &a;//the address of an array is just same as the address of the first element of the array.\nprintf(\"%d\",*ptr++); //the ptr++ refers the pointer is going to point to the next element of the array\n```\n\nUse pointer to access multi dimension array;\n\n| Array    | Use variable | Use pointer  | Use pointer | Use pointer     |\n| -------- | ------------ | ------------ | ----------- | --------------- |\n| a[i]     | a[i]         | *(a+1)       | *(a+1)      | *(a+i)          |\n| a\\[i][j] | a\\[i][j]     | *(\\*(a+i)+j) | *(a[i]+j)   | *(\\&a\\[i][0]+j) |\n\nAn address like **a** (the array is a\\[3][3]) can't be a value of int *p;\n\nSo,how to do that?\n\nUse int (*p)[4] , a pointer of this type can have a value like a (the array is a\\[2][4]).\n\n#### Pointer Array\n\n```c\nint *p[4];//a define of a pointer array\nchar *p[4]={\"Brazil\",\"Russia\",\"India\",\"China\"};//a array of pointer,each points to a string.\n```\n\n**Sort a char *p[]**\n\n```c\n#include<stdio.h>\n#include<string.h>\n#include<stdlib.h>\nint main()\n{\n    char *p[]={\"Aa\",\"Bb\",\"Cc\",\"Dd\"};\n    for(int i=0;i<4;i++)\n    {\n        int pos =i;\n        char max = *p[i];\n        for(int j=i;j<4;j++)\n        {\n            if(*p[j]>max)\n            {\n                max=*p[j];\n                pos=j;\n            }\n        }\n        char* t= p[i];\n        p[i]=p[pos];\n        p[pos]=t;\n    }\n\n    \n    return 0;\n}\n```\n\n\n\n#### Dynamic Memory Space\n\n```c\nint *p = (int*)malloc(4);; //set a space whose size is 4.\nint *p[4] = (int*)calloc(n,sizeof(int));//set n*size array.\nrealloc(p,8);//resize.\nfree(p);//delete.\n```\n\n#### Pointer to Pointer\n\n```c\nint **p;\n**p=2;\n*p;//an address\n**p;//a value\n```\n\n#### Parameters to main\n\n```c\n#include<stdio.h>\n#include<string.h>\n#include<stdlib.h>\nint main(int argc,char* argv[])//argc refers string numbers and argv refers string that put in.\n    //argv[0]=your program name\n{\n    for(int i=1;argv[i]!=NULL;i++)\n    printf(\"%s\\n\",argv[i]);\n\n    \n    return 0;\n}\n```\n\n### Dynamic Memory space\n\nMalloc\n\n```c\nint main()\n{\n    struct Student *head;\n    head = (struct Student *)malloc(sizeof(struct Student));\n}\n```\n\nCalloc\n\n```c\nint main()\n{\n    head = (struct Student*)calloc(100,sizeof(struct Student))\n}\n```\n\nRealloc\n\n```c\nint main()\n{\n    realloc(*p,size);\n}\n```\n\nFree\n\n```c\nint main()\n{\n    free(*p);\n}\n```\n\nExample:\n\n```c\n#include<stdio.h>\n#include<stdlib.h>\n\nstruct Student \n{\n    int age=0;\n    struct Student *next=NULL;\n};\n\nint main()\n{\n    struct Student *head,*current;\n    int i=0;\n    head = (struct Student*)malloc(sizeof(struct Student));\n    current=head;\n    while(i==0)\n    {\n        printf(\"Add student? 0/yes 1/no\\n\");\n        scanf(\"%d\",&i);\n        if(i==0)\n        {\n            printf(\"input age\\n\");\n            scanf(\"%d\",&(*current).age);\n            (*current).next=(struct Student*)malloc(sizeof(struct Student));\n            current = (*current).next;\n        }else\n        {\n            (*current).age=0;\n            (*current).next=NULL;\n        }\n        \n    }\n    return 0;\n}\n```\n\n## File operation\n\n#### File pointer\n\n```c\nFILE *fp;//create a pointer point to the head of the file.\nfp = fopen(\"file.txt\",\"a+\");//open the file.\nfclose(fp);\n```\n\n#### File functions\n\n```c\n//freopen\nfreopen(\"File\",\"a+\",stdin);\nfreopen(\"File\",\"w\",stdout);\nfclose(ptr);//or the file will not be write.\n\nfgetc(fp);\nfputc(ch,fp);\n//read and write character in a file.\n\nfgets(str,n,fp);//See carefully, there's n in parameter list, n refers the string's length is n-1 .\nfputs(str,fp);\n\nfscanf(fp,\"Format\",parameter list);\nfprintf(fp,\"Format\",parameter list);\n\n//read and write in bit\nfread(buffer,size,count,fp);\nfwrite(buffer,size,count,fp);\n\n//examples:\nfread(&stu_list[i],sizeof(struct student),1,fp);\nfwrite(&stu_list[i],sizeof(struct student),1,fp);//you can see it as using disk as memory.\n\n```\n\n#### Radom R/W files\n\n```c\nrewind(fp);//move the file flag back to the head.\nfseek(fp,100L,0);//move the flag to the position 100 byte away from the head.\nfseek(fp,100L,1);//move foward 100 byte from current position\nfseek(fp,-50L,3);//move back 50 byte from the end.\n```\n\n| start position   | name     | number reference |\n| ---------------- | -------- | ---------------- |\n| head             | SEEK_SET | 0                |\n| current position | SEEK_CUR | 1                |\n| end              | SEEK_END | 2                |\n\n","source":"_posts/2019-11-12-C.md","raw":"---\nlayout:     post\ntitle:      \"C Programing Language\"\nintro:   \"\"\ndate:       2019-11-12 10:13:00\nauthor:     \"Makinohara\"\nfeatured_image: http://msfasr.com/img/post-bg-css.jpg\ncatalog: true\ntags:\n    - 编程语言\n---\n\n> This is a note about The C programing language .\n>\n> I'm refactoring this note into English, too. \n\n## C Basic Knowledge\n\n#### C variable , data types\n\nC语言中存在已经定义好的数种数据类型,每种数据类型都有其可表示值的范围.\n\n*接下来要背书了,学个计算机有时候就是和学高中语文一样难受.*\n\n下表列出了关于标准整数类型的存储大小和值范围的细节：\n\n| 类型           | 存储大小    | 值范围                                                       |\n| :------------- | :---------- | :----------------------------------------------------------- |\n| char           | 1 字节      | -128 到 127 或 0 到 255                                      |\n| unsigned char  | 1 字节      | 0 到 255                                                     |\n| signed char    | 1 字节      | -128 到 127                                                  |\n| int            | 2 或 4 字节 | -32,768 到 32,767 或 -2,147,483,648 到 2,147,483,647 `依环境而定` |\n| unsigned int   | 2 或 4 字节 | 0 到 65,535 或 0 到 4,294,967,295 `依环境而定`               |\n| short          | 2 字节      | -32,768 到 32,767                                            |\n| unsigned short | 2 字节      | 0 到 65,535                                                  |\n| long           | 4 字节      | -2,147,483,648 到 2,147,483,647                              |\n| unsigned long  | 4 字节      | 0 到 4,294,967,295                                           |\n\n下表列出了关于标准浮点类型的存储大小、值范围和精度的细节：\n\n| 类型        | 存储大小 | 值范围                 | 精度      |\n| :---------- | :------- | :--------------------- | :-------- |\n| float       | 4 字节   | 1.2E-38 到 3.4E+38     | 6 位小数  |\n| double      | 8 字节   | 2.3E-308 到 1.7E+308   | 15 位小数 |\n| long double | 16 字节  | 3.4E-4932 到 1.1E+4932 | 19 位小数 |\n\n\n\n#### Functions of Input and Output\n\n#### scanf\n\nscanf是格式化输入的函数,可以将用户从键盘输入的内容写到一个地址中去.scanf的使用格式是这样的:\n\nscanf(\"%d\",&a);\n\n%d代表输入的是一个整型变量,相类似的还有%f(浮点型变量),%lf(长浮点型变量),%c(字符型变量),%s(字符串).\n\n### File R/W\n\n```c\n#include<stdio.h>\nint main()\n{\n    //fopen\n    FILE *p = fopen(\"filename\",\"r\");\n    char str[100] = {0};\n    fscanf(p,\"%s\",str);\n    \n    //freopen\n    freopen(\"filename\",\"r\",stdin);\n    scanf(\"%s\",str);\n}\n```\n\n\n\n### Preprocessing command\n\nPreprocessing command normally be placed before the start of function definition. It is used to process something before compile .\n\n#### Macro definition\n\nMacro definition normally starts with # , such as:\n\n```c\n#define\n#include\n```\n\nThe rules of using macro definition:\n\n```c\n#define PI 3.1415926//不含参数的构造,语句结束不需要分号,#include亦然\n//编译器会直接将所有的PI替换为3.1415926\n#define R 3.0\n#define L 2*PI*R\n//以上的两行也是可以的,宏定义会展开.\nprintf(\"L\");//格式控制输出时不置反\n\n#define S(a,b) a*b//含参构造,遇到S(数字,数字),替换为a*b\n```\n\n宏名一般使用大写字母表示,这是一种约定俗成的规则.\n\n宏定义不会为标识符分配内存空间\n\n宏定义的终止:\n\n```c\n#undefine PI\n```\n\n#### File includes\n\n```c\n#include<file name>\n#include\"file name\"//偏向于用户自定义部分\n```\n\n#### Conditional Compile\n\n```c\n#ifdef //flag\n#define LETTER 1\n\n#if LETTER\n//code\n#else\n//code\n```\n\n### Pointer\n\nPointer is a sort of variable that storages address.\n\nHere are some basic operations of using pointer.\n\n```c\nint a=3;\nint *ptr = &a;//ptr is a variable that points to the address of a\n*ptr;//use * to access the data at the address which ptr points to.\n*(ptr++);//returns *ptr,and then ptr++\n```\n\n#### **Use pointer to access array:**\n\n```c\nint a[]={1,2,3,5,2,6,2,5}\nint *ptr = &a;//the address of an array is just same as the address of the first element of the array.\nprintf(\"%d\",*ptr++); //the ptr++ refers the pointer is going to point to the next element of the array\n```\n\nUse pointer to access multi dimension array;\n\n| Array    | Use variable | Use pointer  | Use pointer | Use pointer     |\n| -------- | ------------ | ------------ | ----------- | --------------- |\n| a[i]     | a[i]         | *(a+1)       | *(a+1)      | *(a+i)          |\n| a\\[i][j] | a\\[i][j]     | *(\\*(a+i)+j) | *(a[i]+j)   | *(\\&a\\[i][0]+j) |\n\nAn address like **a** (the array is a\\[3][3]) can't be a value of int *p;\n\nSo,how to do that?\n\nUse int (*p)[4] , a pointer of this type can have a value like a (the array is a\\[2][4]).\n\n#### Pointer Array\n\n```c\nint *p[4];//a define of a pointer array\nchar *p[4]={\"Brazil\",\"Russia\",\"India\",\"China\"};//a array of pointer,each points to a string.\n```\n\n**Sort a char *p[]**\n\n```c\n#include<stdio.h>\n#include<string.h>\n#include<stdlib.h>\nint main()\n{\n    char *p[]={\"Aa\",\"Bb\",\"Cc\",\"Dd\"};\n    for(int i=0;i<4;i++)\n    {\n        int pos =i;\n        char max = *p[i];\n        for(int j=i;j<4;j++)\n        {\n            if(*p[j]>max)\n            {\n                max=*p[j];\n                pos=j;\n            }\n        }\n        char* t= p[i];\n        p[i]=p[pos];\n        p[pos]=t;\n    }\n\n    \n    return 0;\n}\n```\n\n\n\n#### Dynamic Memory Space\n\n```c\nint *p = (int*)malloc(4);; //set a space whose size is 4.\nint *p[4] = (int*)calloc(n,sizeof(int));//set n*size array.\nrealloc(p,8);//resize.\nfree(p);//delete.\n```\n\n#### Pointer to Pointer\n\n```c\nint **p;\n**p=2;\n*p;//an address\n**p;//a value\n```\n\n#### Parameters to main\n\n```c\n#include<stdio.h>\n#include<string.h>\n#include<stdlib.h>\nint main(int argc,char* argv[])//argc refers string numbers and argv refers string that put in.\n    //argv[0]=your program name\n{\n    for(int i=1;argv[i]!=NULL;i++)\n    printf(\"%s\\n\",argv[i]);\n\n    \n    return 0;\n}\n```\n\n### Dynamic Memory space\n\nMalloc\n\n```c\nint main()\n{\n    struct Student *head;\n    head = (struct Student *)malloc(sizeof(struct Student));\n}\n```\n\nCalloc\n\n```c\nint main()\n{\n    head = (struct Student*)calloc(100,sizeof(struct Student))\n}\n```\n\nRealloc\n\n```c\nint main()\n{\n    realloc(*p,size);\n}\n```\n\nFree\n\n```c\nint main()\n{\n    free(*p);\n}\n```\n\nExample:\n\n```c\n#include<stdio.h>\n#include<stdlib.h>\n\nstruct Student \n{\n    int age=0;\n    struct Student *next=NULL;\n};\n\nint main()\n{\n    struct Student *head,*current;\n    int i=0;\n    head = (struct Student*)malloc(sizeof(struct Student));\n    current=head;\n    while(i==0)\n    {\n        printf(\"Add student? 0/yes 1/no\\n\");\n        scanf(\"%d\",&i);\n        if(i==0)\n        {\n            printf(\"input age\\n\");\n            scanf(\"%d\",&(*current).age);\n            (*current).next=(struct Student*)malloc(sizeof(struct Student));\n            current = (*current).next;\n        }else\n        {\n            (*current).age=0;\n            (*current).next=NULL;\n        }\n        \n    }\n    return 0;\n}\n```\n\n## File operation\n\n#### File pointer\n\n```c\nFILE *fp;//create a pointer point to the head of the file.\nfp = fopen(\"file.txt\",\"a+\");//open the file.\nfclose(fp);\n```\n\n#### File functions\n\n```c\n//freopen\nfreopen(\"File\",\"a+\",stdin);\nfreopen(\"File\",\"w\",stdout);\nfclose(ptr);//or the file will not be write.\n\nfgetc(fp);\nfputc(ch,fp);\n//read and write character in a file.\n\nfgets(str,n,fp);//See carefully, there's n in parameter list, n refers the string's length is n-1 .\nfputs(str,fp);\n\nfscanf(fp,\"Format\",parameter list);\nfprintf(fp,\"Format\",parameter list);\n\n//read and write in bit\nfread(buffer,size,count,fp);\nfwrite(buffer,size,count,fp);\n\n//examples:\nfread(&stu_list[i],sizeof(struct student),1,fp);\nfwrite(&stu_list[i],sizeof(struct student),1,fp);//you can see it as using disk as memory.\n\n```\n\n#### Radom R/W files\n\n```c\nrewind(fp);//move the file flag back to the head.\nfseek(fp,100L,0);//move the flag to the position 100 byte away from the head.\nfseek(fp,100L,1);//move foward 100 byte from current position\nfseek(fp,-50L,3);//move back 50 byte from the end.\n```\n\n| start position   | name     | number reference |\n| ---------------- | -------- | ---------------- |\n| head             | SEEK_SET | 0                |\n| current position | SEEK_CUR | 1                |\n| end              | SEEK_END | 2                |\n\n","slug":"2019-11-12-C","published":1,"updated":"2021-10-24T02:04:35.820Z","_id":"ckey85uj30007ho8a9f3s3gik","comments":1,"photos":[],"link":"","content":"<blockquote>\n<p>This is a note about The C programing language .</p>\n<p>I’m refactoring this note into English, too. </p>\n</blockquote>\n<h2 id=\"C-Basic-Knowledge\"><a href=\"#C-Basic-Knowledge\" class=\"headerlink\" title=\"C Basic Knowledge\"></a>C Basic Knowledge</h2><h4 id=\"C-variable-data-types\"><a href=\"#C-variable-data-types\" class=\"headerlink\" title=\"C variable , data types\"></a>C variable , data types</h4><p>C语言中存在已经定义好的数种数据类型,每种数据类型都有其可表示值的范围.</p>\n<p><em>接下来要背书了,学个计算机有时候就是和学高中语文一样难受.</em></p>\n<p>下表列出了关于标准整数类型的存储大小和值范围的细节：</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">类型</th>\n<th style=\"text-align:left\">存储大小</th>\n<th style=\"text-align:left\">值范围</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">char</td>\n<td style=\"text-align:left\">1 字节</td>\n<td style=\"text-align:left\">-128 到 127 或 0 到 255</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">unsigned char</td>\n<td style=\"text-align:left\">1 字节</td>\n<td style=\"text-align:left\">0 到 255</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">signed char</td>\n<td style=\"text-align:left\">1 字节</td>\n<td style=\"text-align:left\">-128 到 127</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">int</td>\n<td style=\"text-align:left\">2 或 4 字节</td>\n<td style=\"text-align:left\">-32,768 到 32,767 或 -2,147,483,648 到 2,147,483,647 <code>依环境而定</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">unsigned int</td>\n<td style=\"text-align:left\">2 或 4 字节</td>\n<td style=\"text-align:left\">0 到 65,535 或 0 到 4,294,967,295 <code>依环境而定</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">short</td>\n<td style=\"text-align:left\">2 字节</td>\n<td style=\"text-align:left\">-32,768 到 32,767</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">unsigned short</td>\n<td style=\"text-align:left\">2 字节</td>\n<td style=\"text-align:left\">0 到 65,535</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">long</td>\n<td style=\"text-align:left\">4 字节</td>\n<td style=\"text-align:left\">-2,147,483,648 到 2,147,483,647</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">unsigned long</td>\n<td style=\"text-align:left\">4 字节</td>\n<td style=\"text-align:left\">0 到 4,294,967,295</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>下表列出了关于标准浮点类型的存储大小、值范围和精度的细节：</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">类型</th>\n<th style=\"text-align:left\">存储大小</th>\n<th style=\"text-align:left\">值范围</th>\n<th style=\"text-align:left\">精度</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">float</td>\n<td style=\"text-align:left\">4 字节</td>\n<td style=\"text-align:left\">1.2E-38 到 3.4E+38</td>\n<td style=\"text-align:left\">6 位小数</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">double</td>\n<td style=\"text-align:left\">8 字节</td>\n<td style=\"text-align:left\">2.3E-308 到 1.7E+308</td>\n<td style=\"text-align:left\">15 位小数</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">long double</td>\n<td style=\"text-align:left\">16 字节</td>\n<td style=\"text-align:left\">3.4E-4932 到 1.1E+4932</td>\n<td style=\"text-align:left\">19 位小数</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h4 id=\"Functions-of-Input-and-Output\"><a href=\"#Functions-of-Input-and-Output\" class=\"headerlink\" title=\"Functions of Input and Output\"></a>Functions of Input and Output</h4><h4 id=\"scanf\"><a href=\"#scanf\" class=\"headerlink\" title=\"scanf\"></a>scanf</h4><p>scanf是格式化输入的函数,可以将用户从键盘输入的内容写到一个地址中去.scanf的使用格式是这样的:</p>\n<p>scanf(“%d”,&amp;a);</p>\n<p>%d代表输入的是一个整型变量,相类似的还有%f(浮点型变量),%lf(长浮点型变量),%c(字符型变量),%s(字符串).</p>\n<h3 id=\"File-R-W\"><a href=\"#File-R-W\" class=\"headerlink\" title=\"File R/W\"></a>File R/W</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span><br></span>&#123;<br>    <span class=\"hljs-comment\">//fopen</span><br>    FILE *p = fopen(<span class=\"hljs-string\">\"filename\"</span>,<span class=\"hljs-string\">\"r\"</span>);<br>    <span class=\"hljs-keyword\">char</span> str[<span class=\"hljs-number\">100</span>] = &#123;<span class=\"hljs-number\">0</span>&#125;;<br>    <span class=\"hljs-built_in\">fscanf</span>(p,<span class=\"hljs-string\">\"%s\"</span>,str);<br>    <br>    <span class=\"hljs-comment\">//freopen</span><br>    freopen(<span class=\"hljs-string\">\"filename\"</span>,<span class=\"hljs-string\">\"r\"</span>,<span class=\"hljs-built_in\">stdin</span>);<br>    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">\"%s\"</span>,str);<br>&#125;<br></code></pre></td></tr></table></figure>\n<h3 id=\"Preprocessing-command\"><a href=\"#Preprocessing-command\" class=\"headerlink\" title=\"Preprocessing command\"></a>Preprocessing command</h3><p>Preprocessing command normally be placed before the start of function definition. It is used to process something before compile .</p>\n<h4 id=\"Macro-definition\"><a href=\"#Macro-definition\" class=\"headerlink\" title=\"Macro definition\"></a>Macro definition</h4><p>Macro definition normally starts with # , such as:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span></span><br></code></pre></td></tr></table></figure>\n<p>The rules of using macro definition:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> PI 3.1415926<span class=\"hljs-comment\">//不含参数的构造,语句结束不需要分号,#include亦然</span></span><br><span class=\"hljs-comment\">//编译器会直接将所有的PI替换为3.1415926</span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> R 3.0</span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> L 2*PI*R</span><br><span class=\"hljs-comment\">//以上的两行也是可以的,宏定义会展开.</span><br><span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"L\"</span>);<span class=\"hljs-comment\">//格式控制输出时不置反</span><br><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> S(a,b) a*b<span class=\"hljs-comment\">//含参构造,遇到S(数字,数字),替换为a*b</span></span><br></code></pre></td></tr></table></figure>\n<p>宏名一般使用大写字母表示,这是一种约定俗成的规则.</p>\n<p>宏定义不会为标识符分配内存空间</p>\n<p>宏定义的终止:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-meta\">#undefine PI</span><br></code></pre></td></tr></table></figure>\n<h4 id=\"File-includes\"><a href=\"#File-includes\" class=\"headerlink\" title=\"File includes\"></a>File includes</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">&lt;file name&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">\"file name\"</span><span class=\"hljs-comment\">//偏向于用户自定义部分</span></span><br></code></pre></td></tr></table></figure>\n<h4 id=\"Conditional-Compile\"><a href=\"#Conditional-Compile\" class=\"headerlink\" title=\"Conditional Compile\"></a>Conditional Compile</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">ifdef</span> <span class=\"hljs-comment\">//flag</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> LETTER 1</span><br><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">if</span> LETTER</span><br><span class=\"hljs-comment\">//code</span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">else</span></span><br><span class=\"hljs-comment\">//code</span><br></code></pre></td></tr></table></figure>\n<h3 id=\"Pointer\"><a href=\"#Pointer\" class=\"headerlink\" title=\"Pointer\"></a>Pointer</h3><p>Pointer is a sort of variable that storages address.</p>\n<p>Here are some basic operations of using pointer.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-keyword\">int</span> a=<span class=\"hljs-number\">3</span>;<br><span class=\"hljs-keyword\">int</span> *ptr = &amp;a;<span class=\"hljs-comment\">//ptr is a variable that points to the address of a</span><br>*ptr;<span class=\"hljs-comment\">//use * to access the data at the address which ptr points to.</span><br>*(ptr++);<span class=\"hljs-comment\">//returns *ptr,and then ptr++</span><br></code></pre></td></tr></table></figure>\n<h4 id=\"Use-pointer-to-access-array\"><a href=\"#Use-pointer-to-access-array\" class=\"headerlink\" title=\"Use pointer to access array:\"></a><strong>Use pointer to access array:</strong></h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-keyword\">int</span> a[]=&#123;<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">6</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">5</span>&#125;<br><span class=\"hljs-keyword\">int</span> *ptr = &amp;a;<span class=\"hljs-comment\">//the address of an array is just same as the address of the first element of the array.</span><br><span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"%d\"</span>,*ptr++); <span class=\"hljs-comment\">//the ptr++ refers the pointer is going to point to the next element of the array</span><br></code></pre></td></tr></table></figure>\n<p>Use pointer to access multi dimension array;</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>Array</th>\n<th>Use variable</th>\n<th>Use pointer</th>\n<th>Use pointer</th>\n<th>Use pointer</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>a[i]</td>\n<td>a[i]</td>\n<td>*(a+1)</td>\n<td>*(a+1)</td>\n<td>*(a+i)</td>\n</tr>\n<tr>\n<td>a[i][j]</td>\n<td>a[i][j]</td>\n<td><em>(\\</em>(a+i)+j)</td>\n<td>*(a[i]+j)</td>\n<td>*(\\&amp;a[i][0]+j)</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>An address like <strong>a</strong> (the array is a[3][3]) can’t be a value of int *p;</p>\n<p>So,how to do that?</p>\n<p>Use int (*p)[4] , a pointer of this type can have a value like a (the array is a[2][4]).</p>\n<h4 id=\"Pointer-Array\"><a href=\"#Pointer-Array\" class=\"headerlink\" title=\"Pointer Array\"></a>Pointer Array</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-keyword\">int</span> *p[<span class=\"hljs-number\">4</span>];<span class=\"hljs-comment\">//a define of a pointer array</span><br><span class=\"hljs-keyword\">char</span> *p[<span class=\"hljs-number\">4</span>]=&#123;<span class=\"hljs-string\">\"Brazil\"</span>,<span class=\"hljs-string\">\"Russia\"</span>,<span class=\"hljs-string\">\"India\"</span>,<span class=\"hljs-string\">\"China\"</span>&#125;;<span class=\"hljs-comment\">//a array of pointer,each points to a string.</span><br></code></pre></td></tr></table></figure>\n<p><strong>Sort a char *p[]</strong></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">&lt;string.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">&lt;stdlib.h&gt;</span></span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span><br></span>&#123;<br>    <span class=\"hljs-keyword\">char</span> *p[]=&#123;<span class=\"hljs-string\">\"Aa\"</span>,<span class=\"hljs-string\">\"Bb\"</span>,<span class=\"hljs-string\">\"Cc\"</span>,<span class=\"hljs-string\">\"Dd\"</span>&#125;;<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;<span class=\"hljs-number\">4</span>;i++)<br>    &#123;<br>        <span class=\"hljs-keyword\">int</span> pos =i;<br>        <span class=\"hljs-keyword\">char</span> <span class=\"hljs-built_in\">max</span> = *p[i];<br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> j=i;j&lt;<span class=\"hljs-number\">4</span>;j++)<br>        &#123;<br>            <span class=\"hljs-keyword\">if</span>(*p[j]&gt;<span class=\"hljs-built_in\">max</span>)<br>            &#123;<br>                <span class=\"hljs-built_in\">max</span>=*p[j];<br>                pos=j;<br>            &#125;<br>        &#125;<br>        <span class=\"hljs-keyword\">char</span>* t= p[i];<br>        p[i]=p[pos];<br>        p[pos]=t;<br>    &#125;<br><br>    <br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h4 id=\"Dynamic-Memory-Space\"><a href=\"#Dynamic-Memory-Space\" class=\"headerlink\" title=\"Dynamic Memory Space\"></a>Dynamic Memory Space</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-keyword\">int</span> *p = (<span class=\"hljs-keyword\">int</span>*)<span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-number\">4</span>);; <span class=\"hljs-comment\">//set a space whose size is 4.</span><br><span class=\"hljs-keyword\">int</span> *p[<span class=\"hljs-number\">4</span>] = (<span class=\"hljs-keyword\">int</span>*)<span class=\"hljs-built_in\">calloc</span>(n,<span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-keyword\">int</span>));<span class=\"hljs-comment\">//set n*size array.</span><br><span class=\"hljs-built_in\">realloc</span>(p,<span class=\"hljs-number\">8</span>);<span class=\"hljs-comment\">//resize.</span><br><span class=\"hljs-built_in\">free</span>(p);<span class=\"hljs-comment\">//delete.</span><br></code></pre></td></tr></table></figure>\n<h4 id=\"Pointer-to-Pointer\"><a href=\"#Pointer-to-Pointer\" class=\"headerlink\" title=\"Pointer to Pointer\"></a>Pointer to Pointer</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-keyword\">int</span> **p;<br>**p=<span class=\"hljs-number\">2</span>;<br>*p;<span class=\"hljs-comment\">//an address</span><br>**p;<span class=\"hljs-comment\">//a value</span><br></code></pre></td></tr></table></figure>\n<h4 id=\"Parameters-to-main\"><a href=\"#Parameters-to-main\" class=\"headerlink\" title=\"Parameters to main\"></a>Parameters to main</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">&lt;string.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">&lt;stdlib.h&gt;</span></span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> argc,<span class=\"hljs-keyword\">char</span>* argv[])</span><span class=\"hljs-comment\">//argc refers string numbers and argv refers string that put in.</span><br>    <span class=\"hljs-comment\">//argv[0]=your program name</span><br></span>&#123;<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">1</span>;argv[i]!=<span class=\"hljs-literal\">NULL</span>;i++)<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"%s\\n\"</span>,argv[i]);<br><br>    <br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h3 id=\"Dynamic-Memory-space\"><a href=\"#Dynamic-Memory-space\" class=\"headerlink\" title=\"Dynamic Memory space\"></a>Dynamic Memory space</h3><p>Malloc</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span><br></span>&#123;<br>    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Student</span> *<span class=\"hljs-title\">head</span>;</span><br>    head = (struct Student *)<span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-keyword\">sizeof</span>(struct Student));<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>Calloc</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span><br></span>&#123;<br>    head = (struct Student*)<span class=\"hljs-built_in\">calloc</span>(<span class=\"hljs-number\">100</span>,<span class=\"hljs-keyword\">sizeof</span>(struct Student))<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>Realloc</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span><br></span>&#123;<br>    <span class=\"hljs-built_in\">realloc</span>(*p,<span class=\"hljs-built_in\">size</span>);<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>Free</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span><br></span>&#123;<br>    <span class=\"hljs-built_in\">free</span>(*p);<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>Example:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">&lt;stdlib.h&gt;</span></span><br><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Student</span> <br>&#123;</span><br>    <span class=\"hljs-keyword\">int</span> age=<span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Student</span> *<span class=\"hljs-title\">next</span>=<span class=\"hljs-title\">NULL</span>;</span><br>&#125;;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span><br></span>&#123;<br>    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Student</span> *<span class=\"hljs-title\">head</span>,*<span class=\"hljs-title\">current</span>;</span><br>    <span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">0</span>;<br>    head = (struct Student*)<span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-keyword\">sizeof</span>(struct Student));<br>    current=head;<br>    <span class=\"hljs-keyword\">while</span>(i==<span class=\"hljs-number\">0</span>)<br>    &#123;<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"Add student? 0/yes 1/no\\n\"</span>);<br>        <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">\"%d\"</span>,&amp;i);<br>        <span class=\"hljs-keyword\">if</span>(i==<span class=\"hljs-number\">0</span>)<br>        &#123;<br>            <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"input age\\n\"</span>);<br>            <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">\"%d\"</span>,&amp;(*current).age);<br>            (*current).next=(struct Student*)<span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-keyword\">sizeof</span>(struct Student));<br>            current = (*current).next;<br>        &#125;<span class=\"hljs-keyword\">else</span><br>        &#123;<br>            (*current).age=<span class=\"hljs-number\">0</span>;<br>            (*current).next=<span class=\"hljs-literal\">NULL</span>;<br>        &#125;<br>        <br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h2 id=\"File-operation\"><a href=\"#File-operation\" class=\"headerlink\" title=\"File operation\"></a>File operation</h2><h4 id=\"File-pointer\"><a href=\"#File-pointer\" class=\"headerlink\" title=\"File pointer\"></a>File pointer</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\">FILE *fp;<span class=\"hljs-comment\">//create a pointer point to the head of the file.</span><br>fp = fopen(<span class=\"hljs-string\">\"file.txt\"</span>,<span class=\"hljs-string\">\"a+\"</span>);<span class=\"hljs-comment\">//open the file.</span><br>fclose(fp);<br></code></pre></td></tr></table></figure>\n<h4 id=\"File-functions\"><a href=\"#File-functions\" class=\"headerlink\" title=\"File functions\"></a>File functions</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-comment\">//freopen</span><br>freopen(<span class=\"hljs-string\">\"File\"</span>,<span class=\"hljs-string\">\"a+\"</span>,<span class=\"hljs-built_in\">stdin</span>);<br>freopen(<span class=\"hljs-string\">\"File\"</span>,<span class=\"hljs-string\">\"w\"</span>,<span class=\"hljs-built_in\">stdout</span>);<br>fclose(ptr);<span class=\"hljs-comment\">//or the file will not be write.</span><br><br>fgetc(fp);<br>fputc(ch,fp);<br><span class=\"hljs-comment\">//read and write character in a file.</span><br><br>fgets(str,n,fp);<span class=\"hljs-comment\">//See carefully, there's n in parameter list, n refers the string's length is n-1 .</span><br><span class=\"hljs-built_in\">fputs</span>(str,fp);<br><br><span class=\"hljs-built_in\">fscanf</span>(fp,<span class=\"hljs-string\">\"Format\"</span>,parameter <span class=\"hljs-built_in\">list</span>);<br><span class=\"hljs-built_in\">fprintf</span>(fp,<span class=\"hljs-string\">\"Format\"</span>,parameter <span class=\"hljs-built_in\">list</span>);<br><br><span class=\"hljs-comment\">//read and write in bit</span><br>fread(<span class=\"hljs-built_in\">buffer</span>,<span class=\"hljs-built_in\">size</span>,count,fp);<br>fwrite(<span class=\"hljs-built_in\">buffer</span>,<span class=\"hljs-built_in\">size</span>,count,fp);<br><br><span class=\"hljs-comment\">//examples:</span><br>fread(&amp;stu_list[i],<span class=\"hljs-keyword\">sizeof</span>(struct student),<span class=\"hljs-number\">1</span>,fp);<br>fwrite(&amp;stu_list[i],<span class=\"hljs-keyword\">sizeof</span>(struct student),<span class=\"hljs-number\">1</span>,fp);<span class=\"hljs-comment\">//you can see it as using disk as memory.</span><br></code></pre></td></tr></table></figure>\n<h4 id=\"Radom-R-W-files\"><a href=\"#Radom-R-W-files\" class=\"headerlink\" title=\"Radom R/W files\"></a>Radom R/W files</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\">rewind(fp);<span class=\"hljs-comment\">//move the file flag back to the head.</span><br>fseek(fp,<span class=\"hljs-number\">100L</span>,<span class=\"hljs-number\">0</span>);<span class=\"hljs-comment\">//move the flag to the position 100 byte away from the head.</span><br>fseek(fp,<span class=\"hljs-number\">100L</span>,<span class=\"hljs-number\">1</span>);<span class=\"hljs-comment\">//move foward 100 byte from current position</span><br>fseek(fp,<span class=\"hljs-number\">-50L</span>,<span class=\"hljs-number\">3</span>);<span class=\"hljs-comment\">//move back 50 byte from the end.</span><br></code></pre></td></tr></table></figure>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>start position</th>\n<th>name</th>\n<th>number reference</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>head</td>\n<td>SEEK_SET</td>\n<td>0</td>\n</tr>\n<tr>\n<td>current position</td>\n<td>SEEK_CUR</td>\n<td>1</td>\n</tr>\n<tr>\n<td>end</td>\n<td>SEEK_END</td>\n<td>2</td>\n</tr>\n</tbody>\n</table>\n</div>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>This is a note about The C programing language .</p>\n<p>I’m refactoring this note into English, too. </p>\n</blockquote>\n<h2 id=\"C-Basic-Knowledge\"><a href=\"#C-Basic-Knowledge\" class=\"headerlink\" title=\"C Basic Knowledge\"></a>C Basic Knowledge</h2><h4 id=\"C-variable-data-types\"><a href=\"#C-variable-data-types\" class=\"headerlink\" title=\"C variable , data types\"></a>C variable , data types</h4><p>C语言中存在已经定义好的数种数据类型,每种数据类型都有其可表示值的范围.</p>\n<p><em>接下来要背书了,学个计算机有时候就是和学高中语文一样难受.</em></p>\n<p>下表列出了关于标准整数类型的存储大小和值范围的细节：</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">类型</th>\n<th style=\"text-align:left\">存储大小</th>\n<th style=\"text-align:left\">值范围</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">char</td>\n<td style=\"text-align:left\">1 字节</td>\n<td style=\"text-align:left\">-128 到 127 或 0 到 255</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">unsigned char</td>\n<td style=\"text-align:left\">1 字节</td>\n<td style=\"text-align:left\">0 到 255</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">signed char</td>\n<td style=\"text-align:left\">1 字节</td>\n<td style=\"text-align:left\">-128 到 127</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">int</td>\n<td style=\"text-align:left\">2 或 4 字节</td>\n<td style=\"text-align:left\">-32,768 到 32,767 或 -2,147,483,648 到 2,147,483,647 <code>依环境而定</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">unsigned int</td>\n<td style=\"text-align:left\">2 或 4 字节</td>\n<td style=\"text-align:left\">0 到 65,535 或 0 到 4,294,967,295 <code>依环境而定</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">short</td>\n<td style=\"text-align:left\">2 字节</td>\n<td style=\"text-align:left\">-32,768 到 32,767</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">unsigned short</td>\n<td style=\"text-align:left\">2 字节</td>\n<td style=\"text-align:left\">0 到 65,535</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">long</td>\n<td style=\"text-align:left\">4 字节</td>\n<td style=\"text-align:left\">-2,147,483,648 到 2,147,483,647</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">unsigned long</td>\n<td style=\"text-align:left\">4 字节</td>\n<td style=\"text-align:left\">0 到 4,294,967,295</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>下表列出了关于标准浮点类型的存储大小、值范围和精度的细节：</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">类型</th>\n<th style=\"text-align:left\">存储大小</th>\n<th style=\"text-align:left\">值范围</th>\n<th style=\"text-align:left\">精度</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">float</td>\n<td style=\"text-align:left\">4 字节</td>\n<td style=\"text-align:left\">1.2E-38 到 3.4E+38</td>\n<td style=\"text-align:left\">6 位小数</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">double</td>\n<td style=\"text-align:left\">8 字节</td>\n<td style=\"text-align:left\">2.3E-308 到 1.7E+308</td>\n<td style=\"text-align:left\">15 位小数</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">long double</td>\n<td style=\"text-align:left\">16 字节</td>\n<td style=\"text-align:left\">3.4E-4932 到 1.1E+4932</td>\n<td style=\"text-align:left\">19 位小数</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h4 id=\"Functions-of-Input-and-Output\"><a href=\"#Functions-of-Input-and-Output\" class=\"headerlink\" title=\"Functions of Input and Output\"></a>Functions of Input and Output</h4><h4 id=\"scanf\"><a href=\"#scanf\" class=\"headerlink\" title=\"scanf\"></a>scanf</h4><p>scanf是格式化输入的函数,可以将用户从键盘输入的内容写到一个地址中去.scanf的使用格式是这样的:</p>\n<p>scanf(“%d”,&amp;a);</p>\n<p>%d代表输入的是一个整型变量,相类似的还有%f(浮点型变量),%lf(长浮点型变量),%c(字符型变量),%s(字符串).</p>\n<h3 id=\"File-R-W\"><a href=\"#File-R-W\" class=\"headerlink\" title=\"File R/W\"></a>File R/W</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span><br></span>&#123;<br>    <span class=\"hljs-comment\">//fopen</span><br>    FILE *p = fopen(<span class=\"hljs-string\">\"filename\"</span>,<span class=\"hljs-string\">\"r\"</span>);<br>    <span class=\"hljs-keyword\">char</span> str[<span class=\"hljs-number\">100</span>] = &#123;<span class=\"hljs-number\">0</span>&#125;;<br>    <span class=\"hljs-built_in\">fscanf</span>(p,<span class=\"hljs-string\">\"%s\"</span>,str);<br>    <br>    <span class=\"hljs-comment\">//freopen</span><br>    freopen(<span class=\"hljs-string\">\"filename\"</span>,<span class=\"hljs-string\">\"r\"</span>,<span class=\"hljs-built_in\">stdin</span>);<br>    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">\"%s\"</span>,str);<br>&#125;<br></code></pre></td></tr></table></figure>\n<h3 id=\"Preprocessing-command\"><a href=\"#Preprocessing-command\" class=\"headerlink\" title=\"Preprocessing command\"></a>Preprocessing command</h3><p>Preprocessing command normally be placed before the start of function definition. It is used to process something before compile .</p>\n<h4 id=\"Macro-definition\"><a href=\"#Macro-definition\" class=\"headerlink\" title=\"Macro definition\"></a>Macro definition</h4><p>Macro definition normally starts with # , such as:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span></span><br></code></pre></td></tr></table></figure>\n<p>The rules of using macro definition:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> PI 3.1415926<span class=\"hljs-comment\">//不含参数的构造,语句结束不需要分号,#include亦然</span></span><br><span class=\"hljs-comment\">//编译器会直接将所有的PI替换为3.1415926</span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> R 3.0</span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> L 2*PI*R</span><br><span class=\"hljs-comment\">//以上的两行也是可以的,宏定义会展开.</span><br><span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"L\"</span>);<span class=\"hljs-comment\">//格式控制输出时不置反</span><br><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> S(a,b) a*b<span class=\"hljs-comment\">//含参构造,遇到S(数字,数字),替换为a*b</span></span><br></code></pre></td></tr></table></figure>\n<p>宏名一般使用大写字母表示,这是一种约定俗成的规则.</p>\n<p>宏定义不会为标识符分配内存空间</p>\n<p>宏定义的终止:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-meta\">#undefine PI</span><br></code></pre></td></tr></table></figure>\n<h4 id=\"File-includes\"><a href=\"#File-includes\" class=\"headerlink\" title=\"File includes\"></a>File includes</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">&lt;file name&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">\"file name\"</span><span class=\"hljs-comment\">//偏向于用户自定义部分</span></span><br></code></pre></td></tr></table></figure>\n<h4 id=\"Conditional-Compile\"><a href=\"#Conditional-Compile\" class=\"headerlink\" title=\"Conditional Compile\"></a>Conditional Compile</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">ifdef</span> <span class=\"hljs-comment\">//flag</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> LETTER 1</span><br><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">if</span> LETTER</span><br><span class=\"hljs-comment\">//code</span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">else</span></span><br><span class=\"hljs-comment\">//code</span><br></code></pre></td></tr></table></figure>\n<h3 id=\"Pointer\"><a href=\"#Pointer\" class=\"headerlink\" title=\"Pointer\"></a>Pointer</h3><p>Pointer is a sort of variable that storages address.</p>\n<p>Here are some basic operations of using pointer.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-keyword\">int</span> a=<span class=\"hljs-number\">3</span>;<br><span class=\"hljs-keyword\">int</span> *ptr = &amp;a;<span class=\"hljs-comment\">//ptr is a variable that points to the address of a</span><br>*ptr;<span class=\"hljs-comment\">//use * to access the data at the address which ptr points to.</span><br>*(ptr++);<span class=\"hljs-comment\">//returns *ptr,and then ptr++</span><br></code></pre></td></tr></table></figure>\n<h4 id=\"Use-pointer-to-access-array\"><a href=\"#Use-pointer-to-access-array\" class=\"headerlink\" title=\"Use pointer to access array:\"></a><strong>Use pointer to access array:</strong></h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-keyword\">int</span> a[]=&#123;<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">6</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">5</span>&#125;<br><span class=\"hljs-keyword\">int</span> *ptr = &amp;a;<span class=\"hljs-comment\">//the address of an array is just same as the address of the first element of the array.</span><br><span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"%d\"</span>,*ptr++); <span class=\"hljs-comment\">//the ptr++ refers the pointer is going to point to the next element of the array</span><br></code></pre></td></tr></table></figure>\n<p>Use pointer to access multi dimension array;</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>Array</th>\n<th>Use variable</th>\n<th>Use pointer</th>\n<th>Use pointer</th>\n<th>Use pointer</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>a[i]</td>\n<td>a[i]</td>\n<td>*(a+1)</td>\n<td>*(a+1)</td>\n<td>*(a+i)</td>\n</tr>\n<tr>\n<td>a[i][j]</td>\n<td>a[i][j]</td>\n<td><em>(\\</em>(a+i)+j)</td>\n<td>*(a[i]+j)</td>\n<td>*(\\&amp;a[i][0]+j)</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>An address like <strong>a</strong> (the array is a[3][3]) can’t be a value of int *p;</p>\n<p>So,how to do that?</p>\n<p>Use int (*p)[4] , a pointer of this type can have a value like a (the array is a[2][4]).</p>\n<h4 id=\"Pointer-Array\"><a href=\"#Pointer-Array\" class=\"headerlink\" title=\"Pointer Array\"></a>Pointer Array</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-keyword\">int</span> *p[<span class=\"hljs-number\">4</span>];<span class=\"hljs-comment\">//a define of a pointer array</span><br><span class=\"hljs-keyword\">char</span> *p[<span class=\"hljs-number\">4</span>]=&#123;<span class=\"hljs-string\">\"Brazil\"</span>,<span class=\"hljs-string\">\"Russia\"</span>,<span class=\"hljs-string\">\"India\"</span>,<span class=\"hljs-string\">\"China\"</span>&#125;;<span class=\"hljs-comment\">//a array of pointer,each points to a string.</span><br></code></pre></td></tr></table></figure>\n<p><strong>Sort a char *p[]</strong></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">&lt;string.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">&lt;stdlib.h&gt;</span></span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span><br></span>&#123;<br>    <span class=\"hljs-keyword\">char</span> *p[]=&#123;<span class=\"hljs-string\">\"Aa\"</span>,<span class=\"hljs-string\">\"Bb\"</span>,<span class=\"hljs-string\">\"Cc\"</span>,<span class=\"hljs-string\">\"Dd\"</span>&#125;;<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;<span class=\"hljs-number\">4</span>;i++)<br>    &#123;<br>        <span class=\"hljs-keyword\">int</span> pos =i;<br>        <span class=\"hljs-keyword\">char</span> <span class=\"hljs-built_in\">max</span> = *p[i];<br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> j=i;j&lt;<span class=\"hljs-number\">4</span>;j++)<br>        &#123;<br>            <span class=\"hljs-keyword\">if</span>(*p[j]&gt;<span class=\"hljs-built_in\">max</span>)<br>            &#123;<br>                <span class=\"hljs-built_in\">max</span>=*p[j];<br>                pos=j;<br>            &#125;<br>        &#125;<br>        <span class=\"hljs-keyword\">char</span>* t= p[i];<br>        p[i]=p[pos];<br>        p[pos]=t;<br>    &#125;<br><br>    <br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h4 id=\"Dynamic-Memory-Space\"><a href=\"#Dynamic-Memory-Space\" class=\"headerlink\" title=\"Dynamic Memory Space\"></a>Dynamic Memory Space</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-keyword\">int</span> *p = (<span class=\"hljs-keyword\">int</span>*)<span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-number\">4</span>);; <span class=\"hljs-comment\">//set a space whose size is 4.</span><br><span class=\"hljs-keyword\">int</span> *p[<span class=\"hljs-number\">4</span>] = (<span class=\"hljs-keyword\">int</span>*)<span class=\"hljs-built_in\">calloc</span>(n,<span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-keyword\">int</span>));<span class=\"hljs-comment\">//set n*size array.</span><br><span class=\"hljs-built_in\">realloc</span>(p,<span class=\"hljs-number\">8</span>);<span class=\"hljs-comment\">//resize.</span><br><span class=\"hljs-built_in\">free</span>(p);<span class=\"hljs-comment\">//delete.</span><br></code></pre></td></tr></table></figure>\n<h4 id=\"Pointer-to-Pointer\"><a href=\"#Pointer-to-Pointer\" class=\"headerlink\" title=\"Pointer to Pointer\"></a>Pointer to Pointer</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-keyword\">int</span> **p;<br>**p=<span class=\"hljs-number\">2</span>;<br>*p;<span class=\"hljs-comment\">//an address</span><br>**p;<span class=\"hljs-comment\">//a value</span><br></code></pre></td></tr></table></figure>\n<h4 id=\"Parameters-to-main\"><a href=\"#Parameters-to-main\" class=\"headerlink\" title=\"Parameters to main\"></a>Parameters to main</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">&lt;string.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">&lt;stdlib.h&gt;</span></span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> argc,<span class=\"hljs-keyword\">char</span>* argv[])</span><span class=\"hljs-comment\">//argc refers string numbers and argv refers string that put in.</span><br>    <span class=\"hljs-comment\">//argv[0]=your program name</span><br></span>&#123;<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">1</span>;argv[i]!=<span class=\"hljs-literal\">NULL</span>;i++)<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"%s\\n\"</span>,argv[i]);<br><br>    <br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h3 id=\"Dynamic-Memory-space\"><a href=\"#Dynamic-Memory-space\" class=\"headerlink\" title=\"Dynamic Memory space\"></a>Dynamic Memory space</h3><p>Malloc</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span><br></span>&#123;<br>    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Student</span> *<span class=\"hljs-title\">head</span>;</span><br>    head = (struct Student *)<span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-keyword\">sizeof</span>(struct Student));<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>Calloc</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span><br></span>&#123;<br>    head = (struct Student*)<span class=\"hljs-built_in\">calloc</span>(<span class=\"hljs-number\">100</span>,<span class=\"hljs-keyword\">sizeof</span>(struct Student))<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>Realloc</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span><br></span>&#123;<br>    <span class=\"hljs-built_in\">realloc</span>(*p,<span class=\"hljs-built_in\">size</span>);<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>Free</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span><br></span>&#123;<br>    <span class=\"hljs-built_in\">free</span>(*p);<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>Example:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">&lt;stdlib.h&gt;</span></span><br><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Student</span> <br>&#123;</span><br>    <span class=\"hljs-keyword\">int</span> age=<span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Student</span> *<span class=\"hljs-title\">next</span>=<span class=\"hljs-title\">NULL</span>;</span><br>&#125;;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span><br></span>&#123;<br>    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Student</span> *<span class=\"hljs-title\">head</span>,*<span class=\"hljs-title\">current</span>;</span><br>    <span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">0</span>;<br>    head = (struct Student*)<span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-keyword\">sizeof</span>(struct Student));<br>    current=head;<br>    <span class=\"hljs-keyword\">while</span>(i==<span class=\"hljs-number\">0</span>)<br>    &#123;<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"Add student? 0/yes 1/no\\n\"</span>);<br>        <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">\"%d\"</span>,&amp;i);<br>        <span class=\"hljs-keyword\">if</span>(i==<span class=\"hljs-number\">0</span>)<br>        &#123;<br>            <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"input age\\n\"</span>);<br>            <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">\"%d\"</span>,&amp;(*current).age);<br>            (*current).next=(struct Student*)<span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-keyword\">sizeof</span>(struct Student));<br>            current = (*current).next;<br>        &#125;<span class=\"hljs-keyword\">else</span><br>        &#123;<br>            (*current).age=<span class=\"hljs-number\">0</span>;<br>            (*current).next=<span class=\"hljs-literal\">NULL</span>;<br>        &#125;<br>        <br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h2 id=\"File-operation\"><a href=\"#File-operation\" class=\"headerlink\" title=\"File operation\"></a>File operation</h2><h4 id=\"File-pointer\"><a href=\"#File-pointer\" class=\"headerlink\" title=\"File pointer\"></a>File pointer</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\">FILE *fp;<span class=\"hljs-comment\">//create a pointer point to the head of the file.</span><br>fp = fopen(<span class=\"hljs-string\">\"file.txt\"</span>,<span class=\"hljs-string\">\"a+\"</span>);<span class=\"hljs-comment\">//open the file.</span><br>fclose(fp);<br></code></pre></td></tr></table></figure>\n<h4 id=\"File-functions\"><a href=\"#File-functions\" class=\"headerlink\" title=\"File functions\"></a>File functions</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-comment\">//freopen</span><br>freopen(<span class=\"hljs-string\">\"File\"</span>,<span class=\"hljs-string\">\"a+\"</span>,<span class=\"hljs-built_in\">stdin</span>);<br>freopen(<span class=\"hljs-string\">\"File\"</span>,<span class=\"hljs-string\">\"w\"</span>,<span class=\"hljs-built_in\">stdout</span>);<br>fclose(ptr);<span class=\"hljs-comment\">//or the file will not be write.</span><br><br>fgetc(fp);<br>fputc(ch,fp);<br><span class=\"hljs-comment\">//read and write character in a file.</span><br><br>fgets(str,n,fp);<span class=\"hljs-comment\">//See carefully, there's n in parameter list, n refers the string's length is n-1 .</span><br><span class=\"hljs-built_in\">fputs</span>(str,fp);<br><br><span class=\"hljs-built_in\">fscanf</span>(fp,<span class=\"hljs-string\">\"Format\"</span>,parameter <span class=\"hljs-built_in\">list</span>);<br><span class=\"hljs-built_in\">fprintf</span>(fp,<span class=\"hljs-string\">\"Format\"</span>,parameter <span class=\"hljs-built_in\">list</span>);<br><br><span class=\"hljs-comment\">//read and write in bit</span><br>fread(<span class=\"hljs-built_in\">buffer</span>,<span class=\"hljs-built_in\">size</span>,count,fp);<br>fwrite(<span class=\"hljs-built_in\">buffer</span>,<span class=\"hljs-built_in\">size</span>,count,fp);<br><br><span class=\"hljs-comment\">//examples:</span><br>fread(&amp;stu_list[i],<span class=\"hljs-keyword\">sizeof</span>(struct student),<span class=\"hljs-number\">1</span>,fp);<br>fwrite(&amp;stu_list[i],<span class=\"hljs-keyword\">sizeof</span>(struct student),<span class=\"hljs-number\">1</span>,fp);<span class=\"hljs-comment\">//you can see it as using disk as memory.</span><br></code></pre></td></tr></table></figure>\n<h4 id=\"Radom-R-W-files\"><a href=\"#Radom-R-W-files\" class=\"headerlink\" title=\"Radom R/W files\"></a>Radom R/W files</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\">rewind(fp);<span class=\"hljs-comment\">//move the file flag back to the head.</span><br>fseek(fp,<span class=\"hljs-number\">100L</span>,<span class=\"hljs-number\">0</span>);<span class=\"hljs-comment\">//move the flag to the position 100 byte away from the head.</span><br>fseek(fp,<span class=\"hljs-number\">100L</span>,<span class=\"hljs-number\">1</span>);<span class=\"hljs-comment\">//move foward 100 byte from current position</span><br>fseek(fp,<span class=\"hljs-number\">-50L</span>,<span class=\"hljs-number\">3</span>);<span class=\"hljs-comment\">//move back 50 byte from the end.</span><br></code></pre></td></tr></table></figure>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>start position</th>\n<th>name</th>\n<th>number reference</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>head</td>\n<td>SEEK_SET</td>\n<td>0</td>\n</tr>\n<tr>\n<td>current position</td>\n<td>SEEK_CUR</td>\n<td>1</td>\n</tr>\n<tr>\n<td>end</td>\n<td>SEEK_END</td>\n<td>2</td>\n</tr>\n</tbody>\n</table>\n</div>\n"},{"layout":"post","title":"Hello 2019","intro":"","date":"2019-09-30T04:00:00.000Z","author":"Makinohara","featured_image":"http://msfasr.com/img/post-bg-2015.jpg","catalog":true,"_content":"\nMakinohara 的 Blog 就这么开通了。\n\n这个博客的用途有二：一是分享自己的感想、写些技术类文章，二是用于实验自己学到的网页开发技术。\n\n至于写啥至今没想好,只是觉得找个地方写东西是极好的.\n\n这个无名小地方估摸着也没有人会来看,备份笔记,发发牢骚,写点杂谈应当都是很好的消遣------反正也没有人会注意的,整天净想着如何经营自己的形象,累不累......\n\n\n\n\n\n\n<p id = \"build\"></p>\n","source":"_posts/2019-09-30-Hello 2019.markdown","raw":"---\nlayout:     post\ntitle:      \"Hello 2019\"\nintro:   \"\"\ndate:       2019-09-30 12:00:00\nauthor:     \"Makinohara\"\nfeatured_image: http://msfasr.com/img/post-bg-2015.jpg\ncatalog: true\ntags:\n    - 生活感想\n    \n---\n\nMakinohara 的 Blog 就这么开通了。\n\n这个博客的用途有二：一是分享自己的感想、写些技术类文章，二是用于实验自己学到的网页开发技术。\n\n至于写啥至今没想好,只是觉得找个地方写东西是极好的.\n\n这个无名小地方估摸着也没有人会来看,备份笔记,发发牢骚,写点杂谈应当都是很好的消遣------反正也没有人会注意的,整天净想着如何经营自己的形象,累不累......\n\n\n\n\n\n\n<p id = \"build\"></p>\n","slug":"2019-09-30-Hello 2019","published":1,"updated":"2021-10-24T02:04:35.813Z","_id":"ckey85uj5000cho8aetqg09h7","comments":1,"photos":[],"link":"","content":"<p>Makinohara 的 Blog 就这么开通了。</p>\n<p>这个博客的用途有二：一是分享自己的感想、写些技术类文章，二是用于实验自己学到的网页开发技术。</p>\n<p>至于写啥至今没想好,只是觉得找个地方写东西是极好的.</p>\n<p>这个无名小地方估摸着也没有人会来看,备份笔记,发发牢骚,写点杂谈应当都是很好的消遣———反正也没有人会注意的,整天净想着如何经营自己的形象,累不累……</p>\n<p id = \"build\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Makinohara 的 Blog 就这么开通了。</p>\n<p>这个博客的用途有二：一是分享自己的感想、写些技术类文章，二是用于实验自己学到的网页开发技术。</p>\n<p>至于写啥至今没想好,只是觉得找个地方写东西是极好的.</p>\n<p>这个无名小地方估摸着也没有人会来看,备份笔记,发发牢骚,写点杂谈应当都是很好的消遣———反正也没有人会注意的,整天净想着如何经营自己的形象,累不累……</p>\n<p id = \"build\"></p>\n"},{"layout":"post","title":"Developing in Java","intro":"","date":"2019-10-25T00:00:00.000Z","author":"Makinohara","featured_image":"http://msfasr.com/img/Java.jpg","catalog":true,"_content":"\n\n\n# Java Language\n\n#### Tiny notes\n\n1B=8bit\n\nJava have three systems：\n\n- Java SE（J2SE）（Java2 Platform Standard Edition）\n- Java EE  (J2EE)     (Java 2 Platform,Enterprise Edition)\n- Java ME (J2ME)   (Java 2 Platform Micro Edition)\n\n## Java class\n\n### The define of a java class\n\nYou can see it's like C++ class in some ways.\n\n```java\nclass Employee\n{\n    //status(variable)\n    private String name;\n    private double salary;\n    \n    //constructor\n    public Employee(String n,double s)\n    {\n        name = n;\n        salary = s;\n    }\n    \n    //method\n    public String getName()\n    {\n        return name;\n    }\n}\n```\n\n\n\n##### Class Fields\n\n```java\nprivate String name;//private refers this variable can only access by it's own method.\nprivate double salary;\n```\n\n##### Class constructor\n\n```java\npublic Employee(String n , double s)\n{\n    name =n;\n    salary =s;\n\n\n//use constructor:\nnew Employee(\"Jamws Bond\",10000);\n//there can be serveral constructors in a class.\n}\n```\n\n### Constructor\n\nJava offers several mechanisms of constructing a new object.\n\nThis function is called as **overloading**. If there's several functions with **same name but different parameters** ,  the complicator will choose a function .This called **overloading resolution** .\n\nOk, let's see constructor.\n\n**Default field initialize:**\n\n```java\nEmployee John = new Employee();\n```\n\nAll the number will be 0, boolean will be `false`, object reference will be `null`. \n\nCaution: This is **not a good habit** to initialize a new object with default field.\n\n#### **Constructor without parameter:**\n\n```java\npublic Employee()\n{\n    name =\"\";\n    salary =0;\n    hireDay =LocalDate.now();\n}\n```\n\n#### Explicit field initialize \n\nYou can initialize field value in the declaration of a class.\n\nBefore using constructor.\n\n```java\npublic class Employee\n{\n    private String name =\" \";\n    private static int nextId;\n    private int id = assignId();\n    \n    \n    private static int assignId()\n    {\n        int r= nextId;\n        nextId++;\n        return r;\n\t}\n}\n```\n\n#### Calling another constructor\n\nUse **`this`** to call another constructor when you are just using a constructor.\n\n```java\npublic Employee(double s)\n{\n    this(\"Employee\" + nextId,s);\n    nextId++;\n}\n```\n\n#### Initialization block\n\nInitialize field values in the class define.\n\n```java\nclass Employee\n{\n    //......\n    private int Id;\n    private String name;\n    private double salary;\n    //......\n    \n    //Use initialization block\n    {\n        id = nextId;\n        nextId++;\n    }\n}\n```\n\n#### Summary\n\nThe Steps of Calling constrictor\n\n1.If the constructor calls another, construct by that one.\n\n2.a. All the field will be initialized by default.\n\n   b. According to the order in `class defination`, execute field initialize function and initialization block.\n\n### Class Operation\n\n##### Use `var` to state a local variable\n\n```java\nvar harry = new Employee(\"Hurry\",5000);\n```\n\n##### **Use `clone` to return a copy of an object**\n\n```java\nreturn (Date) hireDay.clone();\n```\n\nTips: a private field is accessible to an object of same class.\n\n#### Static\n\nA field or method which is defined as `static` means there is **ONLY ONE** in the same class.\n\n```java\npublic static final double PI = 3.141592653;\n```\n\nA static method do not use an object. Such as:\n\n```java\nMath.pow(10,3);\n```\n\nA static method can not access fields in an object ,but can access **static field**.\n\n**Use static initialization block**\n\n```java\nstatic\n{\n    var generator = new Radom();\n    nextId = generator.nextInt(10000);\n}\n```\n\n\n\n#### Main method \n\nA class can have a main method, but it will not come into effect. It is used to **TEST** a class.\n\n#### Class Date\n\n```java\nSystem.out.println(new Date());\nString s = new Date.toString();\nDate deadline;//However,this variable does not refer to any object.\ndeadline = new Date();//ok.\ndeadline = null;// refer to no object\ndeadline = birthday;//they refer to the same object\n\n```\n\n**Class LocalDate**\n\n```java\npackage com.msfasr.java_startup;\n\nimport java.time.DayOfWeek;\nimport java.time.LocalDate;\n\npublic class Calendar {\n    public static void main(String[] args)\n    {\n        LocalDate currentDate = LocalDate.now();\n        System.out.println(\"Mon Tue Wed Thu Fri Sat Sun\");\n        int month=currentDate.getMonthValue();\n        int today=currentDate.getDayOfMonth();\n        currentDate = currentDate.minusDays(today-1);\n        int dayOfWeek = currentDate.getDayOfWeek().getValue();\n        for(int i=0;i<dayOfWeek-1;i++)\n            System.out.printf(\"    \");\n        while(currentDate.getMonthValue() == month)\n        {\n            if(currentDate.getDayOfMonth()==today)\n            {\n                System.out.printf(\"*\");\n            }\n            else\n                System.out.printf(\" \");\n            System.out.printf(\"%-3d\",currentDate.getDayOfMonth());\n            if(currentDate.getDayOfWeek().getValue()==7)\n                System.out.println();\n            currentDate = currentDate.plusDays(1);\n        }\n    }\n}\n\n```\n\n\n\n### Java class methods\n\n#### Main method\n\n```java\npackage com.msfasr.java_startup;//The code is included in a package\n\nimport java.util.Scanner;//Inport Scanner for input\n\n\npublic class HelloWorld {//The main method is contained in a class\n    public static void main(String[] args) {//Be aware of the define of the main method\n        System.out.println(\"Hello,world\");\n    }\n}\n```\n\n#### Class Methods\n\n```java\npublic static void printCalendar()\n{\n    ......\n}//static method, do not operate fields\n\npublic void changeFormat()\n{\n    ......\n}//this method must based on an object\n```\n\n\n\n#### Method parameters\n\nJava programming language can only **Call by value** .\n\nHowever, when the parameter is an `OBJECT` , methods can change values of OBJECTS.\n\n```java\npublic static void tripleSalary(Employee x)\n{\n    x.raiseSalary(200);\n}\n```\n\nSo,a method **can**:\n\nChange the status of an object.\n\n**Can't**:\n\nChange values of variable.\n\nMake an object refer to an new object.\n\n### Package\n\nJava package is a sort of set contains several **class**.\n\nPackage standard name:\n\ncom.(company name).(project name)\n\nSuch as:\n\ncom.msfasr.javaStartup\n\n#### Importing package\n\n```java\nimport java.util.Scanner;//import a class\nimport java.util.*       //import a package\n```\n\nWhen there is a class name used by several package, you need to write the package name when using.\n\n```java\nimport java.util.Date;\nimport java.sql.Date;\n\npublic class Main{\n    public static void main(String[] args){\n        var deadline = new java.util.Date();\n        var today = new java.sql.Date(. . . );\n    }\n\n}\n```\n\n#### Static importing\n\nBy using static importing, you can import a sort of static method and field.\n\n```java\nimport static java.lang.System.*;\n//then, you can use:\nout.println(\"123\");//System.out\nexit(0);//System.exit\n\n```\n\n#### Adding class into a package\n\n```java\npackage com.msfasr.javaStartup;\n//......\n```\n\nThe class is now in the package.\n\n**Class annotation** \n\n```java\n/**\n * This class is built for Studying Java!\n * This means I will enter a new field!\n */\n\npublic class Main {\n\t//......\n}\n```\n\n\n\n### Class Designing tips\n\n1.Guarantee that the **data** is private.\n\n2.`Warning`: **You must initialize the field!!!**\n\n3.Do not use so much basic type variable!!!\n\n```java\n//......\nprivate String street;\nprivate String city;\nprivate String state;//bad\n//......\n\n\nprivate class address\n{\n    private String street;\n\tprivate String city;\n\tprivate String state;   //good\n}\n```\n\n4.not all the fields are changeable.\n\n5.Resolve the classes with so many responsibility.\n\n6.The name should refer their responsibility.\n\n7.Use classes unchangeable at first.\n\n### Class Inheritance\n\n#### Class, Superclass, Subclass\n\n**A subclass define:**\n\n```java\npublic class Manager extends Employee\n{\n    private double bonus;\n    \n    private void setBonus(double aBonus)\n    {\n        bonus=aBonus;\n    }\n}\n```\n\n#### Covering methods\n\n```java\npublic class Manager extends Employee\n{\n    //...\n    public double getSalary()\n    {\n        int aSalary= super.getSalary();\n        return aSalary + bonus;\n    }\n}\n```\n\n#### Subclass constructor\n\n```java\npublic class Manager extends Employee\n{\n    public Manager(String name , double salary, int year, int month, int day)\n    {\n        super(name,salary,year, month, day);\n        bonus = 0 ;\n    }\n}\n```\n\n#### Class Array with dynamic binding\n\n```java\n//...\nManager boss = new Manager(\"Makinohara\",80000000,2001,4,13);\nboss.setBonus(200000);\n\n//then, define an array of employees\n\nvar staff[] = new Employee[3];\n\nstaff[0] = boss;\nstaff[1] = new Employee(\"Mai\",20000,2000,1,2);\nstaff[2] = new Employee(\"Sakuta\",10,2001,4,13);\n\nfor(Employee e : staff)//for:each circulation\n{\n    System.out.println(e.getName()+\":\"+e.getSalary);\n}\n```\n\nThe compiler will choose the right method to get salary, this is **Dynamic Binding**.\n\n#### Polymorphism\n\nIn java, the object variable is **polymorphic**, it means a variable of an object can refer all the **subclass object**. \n\n#### Java Method Calling\n\n1. The complier gets the method list of **a class and its superclass**.\n\n2. The complier confirms the **parameter types** of the method which is being called.\n\n3. The JVM calls the method.\n\n#### Stop Inheriting : `final`.\n\n```java\npublic final class Boss extends Manager//the class can't be inheriting\n{\n    //...\n    public final String getName()//the method can't be covered.\n    {\n        //......\n    }\n}\n```\n\n### Forced type conversion \n\nIn *Class Array with dynamic binding*, we created an array contains Manager and Employee. However, the array is a Employee array, so we need to use Forced type conversion to convert a Employee object to a Manager object.\n\n```java\nManager boss = (Manager)staff[0];\n```\n\nBut, when you are trying to convert a object **from top to bottom**, it won't work.\n\n```java\nManager boss = (Manager)staff[1];// Not work\n\n//So,we can avoid this case by using:\nif(staff[1] instanceof Manager)\n{\n    \n    boss = (Manager)staff[1];\n    \n    //......\n}\n```\n\n### Abstract Class\n\nAbstract class is a sort of class that is more general. Such as Person can contain Employee and Student.\n\nThe define of an abstract class\n\n```java\npublic abstract class Person\n{\n    private String name;\n    public Person (String name)\n    {\n        this.name = name;\n\t}\n    \n    public abstract String getName()\n    {\n        return name;\n    }\n}\n```\n\n**Instantiation is not allowed in an Abstract class.** It means you can't :\n\n```java\nvar aP = new Person(\"Deja vu\");\n// you can do this:\n\nPerson stu1 = new student(\"Deja vu\",\"Computer Driving\");\n```\n\n### Access modifier\n\npublic : this method or field can be used by `all classes`.\n\nprivate: this method or field can only used by the `same class`, not for subclasses.\n\nprotected: this method or field can used by `this package` and `all subclass`\n\nno modifier: this method or field can be used by all the methods in the `same package`!!\n\n### Object: the superclass of all classes\n\nYou can use a variable whose type is `Object` to refer `objects of all classes`.\n\n```java\nObject obj = new Employee(\"Harry Potter\",300000);\n```\n\nBut, when you are trying to operate the object or using methods, you need to do `type conversing` .\n\n```java\nEmployee e = (Employee)obj;\n```\n\n#### **`equals`**\n\n`equals` is a method to compare whether two objects are equal.\n\nThe `equals` method in Class Object is used to compare two objects are equal or not, and if two objects reference are same, the method returns true.\n\n##### Equals method writing\n\n###### Standard:\n\n1. **Reflexivity** : x.equals(x) == true \n2. **Symmetry** : x.equals(y) == y.equals(x)\n3. **Transitivity** : x.equals(y) == true , y.equals(z) == true -> x.equals(z) == true.\n4. **Consistency** : If x and y did not change , the equality do not change.\n5. **x.equals(null) == false.**\n\n###### Advice of designing an equals method\n\nSee *Core Java Vol.1* , 11th edition , Page 178.\n\n#### Hash code\n\nhashcode() : returns an integer , the hash code , that refers the object.\n\nObject.hash(Obj1,Obj2,......,ObjN) ;\n\nObject.hashcode(Obj);\n\n#### toString\n\nObject.toString(); Print a string that consist of all fields. Needs you write yourself.\t\n\n#### ArrayList\n\n```java\nArrayList<Employee> staff = new ArrayList<Employee>();\n\n//add an object:\nstaff.add(Object);\nstaff.add(new Employee(......));\n\nstaff.size();//returns the number of objects.\n```\n\n**Compare: ArrayList and Array**\n\n```java\nstuff.set(i,harry);//stuff[i] = hurry\nEmployee ep = stuff.get(i);// Employee ep = stuff[i]\nstuff.add(i,E);//insert E to position i , move the rest. \nstuff.remove(i);//delete Element at position i, move the rest\n```\n\n### Object Wrapper\n\nWrapper class is a sort of class that **corresponding to basic data types**. \n\nSuch as:\n\n```java\nvar list = new ArrayList<Integer>();\nlist.add(3);          //Autoboxing\nint n = list.get(i);  //Autounboxing\n```\n\n## Interface\n\n### Realize an interface\n\n\n\n```java\nclass Employee implements Comparable<Employee>\t //在实现接口时加上类名，可以可以防止对Object类型转换\n{\n    //......\n    public int compareTo(Employee other)\n    {\n        return Double.compare(salary,other.salary);\n    }\n    //......\n}\n```\n\n```java\npublic class Main {\n\n    public static void main(String[] args)  {\n        var staff = new Employee[3];\n        staff[0] = new Employee(\"Mark\",12000,2020,1,20);\n        staff[1] = new Employee(\"Lin\",10000,2020,1,20);\n        staff[2] = new Employee(\"Coal\",41230,2020,1,20);\n        Arrays.sort(staff);\n        return;\n\n    }\n}\n\n```\n\n接口不是一种类，所以不能使用new实例化接口。\n\n接口的一个样例：\n\n```\npublic interface Comparable<T>{\n\tdefault int compareTo(T other){  //一种默认方法。\n\t\treturn 0;\n\t}\n}\n```\n\n\n\n### 接口与回调\n\n一个Listener接口：\n\n```\npublic interface ActionListener\n{\n\tvoid actionPerformed(ActionEvent event);\n}\n```\n\n如果想要调用这个接口，则可以在一个类中实现：\n\n```\nclass TimePrinter implements ActionListener{\n\tpublic void actionPerformed(ActionEvent event){          //在类中实现这个接口\n\t\tSystem.out.println(123);\n\t}\n}\n```\n\n实现回调的方法：\n\n```\nvar listener = new TimePrinter;\nvar timer = new Timer(1000,listener);\n//......\n//timer每1000毫秒通知实现了ActionListener接口的类，这个类就会实现接口提供的函数actionPerformed，完成一个回调。\n```\n\n## Lambda 表达式\n\n一种自定义代码块，用于实现某些计算或执行某些函数\n\n```\n//比如，要计算a.length() - b.length()\n(String a, String b)\n\t->a.length()-b.length()\n//或者：\n(String a, String b)->\n{\n\tif(a.length<b.length)\n\t\treturn -1;\n\t//......\n}\n//执行函数：\nvar timer = new Timer(1000,event ->System.out.println(event))\n```\n\n使用lambda来使方法实现函数式接口，避免多余的重写方法：\n\n```\npackage com.icsii.interfaceDemo;\n\npublic interface printer {\n    void printString(String something);\n}\npublic class print {\n    public void printSomething(String something,printer aPrinter){\n        aPrinter.printString(something);\n    }\n\n    public static void main(String[] args) {\n        print Demo1 = new print();\n        Demo1.printSomething(\"123\",(String something)->System.out.println(something));\n    }\n}\n\n(接口接收的参数)->{接口实现的方法}\n```\n\n\n\n## Java I/O\n\n#### Input(scanner)\n\nFirstly, import a class *scanner* .\n\n```java\nimport java.util.Scanner;\n```\n\nThis class has these basic operations :\n\n```java\nScanner sc = new Scanner(System.in);//new a scanner\nString name = sc.nextLine();//Get a line\nint age = sc.nextInt();//Get the next int\nsc.close();//Close the scanner when used,or it will report an error.\n```\n\n##### Other measures\n\n```java\nString nextLine();//read next line;\nString next();//read next word, use blank as separator.\nint nextInt();//read next int\nboolean hasNext();//if there's words in line\nboolean hasNextInt();\n```\n\n##### Read files\n\n```java\nScanner sc = new Scanner(\"Path\",StandardCharsets.UTF_8);//read file\nPrintWriter out = new PrintWriter(\"Path\",StandardCharsets.UTF_8);//Write file\nout.print();//Warning: this method will rewrite the file!!!\n```\n\n\n\n#### Output (System.out)\n\n```java\nSystem.out.println(1111);//Print and return\nSystem.out.print(1111);//Print without returning\nSystem.out.write(2222);//byte output\nSystem.out.printf(\"%+8.3f\\n\", 3.14);//Print according to format\n```\n\n\n\n## Java variable :\n\n### Variable types\n\n| Variable type | value                        |\n| ------------- | ---------------------------- |\n| int           | 4byte,-2147483648~2147483647 |\n| short         | 2byte                        |\n| long          | 8byte                        |\n| byte          | 1byte                        |\n| float         | 4byte                        |\n| double        | 8byte                        |\n| char(UTF-16)  | 16byte(UTF-16 character )    |\n| boolean       | true/false                   |\n\nCaution: A variable must be initialized ,or the compiler will put an ERROR.\n\nIn java, key word `final` refers a variable is constant.\n\n**enum**:\n\n```java\nenum Size {Small,Medium};//enum is a CLASS!\nSize s = Size.Small;//it can only use values defined above.\n```\n\n#### String\n\n**str.substring** can extract a part of string .\n\n```java\nString greeting = \"Hello\";\nString s = greeting.substring(0,3);//s = \"Hel\"\nString str = greeting+s;\n```\n\n str.equals compares two strings:\n\n```java\n\"Hello\".equals(greeting);\n```\n\nCaution: DO NOT USE == !\n\n##### Other measures \n\n```java\nstr.length(); //return length\nstr.blank(); // judge if the string is empty\nstr.join(\"/\",str1,str2,str3......);// use / as separator , combine strings\nString.format(\"%f\",a);//returns a String with format\n```\n\n#### Big numbers\n\n```java\nBigInteger;\nBigDecimal;\nnum1.add(num2);\n//use add subtract multiply devide mod\n```\n\n### Array\n\n```java\nint[] a = new int[100];\nint[] a = new int[n];\nint[] a = {1,3,7,7,9};\na = new int[] {1,3,5,7,9};\na.length();\nArray.sort(a);\nArray.binarySearch(xxx[] a,xxx v);\nArray.binarySearch(xxx[] a,int start,int end,xxx v);\nArray.fill(xxx[] a,xxx v);\nint a[][] = new int[1][3];\nint[] temp = a[1];\na[1]=a[2];\na[2]=temp;//exchange 2 lines\nint[][] feb = new int[100][];\nfor(int n=0;n<100;n++)\n    feb[n]=new int[n+1];//regard feb[n] as an array name.\n```\n\n**Array copy:**\n\n```java\nint[] a = {1};\nint[] b = a;\na[0]=5;//now,b[0] is also 5\nint[] ca = Arrays.copyOf(a,5);//then we get a new array, the size is 5.\n```\n\n## Java sentences\n\n### For\n\n#### **For each**\n\n```java\nfor(int element:a)\n\tSystem.out.println(element);\n```\n\n","source":"_posts/2019-10-25-Java.markdown","raw":"---\nlayout:     post\ntitle:      \"Developing in Java\"\nintro:   \"\"\ndate:       2019-10-25 08:00:00\nauthor:     \"Makinohara\"\nfeatured_image: http://msfasr.com/img/Java.jpg\ncatalog: true\ntags:\n    - 编程语言\n---\n\n\n\n# Java Language\n\n#### Tiny notes\n\n1B=8bit\n\nJava have three systems：\n\n- Java SE（J2SE）（Java2 Platform Standard Edition）\n- Java EE  (J2EE)     (Java 2 Platform,Enterprise Edition)\n- Java ME (J2ME)   (Java 2 Platform Micro Edition)\n\n## Java class\n\n### The define of a java class\n\nYou can see it's like C++ class in some ways.\n\n```java\nclass Employee\n{\n    //status(variable)\n    private String name;\n    private double salary;\n    \n    //constructor\n    public Employee(String n,double s)\n    {\n        name = n;\n        salary = s;\n    }\n    \n    //method\n    public String getName()\n    {\n        return name;\n    }\n}\n```\n\n\n\n##### Class Fields\n\n```java\nprivate String name;//private refers this variable can only access by it's own method.\nprivate double salary;\n```\n\n##### Class constructor\n\n```java\npublic Employee(String n , double s)\n{\n    name =n;\n    salary =s;\n\n\n//use constructor:\nnew Employee(\"Jamws Bond\",10000);\n//there can be serveral constructors in a class.\n}\n```\n\n### Constructor\n\nJava offers several mechanisms of constructing a new object.\n\nThis function is called as **overloading**. If there's several functions with **same name but different parameters** ,  the complicator will choose a function .This called **overloading resolution** .\n\nOk, let's see constructor.\n\n**Default field initialize:**\n\n```java\nEmployee John = new Employee();\n```\n\nAll the number will be 0, boolean will be `false`, object reference will be `null`. \n\nCaution: This is **not a good habit** to initialize a new object with default field.\n\n#### **Constructor without parameter:**\n\n```java\npublic Employee()\n{\n    name =\"\";\n    salary =0;\n    hireDay =LocalDate.now();\n}\n```\n\n#### Explicit field initialize \n\nYou can initialize field value in the declaration of a class.\n\nBefore using constructor.\n\n```java\npublic class Employee\n{\n    private String name =\" \";\n    private static int nextId;\n    private int id = assignId();\n    \n    \n    private static int assignId()\n    {\n        int r= nextId;\n        nextId++;\n        return r;\n\t}\n}\n```\n\n#### Calling another constructor\n\nUse **`this`** to call another constructor when you are just using a constructor.\n\n```java\npublic Employee(double s)\n{\n    this(\"Employee\" + nextId,s);\n    nextId++;\n}\n```\n\n#### Initialization block\n\nInitialize field values in the class define.\n\n```java\nclass Employee\n{\n    //......\n    private int Id;\n    private String name;\n    private double salary;\n    //......\n    \n    //Use initialization block\n    {\n        id = nextId;\n        nextId++;\n    }\n}\n```\n\n#### Summary\n\nThe Steps of Calling constrictor\n\n1.If the constructor calls another, construct by that one.\n\n2.a. All the field will be initialized by default.\n\n   b. According to the order in `class defination`, execute field initialize function and initialization block.\n\n### Class Operation\n\n##### Use `var` to state a local variable\n\n```java\nvar harry = new Employee(\"Hurry\",5000);\n```\n\n##### **Use `clone` to return a copy of an object**\n\n```java\nreturn (Date) hireDay.clone();\n```\n\nTips: a private field is accessible to an object of same class.\n\n#### Static\n\nA field or method which is defined as `static` means there is **ONLY ONE** in the same class.\n\n```java\npublic static final double PI = 3.141592653;\n```\n\nA static method do not use an object. Such as:\n\n```java\nMath.pow(10,3);\n```\n\nA static method can not access fields in an object ,but can access **static field**.\n\n**Use static initialization block**\n\n```java\nstatic\n{\n    var generator = new Radom();\n    nextId = generator.nextInt(10000);\n}\n```\n\n\n\n#### Main method \n\nA class can have a main method, but it will not come into effect. It is used to **TEST** a class.\n\n#### Class Date\n\n```java\nSystem.out.println(new Date());\nString s = new Date.toString();\nDate deadline;//However,this variable does not refer to any object.\ndeadline = new Date();//ok.\ndeadline = null;// refer to no object\ndeadline = birthday;//they refer to the same object\n\n```\n\n**Class LocalDate**\n\n```java\npackage com.msfasr.java_startup;\n\nimport java.time.DayOfWeek;\nimport java.time.LocalDate;\n\npublic class Calendar {\n    public static void main(String[] args)\n    {\n        LocalDate currentDate = LocalDate.now();\n        System.out.println(\"Mon Tue Wed Thu Fri Sat Sun\");\n        int month=currentDate.getMonthValue();\n        int today=currentDate.getDayOfMonth();\n        currentDate = currentDate.minusDays(today-1);\n        int dayOfWeek = currentDate.getDayOfWeek().getValue();\n        for(int i=0;i<dayOfWeek-1;i++)\n            System.out.printf(\"    \");\n        while(currentDate.getMonthValue() == month)\n        {\n            if(currentDate.getDayOfMonth()==today)\n            {\n                System.out.printf(\"*\");\n            }\n            else\n                System.out.printf(\" \");\n            System.out.printf(\"%-3d\",currentDate.getDayOfMonth());\n            if(currentDate.getDayOfWeek().getValue()==7)\n                System.out.println();\n            currentDate = currentDate.plusDays(1);\n        }\n    }\n}\n\n```\n\n\n\n### Java class methods\n\n#### Main method\n\n```java\npackage com.msfasr.java_startup;//The code is included in a package\n\nimport java.util.Scanner;//Inport Scanner for input\n\n\npublic class HelloWorld {//The main method is contained in a class\n    public static void main(String[] args) {//Be aware of the define of the main method\n        System.out.println(\"Hello,world\");\n    }\n}\n```\n\n#### Class Methods\n\n```java\npublic static void printCalendar()\n{\n    ......\n}//static method, do not operate fields\n\npublic void changeFormat()\n{\n    ......\n}//this method must based on an object\n```\n\n\n\n#### Method parameters\n\nJava programming language can only **Call by value** .\n\nHowever, when the parameter is an `OBJECT` , methods can change values of OBJECTS.\n\n```java\npublic static void tripleSalary(Employee x)\n{\n    x.raiseSalary(200);\n}\n```\n\nSo,a method **can**:\n\nChange the status of an object.\n\n**Can't**:\n\nChange values of variable.\n\nMake an object refer to an new object.\n\n### Package\n\nJava package is a sort of set contains several **class**.\n\nPackage standard name:\n\ncom.(company name).(project name)\n\nSuch as:\n\ncom.msfasr.javaStartup\n\n#### Importing package\n\n```java\nimport java.util.Scanner;//import a class\nimport java.util.*       //import a package\n```\n\nWhen there is a class name used by several package, you need to write the package name when using.\n\n```java\nimport java.util.Date;\nimport java.sql.Date;\n\npublic class Main{\n    public static void main(String[] args){\n        var deadline = new java.util.Date();\n        var today = new java.sql.Date(. . . );\n    }\n\n}\n```\n\n#### Static importing\n\nBy using static importing, you can import a sort of static method and field.\n\n```java\nimport static java.lang.System.*;\n//then, you can use:\nout.println(\"123\");//System.out\nexit(0);//System.exit\n\n```\n\n#### Adding class into a package\n\n```java\npackage com.msfasr.javaStartup;\n//......\n```\n\nThe class is now in the package.\n\n**Class annotation** \n\n```java\n/**\n * This class is built for Studying Java!\n * This means I will enter a new field!\n */\n\npublic class Main {\n\t//......\n}\n```\n\n\n\n### Class Designing tips\n\n1.Guarantee that the **data** is private.\n\n2.`Warning`: **You must initialize the field!!!**\n\n3.Do not use so much basic type variable!!!\n\n```java\n//......\nprivate String street;\nprivate String city;\nprivate String state;//bad\n//......\n\n\nprivate class address\n{\n    private String street;\n\tprivate String city;\n\tprivate String state;   //good\n}\n```\n\n4.not all the fields are changeable.\n\n5.Resolve the classes with so many responsibility.\n\n6.The name should refer their responsibility.\n\n7.Use classes unchangeable at first.\n\n### Class Inheritance\n\n#### Class, Superclass, Subclass\n\n**A subclass define:**\n\n```java\npublic class Manager extends Employee\n{\n    private double bonus;\n    \n    private void setBonus(double aBonus)\n    {\n        bonus=aBonus;\n    }\n}\n```\n\n#### Covering methods\n\n```java\npublic class Manager extends Employee\n{\n    //...\n    public double getSalary()\n    {\n        int aSalary= super.getSalary();\n        return aSalary + bonus;\n    }\n}\n```\n\n#### Subclass constructor\n\n```java\npublic class Manager extends Employee\n{\n    public Manager(String name , double salary, int year, int month, int day)\n    {\n        super(name,salary,year, month, day);\n        bonus = 0 ;\n    }\n}\n```\n\n#### Class Array with dynamic binding\n\n```java\n//...\nManager boss = new Manager(\"Makinohara\",80000000,2001,4,13);\nboss.setBonus(200000);\n\n//then, define an array of employees\n\nvar staff[] = new Employee[3];\n\nstaff[0] = boss;\nstaff[1] = new Employee(\"Mai\",20000,2000,1,2);\nstaff[2] = new Employee(\"Sakuta\",10,2001,4,13);\n\nfor(Employee e : staff)//for:each circulation\n{\n    System.out.println(e.getName()+\":\"+e.getSalary);\n}\n```\n\nThe compiler will choose the right method to get salary, this is **Dynamic Binding**.\n\n#### Polymorphism\n\nIn java, the object variable is **polymorphic**, it means a variable of an object can refer all the **subclass object**. \n\n#### Java Method Calling\n\n1. The complier gets the method list of **a class and its superclass**.\n\n2. The complier confirms the **parameter types** of the method which is being called.\n\n3. The JVM calls the method.\n\n#### Stop Inheriting : `final`.\n\n```java\npublic final class Boss extends Manager//the class can't be inheriting\n{\n    //...\n    public final String getName()//the method can't be covered.\n    {\n        //......\n    }\n}\n```\n\n### Forced type conversion \n\nIn *Class Array with dynamic binding*, we created an array contains Manager and Employee. However, the array is a Employee array, so we need to use Forced type conversion to convert a Employee object to a Manager object.\n\n```java\nManager boss = (Manager)staff[0];\n```\n\nBut, when you are trying to convert a object **from top to bottom**, it won't work.\n\n```java\nManager boss = (Manager)staff[1];// Not work\n\n//So,we can avoid this case by using:\nif(staff[1] instanceof Manager)\n{\n    \n    boss = (Manager)staff[1];\n    \n    //......\n}\n```\n\n### Abstract Class\n\nAbstract class is a sort of class that is more general. Such as Person can contain Employee and Student.\n\nThe define of an abstract class\n\n```java\npublic abstract class Person\n{\n    private String name;\n    public Person (String name)\n    {\n        this.name = name;\n\t}\n    \n    public abstract String getName()\n    {\n        return name;\n    }\n}\n```\n\n**Instantiation is not allowed in an Abstract class.** It means you can't :\n\n```java\nvar aP = new Person(\"Deja vu\");\n// you can do this:\n\nPerson stu1 = new student(\"Deja vu\",\"Computer Driving\");\n```\n\n### Access modifier\n\npublic : this method or field can be used by `all classes`.\n\nprivate: this method or field can only used by the `same class`, not for subclasses.\n\nprotected: this method or field can used by `this package` and `all subclass`\n\nno modifier: this method or field can be used by all the methods in the `same package`!!\n\n### Object: the superclass of all classes\n\nYou can use a variable whose type is `Object` to refer `objects of all classes`.\n\n```java\nObject obj = new Employee(\"Harry Potter\",300000);\n```\n\nBut, when you are trying to operate the object or using methods, you need to do `type conversing` .\n\n```java\nEmployee e = (Employee)obj;\n```\n\n#### **`equals`**\n\n`equals` is a method to compare whether two objects are equal.\n\nThe `equals` method in Class Object is used to compare two objects are equal or not, and if two objects reference are same, the method returns true.\n\n##### Equals method writing\n\n###### Standard:\n\n1. **Reflexivity** : x.equals(x) == true \n2. **Symmetry** : x.equals(y) == y.equals(x)\n3. **Transitivity** : x.equals(y) == true , y.equals(z) == true -> x.equals(z) == true.\n4. **Consistency** : If x and y did not change , the equality do not change.\n5. **x.equals(null) == false.**\n\n###### Advice of designing an equals method\n\nSee *Core Java Vol.1* , 11th edition , Page 178.\n\n#### Hash code\n\nhashcode() : returns an integer , the hash code , that refers the object.\n\nObject.hash(Obj1,Obj2,......,ObjN) ;\n\nObject.hashcode(Obj);\n\n#### toString\n\nObject.toString(); Print a string that consist of all fields. Needs you write yourself.\t\n\n#### ArrayList\n\n```java\nArrayList<Employee> staff = new ArrayList<Employee>();\n\n//add an object:\nstaff.add(Object);\nstaff.add(new Employee(......));\n\nstaff.size();//returns the number of objects.\n```\n\n**Compare: ArrayList and Array**\n\n```java\nstuff.set(i,harry);//stuff[i] = hurry\nEmployee ep = stuff.get(i);// Employee ep = stuff[i]\nstuff.add(i,E);//insert E to position i , move the rest. \nstuff.remove(i);//delete Element at position i, move the rest\n```\n\n### Object Wrapper\n\nWrapper class is a sort of class that **corresponding to basic data types**. \n\nSuch as:\n\n```java\nvar list = new ArrayList<Integer>();\nlist.add(3);          //Autoboxing\nint n = list.get(i);  //Autounboxing\n```\n\n## Interface\n\n### Realize an interface\n\n\n\n```java\nclass Employee implements Comparable<Employee>\t //在实现接口时加上类名，可以可以防止对Object类型转换\n{\n    //......\n    public int compareTo(Employee other)\n    {\n        return Double.compare(salary,other.salary);\n    }\n    //......\n}\n```\n\n```java\npublic class Main {\n\n    public static void main(String[] args)  {\n        var staff = new Employee[3];\n        staff[0] = new Employee(\"Mark\",12000,2020,1,20);\n        staff[1] = new Employee(\"Lin\",10000,2020,1,20);\n        staff[2] = new Employee(\"Coal\",41230,2020,1,20);\n        Arrays.sort(staff);\n        return;\n\n    }\n}\n\n```\n\n接口不是一种类，所以不能使用new实例化接口。\n\n接口的一个样例：\n\n```\npublic interface Comparable<T>{\n\tdefault int compareTo(T other){  //一种默认方法。\n\t\treturn 0;\n\t}\n}\n```\n\n\n\n### 接口与回调\n\n一个Listener接口：\n\n```\npublic interface ActionListener\n{\n\tvoid actionPerformed(ActionEvent event);\n}\n```\n\n如果想要调用这个接口，则可以在一个类中实现：\n\n```\nclass TimePrinter implements ActionListener{\n\tpublic void actionPerformed(ActionEvent event){          //在类中实现这个接口\n\t\tSystem.out.println(123);\n\t}\n}\n```\n\n实现回调的方法：\n\n```\nvar listener = new TimePrinter;\nvar timer = new Timer(1000,listener);\n//......\n//timer每1000毫秒通知实现了ActionListener接口的类，这个类就会实现接口提供的函数actionPerformed，完成一个回调。\n```\n\n## Lambda 表达式\n\n一种自定义代码块，用于实现某些计算或执行某些函数\n\n```\n//比如，要计算a.length() - b.length()\n(String a, String b)\n\t->a.length()-b.length()\n//或者：\n(String a, String b)->\n{\n\tif(a.length<b.length)\n\t\treturn -1;\n\t//......\n}\n//执行函数：\nvar timer = new Timer(1000,event ->System.out.println(event))\n```\n\n使用lambda来使方法实现函数式接口，避免多余的重写方法：\n\n```\npackage com.icsii.interfaceDemo;\n\npublic interface printer {\n    void printString(String something);\n}\npublic class print {\n    public void printSomething(String something,printer aPrinter){\n        aPrinter.printString(something);\n    }\n\n    public static void main(String[] args) {\n        print Demo1 = new print();\n        Demo1.printSomething(\"123\",(String something)->System.out.println(something));\n    }\n}\n\n(接口接收的参数)->{接口实现的方法}\n```\n\n\n\n## Java I/O\n\n#### Input(scanner)\n\nFirstly, import a class *scanner* .\n\n```java\nimport java.util.Scanner;\n```\n\nThis class has these basic operations :\n\n```java\nScanner sc = new Scanner(System.in);//new a scanner\nString name = sc.nextLine();//Get a line\nint age = sc.nextInt();//Get the next int\nsc.close();//Close the scanner when used,or it will report an error.\n```\n\n##### Other measures\n\n```java\nString nextLine();//read next line;\nString next();//read next word, use blank as separator.\nint nextInt();//read next int\nboolean hasNext();//if there's words in line\nboolean hasNextInt();\n```\n\n##### Read files\n\n```java\nScanner sc = new Scanner(\"Path\",StandardCharsets.UTF_8);//read file\nPrintWriter out = new PrintWriter(\"Path\",StandardCharsets.UTF_8);//Write file\nout.print();//Warning: this method will rewrite the file!!!\n```\n\n\n\n#### Output (System.out)\n\n```java\nSystem.out.println(1111);//Print and return\nSystem.out.print(1111);//Print without returning\nSystem.out.write(2222);//byte output\nSystem.out.printf(\"%+8.3f\\n\", 3.14);//Print according to format\n```\n\n\n\n## Java variable :\n\n### Variable types\n\n| Variable type | value                        |\n| ------------- | ---------------------------- |\n| int           | 4byte,-2147483648~2147483647 |\n| short         | 2byte                        |\n| long          | 8byte                        |\n| byte          | 1byte                        |\n| float         | 4byte                        |\n| double        | 8byte                        |\n| char(UTF-16)  | 16byte(UTF-16 character )    |\n| boolean       | true/false                   |\n\nCaution: A variable must be initialized ,or the compiler will put an ERROR.\n\nIn java, key word `final` refers a variable is constant.\n\n**enum**:\n\n```java\nenum Size {Small,Medium};//enum is a CLASS!\nSize s = Size.Small;//it can only use values defined above.\n```\n\n#### String\n\n**str.substring** can extract a part of string .\n\n```java\nString greeting = \"Hello\";\nString s = greeting.substring(0,3);//s = \"Hel\"\nString str = greeting+s;\n```\n\n str.equals compares two strings:\n\n```java\n\"Hello\".equals(greeting);\n```\n\nCaution: DO NOT USE == !\n\n##### Other measures \n\n```java\nstr.length(); //return length\nstr.blank(); // judge if the string is empty\nstr.join(\"/\",str1,str2,str3......);// use / as separator , combine strings\nString.format(\"%f\",a);//returns a String with format\n```\n\n#### Big numbers\n\n```java\nBigInteger;\nBigDecimal;\nnum1.add(num2);\n//use add subtract multiply devide mod\n```\n\n### Array\n\n```java\nint[] a = new int[100];\nint[] a = new int[n];\nint[] a = {1,3,7,7,9};\na = new int[] {1,3,5,7,9};\na.length();\nArray.sort(a);\nArray.binarySearch(xxx[] a,xxx v);\nArray.binarySearch(xxx[] a,int start,int end,xxx v);\nArray.fill(xxx[] a,xxx v);\nint a[][] = new int[1][3];\nint[] temp = a[1];\na[1]=a[2];\na[2]=temp;//exchange 2 lines\nint[][] feb = new int[100][];\nfor(int n=0;n<100;n++)\n    feb[n]=new int[n+1];//regard feb[n] as an array name.\n```\n\n**Array copy:**\n\n```java\nint[] a = {1};\nint[] b = a;\na[0]=5;//now,b[0] is also 5\nint[] ca = Arrays.copyOf(a,5);//then we get a new array, the size is 5.\n```\n\n## Java sentences\n\n### For\n\n#### **For each**\n\n```java\nfor(int element:a)\n\tSystem.out.println(element);\n```\n\n","slug":"2019-10-25-Java","published":1,"updated":"2021-10-24T02:04:35.816Z","_id":"ckey85uj6000gho8afdbe56e8","comments":1,"photos":[],"link":"","content":"<h1 id=\"Java-Language\"><a href=\"#Java-Language\" class=\"headerlink\" title=\"Java Language\"></a>Java Language</h1><h4 id=\"Tiny-notes\"><a href=\"#Tiny-notes\" class=\"headerlink\" title=\"Tiny notes\"></a>Tiny notes</h4><p>1B=8bit</p>\n<p>Java have three systems：</p>\n<ul>\n<li>Java SE（J2SE）（Java2 Platform Standard Edition）</li>\n<li>Java EE  (J2EE)     (Java 2 Platform,Enterprise Edition)</li>\n<li>Java ME (J2ME)   (Java 2 Platform Micro Edition)</li>\n</ul>\n<h2 id=\"Java-class\"><a href=\"#Java-class\" class=\"headerlink\" title=\"Java class\"></a>Java class</h2><h3 id=\"The-define-of-a-java-class\"><a href=\"#The-define-of-a-java-class\" class=\"headerlink\" title=\"The define of a java class\"></a>The define of a java class</h3><p>You can see it’s like C++ class in some ways.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Employee</span><br></span>&#123;<br>    <span class=\"hljs-comment\">//status(variable)</span><br>    <span class=\"hljs-keyword\">private</span> String name;<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">double</span> salary;<br>    <br>    <span class=\"hljs-comment\">//constructor</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">Employee</span><span class=\"hljs-params\">(String n,<span class=\"hljs-keyword\">double</span> s)</span><br>    </span>&#123;<br>        name = n;<br>        salary = s;<br>    &#125;<br>    <br>    <span class=\"hljs-comment\">//method</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">getName</span><span class=\"hljs-params\">()</span><br>    </span>&#123;<br>        <span class=\"hljs-keyword\">return</span> name;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h5 id=\"Class-Fields\"><a href=\"#Class-Fields\" class=\"headerlink\" title=\"Class Fields\"></a>Class Fields</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">private</span> String name;<span class=\"hljs-comment\">//private refers this variable can only access by it's own method.</span><br><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">double</span> salary;<br></code></pre></td></tr></table></figure>\n<h5 id=\"Class-constructor\"><a href=\"#Class-constructor\" class=\"headerlink\" title=\"Class constructor\"></a>Class constructor</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">Employee</span><span class=\"hljs-params\">(String n , <span class=\"hljs-keyword\">double</span> s)</span><br></span>&#123;<br>    name =n;<br>    salary =s;<br><br><br><span class=\"hljs-comment\">//use constructor:</span><br><span class=\"hljs-keyword\">new</span> Employee(<span class=\"hljs-string\">\"Jamws Bond\"</span>,<span class=\"hljs-number\">10000</span>);<br><span class=\"hljs-comment\">//there can be serveral constructors in a class.</span><br>&#125;<br></code></pre></td></tr></table></figure>\n<h3 id=\"Constructor\"><a href=\"#Constructor\" class=\"headerlink\" title=\"Constructor\"></a>Constructor</h3><p>Java offers several mechanisms of constructing a new object.</p>\n<p>This function is called as <strong>overloading</strong>. If there’s several functions with <strong>same name but different parameters</strong> ,  the complicator will choose a function .This called <strong>overloading resolution</strong> .</p>\n<p>Ok, let’s see constructor.</p>\n<p><strong>Default field initialize:</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">Employee John = <span class=\"hljs-keyword\">new</span> Employee();<br></code></pre></td></tr></table></figure>\n<p>All the number will be 0, boolean will be <code>false</code>, object reference will be <code>null</code>. </p>\n<p>Caution: This is <strong>not a good habit</strong> to initialize a new object with default field.</p>\n<h4 id=\"Constructor-without-parameter\"><a href=\"#Constructor-without-parameter\" class=\"headerlink\" title=\"Constructor without parameter:\"></a><strong>Constructor without parameter:</strong></h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">Employee</span><span class=\"hljs-params\">()</span><br></span>&#123;<br>    name =<span class=\"hljs-string\">\"\"</span>;<br>    salary =<span class=\"hljs-number\">0</span>;<br>    hireDay =LocalDate.now();<br>&#125;<br></code></pre></td></tr></table></figure>\n<h4 id=\"Explicit-field-initialize\"><a href=\"#Explicit-field-initialize\" class=\"headerlink\" title=\"Explicit field initialize\"></a>Explicit field initialize</h4><p>You can initialize field value in the declaration of a class.</p>\n<p>Before using constructor.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Employee</span><br></span>&#123;<br>    <span class=\"hljs-keyword\">private</span> String name =<span class=\"hljs-string\">\" \"</span>;<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">int</span> nextId;<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">int</span> id = assignId();<br>    <br>    <br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">assignId</span><span class=\"hljs-params\">()</span><br>    </span>&#123;<br>        <span class=\"hljs-keyword\">int</span> r= nextId;<br>        nextId++;<br>        <span class=\"hljs-keyword\">return</span> r;<br>\t&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h4 id=\"Calling-another-constructor\"><a href=\"#Calling-another-constructor\" class=\"headerlink\" title=\"Calling another constructor\"></a>Calling another constructor</h4><p>Use <strong><code>this</code></strong> to call another constructor when you are just using a constructor.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">Employee</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">double</span> s)</span><br></span>&#123;<br>    <span class=\"hljs-keyword\">this</span>(<span class=\"hljs-string\">\"Employee\"</span> + nextId,s);<br>    nextId++;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h4 id=\"Initialization-block\"><a href=\"#Initialization-block\" class=\"headerlink\" title=\"Initialization block\"></a>Initialization block</h4><p>Initialize field values in the class define.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Employee</span><br></span>&#123;<br>    <span class=\"hljs-comment\">//......</span><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">int</span> Id;<br>    <span class=\"hljs-keyword\">private</span> String name;<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">double</span> salary;<br>    <span class=\"hljs-comment\">//......</span><br>    <br>    <span class=\"hljs-comment\">//Use initialization block</span><br>    &#123;<br>        id = nextId;<br>        nextId++;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h4 id=\"Summary\"><a href=\"#Summary\" class=\"headerlink\" title=\"Summary\"></a>Summary</h4><p>The Steps of Calling constrictor</p>\n<p>1.If the constructor calls another, construct by that one.</p>\n<p>2.a. All the field will be initialized by default.</p>\n<p>   b. According to the order in <code>class defination</code>, execute field initialize function and initialization block.</p>\n<h3 id=\"Class-Operation\"><a href=\"#Class-Operation\" class=\"headerlink\" title=\"Class Operation\"></a>Class Operation</h3><h5 id=\"Use-var-to-state-a-local-variable\"><a href=\"#Use-var-to-state-a-local-variable\" class=\"headerlink\" title=\"Use var to state a local variable\"></a>Use <code>var</code> to state a local variable</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">var</span> harry = <span class=\"hljs-keyword\">new</span> Employee(<span class=\"hljs-string\">\"Hurry\"</span>,<span class=\"hljs-number\">5000</span>);<br></code></pre></td></tr></table></figure>\n<h5 id=\"Use-clone-to-return-a-copy-of-an-object\"><a href=\"#Use-clone-to-return-a-copy-of-an-object\" class=\"headerlink\" title=\"Use clone to return a copy of an object\"></a><strong>Use <code>clone</code> to return a copy of an object</strong></h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">return</span> (Date) hireDay.clone();<br></code></pre></td></tr></table></figure>\n<p>Tips: a private field is accessible to an object of same class.</p>\n<h4 id=\"Static\"><a href=\"#Static\" class=\"headerlink\" title=\"Static\"></a>Static</h4><p>A field or method which is defined as <code>static</code> means there is <strong>ONLY ONE</strong> in the same class.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">double</span> PI = <span class=\"hljs-number\">3.141592653</span>;<br></code></pre></td></tr></table></figure>\n<p>A static method do not use an object. Such as:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">Math.pow(<span class=\"hljs-number\">10</span>,<span class=\"hljs-number\">3</span>);<br></code></pre></td></tr></table></figure>\n<p>A static method can not access fields in an object ,but can access <strong>static field</strong>.</p>\n<p><strong>Use static initialization block</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">static</span><br>&#123;<br>    <span class=\"hljs-keyword\">var</span> generator = <span class=\"hljs-keyword\">new</span> Radom();<br>    nextId = generator.nextInt(<span class=\"hljs-number\">10000</span>);<br>&#125;<br></code></pre></td></tr></table></figure>\n<h4 id=\"Main-method\"><a href=\"#Main-method\" class=\"headerlink\" title=\"Main method\"></a>Main method</h4><p>A class can have a main method, but it will not come into effect. It is used to <strong>TEST</strong> a class.</p>\n<h4 id=\"Class-Date\"><a href=\"#Class-Date\" class=\"headerlink\" title=\"Class Date\"></a>Class Date</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">System.out.println(<span class=\"hljs-keyword\">new</span> Date());<br>String s = <span class=\"hljs-keyword\">new</span> Date.toString();<br>Date deadline;<span class=\"hljs-comment\">//However,this variable does not refer to any object.</span><br>deadline = <span class=\"hljs-keyword\">new</span> Date();<span class=\"hljs-comment\">//ok.</span><br>deadline = <span class=\"hljs-keyword\">null</span>;<span class=\"hljs-comment\">// refer to no object</span><br>deadline = birthday;<span class=\"hljs-comment\">//they refer to the same object</span><br></code></pre></td></tr></table></figure>\n<p><strong>Class LocalDate</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.msfasr.java_startup;<br><br><span class=\"hljs-keyword\">import</span> java.time.DayOfWeek;<br><span class=\"hljs-keyword\">import</span> java.time.LocalDate;<br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Calendar</span> </span>&#123;<br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span><br>    </span>&#123;<br>        LocalDate currentDate = LocalDate.now();<br>        System.out.println(<span class=\"hljs-string\">\"Mon Tue Wed Thu Fri Sat Sun\"</span>);<br>        <span class=\"hljs-keyword\">int</span> month=currentDate.getMonthValue();<br>        <span class=\"hljs-keyword\">int</span> today=currentDate.getDayOfMonth();<br>        currentDate = currentDate.minusDays(today-<span class=\"hljs-number\">1</span>);<br>        <span class=\"hljs-keyword\">int</span> dayOfWeek = currentDate.getDayOfWeek().getValue();<br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;dayOfWeek-<span class=\"hljs-number\">1</span>;i++)<br>            System.out.printf(<span class=\"hljs-string\">\"    \"</span>);<br>        <span class=\"hljs-keyword\">while</span>(currentDate.getMonthValue() == month)<br>        &#123;<br>            <span class=\"hljs-keyword\">if</span>(currentDate.getDayOfMonth()==today)<br>            &#123;<br>                System.out.printf(<span class=\"hljs-string\">\"*\"</span>);<br>            &#125;<br>            <span class=\"hljs-keyword\">else</span><br>                System.out.printf(<span class=\"hljs-string\">\" \"</span>);<br>            System.out.printf(<span class=\"hljs-string\">\"%-3d\"</span>,currentDate.getDayOfMonth());<br>            <span class=\"hljs-keyword\">if</span>(currentDate.getDayOfWeek().getValue()==<span class=\"hljs-number\">7</span>)<br>                System.out.println();<br>            currentDate = currentDate.plusDays(<span class=\"hljs-number\">1</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h3 id=\"Java-class-methods\"><a href=\"#Java-class-methods\" class=\"headerlink\" title=\"Java class methods\"></a>Java class methods</h3><h4 id=\"Main-method-1\"><a href=\"#Main-method-1\" class=\"headerlink\" title=\"Main method\"></a>Main method</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.msfasr.java_startup;<span class=\"hljs-comment\">//The code is included in a package</span><br><br><span class=\"hljs-keyword\">import</span> java.util.Scanner;<span class=\"hljs-comment\">//Inport Scanner for input</span><br><br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">HelloWorld</span> </span>&#123;<span class=\"hljs-comment\">//The main method is contained in a class</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>&#123;<span class=\"hljs-comment\">//Be aware of the define of the main method</span><br>        System.out.println(<span class=\"hljs-string\">\"Hello,world\"</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h4 id=\"Class-Methods\"><a href=\"#Class-Methods\" class=\"headerlink\" title=\"Class Methods\"></a>Class Methods</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">printCalendar</span><span class=\"hljs-params\">()</span><br></span>&#123;<br>    ......<br>&#125;<span class=\"hljs-comment\">//static method, do not operate fields</span><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">changeFormat</span><span class=\"hljs-params\">()</span><br></span>&#123;<br>    ......<br>&#125;<span class=\"hljs-comment\">//this method must based on an object</span><br></code></pre></td></tr></table></figure>\n<h4 id=\"Method-parameters\"><a href=\"#Method-parameters\" class=\"headerlink\" title=\"Method parameters\"></a>Method parameters</h4><p>Java programming language can only <strong>Call by value</strong> .</p>\n<p>However, when the parameter is an <code>OBJECT</code> , methods can change values of OBJECTS.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">tripleSalary</span><span class=\"hljs-params\">(Employee x)</span><br></span>&#123;<br>    x.raiseSalary(<span class=\"hljs-number\">200</span>);<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>So,a method <strong>can</strong>:</p>\n<p>Change the status of an object.</p>\n<p><strong>Can’t</strong>:</p>\n<p>Change values of variable.</p>\n<p>Make an object refer to an new object.</p>\n<h3 id=\"Package\"><a href=\"#Package\" class=\"headerlink\" title=\"Package\"></a>Package</h3><p>Java package is a sort of set contains several <strong>class</strong>.</p>\n<p>Package standard name:</p>\n<p>com.(company name).(project name)</p>\n<p>Such as:</p>\n<p>com.msfasr.javaStartup</p>\n<h4 id=\"Importing-package\"><a href=\"#Importing-package\" class=\"headerlink\" title=\"Importing package\"></a>Importing package</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">import</span> java.util.Scanner;<span class=\"hljs-comment\">//import a class</span><br><span class=\"hljs-keyword\">import</span> java.util.*       <span class=\"hljs-comment\">//import a package</span><br></code></pre></td></tr></table></figure>\n<p>When there is a class name used by several package, you need to write the package name when using.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">import</span> java.util.Date;<br><span class=\"hljs-keyword\">import</span> java.sql.Date;<br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Main</span></span>&#123;<br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span></span>&#123;<br>        <span class=\"hljs-keyword\">var</span> deadline = <span class=\"hljs-keyword\">new</span> java.util.Date();<br>        <span class=\"hljs-keyword\">var</span> today = <span class=\"hljs-keyword\">new</span> java.sql.Date(. . . );<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>\n<h4 id=\"Static-importing\"><a href=\"#Static-importing\" class=\"headerlink\" title=\"Static importing\"></a>Static importing</h4><p>By using static importing, you can import a sort of static method and field.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-keyword\">static</span> java.lang.System.*;<br><span class=\"hljs-comment\">//then, you can use:</span><br>out.println(<span class=\"hljs-string\">\"123\"</span>);<span class=\"hljs-comment\">//System.out</span><br>exit(<span class=\"hljs-number\">0</span>);<span class=\"hljs-comment\">//System.exit</span><br></code></pre></td></tr></table></figure>\n<h4 id=\"Adding-class-into-a-package\"><a href=\"#Adding-class-into-a-package\" class=\"headerlink\" title=\"Adding class into a package\"></a>Adding class into a package</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.msfasr.javaStartup;<br><span class=\"hljs-comment\">//......</span><br></code></pre></td></tr></table></figure>\n<p>The class is now in the package.</p>\n<p><strong>Class annotation</strong> </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**<br> * This class is built for Studying Java!<br> * This means I will enter a new field!<br> */</span><br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Main</span> </span>&#123;<br>\t<span class=\"hljs-comment\">//......</span><br>&#125;<br></code></pre></td></tr></table></figure>\n<h3 id=\"Class-Designing-tips\"><a href=\"#Class-Designing-tips\" class=\"headerlink\" title=\"Class Designing tips\"></a>Class Designing tips</h3><p>1.Guarantee that the <strong>data</strong> is private.</p>\n<p>2.<code>Warning</code>: <strong>You must initialize the field!!!</strong></p>\n<p>3.Do not use so much basic type variable!!!</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">//......</span><br><span class=\"hljs-keyword\">private</span> String street;<br><span class=\"hljs-keyword\">private</span> String city;<br><span class=\"hljs-keyword\">private</span> String state;<span class=\"hljs-comment\">//bad</span><br><span class=\"hljs-comment\">//......</span><br><br><br><span class=\"hljs-keyword\">private</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">address</span><br></span>&#123;<br>    <span class=\"hljs-keyword\">private</span> String street;<br>\t<span class=\"hljs-keyword\">private</span> String city;<br>\t<span class=\"hljs-keyword\">private</span> String state;   <span class=\"hljs-comment\">//good</span><br>&#125;<br></code></pre></td></tr></table></figure>\n<p>4.not all the fields are changeable.</p>\n<p>5.Resolve the classes with so many responsibility.</p>\n<p>6.The name should refer their responsibility.</p>\n<p>7.Use classes unchangeable at first.</p>\n<h3 id=\"Class-Inheritance\"><a href=\"#Class-Inheritance\" class=\"headerlink\" title=\"Class Inheritance\"></a>Class Inheritance</h3><h4 id=\"Class-Superclass-Subclass\"><a href=\"#Class-Superclass-Subclass\" class=\"headerlink\" title=\"Class, Superclass, Subclass\"></a>Class, Superclass, Subclass</h4><p><strong>A subclass define:</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Manager</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Employee</span><br></span>&#123;<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">double</span> bonus;<br>    <br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setBonus</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">double</span> aBonus)</span><br>    </span>&#123;<br>        bonus=aBonus;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h4 id=\"Covering-methods\"><a href=\"#Covering-methods\" class=\"headerlink\" title=\"Covering methods\"></a>Covering methods</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Manager</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Employee</span><br></span>&#123;<br>    <span class=\"hljs-comment\">//...</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">double</span> <span class=\"hljs-title\">getSalary</span><span class=\"hljs-params\">()</span><br>    </span>&#123;<br>        <span class=\"hljs-keyword\">int</span> aSalary= <span class=\"hljs-keyword\">super</span>.getSalary();<br>        <span class=\"hljs-keyword\">return</span> aSalary + bonus;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h4 id=\"Subclass-constructor\"><a href=\"#Subclass-constructor\" class=\"headerlink\" title=\"Subclass constructor\"></a>Subclass constructor</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Manager</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Employee</span><br></span>&#123;<br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">Manager</span><span class=\"hljs-params\">(String name , <span class=\"hljs-keyword\">double</span> salary, <span class=\"hljs-keyword\">int</span> year, <span class=\"hljs-keyword\">int</span> month, <span class=\"hljs-keyword\">int</span> day)</span><br>    </span>&#123;<br>        <span class=\"hljs-keyword\">super</span>(name,salary,year, month, day);<br>        bonus = <span class=\"hljs-number\">0</span> ;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h4 id=\"Class-Array-with-dynamic-binding\"><a href=\"#Class-Array-with-dynamic-binding\" class=\"headerlink\" title=\"Class Array with dynamic binding\"></a>Class Array with dynamic binding</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">//...</span><br>Manager boss = <span class=\"hljs-keyword\">new</span> Manager(<span class=\"hljs-string\">\"Makinohara\"</span>,<span class=\"hljs-number\">80000000</span>,<span class=\"hljs-number\">2001</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">13</span>);<br>boss.setBonus(<span class=\"hljs-number\">200000</span>);<br><br><span class=\"hljs-comment\">//then, define an array of employees</span><br><br><span class=\"hljs-keyword\">var</span> staff[] = <span class=\"hljs-keyword\">new</span> Employee[<span class=\"hljs-number\">3</span>];<br><br>staff[<span class=\"hljs-number\">0</span>] = boss;<br>staff[<span class=\"hljs-number\">1</span>] = <span class=\"hljs-keyword\">new</span> Employee(<span class=\"hljs-string\">\"Mai\"</span>,<span class=\"hljs-number\">20000</span>,<span class=\"hljs-number\">2000</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>);<br>staff[<span class=\"hljs-number\">2</span>] = <span class=\"hljs-keyword\">new</span> Employee(<span class=\"hljs-string\">\"Sakuta\"</span>,<span class=\"hljs-number\">10</span>,<span class=\"hljs-number\">2001</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">13</span>);<br><br><span class=\"hljs-keyword\">for</span>(Employee e : staff)<span class=\"hljs-comment\">//for:each circulation</span><br>&#123;<br>    System.out.println(e.getName()+<span class=\"hljs-string\">\":\"</span>+e.getSalary);<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>The compiler will choose the right method to get salary, this is <strong>Dynamic Binding</strong>.</p>\n<h4 id=\"Polymorphism\"><a href=\"#Polymorphism\" class=\"headerlink\" title=\"Polymorphism\"></a>Polymorphism</h4><p>In java, the object variable is <strong>polymorphic</strong>, it means a variable of an object can refer all the <strong>subclass object</strong>. </p>\n<h4 id=\"Java-Method-Calling\"><a href=\"#Java-Method-Calling\" class=\"headerlink\" title=\"Java Method Calling\"></a>Java Method Calling</h4><ol>\n<li><p>The complier gets the method list of <strong>a class and its superclass</strong>.</p>\n</li>\n<li><p>The complier confirms the <strong>parameter types</strong> of the method which is being called.</p>\n</li>\n<li><p>The JVM calls the method.</p>\n</li>\n</ol>\n<h4 id=\"Stop-Inheriting-final\"><a href=\"#Stop-Inheriting-final\" class=\"headerlink\" title=\"Stop Inheriting : final.\"></a>Stop Inheriting : <code>final</code>.</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Boss</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Manager</span>//<span class=\"hljs-title\">the</span> <span class=\"hljs-title\">class</span> <span class=\"hljs-title\">can</span>'<span class=\"hljs-title\">t</span> <span class=\"hljs-title\">be</span> <span class=\"hljs-title\">inheriting</span><br></span>&#123;<br>    <span class=\"hljs-comment\">//...</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">final</span> String <span class=\"hljs-title\">getName</span><span class=\"hljs-params\">()</span><span class=\"hljs-comment\">//the method can't be covered.</span><br>    </span>&#123;<br>        <span class=\"hljs-comment\">//......</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h3 id=\"Forced-type-conversion\"><a href=\"#Forced-type-conversion\" class=\"headerlink\" title=\"Forced type conversion\"></a>Forced type conversion</h3><p>In <em>Class Array with dynamic binding</em>, we created an array contains Manager and Employee. However, the array is a Employee array, so we need to use Forced type conversion to convert a Employee object to a Manager object.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">Manager boss = (Manager)staff[<span class=\"hljs-number\">0</span>];<br></code></pre></td></tr></table></figure>\n<p>But, when you are trying to convert a object <strong>from top to bottom</strong>, it won’t work.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">Manager boss = (Manager)staff[<span class=\"hljs-number\">1</span>];<span class=\"hljs-comment\">// Not work</span><br><br><span class=\"hljs-comment\">//So,we can avoid this case by using:</span><br><span class=\"hljs-keyword\">if</span>(staff[<span class=\"hljs-number\">1</span>] <span class=\"hljs-keyword\">instanceof</span> Manager)<br>&#123;<br>    <br>    boss = (Manager)staff[<span class=\"hljs-number\">1</span>];<br>    <br>    <span class=\"hljs-comment\">//......</span><br>&#125;<br></code></pre></td></tr></table></figure>\n<h3 id=\"Abstract-Class\"><a href=\"#Abstract-Class\" class=\"headerlink\" title=\"Abstract Class\"></a>Abstract Class</h3><p>Abstract class is a sort of class that is more general. Such as Person can contain Employee and Student.</p>\n<p>The define of an abstract class</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">abstract</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Person</span><br></span>&#123;<br>    <span class=\"hljs-keyword\">private</span> String name;<br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">Person</span> <span class=\"hljs-params\">(String name)</span><br>    </span>&#123;<br>        <span class=\"hljs-keyword\">this</span>.name = name;<br>\t&#125;<br>    <br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">abstract</span> String <span class=\"hljs-title\">getName</span><span class=\"hljs-params\">()</span><br>    </span>&#123;<br>        <span class=\"hljs-keyword\">return</span> name;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p><strong>Instantiation is not allowed in an Abstract class.</strong> It means you can’t :</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">var</span> aP = <span class=\"hljs-keyword\">new</span> Person(<span class=\"hljs-string\">\"Deja vu\"</span>);<br><span class=\"hljs-comment\">// you can do this:</span><br><br>Person stu1 = <span class=\"hljs-keyword\">new</span> student(<span class=\"hljs-string\">\"Deja vu\"</span>,<span class=\"hljs-string\">\"Computer Driving\"</span>);<br></code></pre></td></tr></table></figure>\n<h3 id=\"Access-modifier\"><a href=\"#Access-modifier\" class=\"headerlink\" title=\"Access modifier\"></a>Access modifier</h3><p>public : this method or field can be used by <code>all classes</code>.</p>\n<p>private: this method or field can only used by the <code>same class</code>, not for subclasses.</p>\n<p>protected: this method or field can used by <code>this package</code> and <code>all subclass</code></p>\n<p>no modifier: this method or field can be used by all the methods in the <code>same package</code>!!</p>\n<h3 id=\"Object-the-superclass-of-all-classes\"><a href=\"#Object-the-superclass-of-all-classes\" class=\"headerlink\" title=\"Object: the superclass of all classes\"></a>Object: the superclass of all classes</h3><p>You can use a variable whose type is <code>Object</code> to refer <code>objects of all classes</code>.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">Object obj = <span class=\"hljs-keyword\">new</span> Employee(<span class=\"hljs-string\">\"Harry Potter\"</span>,<span class=\"hljs-number\">300000</span>);<br></code></pre></td></tr></table></figure>\n<p>But, when you are trying to operate the object or using methods, you need to do <code>type conversing</code> .</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">Employee e = (Employee)obj;<br></code></pre></td></tr></table></figure>\n<h4 id=\"equals\"><a href=\"#equals\" class=\"headerlink\" title=\"equals\"></a><strong><code>equals</code></strong></h4><p><code>equals</code> is a method to compare whether two objects are equal.</p>\n<p>The <code>equals</code> method in Class Object is used to compare two objects are equal or not, and if two objects reference are same, the method returns true.</p>\n<h5 id=\"Equals-method-writing\"><a href=\"#Equals-method-writing\" class=\"headerlink\" title=\"Equals method writing\"></a>Equals method writing</h5><h6 id=\"Standard\"><a href=\"#Standard\" class=\"headerlink\" title=\"Standard:\"></a>Standard:</h6><ol>\n<li><strong>Reflexivity</strong> : x.equals(x) == true </li>\n<li><strong>Symmetry</strong> : x.equals(y) == y.equals(x)</li>\n<li><strong>Transitivity</strong> : x.equals(y) == true , y.equals(z) == true -&gt; x.equals(z) == true.</li>\n<li><strong>Consistency</strong> : If x and y did not change , the equality do not change.</li>\n<li><strong>x.equals(null) == false.</strong></li>\n</ol>\n<h6 id=\"Advice-of-designing-an-equals-method\"><a href=\"#Advice-of-designing-an-equals-method\" class=\"headerlink\" title=\"Advice of designing an equals method\"></a>Advice of designing an equals method</h6><p>See <em>Core Java Vol.1</em> , 11th edition , Page 178.</p>\n<h4 id=\"Hash-code\"><a href=\"#Hash-code\" class=\"headerlink\" title=\"Hash code\"></a>Hash code</h4><p>hashcode() : returns an integer , the hash code , that refers the object.</p>\n<p>Object.hash(Obj1,Obj2,……,ObjN) ;</p>\n<p>Object.hashcode(Obj);</p>\n<h4 id=\"toString-NaN\"><a href=\"#toString-NaN\" class=\"headerlink\" title=\"toString\"></a>toString</h4><p>Object.toString(); Print a string that consist of all fields. Needs you write yourself.    </p>\n<h4 id=\"ArrayList\"><a href=\"#ArrayList\" class=\"headerlink\" title=\"ArrayList\"></a>ArrayList</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">ArrayList&lt;Employee&gt; staff = <span class=\"hljs-keyword\">new</span> ArrayList&lt;Employee&gt;();<br><br><span class=\"hljs-comment\">//add an object:</span><br>staff.add(Object);<br>staff.add(<span class=\"hljs-keyword\">new</span> Employee(......));<br><br>staff.size();<span class=\"hljs-comment\">//returns the number of objects.</span><br></code></pre></td></tr></table></figure>\n<p><strong>Compare: ArrayList and Array</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">stuff.set(i,harry);<span class=\"hljs-comment\">//stuff[i] = hurry</span><br>Employee ep = stuff.get(i);<span class=\"hljs-comment\">// Employee ep = stuff[i]</span><br>stuff.add(i,E);<span class=\"hljs-comment\">//insert E to position i , move the rest. </span><br>stuff.remove(i);<span class=\"hljs-comment\">//delete Element at position i, move the rest</span><br></code></pre></td></tr></table></figure>\n<h3 id=\"Object-Wrapper\"><a href=\"#Object-Wrapper\" class=\"headerlink\" title=\"Object Wrapper\"></a>Object Wrapper</h3><p>Wrapper class is a sort of class that <strong>corresponding to basic data types</strong>. </p>\n<p>Such as:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">var</span> list = <span class=\"hljs-keyword\">new</span> ArrayList&lt;Integer&gt;();<br>list.add(<span class=\"hljs-number\">3</span>);          <span class=\"hljs-comment\">//Autoboxing</span><br><span class=\"hljs-keyword\">int</span> n = list.get(i);  <span class=\"hljs-comment\">//Autounboxing</span><br></code></pre></td></tr></table></figure>\n<h2 id=\"Interface\"><a href=\"#Interface\" class=\"headerlink\" title=\"Interface\"></a>Interface</h2><h3 id=\"Realize-an-interface\"><a href=\"#Realize-an-interface\" class=\"headerlink\" title=\"Realize an interface\"></a>Realize an interface</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Employee</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">Comparable</span>&lt;<span class=\"hljs-title\">Employee</span>&gt;\t //在实现接口时加上类名，可以可以防止对<span class=\"hljs-title\">Object</span>类型转换<br></span>&#123;<br>    <span class=\"hljs-comment\">//......</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">compareTo</span><span class=\"hljs-params\">(Employee other)</span><br>    </span>&#123;<br>        <span class=\"hljs-keyword\">return</span> Double.compare(salary,other.salary);<br>    &#125;<br>    <span class=\"hljs-comment\">//......</span><br>&#125;<br></code></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Main</span> </span>&#123;<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span>  </span>&#123;<br>        <span class=\"hljs-keyword\">var</span> staff = <span class=\"hljs-keyword\">new</span> Employee[<span class=\"hljs-number\">3</span>];<br>        staff[<span class=\"hljs-number\">0</span>] = <span class=\"hljs-keyword\">new</span> Employee(<span class=\"hljs-string\">\"Mark\"</span>,<span class=\"hljs-number\">12000</span>,<span class=\"hljs-number\">2020</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">20</span>);<br>        staff[<span class=\"hljs-number\">1</span>] = <span class=\"hljs-keyword\">new</span> Employee(<span class=\"hljs-string\">\"Lin\"</span>,<span class=\"hljs-number\">10000</span>,<span class=\"hljs-number\">2020</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">20</span>);<br>        staff[<span class=\"hljs-number\">2</span>] = <span class=\"hljs-keyword\">new</span> Employee(<span class=\"hljs-string\">\"Coal\"</span>,<span class=\"hljs-number\">41230</span>,<span class=\"hljs-number\">2020</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">20</span>);<br>        Arrays.sort(staff);<br>        <span class=\"hljs-keyword\">return</span>;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>接口不是一种类，所以不能使用new实例化接口。</p>\n<p>接口的一个样例：</p>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs angelscript\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">interface</span> <span class=\"hljs-symbol\">Comparable</span>&lt;<span class=\"hljs-symbol\">T</span>&gt;&#123;<br>\t<span class=\"hljs-keyword\">default</span> <span class=\"hljs-built_in\">int</span> compareTo(T other)&#123;  <span class=\"hljs-comment\">//一种默认方法。</span><br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>\t&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h3 id=\"接口与回调\"><a href=\"#接口与回调\" class=\"headerlink\" title=\"接口与回调\"></a>接口与回调</h3><p>一个Listener接口：</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\">public<span class=\"hljs-built_in\"> interface </span>ActionListener<br>&#123;<br>\tvoid actionPerformed(ActionEvent event);<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>如果想要调用这个接口，则可以在一个类中实现：</p>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs angelscript\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-symbol\">TimePrinter</span> <span class=\"hljs-symbol\">implements</span> <span class=\"hljs-symbol\">ActionListener</span>&#123;<br>\t<span class=\"hljs-keyword\">public</span> <span class=\"hljs-built_in\">void</span> actionPerformed(ActionEvent event)&#123;          <span class=\"hljs-comment\">//在类中实现这个接口</span><br>\t\tSystem.<span class=\"hljs-keyword\">out</span>.println(<span class=\"hljs-number\">123</span>);<br>\t&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>实现回调的方法：</p>\n<figure class=\"highlight haxe\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs haxe\"><span class=\"hljs-keyword\">var</span> listener = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-type\">TimePrinter</span>;<br><span class=\"hljs-keyword\">var</span> timer = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-type\">Timer</span>(<span class=\"hljs-number\">1000</span>,listener);<br><span class=\"hljs-comment\">//......</span><br><span class=\"hljs-comment\">//timer每1000毫秒通知实现了ActionListener接口的类，这个类就会实现接口提供的函数actionPerformed，完成一个回调。</span><br></code></pre></td></tr></table></figure>\n<h2 id=\"Lambda-表达式\"><a href=\"#Lambda-表达式\" class=\"headerlink\" title=\"Lambda 表达式\"></a>Lambda 表达式</h2><p>一种自定义代码块，用于实现某些计算或执行某些函数</p>\n<figure class=\"highlight haxe\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs haxe\"><span class=\"hljs-comment\">//比如，要计算a.length() - b.length()</span><br>(<span class=\"hljs-keyword\">String</span> a, <span class=\"hljs-keyword\">String</span> b)<br>\t-&gt;a.length()-b.length()<br><span class=\"hljs-comment\">//或者：</span><br>(<span class=\"hljs-keyword\">String</span> a, <span class=\"hljs-keyword\">String</span> b)-&gt;<br>&#123;<br>\t<span class=\"hljs-keyword\">if</span>(a.length&lt;b.length)<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span>;<br>\t<span class=\"hljs-comment\">//......</span><br>&#125;<br><span class=\"hljs-comment\">//执行函数：</span><br><span class=\"hljs-keyword\">var</span> timer = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-type\">Timer</span>(<span class=\"hljs-number\">1000</span>,event -&gt;System.out.println(event))<br></code></pre></td></tr></table></figure>\n<p>使用lambda来使方法实现函数式接口，避免多余的重写方法：</p>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs arduino\">package com.icsii.interfaceDemo;<br><br><span class=\"hljs-keyword\">public</span> interface printer &#123;<br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">printString</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">String</span> something)</span></span>;<br>&#125;<br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">print</span> &#123;</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">printSomething</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">String</span> something,printer aPrinter)</span></span>&#123;<br>        aPrinter.printString(something);<br>    &#125;<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">String</span>[] args)</span> </span>&#123;<br>        <span class=\"hljs-built_in\">print</span> Demo1 = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">print</span>();<br>        Demo1.printSomething(<span class=\"hljs-string\">\"123\"</span>,(<span class=\"hljs-keyword\">String</span> something)-&gt;System.out.<span class=\"hljs-built_in\">println</span>(something));<br>    &#125;<br>&#125;<br><br>(接口接收的参数)-&gt;&#123;接口实现的方法&#125;<br></code></pre></td></tr></table></figure>\n<h2 id=\"Java-I-O\"><a href=\"#Java-I-O\" class=\"headerlink\" title=\"Java I/O\"></a>Java I/O</h2><h4 id=\"Input-scanner\"><a href=\"#Input-scanner\" class=\"headerlink\" title=\"Input(scanner)\"></a>Input(scanner)</h4><p>Firstly, import a class <em>scanner</em> .</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">import</span> java.util.Scanner;<br></code></pre></td></tr></table></figure>\n<p>This class has these basic operations :</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">Scanner sc = <span class=\"hljs-keyword\">new</span> Scanner(System.in);<span class=\"hljs-comment\">//new a scanner</span><br>String name = sc.nextLine();<span class=\"hljs-comment\">//Get a line</span><br><span class=\"hljs-keyword\">int</span> age = sc.nextInt();<span class=\"hljs-comment\">//Get the next int</span><br>sc.close();<span class=\"hljs-comment\">//Close the scanner when used,or it will report an error.</span><br></code></pre></td></tr></table></figure>\n<h5 id=\"Other-measures\"><a href=\"#Other-measures\" class=\"headerlink\" title=\"Other measures\"></a>Other measures</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-function\">String <span class=\"hljs-title\">nextLine</span><span class=\"hljs-params\">()</span></span>;<span class=\"hljs-comment\">//read next line;</span><br><span class=\"hljs-function\">String <span class=\"hljs-title\">next</span><span class=\"hljs-params\">()</span></span>;<span class=\"hljs-comment\">//read next word, use blank as separator.</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">nextInt</span><span class=\"hljs-params\">()</span></span>;<span class=\"hljs-comment\">//read next int</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">boolean</span> <span class=\"hljs-title\">hasNext</span><span class=\"hljs-params\">()</span></span>;<span class=\"hljs-comment\">//if there's words in line</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">boolean</span> <span class=\"hljs-title\">hasNextInt</span><span class=\"hljs-params\">()</span></span>;<br></code></pre></td></tr></table></figure>\n<h5 id=\"Read-files\"><a href=\"#Read-files\" class=\"headerlink\" title=\"Read files\"></a>Read files</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">Scanner sc = <span class=\"hljs-keyword\">new</span> Scanner(<span class=\"hljs-string\">\"Path\"</span>,StandardCharsets.UTF_8);<span class=\"hljs-comment\">//read file</span><br>PrintWriter out = <span class=\"hljs-keyword\">new</span> PrintWriter(<span class=\"hljs-string\">\"Path\"</span>,StandardCharsets.UTF_8);<span class=\"hljs-comment\">//Write file</span><br>out.print();<span class=\"hljs-comment\">//Warning: this method will rewrite the file!!!</span><br></code></pre></td></tr></table></figure>\n<h4 id=\"Output-System-out\"><a href=\"#Output-System-out\" class=\"headerlink\" title=\"Output (System.out)\"></a>Output (System.out)</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">System.out.println(<span class=\"hljs-number\">1111</span>);<span class=\"hljs-comment\">//Print and return</span><br>System.out.print(<span class=\"hljs-number\">1111</span>);<span class=\"hljs-comment\">//Print without returning</span><br>System.out.write(<span class=\"hljs-number\">2222</span>);<span class=\"hljs-comment\">//byte output</span><br>System.out.printf(<span class=\"hljs-string\">\"%+8.3f\\n\"</span>, <span class=\"hljs-number\">3.14</span>);<span class=\"hljs-comment\">//Print according to format</span><br></code></pre></td></tr></table></figure>\n<h2 id=\"Java-variable\"><a href=\"#Java-variable\" class=\"headerlink\" title=\"Java variable :\"></a>Java variable :</h2><h3 id=\"Variable-types\"><a href=\"#Variable-types\" class=\"headerlink\" title=\"Variable types\"></a>Variable types</h3><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>Variable type</th>\n<th>value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>int</td>\n<td>4byte,-2147483648~2147483647</td>\n</tr>\n<tr>\n<td>short</td>\n<td>2byte</td>\n</tr>\n<tr>\n<td>long</td>\n<td>8byte</td>\n</tr>\n<tr>\n<td>byte</td>\n<td>1byte</td>\n</tr>\n<tr>\n<td>float</td>\n<td>4byte</td>\n</tr>\n<tr>\n<td>double</td>\n<td>8byte</td>\n</tr>\n<tr>\n<td>char(UTF-16)</td>\n<td>16byte(UTF-16 character )</td>\n</tr>\n<tr>\n<td>boolean</td>\n<td>true/false</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>Caution: A variable must be initialized ,or the compiler will put an ERROR.</p>\n<p>In java, key word <code>final</code> refers a variable is constant.</p>\n<p><strong>enum</strong>:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">enum</span> Size &#123;Small,Medium&#125;;<span class=\"hljs-comment\">//enum is a CLASS!</span><br>Size s = Size.Small;<span class=\"hljs-comment\">//it can only use values defined above.</span><br></code></pre></td></tr></table></figure>\n<h4 id=\"String\"><a href=\"#String\" class=\"headerlink\" title=\"String\"></a>String</h4><p><strong>str.substring</strong> can extract a part of string .</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">String greeting = <span class=\"hljs-string\">\"Hello\"</span>;<br>String s = greeting.substring(<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">3</span>);<span class=\"hljs-comment\">//s = \"Hel\"</span><br>String str = greeting+s;<br></code></pre></td></tr></table></figure>\n<p> str.equals compares two strings:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-string\">\"Hello\"</span>.equals(greeting);<br></code></pre></td></tr></table></figure>\n<p>Caution: DO NOT USE == !</p>\n<h5 id=\"Other-measures-1\"><a href=\"#Other-measures-1\" class=\"headerlink\" title=\"Other measures\"></a>Other measures</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">str.length(); <span class=\"hljs-comment\">//return length</span><br>str.blank(); <span class=\"hljs-comment\">// judge if the string is empty</span><br>str.join(<span class=\"hljs-string\">\"/\"</span>,str1,str2,str3......);<span class=\"hljs-comment\">// use / as separator , combine strings</span><br>String.format(<span class=\"hljs-string\">\"%f\"</span>,a);<span class=\"hljs-comment\">//returns a String with format</span><br></code></pre></td></tr></table></figure>\n<h4 id=\"Big-numbers\"><a href=\"#Big-numbers\" class=\"headerlink\" title=\"Big numbers\"></a>Big numbers</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">BigInteger;<br>BigDecimal;<br>num1.add(num2);<br><span class=\"hljs-comment\">//use add subtract multiply devide mod</span><br></code></pre></td></tr></table></figure>\n<h3 id=\"Array\"><a href=\"#Array\" class=\"headerlink\" title=\"Array\"></a>Array</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">int</span>[] a = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">int</span>[<span class=\"hljs-number\">100</span>];<br><span class=\"hljs-keyword\">int</span>[] a = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">int</span>[n];<br><span class=\"hljs-keyword\">int</span>[] a = &#123;<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">7</span>,<span class=\"hljs-number\">7</span>,<span class=\"hljs-number\">9</span>&#125;;<br>a = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">int</span>[] &#123;<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">7</span>,<span class=\"hljs-number\">9</span>&#125;;<br>a.length();<br>Array.sort(a);<br>Array.binarySearch(xxx[] a,xxx v);<br>Array.binarySearch(xxx[] a,<span class=\"hljs-keyword\">int</span> start,<span class=\"hljs-keyword\">int</span> end,xxx v);<br>Array.fill(xxx[] a,xxx v);<br><span class=\"hljs-keyword\">int</span> a[][] = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">int</span>[<span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">3</span>];<br><span class=\"hljs-keyword\">int</span>[] temp = a[<span class=\"hljs-number\">1</span>];<br>a[<span class=\"hljs-number\">1</span>]=a[<span class=\"hljs-number\">2</span>];<br>a[<span class=\"hljs-number\">2</span>]=temp;<span class=\"hljs-comment\">//exchange 2 lines</span><br><span class=\"hljs-keyword\">int</span>[][] feb = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">int</span>[<span class=\"hljs-number\">100</span>][];<br><span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> n=<span class=\"hljs-number\">0</span>;n&lt;<span class=\"hljs-number\">100</span>;n++)<br>    feb[n]=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">int</span>[n+<span class=\"hljs-number\">1</span>];<span class=\"hljs-comment\">//regard feb[n] as an array name.</span><br></code></pre></td></tr></table></figure>\n<p><strong>Array copy:</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">int</span>[] a = &#123;<span class=\"hljs-number\">1</span>&#125;;<br><span class=\"hljs-keyword\">int</span>[] b = a;<br>a[<span class=\"hljs-number\">0</span>]=<span class=\"hljs-number\">5</span>;<span class=\"hljs-comment\">//now,b[0] is also 5</span><br><span class=\"hljs-keyword\">int</span>[] ca = Arrays.copyOf(a,<span class=\"hljs-number\">5</span>);<span class=\"hljs-comment\">//then we get a new array, the size is 5.</span><br></code></pre></td></tr></table></figure>\n<h2 id=\"Java-sentences\"><a href=\"#Java-sentences\" class=\"headerlink\" title=\"Java sentences\"></a>Java sentences</h2><h3 id=\"For\"><a href=\"#For\" class=\"headerlink\" title=\"For\"></a>For</h3><h4 id=\"For-each\"><a href=\"#For-each\" class=\"headerlink\" title=\"For each\"></a><strong>For each</strong></h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> element:a)<br>\tSystem.out.println(element);<br></code></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Java-Language\"><a href=\"#Java-Language\" class=\"headerlink\" title=\"Java Language\"></a>Java Language</h1><h4 id=\"Tiny-notes\"><a href=\"#Tiny-notes\" class=\"headerlink\" title=\"Tiny notes\"></a>Tiny notes</h4><p>1B=8bit</p>\n<p>Java have three systems：</p>\n<ul>\n<li>Java SE（J2SE）（Java2 Platform Standard Edition）</li>\n<li>Java EE  (J2EE)     (Java 2 Platform,Enterprise Edition)</li>\n<li>Java ME (J2ME)   (Java 2 Platform Micro Edition)</li>\n</ul>\n<h2 id=\"Java-class\"><a href=\"#Java-class\" class=\"headerlink\" title=\"Java class\"></a>Java class</h2><h3 id=\"The-define-of-a-java-class\"><a href=\"#The-define-of-a-java-class\" class=\"headerlink\" title=\"The define of a java class\"></a>The define of a java class</h3><p>You can see it’s like C++ class in some ways.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Employee</span><br></span>&#123;<br>    <span class=\"hljs-comment\">//status(variable)</span><br>    <span class=\"hljs-keyword\">private</span> String name;<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">double</span> salary;<br>    <br>    <span class=\"hljs-comment\">//constructor</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">Employee</span><span class=\"hljs-params\">(String n,<span class=\"hljs-keyword\">double</span> s)</span><br>    </span>&#123;<br>        name = n;<br>        salary = s;<br>    &#125;<br>    <br>    <span class=\"hljs-comment\">//method</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">getName</span><span class=\"hljs-params\">()</span><br>    </span>&#123;<br>        <span class=\"hljs-keyword\">return</span> name;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h5 id=\"Class-Fields\"><a href=\"#Class-Fields\" class=\"headerlink\" title=\"Class Fields\"></a>Class Fields</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">private</span> String name;<span class=\"hljs-comment\">//private refers this variable can only access by it's own method.</span><br><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">double</span> salary;<br></code></pre></td></tr></table></figure>\n<h5 id=\"Class-constructor\"><a href=\"#Class-constructor\" class=\"headerlink\" title=\"Class constructor\"></a>Class constructor</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">Employee</span><span class=\"hljs-params\">(String n , <span class=\"hljs-keyword\">double</span> s)</span><br></span>&#123;<br>    name =n;<br>    salary =s;<br><br><br><span class=\"hljs-comment\">//use constructor:</span><br><span class=\"hljs-keyword\">new</span> Employee(<span class=\"hljs-string\">\"Jamws Bond\"</span>,<span class=\"hljs-number\">10000</span>);<br><span class=\"hljs-comment\">//there can be serveral constructors in a class.</span><br>&#125;<br></code></pre></td></tr></table></figure>\n<h3 id=\"Constructor\"><a href=\"#Constructor\" class=\"headerlink\" title=\"Constructor\"></a>Constructor</h3><p>Java offers several mechanisms of constructing a new object.</p>\n<p>This function is called as <strong>overloading</strong>. If there’s several functions with <strong>same name but different parameters</strong> ,  the complicator will choose a function .This called <strong>overloading resolution</strong> .</p>\n<p>Ok, let’s see constructor.</p>\n<p><strong>Default field initialize:</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">Employee John = <span class=\"hljs-keyword\">new</span> Employee();<br></code></pre></td></tr></table></figure>\n<p>All the number will be 0, boolean will be <code>false</code>, object reference will be <code>null</code>. </p>\n<p>Caution: This is <strong>not a good habit</strong> to initialize a new object with default field.</p>\n<h4 id=\"Constructor-without-parameter\"><a href=\"#Constructor-without-parameter\" class=\"headerlink\" title=\"Constructor without parameter:\"></a><strong>Constructor without parameter:</strong></h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">Employee</span><span class=\"hljs-params\">()</span><br></span>&#123;<br>    name =<span class=\"hljs-string\">\"\"</span>;<br>    salary =<span class=\"hljs-number\">0</span>;<br>    hireDay =LocalDate.now();<br>&#125;<br></code></pre></td></tr></table></figure>\n<h4 id=\"Explicit-field-initialize\"><a href=\"#Explicit-field-initialize\" class=\"headerlink\" title=\"Explicit field initialize\"></a>Explicit field initialize</h4><p>You can initialize field value in the declaration of a class.</p>\n<p>Before using constructor.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Employee</span><br></span>&#123;<br>    <span class=\"hljs-keyword\">private</span> String name =<span class=\"hljs-string\">\" \"</span>;<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">int</span> nextId;<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">int</span> id = assignId();<br>    <br>    <br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">assignId</span><span class=\"hljs-params\">()</span><br>    </span>&#123;<br>        <span class=\"hljs-keyword\">int</span> r= nextId;<br>        nextId++;<br>        <span class=\"hljs-keyword\">return</span> r;<br>\t&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h4 id=\"Calling-another-constructor\"><a href=\"#Calling-another-constructor\" class=\"headerlink\" title=\"Calling another constructor\"></a>Calling another constructor</h4><p>Use <strong><code>this</code></strong> to call another constructor when you are just using a constructor.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">Employee</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">double</span> s)</span><br></span>&#123;<br>    <span class=\"hljs-keyword\">this</span>(<span class=\"hljs-string\">\"Employee\"</span> + nextId,s);<br>    nextId++;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h4 id=\"Initialization-block\"><a href=\"#Initialization-block\" class=\"headerlink\" title=\"Initialization block\"></a>Initialization block</h4><p>Initialize field values in the class define.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Employee</span><br></span>&#123;<br>    <span class=\"hljs-comment\">//......</span><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">int</span> Id;<br>    <span class=\"hljs-keyword\">private</span> String name;<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">double</span> salary;<br>    <span class=\"hljs-comment\">//......</span><br>    <br>    <span class=\"hljs-comment\">//Use initialization block</span><br>    &#123;<br>        id = nextId;<br>        nextId++;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h4 id=\"Summary\"><a href=\"#Summary\" class=\"headerlink\" title=\"Summary\"></a>Summary</h4><p>The Steps of Calling constrictor</p>\n<p>1.If the constructor calls another, construct by that one.</p>\n<p>2.a. All the field will be initialized by default.</p>\n<p>   b. According to the order in <code>class defination</code>, execute field initialize function and initialization block.</p>\n<h3 id=\"Class-Operation\"><a href=\"#Class-Operation\" class=\"headerlink\" title=\"Class Operation\"></a>Class Operation</h3><h5 id=\"Use-var-to-state-a-local-variable\"><a href=\"#Use-var-to-state-a-local-variable\" class=\"headerlink\" title=\"Use var to state a local variable\"></a>Use <code>var</code> to state a local variable</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">var</span> harry = <span class=\"hljs-keyword\">new</span> Employee(<span class=\"hljs-string\">\"Hurry\"</span>,<span class=\"hljs-number\">5000</span>);<br></code></pre></td></tr></table></figure>\n<h5 id=\"Use-clone-to-return-a-copy-of-an-object\"><a href=\"#Use-clone-to-return-a-copy-of-an-object\" class=\"headerlink\" title=\"Use clone to return a copy of an object\"></a><strong>Use <code>clone</code> to return a copy of an object</strong></h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">return</span> (Date) hireDay.clone();<br></code></pre></td></tr></table></figure>\n<p>Tips: a private field is accessible to an object of same class.</p>\n<h4 id=\"Static\"><a href=\"#Static\" class=\"headerlink\" title=\"Static\"></a>Static</h4><p>A field or method which is defined as <code>static</code> means there is <strong>ONLY ONE</strong> in the same class.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">double</span> PI = <span class=\"hljs-number\">3.141592653</span>;<br></code></pre></td></tr></table></figure>\n<p>A static method do not use an object. Such as:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">Math.pow(<span class=\"hljs-number\">10</span>,<span class=\"hljs-number\">3</span>);<br></code></pre></td></tr></table></figure>\n<p>A static method can not access fields in an object ,but can access <strong>static field</strong>.</p>\n<p><strong>Use static initialization block</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">static</span><br>&#123;<br>    <span class=\"hljs-keyword\">var</span> generator = <span class=\"hljs-keyword\">new</span> Radom();<br>    nextId = generator.nextInt(<span class=\"hljs-number\">10000</span>);<br>&#125;<br></code></pre></td></tr></table></figure>\n<h4 id=\"Main-method\"><a href=\"#Main-method\" class=\"headerlink\" title=\"Main method\"></a>Main method</h4><p>A class can have a main method, but it will not come into effect. It is used to <strong>TEST</strong> a class.</p>\n<h4 id=\"Class-Date\"><a href=\"#Class-Date\" class=\"headerlink\" title=\"Class Date\"></a>Class Date</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">System.out.println(<span class=\"hljs-keyword\">new</span> Date());<br>String s = <span class=\"hljs-keyword\">new</span> Date.toString();<br>Date deadline;<span class=\"hljs-comment\">//However,this variable does not refer to any object.</span><br>deadline = <span class=\"hljs-keyword\">new</span> Date();<span class=\"hljs-comment\">//ok.</span><br>deadline = <span class=\"hljs-keyword\">null</span>;<span class=\"hljs-comment\">// refer to no object</span><br>deadline = birthday;<span class=\"hljs-comment\">//they refer to the same object</span><br></code></pre></td></tr></table></figure>\n<p><strong>Class LocalDate</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.msfasr.java_startup;<br><br><span class=\"hljs-keyword\">import</span> java.time.DayOfWeek;<br><span class=\"hljs-keyword\">import</span> java.time.LocalDate;<br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Calendar</span> </span>&#123;<br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span><br>    </span>&#123;<br>        LocalDate currentDate = LocalDate.now();<br>        System.out.println(<span class=\"hljs-string\">\"Mon Tue Wed Thu Fri Sat Sun\"</span>);<br>        <span class=\"hljs-keyword\">int</span> month=currentDate.getMonthValue();<br>        <span class=\"hljs-keyword\">int</span> today=currentDate.getDayOfMonth();<br>        currentDate = currentDate.minusDays(today-<span class=\"hljs-number\">1</span>);<br>        <span class=\"hljs-keyword\">int</span> dayOfWeek = currentDate.getDayOfWeek().getValue();<br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;dayOfWeek-<span class=\"hljs-number\">1</span>;i++)<br>            System.out.printf(<span class=\"hljs-string\">\"    \"</span>);<br>        <span class=\"hljs-keyword\">while</span>(currentDate.getMonthValue() == month)<br>        &#123;<br>            <span class=\"hljs-keyword\">if</span>(currentDate.getDayOfMonth()==today)<br>            &#123;<br>                System.out.printf(<span class=\"hljs-string\">\"*\"</span>);<br>            &#125;<br>            <span class=\"hljs-keyword\">else</span><br>                System.out.printf(<span class=\"hljs-string\">\" \"</span>);<br>            System.out.printf(<span class=\"hljs-string\">\"%-3d\"</span>,currentDate.getDayOfMonth());<br>            <span class=\"hljs-keyword\">if</span>(currentDate.getDayOfWeek().getValue()==<span class=\"hljs-number\">7</span>)<br>                System.out.println();<br>            currentDate = currentDate.plusDays(<span class=\"hljs-number\">1</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h3 id=\"Java-class-methods\"><a href=\"#Java-class-methods\" class=\"headerlink\" title=\"Java class methods\"></a>Java class methods</h3><h4 id=\"Main-method-1\"><a href=\"#Main-method-1\" class=\"headerlink\" title=\"Main method\"></a>Main method</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.msfasr.java_startup;<span class=\"hljs-comment\">//The code is included in a package</span><br><br><span class=\"hljs-keyword\">import</span> java.util.Scanner;<span class=\"hljs-comment\">//Inport Scanner for input</span><br><br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">HelloWorld</span> </span>&#123;<span class=\"hljs-comment\">//The main method is contained in a class</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>&#123;<span class=\"hljs-comment\">//Be aware of the define of the main method</span><br>        System.out.println(<span class=\"hljs-string\">\"Hello,world\"</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h4 id=\"Class-Methods\"><a href=\"#Class-Methods\" class=\"headerlink\" title=\"Class Methods\"></a>Class Methods</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">printCalendar</span><span class=\"hljs-params\">()</span><br></span>&#123;<br>    ......<br>&#125;<span class=\"hljs-comment\">//static method, do not operate fields</span><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">changeFormat</span><span class=\"hljs-params\">()</span><br></span>&#123;<br>    ......<br>&#125;<span class=\"hljs-comment\">//this method must based on an object</span><br></code></pre></td></tr></table></figure>\n<h4 id=\"Method-parameters\"><a href=\"#Method-parameters\" class=\"headerlink\" title=\"Method parameters\"></a>Method parameters</h4><p>Java programming language can only <strong>Call by value</strong> .</p>\n<p>However, when the parameter is an <code>OBJECT</code> , methods can change values of OBJECTS.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">tripleSalary</span><span class=\"hljs-params\">(Employee x)</span><br></span>&#123;<br>    x.raiseSalary(<span class=\"hljs-number\">200</span>);<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>So,a method <strong>can</strong>:</p>\n<p>Change the status of an object.</p>\n<p><strong>Can’t</strong>:</p>\n<p>Change values of variable.</p>\n<p>Make an object refer to an new object.</p>\n<h3 id=\"Package\"><a href=\"#Package\" class=\"headerlink\" title=\"Package\"></a>Package</h3><p>Java package is a sort of set contains several <strong>class</strong>.</p>\n<p>Package standard name:</p>\n<p>com.(company name).(project name)</p>\n<p>Such as:</p>\n<p>com.msfasr.javaStartup</p>\n<h4 id=\"Importing-package\"><a href=\"#Importing-package\" class=\"headerlink\" title=\"Importing package\"></a>Importing package</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">import</span> java.util.Scanner;<span class=\"hljs-comment\">//import a class</span><br><span class=\"hljs-keyword\">import</span> java.util.*       <span class=\"hljs-comment\">//import a package</span><br></code></pre></td></tr></table></figure>\n<p>When there is a class name used by several package, you need to write the package name when using.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">import</span> java.util.Date;<br><span class=\"hljs-keyword\">import</span> java.sql.Date;<br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Main</span></span>&#123;<br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span></span>&#123;<br>        <span class=\"hljs-keyword\">var</span> deadline = <span class=\"hljs-keyword\">new</span> java.util.Date();<br>        <span class=\"hljs-keyword\">var</span> today = <span class=\"hljs-keyword\">new</span> java.sql.Date(. . . );<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>\n<h4 id=\"Static-importing\"><a href=\"#Static-importing\" class=\"headerlink\" title=\"Static importing\"></a>Static importing</h4><p>By using static importing, you can import a sort of static method and field.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-keyword\">static</span> java.lang.System.*;<br><span class=\"hljs-comment\">//then, you can use:</span><br>out.println(<span class=\"hljs-string\">\"123\"</span>);<span class=\"hljs-comment\">//System.out</span><br>exit(<span class=\"hljs-number\">0</span>);<span class=\"hljs-comment\">//System.exit</span><br></code></pre></td></tr></table></figure>\n<h4 id=\"Adding-class-into-a-package\"><a href=\"#Adding-class-into-a-package\" class=\"headerlink\" title=\"Adding class into a package\"></a>Adding class into a package</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.msfasr.javaStartup;<br><span class=\"hljs-comment\">//......</span><br></code></pre></td></tr></table></figure>\n<p>The class is now in the package.</p>\n<p><strong>Class annotation</strong> </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**<br> * This class is built for Studying Java!<br> * This means I will enter a new field!<br> */</span><br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Main</span> </span>&#123;<br>\t<span class=\"hljs-comment\">//......</span><br>&#125;<br></code></pre></td></tr></table></figure>\n<h3 id=\"Class-Designing-tips\"><a href=\"#Class-Designing-tips\" class=\"headerlink\" title=\"Class Designing tips\"></a>Class Designing tips</h3><p>1.Guarantee that the <strong>data</strong> is private.</p>\n<p>2.<code>Warning</code>: <strong>You must initialize the field!!!</strong></p>\n<p>3.Do not use so much basic type variable!!!</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">//......</span><br><span class=\"hljs-keyword\">private</span> String street;<br><span class=\"hljs-keyword\">private</span> String city;<br><span class=\"hljs-keyword\">private</span> String state;<span class=\"hljs-comment\">//bad</span><br><span class=\"hljs-comment\">//......</span><br><br><br><span class=\"hljs-keyword\">private</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">address</span><br></span>&#123;<br>    <span class=\"hljs-keyword\">private</span> String street;<br>\t<span class=\"hljs-keyword\">private</span> String city;<br>\t<span class=\"hljs-keyword\">private</span> String state;   <span class=\"hljs-comment\">//good</span><br>&#125;<br></code></pre></td></tr></table></figure>\n<p>4.not all the fields are changeable.</p>\n<p>5.Resolve the classes with so many responsibility.</p>\n<p>6.The name should refer their responsibility.</p>\n<p>7.Use classes unchangeable at first.</p>\n<h3 id=\"Class-Inheritance\"><a href=\"#Class-Inheritance\" class=\"headerlink\" title=\"Class Inheritance\"></a>Class Inheritance</h3><h4 id=\"Class-Superclass-Subclass\"><a href=\"#Class-Superclass-Subclass\" class=\"headerlink\" title=\"Class, Superclass, Subclass\"></a>Class, Superclass, Subclass</h4><p><strong>A subclass define:</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Manager</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Employee</span><br></span>&#123;<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">double</span> bonus;<br>    <br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setBonus</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">double</span> aBonus)</span><br>    </span>&#123;<br>        bonus=aBonus;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h4 id=\"Covering-methods\"><a href=\"#Covering-methods\" class=\"headerlink\" title=\"Covering methods\"></a>Covering methods</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Manager</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Employee</span><br></span>&#123;<br>    <span class=\"hljs-comment\">//...</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">double</span> <span class=\"hljs-title\">getSalary</span><span class=\"hljs-params\">()</span><br>    </span>&#123;<br>        <span class=\"hljs-keyword\">int</span> aSalary= <span class=\"hljs-keyword\">super</span>.getSalary();<br>        <span class=\"hljs-keyword\">return</span> aSalary + bonus;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h4 id=\"Subclass-constructor\"><a href=\"#Subclass-constructor\" class=\"headerlink\" title=\"Subclass constructor\"></a>Subclass constructor</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Manager</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Employee</span><br></span>&#123;<br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">Manager</span><span class=\"hljs-params\">(String name , <span class=\"hljs-keyword\">double</span> salary, <span class=\"hljs-keyword\">int</span> year, <span class=\"hljs-keyword\">int</span> month, <span class=\"hljs-keyword\">int</span> day)</span><br>    </span>&#123;<br>        <span class=\"hljs-keyword\">super</span>(name,salary,year, month, day);<br>        bonus = <span class=\"hljs-number\">0</span> ;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h4 id=\"Class-Array-with-dynamic-binding\"><a href=\"#Class-Array-with-dynamic-binding\" class=\"headerlink\" title=\"Class Array with dynamic binding\"></a>Class Array with dynamic binding</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">//...</span><br>Manager boss = <span class=\"hljs-keyword\">new</span> Manager(<span class=\"hljs-string\">\"Makinohara\"</span>,<span class=\"hljs-number\">80000000</span>,<span class=\"hljs-number\">2001</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">13</span>);<br>boss.setBonus(<span class=\"hljs-number\">200000</span>);<br><br><span class=\"hljs-comment\">//then, define an array of employees</span><br><br><span class=\"hljs-keyword\">var</span> staff[] = <span class=\"hljs-keyword\">new</span> Employee[<span class=\"hljs-number\">3</span>];<br><br>staff[<span class=\"hljs-number\">0</span>] = boss;<br>staff[<span class=\"hljs-number\">1</span>] = <span class=\"hljs-keyword\">new</span> Employee(<span class=\"hljs-string\">\"Mai\"</span>,<span class=\"hljs-number\">20000</span>,<span class=\"hljs-number\">2000</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>);<br>staff[<span class=\"hljs-number\">2</span>] = <span class=\"hljs-keyword\">new</span> Employee(<span class=\"hljs-string\">\"Sakuta\"</span>,<span class=\"hljs-number\">10</span>,<span class=\"hljs-number\">2001</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">13</span>);<br><br><span class=\"hljs-keyword\">for</span>(Employee e : staff)<span class=\"hljs-comment\">//for:each circulation</span><br>&#123;<br>    System.out.println(e.getName()+<span class=\"hljs-string\">\":\"</span>+e.getSalary);<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>The compiler will choose the right method to get salary, this is <strong>Dynamic Binding</strong>.</p>\n<h4 id=\"Polymorphism\"><a href=\"#Polymorphism\" class=\"headerlink\" title=\"Polymorphism\"></a>Polymorphism</h4><p>In java, the object variable is <strong>polymorphic</strong>, it means a variable of an object can refer all the <strong>subclass object</strong>. </p>\n<h4 id=\"Java-Method-Calling\"><a href=\"#Java-Method-Calling\" class=\"headerlink\" title=\"Java Method Calling\"></a>Java Method Calling</h4><ol>\n<li><p>The complier gets the method list of <strong>a class and its superclass</strong>.</p>\n</li>\n<li><p>The complier confirms the <strong>parameter types</strong> of the method which is being called.</p>\n</li>\n<li><p>The JVM calls the method.</p>\n</li>\n</ol>\n<h4 id=\"Stop-Inheriting-final\"><a href=\"#Stop-Inheriting-final\" class=\"headerlink\" title=\"Stop Inheriting : final.\"></a>Stop Inheriting : <code>final</code>.</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Boss</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Manager</span>//<span class=\"hljs-title\">the</span> <span class=\"hljs-title\">class</span> <span class=\"hljs-title\">can</span>'<span class=\"hljs-title\">t</span> <span class=\"hljs-title\">be</span> <span class=\"hljs-title\">inheriting</span><br></span>&#123;<br>    <span class=\"hljs-comment\">//...</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">final</span> String <span class=\"hljs-title\">getName</span><span class=\"hljs-params\">()</span><span class=\"hljs-comment\">//the method can't be covered.</span><br>    </span>&#123;<br>        <span class=\"hljs-comment\">//......</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h3 id=\"Forced-type-conversion\"><a href=\"#Forced-type-conversion\" class=\"headerlink\" title=\"Forced type conversion\"></a>Forced type conversion</h3><p>In <em>Class Array with dynamic binding</em>, we created an array contains Manager and Employee. However, the array is a Employee array, so we need to use Forced type conversion to convert a Employee object to a Manager object.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">Manager boss = (Manager)staff[<span class=\"hljs-number\">0</span>];<br></code></pre></td></tr></table></figure>\n<p>But, when you are trying to convert a object <strong>from top to bottom</strong>, it won’t work.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">Manager boss = (Manager)staff[<span class=\"hljs-number\">1</span>];<span class=\"hljs-comment\">// Not work</span><br><br><span class=\"hljs-comment\">//So,we can avoid this case by using:</span><br><span class=\"hljs-keyword\">if</span>(staff[<span class=\"hljs-number\">1</span>] <span class=\"hljs-keyword\">instanceof</span> Manager)<br>&#123;<br>    <br>    boss = (Manager)staff[<span class=\"hljs-number\">1</span>];<br>    <br>    <span class=\"hljs-comment\">//......</span><br>&#125;<br></code></pre></td></tr></table></figure>\n<h3 id=\"Abstract-Class\"><a href=\"#Abstract-Class\" class=\"headerlink\" title=\"Abstract Class\"></a>Abstract Class</h3><p>Abstract class is a sort of class that is more general. Such as Person can contain Employee and Student.</p>\n<p>The define of an abstract class</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">abstract</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Person</span><br></span>&#123;<br>    <span class=\"hljs-keyword\">private</span> String name;<br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">Person</span> <span class=\"hljs-params\">(String name)</span><br>    </span>&#123;<br>        <span class=\"hljs-keyword\">this</span>.name = name;<br>\t&#125;<br>    <br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">abstract</span> String <span class=\"hljs-title\">getName</span><span class=\"hljs-params\">()</span><br>    </span>&#123;<br>        <span class=\"hljs-keyword\">return</span> name;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p><strong>Instantiation is not allowed in an Abstract class.</strong> It means you can’t :</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">var</span> aP = <span class=\"hljs-keyword\">new</span> Person(<span class=\"hljs-string\">\"Deja vu\"</span>);<br><span class=\"hljs-comment\">// you can do this:</span><br><br>Person stu1 = <span class=\"hljs-keyword\">new</span> student(<span class=\"hljs-string\">\"Deja vu\"</span>,<span class=\"hljs-string\">\"Computer Driving\"</span>);<br></code></pre></td></tr></table></figure>\n<h3 id=\"Access-modifier\"><a href=\"#Access-modifier\" class=\"headerlink\" title=\"Access modifier\"></a>Access modifier</h3><p>public : this method or field can be used by <code>all classes</code>.</p>\n<p>private: this method or field can only used by the <code>same class</code>, not for subclasses.</p>\n<p>protected: this method or field can used by <code>this package</code> and <code>all subclass</code></p>\n<p>no modifier: this method or field can be used by all the methods in the <code>same package</code>!!</p>\n<h3 id=\"Object-the-superclass-of-all-classes\"><a href=\"#Object-the-superclass-of-all-classes\" class=\"headerlink\" title=\"Object: the superclass of all classes\"></a>Object: the superclass of all classes</h3><p>You can use a variable whose type is <code>Object</code> to refer <code>objects of all classes</code>.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">Object obj = <span class=\"hljs-keyword\">new</span> Employee(<span class=\"hljs-string\">\"Harry Potter\"</span>,<span class=\"hljs-number\">300000</span>);<br></code></pre></td></tr></table></figure>\n<p>But, when you are trying to operate the object or using methods, you need to do <code>type conversing</code> .</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">Employee e = (Employee)obj;<br></code></pre></td></tr></table></figure>\n<h4 id=\"equals\"><a href=\"#equals\" class=\"headerlink\" title=\"equals\"></a><strong><code>equals</code></strong></h4><p><code>equals</code> is a method to compare whether two objects are equal.</p>\n<p>The <code>equals</code> method in Class Object is used to compare two objects are equal or not, and if two objects reference are same, the method returns true.</p>\n<h5 id=\"Equals-method-writing\"><a href=\"#Equals-method-writing\" class=\"headerlink\" title=\"Equals method writing\"></a>Equals method writing</h5><h6 id=\"Standard\"><a href=\"#Standard\" class=\"headerlink\" title=\"Standard:\"></a>Standard:</h6><ol>\n<li><strong>Reflexivity</strong> : x.equals(x) == true </li>\n<li><strong>Symmetry</strong> : x.equals(y) == y.equals(x)</li>\n<li><strong>Transitivity</strong> : x.equals(y) == true , y.equals(z) == true -&gt; x.equals(z) == true.</li>\n<li><strong>Consistency</strong> : If x and y did not change , the equality do not change.</li>\n<li><strong>x.equals(null) == false.</strong></li>\n</ol>\n<h6 id=\"Advice-of-designing-an-equals-method\"><a href=\"#Advice-of-designing-an-equals-method\" class=\"headerlink\" title=\"Advice of designing an equals method\"></a>Advice of designing an equals method</h6><p>See <em>Core Java Vol.1</em> , 11th edition , Page 178.</p>\n<h4 id=\"Hash-code\"><a href=\"#Hash-code\" class=\"headerlink\" title=\"Hash code\"></a>Hash code</h4><p>hashcode() : returns an integer , the hash code , that refers the object.</p>\n<p>Object.hash(Obj1,Obj2,……,ObjN) ;</p>\n<p>Object.hashcode(Obj);</p>\n<h4 id=\"toString-NaN\"><a href=\"#toString-NaN\" class=\"headerlink\" title=\"toString\"></a>toString</h4><p>Object.toString(); Print a string that consist of all fields. Needs you write yourself.    </p>\n<h4 id=\"ArrayList\"><a href=\"#ArrayList\" class=\"headerlink\" title=\"ArrayList\"></a>ArrayList</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">ArrayList&lt;Employee&gt; staff = <span class=\"hljs-keyword\">new</span> ArrayList&lt;Employee&gt;();<br><br><span class=\"hljs-comment\">//add an object:</span><br>staff.add(Object);<br>staff.add(<span class=\"hljs-keyword\">new</span> Employee(......));<br><br>staff.size();<span class=\"hljs-comment\">//returns the number of objects.</span><br></code></pre></td></tr></table></figure>\n<p><strong>Compare: ArrayList and Array</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">stuff.set(i,harry);<span class=\"hljs-comment\">//stuff[i] = hurry</span><br>Employee ep = stuff.get(i);<span class=\"hljs-comment\">// Employee ep = stuff[i]</span><br>stuff.add(i,E);<span class=\"hljs-comment\">//insert E to position i , move the rest. </span><br>stuff.remove(i);<span class=\"hljs-comment\">//delete Element at position i, move the rest</span><br></code></pre></td></tr></table></figure>\n<h3 id=\"Object-Wrapper\"><a href=\"#Object-Wrapper\" class=\"headerlink\" title=\"Object Wrapper\"></a>Object Wrapper</h3><p>Wrapper class is a sort of class that <strong>corresponding to basic data types</strong>. </p>\n<p>Such as:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">var</span> list = <span class=\"hljs-keyword\">new</span> ArrayList&lt;Integer&gt;();<br>list.add(<span class=\"hljs-number\">3</span>);          <span class=\"hljs-comment\">//Autoboxing</span><br><span class=\"hljs-keyword\">int</span> n = list.get(i);  <span class=\"hljs-comment\">//Autounboxing</span><br></code></pre></td></tr></table></figure>\n<h2 id=\"Interface\"><a href=\"#Interface\" class=\"headerlink\" title=\"Interface\"></a>Interface</h2><h3 id=\"Realize-an-interface\"><a href=\"#Realize-an-interface\" class=\"headerlink\" title=\"Realize an interface\"></a>Realize an interface</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Employee</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">Comparable</span>&lt;<span class=\"hljs-title\">Employee</span>&gt;\t //在实现接口时加上类名，可以可以防止对<span class=\"hljs-title\">Object</span>类型转换<br></span>&#123;<br>    <span class=\"hljs-comment\">//......</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">compareTo</span><span class=\"hljs-params\">(Employee other)</span><br>    </span>&#123;<br>        <span class=\"hljs-keyword\">return</span> Double.compare(salary,other.salary);<br>    &#125;<br>    <span class=\"hljs-comment\">//......</span><br>&#125;<br></code></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Main</span> </span>&#123;<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span>  </span>&#123;<br>        <span class=\"hljs-keyword\">var</span> staff = <span class=\"hljs-keyword\">new</span> Employee[<span class=\"hljs-number\">3</span>];<br>        staff[<span class=\"hljs-number\">0</span>] = <span class=\"hljs-keyword\">new</span> Employee(<span class=\"hljs-string\">\"Mark\"</span>,<span class=\"hljs-number\">12000</span>,<span class=\"hljs-number\">2020</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">20</span>);<br>        staff[<span class=\"hljs-number\">1</span>] = <span class=\"hljs-keyword\">new</span> Employee(<span class=\"hljs-string\">\"Lin\"</span>,<span class=\"hljs-number\">10000</span>,<span class=\"hljs-number\">2020</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">20</span>);<br>        staff[<span class=\"hljs-number\">2</span>] = <span class=\"hljs-keyword\">new</span> Employee(<span class=\"hljs-string\">\"Coal\"</span>,<span class=\"hljs-number\">41230</span>,<span class=\"hljs-number\">2020</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">20</span>);<br>        Arrays.sort(staff);<br>        <span class=\"hljs-keyword\">return</span>;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>接口不是一种类，所以不能使用new实例化接口。</p>\n<p>接口的一个样例：</p>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs angelscript\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">interface</span> <span class=\"hljs-symbol\">Comparable</span>&lt;<span class=\"hljs-symbol\">T</span>&gt;&#123;<br>\t<span class=\"hljs-keyword\">default</span> <span class=\"hljs-built_in\">int</span> compareTo(T other)&#123;  <span class=\"hljs-comment\">//一种默认方法。</span><br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>\t&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h3 id=\"接口与回调\"><a href=\"#接口与回调\" class=\"headerlink\" title=\"接口与回调\"></a>接口与回调</h3><p>一个Listener接口：</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\">public<span class=\"hljs-built_in\"> interface </span>ActionListener<br>&#123;<br>\tvoid actionPerformed(ActionEvent event);<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>如果想要调用这个接口，则可以在一个类中实现：</p>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs angelscript\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-symbol\">TimePrinter</span> <span class=\"hljs-symbol\">implements</span> <span class=\"hljs-symbol\">ActionListener</span>&#123;<br>\t<span class=\"hljs-keyword\">public</span> <span class=\"hljs-built_in\">void</span> actionPerformed(ActionEvent event)&#123;          <span class=\"hljs-comment\">//在类中实现这个接口</span><br>\t\tSystem.<span class=\"hljs-keyword\">out</span>.println(<span class=\"hljs-number\">123</span>);<br>\t&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>实现回调的方法：</p>\n<figure class=\"highlight haxe\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs haxe\"><span class=\"hljs-keyword\">var</span> listener = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-type\">TimePrinter</span>;<br><span class=\"hljs-keyword\">var</span> timer = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-type\">Timer</span>(<span class=\"hljs-number\">1000</span>,listener);<br><span class=\"hljs-comment\">//......</span><br><span class=\"hljs-comment\">//timer每1000毫秒通知实现了ActionListener接口的类，这个类就会实现接口提供的函数actionPerformed，完成一个回调。</span><br></code></pre></td></tr></table></figure>\n<h2 id=\"Lambda-表达式\"><a href=\"#Lambda-表达式\" class=\"headerlink\" title=\"Lambda 表达式\"></a>Lambda 表达式</h2><p>一种自定义代码块，用于实现某些计算或执行某些函数</p>\n<figure class=\"highlight haxe\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs haxe\"><span class=\"hljs-comment\">//比如，要计算a.length() - b.length()</span><br>(<span class=\"hljs-keyword\">String</span> a, <span class=\"hljs-keyword\">String</span> b)<br>\t-&gt;a.length()-b.length()<br><span class=\"hljs-comment\">//或者：</span><br>(<span class=\"hljs-keyword\">String</span> a, <span class=\"hljs-keyword\">String</span> b)-&gt;<br>&#123;<br>\t<span class=\"hljs-keyword\">if</span>(a.length&lt;b.length)<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span>;<br>\t<span class=\"hljs-comment\">//......</span><br>&#125;<br><span class=\"hljs-comment\">//执行函数：</span><br><span class=\"hljs-keyword\">var</span> timer = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-type\">Timer</span>(<span class=\"hljs-number\">1000</span>,event -&gt;System.out.println(event))<br></code></pre></td></tr></table></figure>\n<p>使用lambda来使方法实现函数式接口，避免多余的重写方法：</p>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs arduino\">package com.icsii.interfaceDemo;<br><br><span class=\"hljs-keyword\">public</span> interface printer &#123;<br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">printString</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">String</span> something)</span></span>;<br>&#125;<br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">print</span> &#123;</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">printSomething</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">String</span> something,printer aPrinter)</span></span>&#123;<br>        aPrinter.printString(something);<br>    &#125;<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">String</span>[] args)</span> </span>&#123;<br>        <span class=\"hljs-built_in\">print</span> Demo1 = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">print</span>();<br>        Demo1.printSomething(<span class=\"hljs-string\">\"123\"</span>,(<span class=\"hljs-keyword\">String</span> something)-&gt;System.out.<span class=\"hljs-built_in\">println</span>(something));<br>    &#125;<br>&#125;<br><br>(接口接收的参数)-&gt;&#123;接口实现的方法&#125;<br></code></pre></td></tr></table></figure>\n<h2 id=\"Java-I-O\"><a href=\"#Java-I-O\" class=\"headerlink\" title=\"Java I/O\"></a>Java I/O</h2><h4 id=\"Input-scanner\"><a href=\"#Input-scanner\" class=\"headerlink\" title=\"Input(scanner)\"></a>Input(scanner)</h4><p>Firstly, import a class <em>scanner</em> .</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">import</span> java.util.Scanner;<br></code></pre></td></tr></table></figure>\n<p>This class has these basic operations :</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">Scanner sc = <span class=\"hljs-keyword\">new</span> Scanner(System.in);<span class=\"hljs-comment\">//new a scanner</span><br>String name = sc.nextLine();<span class=\"hljs-comment\">//Get a line</span><br><span class=\"hljs-keyword\">int</span> age = sc.nextInt();<span class=\"hljs-comment\">//Get the next int</span><br>sc.close();<span class=\"hljs-comment\">//Close the scanner when used,or it will report an error.</span><br></code></pre></td></tr></table></figure>\n<h5 id=\"Other-measures\"><a href=\"#Other-measures\" class=\"headerlink\" title=\"Other measures\"></a>Other measures</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-function\">String <span class=\"hljs-title\">nextLine</span><span class=\"hljs-params\">()</span></span>;<span class=\"hljs-comment\">//read next line;</span><br><span class=\"hljs-function\">String <span class=\"hljs-title\">next</span><span class=\"hljs-params\">()</span></span>;<span class=\"hljs-comment\">//read next word, use blank as separator.</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">nextInt</span><span class=\"hljs-params\">()</span></span>;<span class=\"hljs-comment\">//read next int</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">boolean</span> <span class=\"hljs-title\">hasNext</span><span class=\"hljs-params\">()</span></span>;<span class=\"hljs-comment\">//if there's words in line</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">boolean</span> <span class=\"hljs-title\">hasNextInt</span><span class=\"hljs-params\">()</span></span>;<br></code></pre></td></tr></table></figure>\n<h5 id=\"Read-files\"><a href=\"#Read-files\" class=\"headerlink\" title=\"Read files\"></a>Read files</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">Scanner sc = <span class=\"hljs-keyword\">new</span> Scanner(<span class=\"hljs-string\">\"Path\"</span>,StandardCharsets.UTF_8);<span class=\"hljs-comment\">//read file</span><br>PrintWriter out = <span class=\"hljs-keyword\">new</span> PrintWriter(<span class=\"hljs-string\">\"Path\"</span>,StandardCharsets.UTF_8);<span class=\"hljs-comment\">//Write file</span><br>out.print();<span class=\"hljs-comment\">//Warning: this method will rewrite the file!!!</span><br></code></pre></td></tr></table></figure>\n<h4 id=\"Output-System-out\"><a href=\"#Output-System-out\" class=\"headerlink\" title=\"Output (System.out)\"></a>Output (System.out)</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">System.out.println(<span class=\"hljs-number\">1111</span>);<span class=\"hljs-comment\">//Print and return</span><br>System.out.print(<span class=\"hljs-number\">1111</span>);<span class=\"hljs-comment\">//Print without returning</span><br>System.out.write(<span class=\"hljs-number\">2222</span>);<span class=\"hljs-comment\">//byte output</span><br>System.out.printf(<span class=\"hljs-string\">\"%+8.3f\\n\"</span>, <span class=\"hljs-number\">3.14</span>);<span class=\"hljs-comment\">//Print according to format</span><br></code></pre></td></tr></table></figure>\n<h2 id=\"Java-variable\"><a href=\"#Java-variable\" class=\"headerlink\" title=\"Java variable :\"></a>Java variable :</h2><h3 id=\"Variable-types\"><a href=\"#Variable-types\" class=\"headerlink\" title=\"Variable types\"></a>Variable types</h3><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>Variable type</th>\n<th>value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>int</td>\n<td>4byte,-2147483648~2147483647</td>\n</tr>\n<tr>\n<td>short</td>\n<td>2byte</td>\n</tr>\n<tr>\n<td>long</td>\n<td>8byte</td>\n</tr>\n<tr>\n<td>byte</td>\n<td>1byte</td>\n</tr>\n<tr>\n<td>float</td>\n<td>4byte</td>\n</tr>\n<tr>\n<td>double</td>\n<td>8byte</td>\n</tr>\n<tr>\n<td>char(UTF-16)</td>\n<td>16byte(UTF-16 character )</td>\n</tr>\n<tr>\n<td>boolean</td>\n<td>true/false</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>Caution: A variable must be initialized ,or the compiler will put an ERROR.</p>\n<p>In java, key word <code>final</code> refers a variable is constant.</p>\n<p><strong>enum</strong>:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">enum</span> Size &#123;Small,Medium&#125;;<span class=\"hljs-comment\">//enum is a CLASS!</span><br>Size s = Size.Small;<span class=\"hljs-comment\">//it can only use values defined above.</span><br></code></pre></td></tr></table></figure>\n<h4 id=\"String\"><a href=\"#String\" class=\"headerlink\" title=\"String\"></a>String</h4><p><strong>str.substring</strong> can extract a part of string .</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">String greeting = <span class=\"hljs-string\">\"Hello\"</span>;<br>String s = greeting.substring(<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">3</span>);<span class=\"hljs-comment\">//s = \"Hel\"</span><br>String str = greeting+s;<br></code></pre></td></tr></table></figure>\n<p> str.equals compares two strings:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-string\">\"Hello\"</span>.equals(greeting);<br></code></pre></td></tr></table></figure>\n<p>Caution: DO NOT USE == !</p>\n<h5 id=\"Other-measures-1\"><a href=\"#Other-measures-1\" class=\"headerlink\" title=\"Other measures\"></a>Other measures</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">str.length(); <span class=\"hljs-comment\">//return length</span><br>str.blank(); <span class=\"hljs-comment\">// judge if the string is empty</span><br>str.join(<span class=\"hljs-string\">\"/\"</span>,str1,str2,str3......);<span class=\"hljs-comment\">// use / as separator , combine strings</span><br>String.format(<span class=\"hljs-string\">\"%f\"</span>,a);<span class=\"hljs-comment\">//returns a String with format</span><br></code></pre></td></tr></table></figure>\n<h4 id=\"Big-numbers\"><a href=\"#Big-numbers\" class=\"headerlink\" title=\"Big numbers\"></a>Big numbers</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">BigInteger;<br>BigDecimal;<br>num1.add(num2);<br><span class=\"hljs-comment\">//use add subtract multiply devide mod</span><br></code></pre></td></tr></table></figure>\n<h3 id=\"Array\"><a href=\"#Array\" class=\"headerlink\" title=\"Array\"></a>Array</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">int</span>[] a = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">int</span>[<span class=\"hljs-number\">100</span>];<br><span class=\"hljs-keyword\">int</span>[] a = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">int</span>[n];<br><span class=\"hljs-keyword\">int</span>[] a = &#123;<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">7</span>,<span class=\"hljs-number\">7</span>,<span class=\"hljs-number\">9</span>&#125;;<br>a = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">int</span>[] &#123;<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">7</span>,<span class=\"hljs-number\">9</span>&#125;;<br>a.length();<br>Array.sort(a);<br>Array.binarySearch(xxx[] a,xxx v);<br>Array.binarySearch(xxx[] a,<span class=\"hljs-keyword\">int</span> start,<span class=\"hljs-keyword\">int</span> end,xxx v);<br>Array.fill(xxx[] a,xxx v);<br><span class=\"hljs-keyword\">int</span> a[][] = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">int</span>[<span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">3</span>];<br><span class=\"hljs-keyword\">int</span>[] temp = a[<span class=\"hljs-number\">1</span>];<br>a[<span class=\"hljs-number\">1</span>]=a[<span class=\"hljs-number\">2</span>];<br>a[<span class=\"hljs-number\">2</span>]=temp;<span class=\"hljs-comment\">//exchange 2 lines</span><br><span class=\"hljs-keyword\">int</span>[][] feb = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">int</span>[<span class=\"hljs-number\">100</span>][];<br><span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> n=<span class=\"hljs-number\">0</span>;n&lt;<span class=\"hljs-number\">100</span>;n++)<br>    feb[n]=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">int</span>[n+<span class=\"hljs-number\">1</span>];<span class=\"hljs-comment\">//regard feb[n] as an array name.</span><br></code></pre></td></tr></table></figure>\n<p><strong>Array copy:</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">int</span>[] a = &#123;<span class=\"hljs-number\">1</span>&#125;;<br><span class=\"hljs-keyword\">int</span>[] b = a;<br>a[<span class=\"hljs-number\">0</span>]=<span class=\"hljs-number\">5</span>;<span class=\"hljs-comment\">//now,b[0] is also 5</span><br><span class=\"hljs-keyword\">int</span>[] ca = Arrays.copyOf(a,<span class=\"hljs-number\">5</span>);<span class=\"hljs-comment\">//then we get a new array, the size is 5.</span><br></code></pre></td></tr></table></figure>\n<h2 id=\"Java-sentences\"><a href=\"#Java-sentences\" class=\"headerlink\" title=\"Java sentences\"></a>Java sentences</h2><h3 id=\"For\"><a href=\"#For\" class=\"headerlink\" title=\"For\"></a>For</h3><h4 id=\"For-each\"><a href=\"#For-each\" class=\"headerlink\" title=\"For each\"></a><strong>For each</strong></h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> element:a)<br>\tSystem.out.println(element);<br></code></pre></td></tr></table></figure>\n"},{"layout":"post","title":"C++语言学习笔记","intro":"","date":"2019-11-19T08:00:00.000Z","author":"Makinohara","featured_image":"http://msfasr.com//img/cpp.jpg","catalog":true,"_content":"\n[TOC]\n\n\n\n> I'm refactoring this note into English version. This may spend me lots of time.\n>\n> But I believe it will be a good form for me to learn English.\n>\n> Carry on! \n\n# C++ Language Studying(Section 1)\n\n## Basic C++ Knowledge\n\n### Some tiny knowledge points\n\n1B=8bit(B refers byte and b refers bit)\n\n## C++ I/O\n\n\n\n## C++ Sentences\n\n#### Range for\n\n```c++\nfor(auto s:str1)\n{\n    cout<<S<<endl;\n}\n```\n\nBy using range for, you can process each element in an array or a sequence .\n\n## C++ 类\n\n众所周知，支持面向对象编程是C++的一个重要特性，接下来我们来看类。\n\n```c++\nclass Box\n{\n   public:\n      double length;   // 盒子的长度\n      double breadth;  // 盒子的宽度\n      double height;   // 盒子的高度\n};\n```\n\n带成员函数声明和定义：\n\n```c++\nclass Box\n{\n   public:\n      double length;   // 长度\n      double breadth;  // 宽度\n      double height;   // 高度\n      // 成员函数声明\n      double get(void);\n      void set( double len, double bre, double hei );\n};\n// 成员函数定义\ndouble Box::get(void)\n{\n    return length * breadth * height;\n}\n \nvoid Box::set( double len, double bre, double hei)\n{\n    length = len;\n    breadth = bre;\n    height = hei;\n}\n```\n\n### 析构函数：\n\n```c++\nclass String{\nprivate:\n    char* p;\npublic:\n    String(int n);\n    ~String();\n};\nString::~String(){   //析构函数\n    delete[] p;\n}\nString::String(int n){\n    p = new char[n];\n}\n```\n\n\n\n### c++继承\n\n```c++\n// 基类\nclass Shape \n{\n   public:\n      void setWidth(int w)\n      {\n         width = w;\n      }\n      void setHeight(int h)\n      {\n         height = h;\n      }\n   protected:\n      int width;\n      int height;\n};\n \n// 派生类\nclass Rectangle: public Shape\n{\n   public:\n      int getArea()\n      { \n         return (width * height); \n      }\n};\n\n//多继承\nclass <派生类名>:<继承方式1><基类名1>,<继承方式2><基类名2>,…\n{\n<派生类类体>\n};\n```\n\n\n\n重载：\n\n```c++\n//运算符重载：\nBox operator+(const Box& b)\n      {\n         Box box;\n         box.length = this->length + b.length;\n         box.breadth = this->breadth + b.breadth;\n         box.height = this->height + b.height;\n         return box;\n      }\n\n//函数重载：\nclass printData\n{\n   public:\n      void print(int i) {\n        cout << \"整数为: \" << i << endl;\n      }\n \n      void print(double  f) {\n        cout << \"浮点数为: \" << f << endl;\n      }\n \n      void print(char c[]) {\n        cout << \"字符串为: \" << c << endl;\n      }\n};\n```\n\n\n\n## 命名空间\n\n```c++\n// 第一个命名空间\nnamespace first_space{\n   void func(){\n      cout << \"Inside first_space\" << endl;\n   }\n}\n// 第二个命名空间\nnamespace second_space{\n   void func(){\n      cout << \"Inside second_space\" << endl;\n   }\n}\nint main ()\n{\n \n   // 调用第一个命名空间中的函数\n   first_space::func();\n   \n   // 调用第二个命名空间中的函数\n   second_space::func(); \n \n   return 0;\n}\n```\n\n## 王氏C++——应付考试内容\n\n```c++\n//自由函数与成员函数，运算符重载的不同\n\n#include<bits/stdc++.h>\nclass complex{\n    public:\n    complex(int ri = 0, int ii = 0){\n        r = ri;\n        i = ii;\n    }\n    int r;\n    int i;\n    friend complex operator+(const complex &b) ;//友元函数\n    //complex operator+(const complex &b) const;  成员函数\n};\n\ncomplex operator+(const complex &a,const complex &b) {\n    return complex(a.r+b.r,a.i+b.i);\n}\n\n/*\n成员函数\ncomplex complex::operator+(const complex &b) const{\n    return complex(r+b.r,i+b.i);\n}\n*/\n\nint main(){\n    complex c1(1,1);\n    complex c2(2,2);\n    complex c3 = c1+c2;\n    complex c4 = c2+3;//成员函数无法执行此操作，而友元函数会得出结果c4.r = c2.r+3,c4.r = c2.r;\n    return 0;\n}\n\n//有关数组一说\nfloat[2] x[100];//这是每个元素为2个float元素为元素的数组的数组。但是是错的，编译不通过。\n```\n\n### 引用：\n\n```c++\nint x = 5;\nint &rx = x;\n//rx = 7->x = 7\n```\n\n### 函数：\n\n```c++\ndatatype func_name(datatype a){\n\t\n}\n\ndatatype func_name(datatype &rr){\n    rr = 2;\n}\n\ndatatype func_name(const float &rr){\n    rr = 2;//ERROR\n}\n\n//example:\nint fun(int &i){\n    i = 36;\n    return i;\n}\n\nint main(){\n    int i = 3;\n    int f = fun(i);\n    return 0;\n}\n\n//数组名做参数\nint calcsum(int x[],int size){\n    int sum;\n    for (int i = 0; i < size; i++)\n    {\n        sum+=x[i];\n    }\n    return sum;\n}\n\nint main(){\n    int x[2]={1,2};\n    int sum = calcsum(x,2);\n    return 0;\n}\n\n\n```\n\n\n\n### 有关类的四个基本函数\n\n```c++\nclass Clock{\n    private:\n    int a;\n    int b;\n    public:\n    clock(int a, int b);//构造函数\n    clock();//默认构造函数\n    clock(int i,int j){\n        a = i;\n        b = j;\n    }\n    \n    //初始化列表：\n    clock(int s, int i):a(s), b(i){};\n    \n    //析构函数\n    ~clock;\n    \n    //拷贝构造函数\n    clock(const clock &c){\n        a = c.a;\n        b = c.b;\n    }\n    \n    //拷贝赋值函数\n    clock& operator=(const clock &c){\n        if (&c!= this){   //避免自己拷贝自己的情况\n            a = c.a;\n            b = c.b;\n        }\n        return *this;\n    }\n    \n}\n```\n\n### 常函数：\n\n\n\n```c++\nclass circle{\n    private:\n    int r;\n    public:\n    int getR(){\n        return r;\n    }\n    circle(int i){\n        r = i;\n    }\n\n    float getArea() /*(const)*/{\n        return 3.1415926 *r*r;\n    }\n    float getAreaC() const){\n        return 3.1415926 *r*r;\n    }\n};\n\n\n\nint main(){\n    const circle c1(1);\n    float area = c1.getArea();//错误，不是常函数无法访问const修饰的对象\n    float area = c1.getAreaC();//正确\n    return 0;\n}\n```\n\n\n\n### 继承：\n\n```c++\nclass circle2:/*(private or protected or public)*/circle{\n    ......\n}\n```\n\n### 虚函数：\n\n```c++\n#include<iostream>\n\nclass Base1{\n\tpublic:\n    virtual void display() const;\n};\n\nvoid Base1::display() const{\n    std::cout<<1<<std::endl;\n}\n\nclass Base2:public Base1{\n    public:\n    void display() const ;\n};\nvoid Base2::display() const{\n    std::cout<<2<<std::endl;\n}\n\nvoid function(Base1 *ptr){//一个指向父类的指针\n    ptr->display();\n}\n\nint main(){\n    Base1 b1;\n    Base2 b2;\n    function(&b1);//调用 void Base1::display() const\n    function(&b2);//调用 void Base2::display() const\n}\n```\n\n三种继承方式：父类成员对子类的可见性：\n\n| 父类访问控制/继承方式： | public    | protected | private |\n| ----------------------- | --------- | --------- | ------- |\n| public                  | public    | protected | private |\n| protected               | protected | protected | private |\n| private                 | private   | private   | private |\n\n\n\n## C++ Variable\n\n#### C++ Variable types:\n\n| Type        | Implication                                   | size                 |\n| ----------- | --------------------------------------------- | -------------------- |\n| bool        | bool type                                     | undefined            |\n| char        | character                                     | 8b                   |\n| wchar_t     | wide character                                | 16b                  |\n| char16_t    | Unicode character                             | 16b                  |\n| char32_t    | Unicode character                             | 32b                  |\n| short       | short integer                                 | 16b                  |\n| int         | integer                                       | 16b                  |\n| long        | long integer                                  | 32b                  |\n| long long   | long long integer                             | 64b                  |\n| float       | single-precision floating point number        | 6 significant digit  |\n| double      | double-precision floating point number        | 10 significant digit |\n| long double | expand double-precision floating point number | 10 significant digit |\n\nUse `unsigned` to state an unsigned variable type, an unsigned variable do not have a sign digit.\n\n#### Type conversion\n\n```c++\nbool a =42;// 0 refers true and the others refer false.\nint i =3.14;// the value of i is 3,the fractional digit has been dropped.\ndouble pi =i;//the value of pi is 3\nunsigned char c = -1; //the value of c is 255\n```\n\n`WARNING`: **DO NOT USE UNSIGNED TYPE AND  SIGNED TYPE VARIABLE AT THE SAME TIME !!!**\n\n#### Reference\n\n```c++\nint a=3;\nint &num = a;// num is a reference of a\nint &num2;//ERROR: reference must be initialized\n```\n\n#### Pointer\n\nPointers point to a pointer:\n\n```c++\nint a=1024;\nint *ptr1 = &a;\nint **ptr2 = &ptr1;\ncout<<**ptr2<<endl;// output 1024\n```\n\nC++ Standard Library :: begin, end\n\n```c++\nint ia[]={1,2,3,4,5,6,7,8,9};\nint *beg = begin(ia);//refer a[0]\nint *end = end(ia);//refer the next position after the last element of an array\n```\n\nPointer with custom size:\n\n```c++\nint a[2][2];\nint *p[2];//NOT THIS: It created a pointer array\nint (*p2)[2];//a pointer which can point to an array with 2 ints.\n//use decltype or auto:\ndecltype *p3 = a;\n```\n\n\n\n#### Const\n\nYou can use `const` to make a variable unchangeable.\n\n**Top-level-const and Low-level-const:**\n\n```c++\nint i=0;\nint *const p1 = &i;//the value of pointer can not be changed,top-level-const\nconst int ci =42;//the value of ci can not be changed.\nconst int *p2 = &ci;//the value of pointer can not be changed\n```\n\n#### Typedef\n\n```c++\ntypedef double wages;\n```\n\n#### Decltype\n\nUse decltype to get a type that a function returns.\n\n```c++\ndecltype(f()) sum =0;//the type of sum is just the type that f() returns.\n```\n\n#### Write your own head file\n\nYou'd better define your struct and class in a head file .\n\n## Data Structure(STL)\n\n#### Using statement\n\nBefore using C++ Standard Library, you can:\n\n```c++\n//method 1\nstd::cout<<\"Test\"<<std::endl;\n//method 2:\nusing namespace std;\ncout<<\"123\"<<endl;\n```\n\n\n\n#### Using iterator\n\nA sort of intelligence pointer , used for STD .\n\nC++ example:\n\n```c++\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nint main()\n{\n    vector<int> vec1;//Statement\n    for (int i = 0; i < 5; i++)\n    {\n        vec1.push_back(i);\n    }\n    auto it = vec1.begin();//Auto Statement\n    vector<int>:: iterator it = vec1.begin();//Standard statement\n\n    cout << *it << endl;\n    for (; it != vec1.end(); it++)\n    {\n        cout << *it << endl;\n    }\n    \n    return 0;\n    \n}\n```\n\nOperations:\n\n```c++\nit = v1.begin();//set v1 refer to the first\n*it;//return value\nit++;//point to the next\n*it = 1234;//change value\nit2 = it + 2;//send the address + 2 to another\n```\n\n\n\n#### Stack: a LIFO(Last in First out) data structure\n\nStatement in C++:\n\n```c++\nstack<int> stack_name;\n```\n\nBasic operations:\n\n```c++\nstack_name.push(data);//push a data into the stack\ncout<<stack_name.top();//read the data at top\nstack_name.pop();//pop out the data at top\n```\n\n#### Queue: a FIFO(First in First out) data structure\n\nStatement in C++:\n\n```c++\nqueue<int> q;\n```\n\nBasic operations:\n\n```c++\nq.front();//read the data at the front\nq.push();//push a data at the end of the queue\nq.pop();//pop out the data at the front\nq = queue<int>();//empty the queue\n```\n\nThen, let's see a sample of using queue.\n\nCruel torture (AHU77)\n\n------\n\nPlease read the question at [bofcOJ](oj.bofc.tech)\n\n------\n\nCode:\n\n```c++\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nint main()\n{\n    int qty_children = 0, k;\n    cin >> qty_children >> k;\n\n    \n    int sum = 0;\n    queue<int> children;\n    for (int i = 1; i <= qty_children; i++)\n    {\n        children.push(i);\n    } //statement queue\n    while (sum < qty_children-1)\n    {\n\n        for (int i = 0; i < k-1; i++)\n        {\n            children.push(children.front());//if we do not pull out the line, thus we let this wild kid get to the back.\n            children.pop();\n        }\n        children.pop();//when it comes to pull out the line, this wild kid is over.\n        sum++;\n    }\n    cout << children.front();\n\n    return 0;\n}\n```\n\n\n\n#### Using dynamic array with pointer\n\nCode demo:\n\n```c++\nint *p = new int[10];//Create an array when running.\ndelete[] p;//the realease of a dynamic array method is not same with a variable\n```\n\n#### bitset\n\nA data structure which storages bit.\n\n```c++\n    bitset<4> bitset1;//construct without parameter:set space 4\n\n    bitset<8> bitset2(12);//the space is 8, storge 12 into binary system,use 0 to fill the blank bit.\n\n    string s = \"100101\";\n    bitset<10> bitset3(s);//the space is 10,use 0 to fill the blank bit,the string CAN ONLY CONTAINS 0 and 1.\n    \n    char s2[] = \"10101\";\n    bitset<13> bitset4(s2);//the space is 13,use 0 to fill the blank bit\n\n    cout << bitset1 << endl;//0000\n    cout << bitset2 << endl;//00001100\n    cout << bitset3 << endl;//0000100101\n    cout << bitset4 << endl;//0000000010101\n    bitset3[0];//Simular as array,use subscript to access the elements.\n    \n```\n\nThere's so many ways to use bitset, but let's see struct first.\n\n#### Struct\n\nA struct is a data structure which contains serval variable type. The struct can also form an array!\n\nC++ examples\n\n```c++\nstruct Books\n{\n   char  title[50];\n   char  author[50];\n   char  subject[100];\n   int   book_id;\n} book = {\"C Language\", \"RUNOOB\", \"Programing Language\", 123456};//define a struct and initialize\n\n\n```\n\n//Of course, you can use it as below: No initialize.\n\n```c++\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nstruct student //define the struct of single student\n{\n    int number;\n    int score;\n};\n\nint main()\n{\n\tstudent students[10000];\n       for (int i = 0; i < total; i++) //input scores\n      {\n        cin >> students[i].number >> students[i].score;//See the examples here!\n      }\n\n    return 0;\n\n}\n//It means you can only define a struct and use it as a data type!\n```\n\n##### Struct pointer\n\n```c++\n#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\nstruct student //define the struct of single student\n{\n    int number;\n    int score;\n};\n\nint main()\n{\n    struct student students[100];\n\n    scanf(\"%d%d\", &students[0].number, &students[0].score); //See the examples here!\n\n    struct student *p = students; //initialize the pointer.\n    printf(\"%d\", p->number);      \n    p++;                          //go to next student.\n    return 0;\n}\n\n```\n\n\n\n```c\n#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\nstruct student\n{\n    int id;\n    int maths;\n};\n\nint main()\n{\n    struct student stu1[2];\n    struct student *p ;\n    p=stu1;\n    \n    printf(\"%d\",p->id);\n\n    return 0;\n}\n```\n\n\n\n#### Vector\n\nThis is a significant data structure in  C++ standard library , equals an array that can change memory size at will,and you can also CRUD in it in will.\n\nBasic operations:\n\n```c++\nvector<int> c;\nc.push_back(1);//place the element at the end of the vector.\n\n```\n\n```c++\nvector<Sales_item> sales_vec;//vector can also store class or struct\nvector<vector<string>>;//the elements in this vector are also vector objects.\n```\n\nOther operations:\n\n```c++\nvector<T> v1{1,2,3,4,5};\nvector<T> v2(5,5);//{5,5,5,5,5}\nvector<string> v3={\"Hello\",\"World\",\"!\"};\nvector<int> v4(10); //Create a vector have 10 elements, initialized by 0.\nv4.push_back(1);//put an elemnet to the back of the vector;\nv4.size();\n```\n\nUse array to initialize a vector \n\n```c++\nint a[]={1,2,3,4,5};\nvector<int> v1(begin(a),end(arr));//send the begin and end to construct.\n```\n\n\n\n#### String\n\nString is a **char** sequence whose size is changeable .\n\nInitialize:\n\n```c++\nstring s1;//an empty string has been created\nstring s2(10,'c');//\"cccccccccc\"\n```\n\nOperations:\n\n| Operation | Action                          |\n| --------- | ------------------------------- |\n| os<<s;    | Write s to ostream              |\n| is>>s;    | Write instream to s             |\n| s.size(); | Return the length;              |\n| s1+s2     | Connect two strings             |\n| s1>=s2    | compare, use *dictionary order* |\n\n**Get line**\n\n```c++\nwhile(getline(cin,line)&&line.size()>0)\n{\n    //code\n}\n```\n\n**Character type:**\n\n```c++\ntolower(c);//change into lower size\ntoupper(c);//change into upper size\n```\n\n`Warning`: Do not do this:\n\n```c++\nchar a[]=\"fff\";\nchar b[]=\"aaa\";\nstring c = a+b;//ERROR: you are trying to add two pointers!!!\n```\n\n\n\n#### Set\n\nAn example:\n\n```c++\n#include <iostream>\n#include <set>\n\nusing namespace std;\n\nint main()\n{\n    int case_number;\n    cin >> case_number; //Input the amount\n    set<int> numbers;\n    int put_number;\n    set<int> :: iterator out_number;\n    for (int i = 0; i < case_number; i++) // Input data\n    {\n        cin >> put_number;\n        numbers.insert(put_number);\n    }\n    cout << numbers.size() << endl;\n    int count=0;\n    for (out_number = numbers.begin(); out_number != numbers.end(); out_number++) \n    {\n        \n        cout << *out_number ;\n        count++;\n        if(count <= numbers.size()-1) cout<<\" \";\n    }\n\n    return 0;\n}\n```\n\nSet can automatically sort, and the elements are strictly diverse .\n\n#### 优先队列:优先级最高的元素先出的队列\n\nC++的标准库中包含了一个很好用的数据结构:优先队列.该结构可以将优先级大的元素排到前面.\n\n```c++\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nint main()\n{\n\tpriority_queue<int> que_apples; //默认使用vector,大的数字优先\n\tpriority_queue<int, vector<int>, greater<int>> app_que;//小的数字优先\n\t\n\treturn 0;\n}\n```\n\n自定义优先级:重载运算符\n\n```c++\nclass Student\n{\n    int id;\n    char name[20];\n    bool gender;\n    bool operator < (Student &a) const\n    {\n        return id > a.id;\n    }\n};\n```\n\n\n\n## STL算法\n\n#### 快排(sort),包含在algorithm\n\n这个算法极其牛逼,解放了万千程序员的双手(赞美)!!!\n\n快排作用的内容:数组/向量容器等\n\nC++使用实例\n\n```c++\nvector<int> v1;\nint numbers[2][5];\nstruct student\n{\n    int number;\n    int score;\n    string name;\n}\n//此处省略若干行插入数据代码,让我们假设这这里面有很多数据\nsort(v1.begin(),v1.end());//默认从小到大排列\nbool compare(int a , int b)//按某种排序方案排序\n{\n    return a>b;//这样是降序排列\n    return numbers[a][0]>numbers[b][0];//还能读取某些数据的元素排列\n    return student[a].score>student[b].score;//还能读取某些结构体的成员\n}\n```\n\n\n\n## 常用基础算法(一些很基本的,要背的)\n\n#### 公因数公倍数\n\n```c++\n#include <stdio.h>\n#include <math.h>\nint main()\n{\n    int m, n;\n    int s = 0;\n    int min = 0;\n    scanf(\"%d%d\", &m, &n);\n    //最大公约数\n    if (m > n)\n    {\n        s = m;\n        min = n;\n    }\n    else\n    {\n        s = n;\n        min = m;\n    }\n    while (min != 0)\n    {\n        int t = s%min;\n        s = min;\n        min = t;\n    }\n    printf(\"%d\\n\",s);\n    //重置两个数\n    if (m > n)\n    {\n        s = m;\n        min = n;\n    }\n    else\n    {\n        s = n;\n        min = m;\n    }\n    //公倍数\n    for (int i = min;; i += min)\n    {\n        double resR = (double)i / s;\n        int floor = i / s;\n\n        if ((double)floor == resR)\n        {\n            printf(\"%d\\n\", i);\n            break;\n        }\n    }\n\n    return 0;\n}\n```\n\n\n\n#### 筛法判断质数\n\n上代码:\n\n```c++\nbool isPrime(int a)\n{\n    if (a == 2)\n        return true;\n    if (a % 2 == 0)\n        return false;\n    int x = sqrt(a);\n    for (int i = 2; i <= x; ++i)\n    {\n        if (a % i == 0)\n            return false;\n    }\n    return true;\n}\n```\n\n#### 素数的埃式筛法\n\n先确认一个数是素数,然后划掉其倍数,在找到下一个素数后,再划掉其倍数,最后只剩素数.\n\n```c++\nint main()\n{\n    int number_list[1000] = {0}; //we can get primes below 1000\n    bool break_flag = false;\n    number_list[0] = 1;\n    int pri = 2;\n    while (!break_flag)\n    {\n        // the non-prime will be mark 1\n        int count = pri;\n        while (count <= 1000)\n        {\n            count += pri;\n            if (count >= 1000)\n                break;\n            number_list[count] = 1;\n        }\n        int temp_pri = pri;\n        while (true)\n        {\n            temp_pri++;\n            if (temp_pri >= 999)\n            {\n                break_flag = true;\n                break;\n            }\n            if (number_list[temp_pri] == 0)\n            {\n                pri = temp_pri;\n                break;\n            }\n        }\n    }\n    for (int i = 0; i < 1000; i++)\n    {\n        if (number_list[i] == 0)\n        {\n            cout << i << \" \";\n        }\n    }\n\n    return 0;\n}\n```\n\n#### 分解质因数(简便方法)\n\n```c\n#include <stdio.h>\n#include <math.h>\n//这个程序适合好好阅读并分析\nvoid foo(long long int n)\n{\n    long long int sqr = sqrt(n);//测试质数只需测到平方的取整\n    long long int i = 0;\n    for(i = 2; i <= sqr; i++)//从2开始测\n    {\n        if(n % i == 0 && (n /= i))//后面的表达式指的是除i留下剩余部分\n        {\n            printf(\"%lld \", i--);\n        }\n    }\n    if(n != 1)//不打印1作为因子\n    {\n        printf(\"%lld\", n);\n    }\n    printf(\"\\n\");\n}\n\nint main()\n{\n    long long int n ;\n    scanf(\"%lld\", &n);\n    foo(n);\n    return 0;\n}\n\n```\n\n\n\n#### 查找字符(这是C标准库里的内容)\n\n用于在一个字符串(也就是char数组)中查找指定的字符\n\n```c++\nstrchr(string_name, 'A');//在string name 这个字符串中寻找A这个字符\n//返回有多种可能,若找到,返回指向这个字符的指针,否则返回NULL(这个NULL是标识符,不是字符串之类的玩意)\n```\n\n#### 位运算\n\n位运算是一种直接操作位的运算,其包含多种运算符:\n\n上代码:\n\n```c++\n<<; //左移运算符,移动时丢弃左边的位,用0补充\n\"11110000\"<<\"10000000\";//左移了3位!!!\n>>; //右移运算符,移动时丢弃右边的位,左边用0或原来丢弃的左边的位补充!!!\n\"11111111\">>\"00001111\";//右移了四位!!!\n    \n//接下来看看逻辑位运算\n~;//按位非,倒置0/1\n|;//按位或,有一为1,否则为0\n^;//XOR,相同为0,不同为1\n&;//AND,都为1才为1,否则为0\n\n//一些常用的位逻辑运算:\nlottabits |= pow(2,3);//打开位,也就是将某一位置为1,其中后面的2的多少次方代表着打开的位置(2的0次方代表右起第一位,以此类推)\nlottabits ^= pow(2,3);//切换位:置反\nlottabits &= pow(2,3);//关闭位:置0\nbool isOpen = lottabits & pow(2,3);//测试某一位是否为1(打开),返回true or false.\n```\n\n","source":"_posts/2019-11-19-Cpp.markdown","raw":"---\nlayout:     post\ntitle:      \"C++语言学习笔记\"\nintro:   \"\"\ndate:       2019-11-19 16:00:00\nauthor:     \"Makinohara\"\nfeatured_image: http://msfasr.com//img/cpp.jpg\ncatalog: true\ntags:\n    - 编程语言\n---\n\n[TOC]\n\n\n\n> I'm refactoring this note into English version. This may spend me lots of time.\n>\n> But I believe it will be a good form for me to learn English.\n>\n> Carry on! \n\n# C++ Language Studying(Section 1)\n\n## Basic C++ Knowledge\n\n### Some tiny knowledge points\n\n1B=8bit(B refers byte and b refers bit)\n\n## C++ I/O\n\n\n\n## C++ Sentences\n\n#### Range for\n\n```c++\nfor(auto s:str1)\n{\n    cout<<S<<endl;\n}\n```\n\nBy using range for, you can process each element in an array or a sequence .\n\n## C++ 类\n\n众所周知，支持面向对象编程是C++的一个重要特性，接下来我们来看类。\n\n```c++\nclass Box\n{\n   public:\n      double length;   // 盒子的长度\n      double breadth;  // 盒子的宽度\n      double height;   // 盒子的高度\n};\n```\n\n带成员函数声明和定义：\n\n```c++\nclass Box\n{\n   public:\n      double length;   // 长度\n      double breadth;  // 宽度\n      double height;   // 高度\n      // 成员函数声明\n      double get(void);\n      void set( double len, double bre, double hei );\n};\n// 成员函数定义\ndouble Box::get(void)\n{\n    return length * breadth * height;\n}\n \nvoid Box::set( double len, double bre, double hei)\n{\n    length = len;\n    breadth = bre;\n    height = hei;\n}\n```\n\n### 析构函数：\n\n```c++\nclass String{\nprivate:\n    char* p;\npublic:\n    String(int n);\n    ~String();\n};\nString::~String(){   //析构函数\n    delete[] p;\n}\nString::String(int n){\n    p = new char[n];\n}\n```\n\n\n\n### c++继承\n\n```c++\n// 基类\nclass Shape \n{\n   public:\n      void setWidth(int w)\n      {\n         width = w;\n      }\n      void setHeight(int h)\n      {\n         height = h;\n      }\n   protected:\n      int width;\n      int height;\n};\n \n// 派生类\nclass Rectangle: public Shape\n{\n   public:\n      int getArea()\n      { \n         return (width * height); \n      }\n};\n\n//多继承\nclass <派生类名>:<继承方式1><基类名1>,<继承方式2><基类名2>,…\n{\n<派生类类体>\n};\n```\n\n\n\n重载：\n\n```c++\n//运算符重载：\nBox operator+(const Box& b)\n      {\n         Box box;\n         box.length = this->length + b.length;\n         box.breadth = this->breadth + b.breadth;\n         box.height = this->height + b.height;\n         return box;\n      }\n\n//函数重载：\nclass printData\n{\n   public:\n      void print(int i) {\n        cout << \"整数为: \" << i << endl;\n      }\n \n      void print(double  f) {\n        cout << \"浮点数为: \" << f << endl;\n      }\n \n      void print(char c[]) {\n        cout << \"字符串为: \" << c << endl;\n      }\n};\n```\n\n\n\n## 命名空间\n\n```c++\n// 第一个命名空间\nnamespace first_space{\n   void func(){\n      cout << \"Inside first_space\" << endl;\n   }\n}\n// 第二个命名空间\nnamespace second_space{\n   void func(){\n      cout << \"Inside second_space\" << endl;\n   }\n}\nint main ()\n{\n \n   // 调用第一个命名空间中的函数\n   first_space::func();\n   \n   // 调用第二个命名空间中的函数\n   second_space::func(); \n \n   return 0;\n}\n```\n\n## 王氏C++——应付考试内容\n\n```c++\n//自由函数与成员函数，运算符重载的不同\n\n#include<bits/stdc++.h>\nclass complex{\n    public:\n    complex(int ri = 0, int ii = 0){\n        r = ri;\n        i = ii;\n    }\n    int r;\n    int i;\n    friend complex operator+(const complex &b) ;//友元函数\n    //complex operator+(const complex &b) const;  成员函数\n};\n\ncomplex operator+(const complex &a,const complex &b) {\n    return complex(a.r+b.r,a.i+b.i);\n}\n\n/*\n成员函数\ncomplex complex::operator+(const complex &b) const{\n    return complex(r+b.r,i+b.i);\n}\n*/\n\nint main(){\n    complex c1(1,1);\n    complex c2(2,2);\n    complex c3 = c1+c2;\n    complex c4 = c2+3;//成员函数无法执行此操作，而友元函数会得出结果c4.r = c2.r+3,c4.r = c2.r;\n    return 0;\n}\n\n//有关数组一说\nfloat[2] x[100];//这是每个元素为2个float元素为元素的数组的数组。但是是错的，编译不通过。\n```\n\n### 引用：\n\n```c++\nint x = 5;\nint &rx = x;\n//rx = 7->x = 7\n```\n\n### 函数：\n\n```c++\ndatatype func_name(datatype a){\n\t\n}\n\ndatatype func_name(datatype &rr){\n    rr = 2;\n}\n\ndatatype func_name(const float &rr){\n    rr = 2;//ERROR\n}\n\n//example:\nint fun(int &i){\n    i = 36;\n    return i;\n}\n\nint main(){\n    int i = 3;\n    int f = fun(i);\n    return 0;\n}\n\n//数组名做参数\nint calcsum(int x[],int size){\n    int sum;\n    for (int i = 0; i < size; i++)\n    {\n        sum+=x[i];\n    }\n    return sum;\n}\n\nint main(){\n    int x[2]={1,2};\n    int sum = calcsum(x,2);\n    return 0;\n}\n\n\n```\n\n\n\n### 有关类的四个基本函数\n\n```c++\nclass Clock{\n    private:\n    int a;\n    int b;\n    public:\n    clock(int a, int b);//构造函数\n    clock();//默认构造函数\n    clock(int i,int j){\n        a = i;\n        b = j;\n    }\n    \n    //初始化列表：\n    clock(int s, int i):a(s), b(i){};\n    \n    //析构函数\n    ~clock;\n    \n    //拷贝构造函数\n    clock(const clock &c){\n        a = c.a;\n        b = c.b;\n    }\n    \n    //拷贝赋值函数\n    clock& operator=(const clock &c){\n        if (&c!= this){   //避免自己拷贝自己的情况\n            a = c.a;\n            b = c.b;\n        }\n        return *this;\n    }\n    \n}\n```\n\n### 常函数：\n\n\n\n```c++\nclass circle{\n    private:\n    int r;\n    public:\n    int getR(){\n        return r;\n    }\n    circle(int i){\n        r = i;\n    }\n\n    float getArea() /*(const)*/{\n        return 3.1415926 *r*r;\n    }\n    float getAreaC() const){\n        return 3.1415926 *r*r;\n    }\n};\n\n\n\nint main(){\n    const circle c1(1);\n    float area = c1.getArea();//错误，不是常函数无法访问const修饰的对象\n    float area = c1.getAreaC();//正确\n    return 0;\n}\n```\n\n\n\n### 继承：\n\n```c++\nclass circle2:/*(private or protected or public)*/circle{\n    ......\n}\n```\n\n### 虚函数：\n\n```c++\n#include<iostream>\n\nclass Base1{\n\tpublic:\n    virtual void display() const;\n};\n\nvoid Base1::display() const{\n    std::cout<<1<<std::endl;\n}\n\nclass Base2:public Base1{\n    public:\n    void display() const ;\n};\nvoid Base2::display() const{\n    std::cout<<2<<std::endl;\n}\n\nvoid function(Base1 *ptr){//一个指向父类的指针\n    ptr->display();\n}\n\nint main(){\n    Base1 b1;\n    Base2 b2;\n    function(&b1);//调用 void Base1::display() const\n    function(&b2);//调用 void Base2::display() const\n}\n```\n\n三种继承方式：父类成员对子类的可见性：\n\n| 父类访问控制/继承方式： | public    | protected | private |\n| ----------------------- | --------- | --------- | ------- |\n| public                  | public    | protected | private |\n| protected               | protected | protected | private |\n| private                 | private   | private   | private |\n\n\n\n## C++ Variable\n\n#### C++ Variable types:\n\n| Type        | Implication                                   | size                 |\n| ----------- | --------------------------------------------- | -------------------- |\n| bool        | bool type                                     | undefined            |\n| char        | character                                     | 8b                   |\n| wchar_t     | wide character                                | 16b                  |\n| char16_t    | Unicode character                             | 16b                  |\n| char32_t    | Unicode character                             | 32b                  |\n| short       | short integer                                 | 16b                  |\n| int         | integer                                       | 16b                  |\n| long        | long integer                                  | 32b                  |\n| long long   | long long integer                             | 64b                  |\n| float       | single-precision floating point number        | 6 significant digit  |\n| double      | double-precision floating point number        | 10 significant digit |\n| long double | expand double-precision floating point number | 10 significant digit |\n\nUse `unsigned` to state an unsigned variable type, an unsigned variable do not have a sign digit.\n\n#### Type conversion\n\n```c++\nbool a =42;// 0 refers true and the others refer false.\nint i =3.14;// the value of i is 3,the fractional digit has been dropped.\ndouble pi =i;//the value of pi is 3\nunsigned char c = -1; //the value of c is 255\n```\n\n`WARNING`: **DO NOT USE UNSIGNED TYPE AND  SIGNED TYPE VARIABLE AT THE SAME TIME !!!**\n\n#### Reference\n\n```c++\nint a=3;\nint &num = a;// num is a reference of a\nint &num2;//ERROR: reference must be initialized\n```\n\n#### Pointer\n\nPointers point to a pointer:\n\n```c++\nint a=1024;\nint *ptr1 = &a;\nint **ptr2 = &ptr1;\ncout<<**ptr2<<endl;// output 1024\n```\n\nC++ Standard Library :: begin, end\n\n```c++\nint ia[]={1,2,3,4,5,6,7,8,9};\nint *beg = begin(ia);//refer a[0]\nint *end = end(ia);//refer the next position after the last element of an array\n```\n\nPointer with custom size:\n\n```c++\nint a[2][2];\nint *p[2];//NOT THIS: It created a pointer array\nint (*p2)[2];//a pointer which can point to an array with 2 ints.\n//use decltype or auto:\ndecltype *p3 = a;\n```\n\n\n\n#### Const\n\nYou can use `const` to make a variable unchangeable.\n\n**Top-level-const and Low-level-const:**\n\n```c++\nint i=0;\nint *const p1 = &i;//the value of pointer can not be changed,top-level-const\nconst int ci =42;//the value of ci can not be changed.\nconst int *p2 = &ci;//the value of pointer can not be changed\n```\n\n#### Typedef\n\n```c++\ntypedef double wages;\n```\n\n#### Decltype\n\nUse decltype to get a type that a function returns.\n\n```c++\ndecltype(f()) sum =0;//the type of sum is just the type that f() returns.\n```\n\n#### Write your own head file\n\nYou'd better define your struct and class in a head file .\n\n## Data Structure(STL)\n\n#### Using statement\n\nBefore using C++ Standard Library, you can:\n\n```c++\n//method 1\nstd::cout<<\"Test\"<<std::endl;\n//method 2:\nusing namespace std;\ncout<<\"123\"<<endl;\n```\n\n\n\n#### Using iterator\n\nA sort of intelligence pointer , used for STD .\n\nC++ example:\n\n```c++\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nint main()\n{\n    vector<int> vec1;//Statement\n    for (int i = 0; i < 5; i++)\n    {\n        vec1.push_back(i);\n    }\n    auto it = vec1.begin();//Auto Statement\n    vector<int>:: iterator it = vec1.begin();//Standard statement\n\n    cout << *it << endl;\n    for (; it != vec1.end(); it++)\n    {\n        cout << *it << endl;\n    }\n    \n    return 0;\n    \n}\n```\n\nOperations:\n\n```c++\nit = v1.begin();//set v1 refer to the first\n*it;//return value\nit++;//point to the next\n*it = 1234;//change value\nit2 = it + 2;//send the address + 2 to another\n```\n\n\n\n#### Stack: a LIFO(Last in First out) data structure\n\nStatement in C++:\n\n```c++\nstack<int> stack_name;\n```\n\nBasic operations:\n\n```c++\nstack_name.push(data);//push a data into the stack\ncout<<stack_name.top();//read the data at top\nstack_name.pop();//pop out the data at top\n```\n\n#### Queue: a FIFO(First in First out) data structure\n\nStatement in C++:\n\n```c++\nqueue<int> q;\n```\n\nBasic operations:\n\n```c++\nq.front();//read the data at the front\nq.push();//push a data at the end of the queue\nq.pop();//pop out the data at the front\nq = queue<int>();//empty the queue\n```\n\nThen, let's see a sample of using queue.\n\nCruel torture (AHU77)\n\n------\n\nPlease read the question at [bofcOJ](oj.bofc.tech)\n\n------\n\nCode:\n\n```c++\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nint main()\n{\n    int qty_children = 0, k;\n    cin >> qty_children >> k;\n\n    \n    int sum = 0;\n    queue<int> children;\n    for (int i = 1; i <= qty_children; i++)\n    {\n        children.push(i);\n    } //statement queue\n    while (sum < qty_children-1)\n    {\n\n        for (int i = 0; i < k-1; i++)\n        {\n            children.push(children.front());//if we do not pull out the line, thus we let this wild kid get to the back.\n            children.pop();\n        }\n        children.pop();//when it comes to pull out the line, this wild kid is over.\n        sum++;\n    }\n    cout << children.front();\n\n    return 0;\n}\n```\n\n\n\n#### Using dynamic array with pointer\n\nCode demo:\n\n```c++\nint *p = new int[10];//Create an array when running.\ndelete[] p;//the realease of a dynamic array method is not same with a variable\n```\n\n#### bitset\n\nA data structure which storages bit.\n\n```c++\n    bitset<4> bitset1;//construct without parameter:set space 4\n\n    bitset<8> bitset2(12);//the space is 8, storge 12 into binary system,use 0 to fill the blank bit.\n\n    string s = \"100101\";\n    bitset<10> bitset3(s);//the space is 10,use 0 to fill the blank bit,the string CAN ONLY CONTAINS 0 and 1.\n    \n    char s2[] = \"10101\";\n    bitset<13> bitset4(s2);//the space is 13,use 0 to fill the blank bit\n\n    cout << bitset1 << endl;//0000\n    cout << bitset2 << endl;//00001100\n    cout << bitset3 << endl;//0000100101\n    cout << bitset4 << endl;//0000000010101\n    bitset3[0];//Simular as array,use subscript to access the elements.\n    \n```\n\nThere's so many ways to use bitset, but let's see struct first.\n\n#### Struct\n\nA struct is a data structure which contains serval variable type. The struct can also form an array!\n\nC++ examples\n\n```c++\nstruct Books\n{\n   char  title[50];\n   char  author[50];\n   char  subject[100];\n   int   book_id;\n} book = {\"C Language\", \"RUNOOB\", \"Programing Language\", 123456};//define a struct and initialize\n\n\n```\n\n//Of course, you can use it as below: No initialize.\n\n```c++\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nstruct student //define the struct of single student\n{\n    int number;\n    int score;\n};\n\nint main()\n{\n\tstudent students[10000];\n       for (int i = 0; i < total; i++) //input scores\n      {\n        cin >> students[i].number >> students[i].score;//See the examples here!\n      }\n\n    return 0;\n\n}\n//It means you can only define a struct and use it as a data type!\n```\n\n##### Struct pointer\n\n```c++\n#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\nstruct student //define the struct of single student\n{\n    int number;\n    int score;\n};\n\nint main()\n{\n    struct student students[100];\n\n    scanf(\"%d%d\", &students[0].number, &students[0].score); //See the examples here!\n\n    struct student *p = students; //initialize the pointer.\n    printf(\"%d\", p->number);      \n    p++;                          //go to next student.\n    return 0;\n}\n\n```\n\n\n\n```c\n#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\nstruct student\n{\n    int id;\n    int maths;\n};\n\nint main()\n{\n    struct student stu1[2];\n    struct student *p ;\n    p=stu1;\n    \n    printf(\"%d\",p->id);\n\n    return 0;\n}\n```\n\n\n\n#### Vector\n\nThis is a significant data structure in  C++ standard library , equals an array that can change memory size at will,and you can also CRUD in it in will.\n\nBasic operations:\n\n```c++\nvector<int> c;\nc.push_back(1);//place the element at the end of the vector.\n\n```\n\n```c++\nvector<Sales_item> sales_vec;//vector can also store class or struct\nvector<vector<string>>;//the elements in this vector are also vector objects.\n```\n\nOther operations:\n\n```c++\nvector<T> v1{1,2,3,4,5};\nvector<T> v2(5,5);//{5,5,5,5,5}\nvector<string> v3={\"Hello\",\"World\",\"!\"};\nvector<int> v4(10); //Create a vector have 10 elements, initialized by 0.\nv4.push_back(1);//put an elemnet to the back of the vector;\nv4.size();\n```\n\nUse array to initialize a vector \n\n```c++\nint a[]={1,2,3,4,5};\nvector<int> v1(begin(a),end(arr));//send the begin and end to construct.\n```\n\n\n\n#### String\n\nString is a **char** sequence whose size is changeable .\n\nInitialize:\n\n```c++\nstring s1;//an empty string has been created\nstring s2(10,'c');//\"cccccccccc\"\n```\n\nOperations:\n\n| Operation | Action                          |\n| --------- | ------------------------------- |\n| os<<s;    | Write s to ostream              |\n| is>>s;    | Write instream to s             |\n| s.size(); | Return the length;              |\n| s1+s2     | Connect two strings             |\n| s1>=s2    | compare, use *dictionary order* |\n\n**Get line**\n\n```c++\nwhile(getline(cin,line)&&line.size()>0)\n{\n    //code\n}\n```\n\n**Character type:**\n\n```c++\ntolower(c);//change into lower size\ntoupper(c);//change into upper size\n```\n\n`Warning`: Do not do this:\n\n```c++\nchar a[]=\"fff\";\nchar b[]=\"aaa\";\nstring c = a+b;//ERROR: you are trying to add two pointers!!!\n```\n\n\n\n#### Set\n\nAn example:\n\n```c++\n#include <iostream>\n#include <set>\n\nusing namespace std;\n\nint main()\n{\n    int case_number;\n    cin >> case_number; //Input the amount\n    set<int> numbers;\n    int put_number;\n    set<int> :: iterator out_number;\n    for (int i = 0; i < case_number; i++) // Input data\n    {\n        cin >> put_number;\n        numbers.insert(put_number);\n    }\n    cout << numbers.size() << endl;\n    int count=0;\n    for (out_number = numbers.begin(); out_number != numbers.end(); out_number++) \n    {\n        \n        cout << *out_number ;\n        count++;\n        if(count <= numbers.size()-1) cout<<\" \";\n    }\n\n    return 0;\n}\n```\n\nSet can automatically sort, and the elements are strictly diverse .\n\n#### 优先队列:优先级最高的元素先出的队列\n\nC++的标准库中包含了一个很好用的数据结构:优先队列.该结构可以将优先级大的元素排到前面.\n\n```c++\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nint main()\n{\n\tpriority_queue<int> que_apples; //默认使用vector,大的数字优先\n\tpriority_queue<int, vector<int>, greater<int>> app_que;//小的数字优先\n\t\n\treturn 0;\n}\n```\n\n自定义优先级:重载运算符\n\n```c++\nclass Student\n{\n    int id;\n    char name[20];\n    bool gender;\n    bool operator < (Student &a) const\n    {\n        return id > a.id;\n    }\n};\n```\n\n\n\n## STL算法\n\n#### 快排(sort),包含在algorithm\n\n这个算法极其牛逼,解放了万千程序员的双手(赞美)!!!\n\n快排作用的内容:数组/向量容器等\n\nC++使用实例\n\n```c++\nvector<int> v1;\nint numbers[2][5];\nstruct student\n{\n    int number;\n    int score;\n    string name;\n}\n//此处省略若干行插入数据代码,让我们假设这这里面有很多数据\nsort(v1.begin(),v1.end());//默认从小到大排列\nbool compare(int a , int b)//按某种排序方案排序\n{\n    return a>b;//这样是降序排列\n    return numbers[a][0]>numbers[b][0];//还能读取某些数据的元素排列\n    return student[a].score>student[b].score;//还能读取某些结构体的成员\n}\n```\n\n\n\n## 常用基础算法(一些很基本的,要背的)\n\n#### 公因数公倍数\n\n```c++\n#include <stdio.h>\n#include <math.h>\nint main()\n{\n    int m, n;\n    int s = 0;\n    int min = 0;\n    scanf(\"%d%d\", &m, &n);\n    //最大公约数\n    if (m > n)\n    {\n        s = m;\n        min = n;\n    }\n    else\n    {\n        s = n;\n        min = m;\n    }\n    while (min != 0)\n    {\n        int t = s%min;\n        s = min;\n        min = t;\n    }\n    printf(\"%d\\n\",s);\n    //重置两个数\n    if (m > n)\n    {\n        s = m;\n        min = n;\n    }\n    else\n    {\n        s = n;\n        min = m;\n    }\n    //公倍数\n    for (int i = min;; i += min)\n    {\n        double resR = (double)i / s;\n        int floor = i / s;\n\n        if ((double)floor == resR)\n        {\n            printf(\"%d\\n\", i);\n            break;\n        }\n    }\n\n    return 0;\n}\n```\n\n\n\n#### 筛法判断质数\n\n上代码:\n\n```c++\nbool isPrime(int a)\n{\n    if (a == 2)\n        return true;\n    if (a % 2 == 0)\n        return false;\n    int x = sqrt(a);\n    for (int i = 2; i <= x; ++i)\n    {\n        if (a % i == 0)\n            return false;\n    }\n    return true;\n}\n```\n\n#### 素数的埃式筛法\n\n先确认一个数是素数,然后划掉其倍数,在找到下一个素数后,再划掉其倍数,最后只剩素数.\n\n```c++\nint main()\n{\n    int number_list[1000] = {0}; //we can get primes below 1000\n    bool break_flag = false;\n    number_list[0] = 1;\n    int pri = 2;\n    while (!break_flag)\n    {\n        // the non-prime will be mark 1\n        int count = pri;\n        while (count <= 1000)\n        {\n            count += pri;\n            if (count >= 1000)\n                break;\n            number_list[count] = 1;\n        }\n        int temp_pri = pri;\n        while (true)\n        {\n            temp_pri++;\n            if (temp_pri >= 999)\n            {\n                break_flag = true;\n                break;\n            }\n            if (number_list[temp_pri] == 0)\n            {\n                pri = temp_pri;\n                break;\n            }\n        }\n    }\n    for (int i = 0; i < 1000; i++)\n    {\n        if (number_list[i] == 0)\n        {\n            cout << i << \" \";\n        }\n    }\n\n    return 0;\n}\n```\n\n#### 分解质因数(简便方法)\n\n```c\n#include <stdio.h>\n#include <math.h>\n//这个程序适合好好阅读并分析\nvoid foo(long long int n)\n{\n    long long int sqr = sqrt(n);//测试质数只需测到平方的取整\n    long long int i = 0;\n    for(i = 2; i <= sqr; i++)//从2开始测\n    {\n        if(n % i == 0 && (n /= i))//后面的表达式指的是除i留下剩余部分\n        {\n            printf(\"%lld \", i--);\n        }\n    }\n    if(n != 1)//不打印1作为因子\n    {\n        printf(\"%lld\", n);\n    }\n    printf(\"\\n\");\n}\n\nint main()\n{\n    long long int n ;\n    scanf(\"%lld\", &n);\n    foo(n);\n    return 0;\n}\n\n```\n\n\n\n#### 查找字符(这是C标准库里的内容)\n\n用于在一个字符串(也就是char数组)中查找指定的字符\n\n```c++\nstrchr(string_name, 'A');//在string name 这个字符串中寻找A这个字符\n//返回有多种可能,若找到,返回指向这个字符的指针,否则返回NULL(这个NULL是标识符,不是字符串之类的玩意)\n```\n\n#### 位运算\n\n位运算是一种直接操作位的运算,其包含多种运算符:\n\n上代码:\n\n```c++\n<<; //左移运算符,移动时丢弃左边的位,用0补充\n\"11110000\"<<\"10000000\";//左移了3位!!!\n>>; //右移运算符,移动时丢弃右边的位,左边用0或原来丢弃的左边的位补充!!!\n\"11111111\">>\"00001111\";//右移了四位!!!\n    \n//接下来看看逻辑位运算\n~;//按位非,倒置0/1\n|;//按位或,有一为1,否则为0\n^;//XOR,相同为0,不同为1\n&;//AND,都为1才为1,否则为0\n\n//一些常用的位逻辑运算:\nlottabits |= pow(2,3);//打开位,也就是将某一位置为1,其中后面的2的多少次方代表着打开的位置(2的0次方代表右起第一位,以此类推)\nlottabits ^= pow(2,3);//切换位:置反\nlottabits &= pow(2,3);//关闭位:置0\nbool isOpen = lottabits & pow(2,3);//测试某一位是否为1(打开),返回true or false.\n```\n\n","slug":"2019-11-19-Cpp","published":1,"updated":"2021-12-31T16:24:11.770Z","_id":"ckey85uj7000jho8a8t0xan3p","comments":1,"photos":[],"link":"","content":"<p>[TOC]</p>\n<blockquote>\n<p>I’m refactoring this note into English version. This may spend me lots of time.</p>\n<p>But I believe it will be a good form for me to learn English.</p>\n<p>Carry on! </p>\n</blockquote>\n<h1 id=\"C-Language-Studying-Section-1\"><a href=\"#C-Language-Studying-Section-1\" class=\"headerlink\" title=\"C++ Language Studying(Section 1)\"></a>C++ Language Studying(Section 1)</h1><h2 id=\"Basic-C-Knowledge\"><a href=\"#Basic-C-Knowledge\" class=\"headerlink\" title=\"Basic C++ Knowledge\"></a>Basic C++ Knowledge</h2><h3 id=\"Some-tiny-knowledge-points\"><a href=\"#Some-tiny-knowledge-points\" class=\"headerlink\" title=\"Some tiny knowledge points\"></a>Some tiny knowledge points</h3><p>1B=8bit(B refers byte and b refers bit)</p>\n<h2 id=\"C-I-O\"><a href=\"#C-I-O\" class=\"headerlink\" title=\"C++ I/O\"></a>C++ I/O</h2><h2 id=\"C-Sentences\"><a href=\"#C-Sentences\" class=\"headerlink\" title=\"C++ Sentences\"></a>C++ Sentences</h2><h4 id=\"Range-for\"><a href=\"#Range-for\" class=\"headerlink\" title=\"Range for\"></a>Range for</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">auto</span> s:str1)<br>&#123;<br>    <span class=\"hljs-built_in\">cout</span>&lt;&lt;S&lt;&lt;<span class=\"hljs-built_in\">endl</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>By using range for, you can process each element in an array or a sequence .</p>\n<h2 id=\"C-类\"><a href=\"#C-类\" class=\"headerlink\" title=\"C++ 类\"></a>C++ 类</h2><p>众所周知，支持面向对象编程是C++的一个重要特性，接下来我们来看类。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Box</span></span><br><span class=\"hljs-class\">&#123;</span><br>   <span class=\"hljs-keyword\">public</span>:<br>      <span class=\"hljs-keyword\">double</span> length;   <span class=\"hljs-comment\">// 盒子的长度</span><br>      <span class=\"hljs-keyword\">double</span> breadth;  <span class=\"hljs-comment\">// 盒子的宽度</span><br>      <span class=\"hljs-keyword\">double</span> <span class=\"hljs-built_in\">height</span>;   <span class=\"hljs-comment\">// 盒子的高度</span><br>&#125;;<br></code></pre></td></tr></table></figure>\n\n<p>带成员函数声明和定义：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Box</span></span><br><span class=\"hljs-class\">&#123;</span><br>   <span class=\"hljs-keyword\">public</span>:<br>      <span class=\"hljs-keyword\">double</span> length;   <span class=\"hljs-comment\">// 长度</span><br>      <span class=\"hljs-keyword\">double</span> breadth;  <span class=\"hljs-comment\">// 宽度</span><br>      <span class=\"hljs-keyword\">double</span> <span class=\"hljs-built_in\">height</span>;   <span class=\"hljs-comment\">// 高度</span><br>      <span class=\"hljs-comment\">// 成员函数声明</span><br>      <span class=\"hljs-function\"><span class=\"hljs-keyword\">double</span> <span class=\"hljs-title\">get</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">void</span>)</span></span>;<br>      <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">set</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">double</span> len, <span class=\"hljs-keyword\">double</span> bre, <span class=\"hljs-keyword\">double</span> hei )</span></span>;<br>&#125;;<br><span class=\"hljs-comment\">// 成员函数定义</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">double</span> <span class=\"hljs-title\">Box::get</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">void</span>)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-keyword\">return</span> length * breadth * <span class=\"hljs-built_in\">height</span>;<br>&#125;<br> <br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Box::set</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">double</span> len, <span class=\"hljs-keyword\">double</span> bre, <span class=\"hljs-keyword\">double</span> hei)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    length = len;<br>    breadth = bre;<br>    <span class=\"hljs-built_in\">height</span> = hei;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"析构函数：\"><a href=\"#析构函数：\" class=\"headerlink\" title=\"析构函数：\"></a>析构函数：</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">String</span>&#123;</span><br><span class=\"hljs-keyword\">private</span>:<br>    <span class=\"hljs-keyword\">char</span>* p;<br><span class=\"hljs-keyword\">public</span>:<br>    <span class=\"hljs-keyword\">String</span>(<span class=\"hljs-keyword\">int</span> n);<br>    ~<span class=\"hljs-keyword\">String</span>();<br>&#125;;<br><span class=\"hljs-keyword\">String</span>::~<span class=\"hljs-keyword\">String</span>()&#123;   <span class=\"hljs-comment\">//析构函数</span><br>    <span class=\"hljs-keyword\">delete</span>[] p;<br>&#125;<br><span class=\"hljs-keyword\">String</span>::<span class=\"hljs-keyword\">String</span>(<span class=\"hljs-keyword\">int</span> n)&#123;<br>    p = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">char</span>[n];<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"c-继承\"><a href=\"#c-继承\" class=\"headerlink\" title=\"c++继承\"></a>c++继承</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-comment\">// 基类</span><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Shape</span> </span><br><span class=\"hljs-class\">&#123;</span><br>   <span class=\"hljs-keyword\">public</span>:<br>      <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setWidth</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> w)</span></span><br><span class=\"hljs-function\">      </span>&#123;<br>         <span class=\"hljs-built_in\">width</span> = w;<br>      &#125;<br>      <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setHeight</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> h)</span></span><br><span class=\"hljs-function\">      </span>&#123;<br>         <span class=\"hljs-built_in\">height</span> = h;<br>      &#125;<br>   <span class=\"hljs-keyword\">protected</span>:<br>      <span class=\"hljs-keyword\">int</span> <span class=\"hljs-built_in\">width</span>;<br>      <span class=\"hljs-keyword\">int</span> <span class=\"hljs-built_in\">height</span>;<br>&#125;;<br> <br><span class=\"hljs-comment\">// 派生类</span><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Rectangle</span>:</span> <span class=\"hljs-keyword\">public</span> Shape<br>&#123;<br>   <span class=\"hljs-keyword\">public</span>:<br>      <span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">getArea</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\">      </span>&#123; <br>         <span class=\"hljs-keyword\">return</span> (<span class=\"hljs-built_in\">width</span> * <span class=\"hljs-built_in\">height</span>); <br>      &#125;<br>&#125;;<br><br><span class=\"hljs-comment\">//多继承</span><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> &lt;派生类名&gt;:</span>&lt;继承方式<span class=\"hljs-number\">1</span>&gt;&lt;基类名<span class=\"hljs-number\">1</span>&gt;,&lt;继承方式<span class=\"hljs-number\">2</span>&gt;&lt;基类名<span class=\"hljs-number\">2</span>&gt;,…<br>&#123;<br>&lt;派生类类体&gt;<br>&#125;;<br></code></pre></td></tr></table></figure>\n\n\n\n<p>重载：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-comment\">//运算符重载：</span><br>Box <span class=\"hljs-keyword\">operator</span>+(<span class=\"hljs-keyword\">const</span> Box&amp; b)<br>      &#123;<br>         Box box;<br>         box.length = <span class=\"hljs-keyword\">this</span>-&gt;length + b.length;<br>         box.breadth = <span class=\"hljs-keyword\">this</span>-&gt;breadth + b.breadth;<br>         box.<span class=\"hljs-built_in\">height</span> = <span class=\"hljs-keyword\">this</span>-&gt;<span class=\"hljs-built_in\">height</span> + b.<span class=\"hljs-built_in\">height</span>;<br>         <span class=\"hljs-keyword\">return</span> box;<br>      &#125;<br><br><span class=\"hljs-comment\">//函数重载：</span><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">printData</span></span><br><span class=\"hljs-class\">&#123;</span><br>   <span class=\"hljs-keyword\">public</span>:<br>      <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">print</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> i)</span> </span>&#123;<br>        <span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">\"整数为: \"</span> &lt;&lt; i &lt;&lt; <span class=\"hljs-built_in\">endl</span>;<br>      &#125;<br> <br>      <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">print</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">double</span>  f)</span> </span>&#123;<br>        <span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">\"浮点数为: \"</span> &lt;&lt; f &lt;&lt; <span class=\"hljs-built_in\">endl</span>;<br>      &#125;<br> <br>      <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">print</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">char</span> c[])</span> </span>&#123;<br>        <span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">\"字符串为: \"</span> &lt;&lt; c &lt;&lt; <span class=\"hljs-built_in\">endl</span>;<br>      &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"命名空间\"><a href=\"#命名空间\" class=\"headerlink\" title=\"命名空间\"></a>命名空间</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-comment\">// 第一个命名空间</span><br><span class=\"hljs-keyword\">namespace</span> first_space&#123;<br>   <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">func</span><span class=\"hljs-params\">()</span></span>&#123;<br>      <span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">\"Inside first_space\"</span> &lt;&lt; <span class=\"hljs-built_in\">endl</span>;<br>   &#125;<br>&#125;<br><span class=\"hljs-comment\">// 第二个命名空间</span><br><span class=\"hljs-keyword\">namespace</span> second_space&#123;<br>   <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">func</span><span class=\"hljs-params\">()</span></span>&#123;<br>      <span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">\"Inside second_space\"</span> &lt;&lt; <span class=\"hljs-built_in\">endl</span>;<br>   &#125;<br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span> <span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br> <br>   <span class=\"hljs-comment\">// 调用第一个命名空间中的函数</span><br>   first_space::func();<br>   <br>   <span class=\"hljs-comment\">// 调用第二个命名空间中的函数</span><br>   second_space::func(); <br> <br>   <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"王氏C-——应付考试内容\"><a href=\"#王氏C-——应付考试内容\" class=\"headerlink\" title=\"王氏C++——应付考试内容\"></a>王氏C++——应付考试内容</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-comment\">//自由函数与成员函数，运算符重载的不同</span><br><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">&lt;bits/stdc++.h&gt;</span></span><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">complex</span>&#123;</span><br>    <span class=\"hljs-keyword\">public</span>:<br>    <span class=\"hljs-built_in\">complex</span>(<span class=\"hljs-keyword\">int</span> ri = <span class=\"hljs-number\">0</span>, <span class=\"hljs-keyword\">int</span> ii = <span class=\"hljs-number\">0</span>)&#123;<br>        r = ri;<br>        i = ii;<br>    &#125;<br>    <span class=\"hljs-keyword\">int</span> r;<br>    <span class=\"hljs-keyword\">int</span> i;<br>    <span class=\"hljs-keyword\">friend</span> <span class=\"hljs-built_in\">complex</span> <span class=\"hljs-keyword\">operator</span>+(<span class=\"hljs-keyword\">const</span> <span class=\"hljs-built_in\">complex</span> &amp;b) ;<span class=\"hljs-comment\">//友元函数</span><br>    <span class=\"hljs-comment\">//complex operator+(const complex &amp;b) const;  成员函数</span><br>&#125;;<br><br><span class=\"hljs-built_in\">complex</span> <span class=\"hljs-keyword\">operator</span>+(<span class=\"hljs-keyword\">const</span> <span class=\"hljs-built_in\">complex</span> &amp;a,<span class=\"hljs-keyword\">const</span> <span class=\"hljs-built_in\">complex</span> &amp;b) &#123;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">complex</span>(a.r+b.r,a.i+b.i);<br>&#125;<br><br><span class=\"hljs-comment\">/*</span><br><span class=\"hljs-comment\">成员函数</span><br><span class=\"hljs-comment\">complex complex::operator+(const complex &amp;b) const&#123;</span><br><span class=\"hljs-comment\">    return complex(r+b.r,i+b.i);</span><br><span class=\"hljs-comment\">&#125;</span><br><span class=\"hljs-comment\">*/</span><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>&#123;<br>    <span class=\"hljs-function\"><span class=\"hljs-built_in\">complex</span> <span class=\"hljs-title\">c1</span><span class=\"hljs-params\">(<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">1</span>)</span></span>;<br>    <span class=\"hljs-function\"><span class=\"hljs-built_in\">complex</span> <span class=\"hljs-title\">c2</span><span class=\"hljs-params\">(<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">2</span>)</span></span>;<br>    <span class=\"hljs-built_in\">complex</span> c3 = c1+c2;<br>    <span class=\"hljs-built_in\">complex</span> c4 = c2+<span class=\"hljs-number\">3</span>;<span class=\"hljs-comment\">//成员函数无法执行此操作，而友元函数会得出结果c4.r = c2.r+3,c4.r = c2.r;</span><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br><br><span class=\"hljs-comment\">//有关数组一说</span><br><span class=\"hljs-keyword\">float</span>[<span class=\"hljs-number\">2</span>] x[<span class=\"hljs-number\">100</span>];<span class=\"hljs-comment\">//这是每个元素为2个float元素为元素的数组的数组。但是是错的，编译不通过。</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"引用：\"><a href=\"#引用：\" class=\"headerlink\" title=\"引用：\"></a>引用：</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">int</span> x = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">int</span> &amp;rx = x;<br><span class=\"hljs-comment\">//rx = 7-&gt;x = 7</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"函数：\"><a href=\"#函数：\" class=\"headerlink\" title=\"函数：\"></a>函数：</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-function\">datatype <span class=\"hljs-title\">func_name</span><span class=\"hljs-params\">(datatype a)</span></span>&#123;<br>\t<br>&#125;<br><br><span class=\"hljs-function\">datatype <span class=\"hljs-title\">func_name</span><span class=\"hljs-params\">(datatype &amp;rr)</span></span>&#123;<br>    rr = <span class=\"hljs-number\">2</span>;<br>&#125;<br><br><span class=\"hljs-function\">datatype <span class=\"hljs-title\">func_name</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">const</span> <span class=\"hljs-keyword\">float</span> &amp;rr)</span></span>&#123;<br>    rr = <span class=\"hljs-number\">2</span>;<span class=\"hljs-comment\">//ERROR</span><br>&#125;<br><br><span class=\"hljs-comment\">//example:</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">fun</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> &amp;i)</span></span>&#123;<br>    i = <span class=\"hljs-number\">36</span>;<br>    <span class=\"hljs-keyword\">return</span> i;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>&#123;<br>    <span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">3</span>;<br>    <span class=\"hljs-keyword\">int</span> f = fun(i);<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br><br><span class=\"hljs-comment\">//数组名做参数</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">calcsum</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> x[],<span class=\"hljs-keyword\">int</span> <span class=\"hljs-built_in\">size</span>)</span></span>&#123;<br>    <span class=\"hljs-keyword\">int</span> sum;<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-built_in\">size</span>; i++)<br>    &#123;<br>        sum+=x[i];<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> sum;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>&#123;<br>    <span class=\"hljs-keyword\">int</span> x[<span class=\"hljs-number\">2</span>]=&#123;<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>&#125;;<br>    <span class=\"hljs-keyword\">int</span> sum = calcsum(x,<span class=\"hljs-number\">2</span>);<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"有关类的四个基本函数\"><a href=\"#有关类的四个基本函数\" class=\"headerlink\" title=\"有关类的四个基本函数\"></a>有关类的四个基本函数</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Clock</span>&#123;</span><br>    <span class=\"hljs-keyword\">private</span>:<br>    <span class=\"hljs-keyword\">int</span> a;<br>    <span class=\"hljs-keyword\">int</span> b;<br>    <span class=\"hljs-keyword\">public</span>:<br>    clock(<span class=\"hljs-keyword\">int</span> a, <span class=\"hljs-keyword\">int</span> b);<span class=\"hljs-comment\">//构造函数</span><br>    clock();<span class=\"hljs-comment\">//默认构造函数</span><br>    clock(<span class=\"hljs-keyword\">int</span> i,<span class=\"hljs-keyword\">int</span> j)&#123;<br>        a = i;<br>        b = j;<br>    &#125;<br>    <br>    <span class=\"hljs-comment\">//初始化列表：</span><br>    clock(<span class=\"hljs-keyword\">int</span> s, <span class=\"hljs-keyword\">int</span> i):a(s), b(i)&#123;&#125;;<br>    <br>    <span class=\"hljs-comment\">//析构函数</span><br>    ~clock;<br>    <br>    <span class=\"hljs-comment\">//拷贝构造函数</span><br>    clock(<span class=\"hljs-keyword\">const</span> clock &amp;c)&#123;<br>        a = c.a;<br>        b = c.b;<br>    &#125;<br>    <br>    <span class=\"hljs-comment\">//拷贝赋值函数</span><br>    clock&amp; <span class=\"hljs-keyword\">operator</span>=(<span class=\"hljs-keyword\">const</span> clock &amp;c)&#123;<br>        <span class=\"hljs-keyword\">if</span> (&amp;c!= <span class=\"hljs-keyword\">this</span>)&#123;   <span class=\"hljs-comment\">//避免自己拷贝自己的情况</span><br>            a = c.a;<br>            b = c.b;<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> *<span class=\"hljs-keyword\">this</span>;<br>    &#125;<br>    <br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"常函数：\"><a href=\"#常函数：\" class=\"headerlink\" title=\"常函数：\"></a>常函数：</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">circle</span>&#123;</span><br>    <span class=\"hljs-keyword\">private</span>:<br>    <span class=\"hljs-keyword\">int</span> r;<br>    <span class=\"hljs-keyword\">public</span>:<br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">getR</span><span class=\"hljs-params\">()</span></span>&#123;<br>        <span class=\"hljs-keyword\">return</span> r;<br>    &#125;<br>    <span class=\"hljs-built_in\">circle</span>(<span class=\"hljs-keyword\">int</span> i)&#123;<br>        r = i;<br>    &#125;<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">float</span> <span class=\"hljs-title\">getArea</span><span class=\"hljs-params\">()</span> <span class=\"hljs-comment\">/*(const)*/</span></span>&#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">3.1415926</span> *r*r;<br>    &#125;<br>    float getAreaC() const)&#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">3.1415926</span> *r*r;<br>    &#125;<br>&#125;;<br><br><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>&#123;<br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-built_in\">circle</span> <span class=\"hljs-title\">c1</span><span class=\"hljs-params\">(<span class=\"hljs-number\">1</span>)</span></span>;<br>    <span class=\"hljs-keyword\">float</span> area = c1.getArea();<span class=\"hljs-comment\">//错误，不是常函数无法访问const修饰的对象</span><br>    <span class=\"hljs-keyword\">float</span> area = c1.getAreaC();<span class=\"hljs-comment\">//正确</span><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"继承：\"><a href=\"#继承：\" class=\"headerlink\" title=\"继承：\"></a>继承：</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">circle2</span>:</span><span class=\"hljs-comment\">/*(private or protected or public)*/</span><span class=\"hljs-built_in\">circle</span>&#123;<br>    ......<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"虚函数：\"><a href=\"#虚函数：\" class=\"headerlink\" title=\"虚函数：\"></a>虚函数：</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">&lt;iostream&gt;</span></span><br><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Base1</span>&#123;</span><br>\t<span class=\"hljs-keyword\">public</span>:<br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">display</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">const</span></span>;<br>&#125;;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Base1::display</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">const</span></span>&#123;<br>    <span class=\"hljs-built_in\">std</span>::<span class=\"hljs-built_in\">cout</span>&lt;&lt;<span class=\"hljs-number\">1</span>&lt;&lt;<span class=\"hljs-built_in\">std</span>::<span class=\"hljs-built_in\">endl</span>;<br>&#125;<br><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Base2</span>:</span><span class=\"hljs-keyword\">public</span> Base1&#123;<br>    <span class=\"hljs-keyword\">public</span>:<br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">display</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">const</span> </span>;<br>&#125;;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Base2::display</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">const</span></span>&#123;<br>    <span class=\"hljs-built_in\">std</span>::<span class=\"hljs-built_in\">cout</span>&lt;&lt;<span class=\"hljs-number\">2</span>&lt;&lt;<span class=\"hljs-built_in\">std</span>::<span class=\"hljs-built_in\">endl</span>;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">function</span><span class=\"hljs-params\">(Base1 *ptr)</span></span>&#123;<span class=\"hljs-comment\">//一个指向父类的指针</span><br>    ptr-&gt;<span class=\"hljs-built_in\">display</span>();<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>&#123;<br>    Base1 b1;<br>    Base2 b2;<br>    function(&amp;b1);<span class=\"hljs-comment\">//调用 void Base1::display() const</span><br>    function(&amp;b2);<span class=\"hljs-comment\">//调用 void Base2::display() const</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>三种继承方式：父类成员对子类的可见性：</p>\n<table>\n<thead>\n<tr>\n<th>父类访问控制/继承方式：</th>\n<th>public</th>\n<th>protected</th>\n<th>private</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>public</td>\n<td>public</td>\n<td>protected</td>\n<td>private</td>\n</tr>\n<tr>\n<td>protected</td>\n<td>protected</td>\n<td>protected</td>\n<td>private</td>\n</tr>\n<tr>\n<td>private</td>\n<td>private</td>\n<td>private</td>\n<td>private</td>\n</tr>\n</tbody></table>\n<h2 id=\"C-Variable\"><a href=\"#C-Variable\" class=\"headerlink\" title=\"C++ Variable\"></a>C++ Variable</h2><h4 id=\"C-Variable-types\"><a href=\"#C-Variable-types\" class=\"headerlink\" title=\"C++ Variable types:\"></a>C++ Variable types:</h4><table>\n<thead>\n<tr>\n<th>Type</th>\n<th>Implication</th>\n<th>size</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>bool</td>\n<td>bool type</td>\n<td>undefined</td>\n</tr>\n<tr>\n<td>char</td>\n<td>character</td>\n<td>8b</td>\n</tr>\n<tr>\n<td>wchar_t</td>\n<td>wide character</td>\n<td>16b</td>\n</tr>\n<tr>\n<td>char16_t</td>\n<td>Unicode character</td>\n<td>16b</td>\n</tr>\n<tr>\n<td>char32_t</td>\n<td>Unicode character</td>\n<td>32b</td>\n</tr>\n<tr>\n<td>short</td>\n<td>short integer</td>\n<td>16b</td>\n</tr>\n<tr>\n<td>int</td>\n<td>integer</td>\n<td>16b</td>\n</tr>\n<tr>\n<td>long</td>\n<td>long integer</td>\n<td>32b</td>\n</tr>\n<tr>\n<td>long long</td>\n<td>long long integer</td>\n<td>64b</td>\n</tr>\n<tr>\n<td>float</td>\n<td>single-precision floating point number</td>\n<td>6 significant digit</td>\n</tr>\n<tr>\n<td>double</td>\n<td>double-precision floating point number</td>\n<td>10 significant digit</td>\n</tr>\n<tr>\n<td>long double</td>\n<td>expand double-precision floating point number</td>\n<td>10 significant digit</td>\n</tr>\n</tbody></table>\n<p>Use <code>unsigned</code> to state an unsigned variable type, an unsigned variable do not have a sign digit.</p>\n<h4 id=\"Type-conversion\"><a href=\"#Type-conversion\" class=\"headerlink\" title=\"Type conversion\"></a>Type conversion</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">bool</span> a =<span class=\"hljs-number\">42</span>;<span class=\"hljs-comment\">// 0 refers true and the others refer false.</span><br><span class=\"hljs-keyword\">int</span> i =<span class=\"hljs-number\">3.14</span>;<span class=\"hljs-comment\">// the value of i is 3,the fractional digit has been dropped.</span><br><span class=\"hljs-keyword\">double</span> pi =i;<span class=\"hljs-comment\">//the value of pi is 3</span><br><span class=\"hljs-keyword\">unsigned</span> <span class=\"hljs-keyword\">char</span> c = <span class=\"hljs-number\">-1</span>; <span class=\"hljs-comment\">//the value of c is 255</span><br></code></pre></td></tr></table></figure>\n\n<p><code>WARNING</code>: <strong>DO NOT USE UNSIGNED TYPE AND  SIGNED TYPE VARIABLE AT THE SAME TIME !!!</strong></p>\n<h4 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">int</span> a=<span class=\"hljs-number\">3</span>;<br><span class=\"hljs-keyword\">int</span> &amp;num = a;<span class=\"hljs-comment\">// num is a reference of a</span><br><span class=\"hljs-keyword\">int</span> &amp;num2;<span class=\"hljs-comment\">//ERROR: reference must be initialized</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"Pointer\"><a href=\"#Pointer\" class=\"headerlink\" title=\"Pointer\"></a>Pointer</h4><p>Pointers point to a pointer:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">int</span> a=<span class=\"hljs-number\">1024</span>;<br><span class=\"hljs-keyword\">int</span> *ptr1 = &amp;a;<br><span class=\"hljs-keyword\">int</span> **ptr2 = &amp;ptr1;<br><span class=\"hljs-built_in\">cout</span>&lt;&lt;**ptr2&lt;&lt;<span class=\"hljs-built_in\">endl</span>;<span class=\"hljs-comment\">// output 1024</span><br></code></pre></td></tr></table></figure>\n\n<p>C++ Standard Library :: begin, end</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">int</span> ia[]=&#123;<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">6</span>,<span class=\"hljs-number\">7</span>,<span class=\"hljs-number\">8</span>,<span class=\"hljs-number\">9</span>&#125;;<br><span class=\"hljs-keyword\">int</span> *beg = <span class=\"hljs-built_in\">begin</span>(ia);<span class=\"hljs-comment\">//refer a[0]</span><br><span class=\"hljs-keyword\">int</span> *<span class=\"hljs-built_in\">end</span> = <span class=\"hljs-built_in\">end</span>(ia);<span class=\"hljs-comment\">//refer the next position after the last element of an array</span><br></code></pre></td></tr></table></figure>\n\n<p>Pointer with custom size:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">int</span> a[<span class=\"hljs-number\">2</span>][<span class=\"hljs-number\">2</span>];<br><span class=\"hljs-keyword\">int</span> *p[<span class=\"hljs-number\">2</span>];<span class=\"hljs-comment\">//NOT THIS: It created a pointer array</span><br><span class=\"hljs-keyword\">int</span> (*p2)[<span class=\"hljs-number\">2</span>];<span class=\"hljs-comment\">//a pointer which can point to an array with 2 ints.</span><br><span class=\"hljs-comment\">//use decltype or auto:</span><br><span class=\"hljs-keyword\">decltype</span> *p3 = a;<br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"Const\"><a href=\"#Const\" class=\"headerlink\" title=\"Const\"></a>Const</h4><p>You can use <code>const</code> to make a variable unchangeable.</p>\n<p><strong>Top-level-const and Low-level-const:</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">0</span>;<br><span class=\"hljs-keyword\">int</span> *<span class=\"hljs-keyword\">const</span> p1 = &amp;i;<span class=\"hljs-comment\">//the value of pointer can not be changed,top-level-const</span><br><span class=\"hljs-keyword\">const</span> <span class=\"hljs-keyword\">int</span> ci =<span class=\"hljs-number\">42</span>;<span class=\"hljs-comment\">//the value of ci can not be changed.</span><br><span class=\"hljs-keyword\">const</span> <span class=\"hljs-keyword\">int</span> *p2 = &amp;ci;<span class=\"hljs-comment\">//the value of pointer can not be changed</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"Typedef\"><a href=\"#Typedef\" class=\"headerlink\" title=\"Typedef\"></a>Typedef</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-keyword\">double</span> wages;<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"Decltype\"><a href=\"#Decltype\" class=\"headerlink\" title=\"Decltype\"></a>Decltype</h4><p>Use decltype to get a type that a function returns.</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">decltype</span>(f()) sum =<span class=\"hljs-number\">0</span>;<span class=\"hljs-comment\">//the type of sum is just the type that f() returns.</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"Write-your-own-head-file\"><a href=\"#Write-your-own-head-file\" class=\"headerlink\" title=\"Write your own head file\"></a>Write your own head file</h4><p>You’d better define your struct and class in a head file .</p>\n<h2 id=\"Data-Structure-STL\"><a href=\"#Data-Structure-STL\" class=\"headerlink\" title=\"Data Structure(STL)\"></a>Data Structure(STL)</h2><h4 id=\"Using-statement\"><a href=\"#Using-statement\" class=\"headerlink\" title=\"Using statement\"></a>Using statement</h4><p>Before using C++ Standard Library, you can:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-comment\">//method 1</span><br><span class=\"hljs-built_in\">std</span>::<span class=\"hljs-built_in\">cout</span>&lt;&lt;<span class=\"hljs-string\">\"Test\"</span>&lt;&lt;<span class=\"hljs-built_in\">std</span>::<span class=\"hljs-built_in\">endl</span>;<br><span class=\"hljs-comment\">//method 2:</span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-built_in\">std</span>;<br><span class=\"hljs-built_in\">cout</span>&lt;&lt;<span class=\"hljs-string\">\"123\"</span>&lt;&lt;<span class=\"hljs-built_in\">endl</span>;<br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"Using-iterator\"><a href=\"#Using-iterator\" class=\"headerlink\" title=\"Using iterator\"></a>Using iterator</h4><p>A sort of intelligence pointer , used for STD .</p>\n<p>C++ example:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;bits/stdc++.h&gt;</span></span><br><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-built_in\">std</span>;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-built_in\">vector</span>&lt;<span class=\"hljs-keyword\">int</span>&gt; vec1;<span class=\"hljs-comment\">//Statement</span><br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">5</span>; i++)<br>    &#123;<br>        vec1.push_back(i);<br>    &#125;<br>    <span class=\"hljs-keyword\">auto</span> it = vec1.<span class=\"hljs-built_in\">begin</span>();<span class=\"hljs-comment\">//Auto Statement</span><br>    <span class=\"hljs-built_in\">vector</span>&lt;<span class=\"hljs-keyword\">int</span>&gt;:: iterator it = vec1.<span class=\"hljs-built_in\">begin</span>();<span class=\"hljs-comment\">//Standard statement</span><br><br>    <span class=\"hljs-built_in\">cout</span> &lt;&lt; *it &lt;&lt; <span class=\"hljs-built_in\">endl</span>;<br>    <span class=\"hljs-keyword\">for</span> (; it != vec1.<span class=\"hljs-built_in\">end</span>(); it++)<br>    &#123;<br>        <span class=\"hljs-built_in\">cout</span> &lt;&lt; *it &lt;&lt; <span class=\"hljs-built_in\">endl</span>;<br>    &#125;<br>    <br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>    <br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>Operations:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\">it = v1.<span class=\"hljs-built_in\">begin</span>();<span class=\"hljs-comment\">//set v1 refer to the first</span><br>*it;<span class=\"hljs-comment\">//return value</span><br>it++;<span class=\"hljs-comment\">//point to the next</span><br>*it = <span class=\"hljs-number\">1234</span>;<span class=\"hljs-comment\">//change value</span><br>it2 = it + <span class=\"hljs-number\">2</span>;<span class=\"hljs-comment\">//send the address + 2 to another</span><br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"Stack-a-LIFO-Last-in-First-out-data-structure\"><a href=\"#Stack-a-LIFO-Last-in-First-out-data-structure\" class=\"headerlink\" title=\"Stack: a LIFO(Last in First out) data structure\"></a>Stack: a LIFO(Last in First out) data structure</h4><p>Statement in C++:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-built_in\">stack</span>&lt;<span class=\"hljs-keyword\">int</span>&gt; stack_name;<br></code></pre></td></tr></table></figure>\n\n<p>Basic operations:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\">stack_name.push(data);<span class=\"hljs-comment\">//push a data into the stack</span><br><span class=\"hljs-built_in\">cout</span>&lt;&lt;stack_name.top();<span class=\"hljs-comment\">//read the data at top</span><br>stack_name.pop();<span class=\"hljs-comment\">//pop out the data at top</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"Queue-a-FIFO-First-in-First-out-data-structure\"><a href=\"#Queue-a-FIFO-First-in-First-out-data-structure\" class=\"headerlink\" title=\"Queue: a FIFO(First in First out) data structure\"></a>Queue: a FIFO(First in First out) data structure</h4><p>Statement in C++:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-built_in\">queue</span>&lt;<span class=\"hljs-keyword\">int</span>&gt; q;<br></code></pre></td></tr></table></figure>\n\n<p>Basic operations:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\">q.front();<span class=\"hljs-comment\">//read the data at the front</span><br>q.push();<span class=\"hljs-comment\">//push a data at the end of the queue</span><br>q.pop();<span class=\"hljs-comment\">//pop out the data at the front</span><br>q = <span class=\"hljs-built_in\">queue</span>&lt;<span class=\"hljs-keyword\">int</span>&gt;();<span class=\"hljs-comment\">//empty the queue</span><br></code></pre></td></tr></table></figure>\n\n<p>Then, let’s see a sample of using queue.</p>\n<p>Cruel torture (AHU77)</p>\n<hr>\n<p>Please read the question at <a href=\"oj.bofc.tech\">bofcOJ</a></p>\n<hr>\n<p>Code:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;bits/stdc++.h&gt;</span></span><br><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-built_in\">std</span>;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-keyword\">int</span> qty_children = <span class=\"hljs-number\">0</span>, k;<br>    <span class=\"hljs-built_in\">cin</span> &gt;&gt; qty_children &gt;&gt; k;<br><br>    <br>    <span class=\"hljs-keyword\">int</span> sum = <span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-built_in\">queue</span>&lt;<span class=\"hljs-keyword\">int</span>&gt; children;<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">1</span>; i &lt;= qty_children; i++)<br>    &#123;<br>        children.push(i);<br>    &#125; <span class=\"hljs-comment\">//statement queue</span><br>    <span class=\"hljs-keyword\">while</span> (sum &lt; qty_children<span class=\"hljs-number\">-1</span>)<br>    &#123;<br><br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; k<span class=\"hljs-number\">-1</span>; i++)<br>        &#123;<br>            children.push(children.front());<span class=\"hljs-comment\">//if we do not pull out the line, thus we let this wild kid get to the back.</span><br>            children.pop();<br>        &#125;<br>        children.pop();<span class=\"hljs-comment\">//when it comes to pull out the line, this wild kid is over.</span><br>        sum++;<br>    &#125;<br>    <span class=\"hljs-built_in\">cout</span> &lt;&lt; children.front();<br><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"Using-dynamic-array-with-pointer\"><a href=\"#Using-dynamic-array-with-pointer\" class=\"headerlink\" title=\"Using dynamic array with pointer\"></a>Using dynamic array with pointer</h4><p>Code demo:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">int</span> *p = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">int</span>[<span class=\"hljs-number\">10</span>];<span class=\"hljs-comment\">//Create an array when running.</span><br><span class=\"hljs-keyword\">delete</span>[] p;<span class=\"hljs-comment\">//the realease of a dynamic array method is not same with a variable</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"bitset\"><a href=\"#bitset\" class=\"headerlink\" title=\"bitset\"></a>bitset</h4><p>A data structure which storages bit.</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-built_in\">bitset</span>&lt;4&gt; bitset1;<span class=\"hljs-comment\">//construct without parameter:set space 4</span><br><br><span class=\"hljs-function\"><span class=\"hljs-built_in\">bitset</span>&lt;8&gt; <span class=\"hljs-title\">bitset2</span><span class=\"hljs-params\">(<span class=\"hljs-number\">12</span>)</span></span>;<span class=\"hljs-comment\">//the space is 8, storge 12 into binary system,use 0 to fill the blank bit.</span><br><br><span class=\"hljs-built_in\">string</span> s = <span class=\"hljs-string\">\"100101\"</span>;<br><span class=\"hljs-function\"><span class=\"hljs-built_in\">bitset</span>&lt;10&gt; <span class=\"hljs-title\">bitset3</span><span class=\"hljs-params\">(s)</span></span>;<span class=\"hljs-comment\">//the space is 10,use 0 to fill the blank bit,the string CAN ONLY CONTAINS 0 and 1.</span><br><br><span class=\"hljs-keyword\">char</span> s2[] = <span class=\"hljs-string\">\"10101\"</span>;<br><span class=\"hljs-function\"><span class=\"hljs-built_in\">bitset</span>&lt;13&gt; <span class=\"hljs-title\">bitset4</span><span class=\"hljs-params\">(s2)</span></span>;<span class=\"hljs-comment\">//the space is 13,use 0 to fill the blank bit</span><br><br><span class=\"hljs-built_in\">cout</span> &lt;&lt; bitset1 &lt;&lt; <span class=\"hljs-built_in\">endl</span>;<span class=\"hljs-comment\">//0000</span><br><span class=\"hljs-built_in\">cout</span> &lt;&lt; bitset2 &lt;&lt; <span class=\"hljs-built_in\">endl</span>;<span class=\"hljs-comment\">//00001100</span><br><span class=\"hljs-built_in\">cout</span> &lt;&lt; bitset3 &lt;&lt; <span class=\"hljs-built_in\">endl</span>;<span class=\"hljs-comment\">//0000100101</span><br><span class=\"hljs-built_in\">cout</span> &lt;&lt; bitset4 &lt;&lt; <span class=\"hljs-built_in\">endl</span>;<span class=\"hljs-comment\">//0000000010101</span><br>bitset3[<span class=\"hljs-number\">0</span>];<span class=\"hljs-comment\">//Simular as array,use subscript to access the elements.</span><br></code></pre></td></tr></table></figure>\n\n<p>There’s so many ways to use bitset, but let’s see struct first.</p>\n<h4 id=\"Struct\"><a href=\"#Struct\" class=\"headerlink\" title=\"Struct\"></a>Struct</h4><p>A struct is a data structure which contains serval variable type. The struct can also form an array!</p>\n<p>C++ examples</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Books</span></span><br><span class=\"hljs-class\">&#123;</span><br>   <span class=\"hljs-keyword\">char</span>  title[<span class=\"hljs-number\">50</span>];<br>   <span class=\"hljs-keyword\">char</span>  author[<span class=\"hljs-number\">50</span>];<br>   <span class=\"hljs-keyword\">char</span>  subject[<span class=\"hljs-number\">100</span>];<br>   <span class=\"hljs-keyword\">int</span>   book_id;<br>&#125; book = &#123;<span class=\"hljs-string\">\"C Language\"</span>, <span class=\"hljs-string\">\"RUNOOB\"</span>, <span class=\"hljs-string\">\"Programing Language\"</span>, <span class=\"hljs-number\">123456</span>&#125;;<span class=\"hljs-comment\">//define a struct and initialize</span><br></code></pre></td></tr></table></figure>\n\n<p>//Of course, you can use it as below: No initialize.</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;bits/stdc++.h&gt;</span></span><br><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-built_in\">std</span>;<br><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">student</span> //<span class=\"hljs-title\">define</span> <span class=\"hljs-title\">the</span> <span class=\"hljs-title\">struct</span> <span class=\"hljs-title\">of</span> <span class=\"hljs-title\">single</span> <span class=\"hljs-title\">student</span></span><br><span class=\"hljs-class\">&#123;</span><br>    <span class=\"hljs-keyword\">int</span> number;<br>    <span class=\"hljs-keyword\">int</span> score;<br>&#125;;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\tstudent students[<span class=\"hljs-number\">10000</span>];<br>       <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; total; i++) <span class=\"hljs-comment\">//input scores</span><br>      &#123;<br>        <span class=\"hljs-built_in\">cin</span> &gt;&gt; students[i].number &gt;&gt; students[i].score;<span class=\"hljs-comment\">//See the examples here!</span><br>      &#125;<br><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br><br>&#125;<br><span class=\"hljs-comment\">//It means you can only define a struct and use it as a data type!</span><br></code></pre></td></tr></table></figure>\n\n<h5 id=\"Struct-pointer\"><a href=\"#Struct-pointer\" class=\"headerlink\" title=\"Struct pointer\"></a>Struct pointer</h5><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;string.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;stdlib.h&gt;</span></span><br><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">student</span> //<span class=\"hljs-title\">define</span> <span class=\"hljs-title\">the</span> <span class=\"hljs-title\">struct</span> <span class=\"hljs-title\">of</span> <span class=\"hljs-title\">single</span> <span class=\"hljs-title\">student</span></span><br><span class=\"hljs-class\">&#123;</span><br>    <span class=\"hljs-keyword\">int</span> number;<br>    <span class=\"hljs-keyword\">int</span> score;<br>&#125;;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">student</span> <span class=\"hljs-title\">students</span>[100];</span><br><br>    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">\"%d%d\"</span>, &amp;students[<span class=\"hljs-number\">0</span>].number, &amp;students[<span class=\"hljs-number\">0</span>].score); <span class=\"hljs-comment\">//See the examples here!</span><br><br>    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">student</span> *<span class=\"hljs-title\">p</span> = <span class=\"hljs-title\">students</span>;</span> <span class=\"hljs-comment\">//initialize the pointer.</span><br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"%d\"</span>, p-&gt;number);      <br>    p++;                          <span class=\"hljs-comment\">//go to next student.</span><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;string.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;stdlib.h&gt;</span></span><br><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">student</span></span><br><span class=\"hljs-class\">&#123;</span><br>    <span class=\"hljs-keyword\">int</span> id;<br>    <span class=\"hljs-keyword\">int</span> maths;<br>&#125;;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">student</span> <span class=\"hljs-title\">stu1</span>[2];</span><br>    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">student</span> *<span class=\"hljs-title\">p</span> ;</span><br>    p=stu1;<br>    <br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"%d\"</span>,p-&gt;id);<br><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"Vector\"><a href=\"#Vector\" class=\"headerlink\" title=\"Vector\"></a>Vector</h4><p>This is a significant data structure in  C++ standard library , equals an array that can change memory size at will,and you can also CRUD in it in will.</p>\n<p>Basic operations:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-built_in\">vector</span>&lt;<span class=\"hljs-keyword\">int</span>&gt; c;<br>c.push_back(<span class=\"hljs-number\">1</span>);<span class=\"hljs-comment\">//place the element at the end of the vector.</span><br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-built_in\">vector</span>&lt;Sales_item&gt; sales_vec;<span class=\"hljs-comment\">//vector can also store class or struct</span><br><span class=\"hljs-built_in\">vector</span>&lt;<span class=\"hljs-built_in\">vector</span>&lt;<span class=\"hljs-built_in\">string</span>&gt;&gt;;<span class=\"hljs-comment\">//the elements in this vector are also vector objects.</span><br></code></pre></td></tr></table></figure>\n\n<p>Other operations:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-built_in\">vector</span>&lt;T&gt; v1&#123;<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">5</span>&#125;;<br><span class=\"hljs-function\"><span class=\"hljs-built_in\">vector</span>&lt;T&gt; <span class=\"hljs-title\">v2</span><span class=\"hljs-params\">(<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">5</span>)</span></span>;<span class=\"hljs-comment\">//&#123;5,5,5,5,5&#125;</span><br><span class=\"hljs-built_in\">vector</span>&lt;<span class=\"hljs-built_in\">string</span>&gt; v3=&#123;<span class=\"hljs-string\">\"Hello\"</span>,<span class=\"hljs-string\">\"World\"</span>,<span class=\"hljs-string\">\"!\"</span>&#125;;<br><span class=\"hljs-function\"><span class=\"hljs-built_in\">vector</span>&lt;<span class=\"hljs-keyword\">int</span>&gt; <span class=\"hljs-title\">v4</span><span class=\"hljs-params\">(<span class=\"hljs-number\">10</span>)</span></span>; <span class=\"hljs-comment\">//Create a vector have 10 elements, initialized by 0.</span><br>v4.push_back(<span class=\"hljs-number\">1</span>);<span class=\"hljs-comment\">//put an elemnet to the back of the vector;</span><br>v4.<span class=\"hljs-built_in\">size</span>();<br></code></pre></td></tr></table></figure>\n\n<p>Use array to initialize a vector </p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">int</span> a[]=&#123;<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">5</span>&#125;;<br><span class=\"hljs-function\"><span class=\"hljs-built_in\">vector</span>&lt;<span class=\"hljs-keyword\">int</span>&gt; <span class=\"hljs-title\">v1</span><span class=\"hljs-params\">(<span class=\"hljs-built_in\">begin</span>(a),<span class=\"hljs-built_in\">end</span>(arr))</span></span>;<span class=\"hljs-comment\">//send the begin and end to construct.</span><br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"String\"><a href=\"#String\" class=\"headerlink\" title=\"String\"></a>String</h4><p>String is a <strong>char</strong> sequence whose size is changeable .</p>\n<p>Initialize:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-built_in\">string</span> s1;<span class=\"hljs-comment\">//an empty string has been created</span><br><span class=\"hljs-function\"><span class=\"hljs-built_in\">string</span> <span class=\"hljs-title\">s2</span><span class=\"hljs-params\">(<span class=\"hljs-number\">10</span>,<span class=\"hljs-string\">'c'</span>)</span></span>;<span class=\"hljs-comment\">//\"cccccccccc\"</span><br></code></pre></td></tr></table></figure>\n\n<p>Operations:</p>\n<table>\n<thead>\n<tr>\n<th>Operation</th>\n<th>Action</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>os&lt;&lt;s;</td>\n<td>Write s to ostream</td>\n</tr>\n<tr>\n<td>is&gt;&gt;s;</td>\n<td>Write instream to s</td>\n</tr>\n<tr>\n<td>s.size();</td>\n<td>Return the length;</td>\n</tr>\n<tr>\n<td>s1+s2</td>\n<td>Connect two strings</td>\n</tr>\n<tr>\n<td>s1&gt;=s2</td>\n<td>compare, use <em>dictionary order</em></td>\n</tr>\n</tbody></table>\n<p><strong>Get line</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">while</span>(getline(<span class=\"hljs-built_in\">cin</span>,<span class=\"hljs-built_in\">line</span>)&amp;&amp;<span class=\"hljs-built_in\">line</span>.<span class=\"hljs-built_in\">size</span>()&gt;<span class=\"hljs-number\">0</span>)<br>&#123;<br>    <span class=\"hljs-comment\">//code</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><strong>Character type:</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-built_in\">tolower</span>(c);<span class=\"hljs-comment\">//change into lower size</span><br><span class=\"hljs-built_in\">toupper</span>(c);<span class=\"hljs-comment\">//change into upper size</span><br></code></pre></td></tr></table></figure>\n\n<p><code>Warning</code>: Do not do this:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">char</span> a[]=<span class=\"hljs-string\">\"fff\"</span>;<br><span class=\"hljs-keyword\">char</span> b[]=<span class=\"hljs-string\">\"aaa\"</span>;<br><span class=\"hljs-built_in\">string</span> c = a+b;<span class=\"hljs-comment\">//ERROR: you are trying to add two pointers!!!</span><br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"Set\"><a href=\"#Set\" class=\"headerlink\" title=\"Set\"></a>Set</h4><p>An example:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;iostream&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;set&gt;</span></span><br><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-built_in\">std</span>;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-keyword\">int</span> case_number;<br>    <span class=\"hljs-built_in\">cin</span> &gt;&gt; case_number; <span class=\"hljs-comment\">//Input the amount</span><br>    <span class=\"hljs-built_in\">set</span>&lt;<span class=\"hljs-keyword\">int</span>&gt; numbers;<br>    <span class=\"hljs-keyword\">int</span> put_number;<br>    <span class=\"hljs-built_in\">set</span>&lt;<span class=\"hljs-keyword\">int</span>&gt; :: iterator out_number;<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; case_number; i++) <span class=\"hljs-comment\">// Input data</span><br>    &#123;<br>        <span class=\"hljs-built_in\">cin</span> &gt;&gt; put_number;<br>        numbers.insert(put_number);<br>    &#125;<br>    <span class=\"hljs-built_in\">cout</span> &lt;&lt; numbers.<span class=\"hljs-built_in\">size</span>() &lt;&lt; <span class=\"hljs-built_in\">endl</span>;<br>    <span class=\"hljs-keyword\">int</span> count=<span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-keyword\">for</span> (out_number = numbers.<span class=\"hljs-built_in\">begin</span>(); out_number != numbers.<span class=\"hljs-built_in\">end</span>(); out_number++) <br>    &#123;<br>        <br>        <span class=\"hljs-built_in\">cout</span> &lt;&lt; *out_number ;<br>        count++;<br>        <span class=\"hljs-keyword\">if</span>(count &lt;= numbers.<span class=\"hljs-built_in\">size</span>()<span class=\"hljs-number\">-1</span>) <span class=\"hljs-built_in\">cout</span>&lt;&lt;<span class=\"hljs-string\">\" \"</span>;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>Set can automatically sort, and the elements are strictly diverse .</p>\n<h4 id=\"优先队列-优先级最高的元素先出的队列\"><a href=\"#优先队列-优先级最高的元素先出的队列\" class=\"headerlink\" title=\"优先队列:优先级最高的元素先出的队列\"></a>优先队列:优先级最高的元素先出的队列</h4><p>C++的标准库中包含了一个很好用的数据结构:优先队列.该结构可以将优先级大的元素排到前面.</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;bits/stdc++.h&gt;</span></span><br><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-built_in\">std</span>;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\tpriority_queue&lt;<span class=\"hljs-keyword\">int</span>&gt; que_apples; <span class=\"hljs-comment\">//默认使用vector,大的数字优先</span><br>\tpriority_queue&lt;<span class=\"hljs-keyword\">int</span>, <span class=\"hljs-built_in\">vector</span>&lt;<span class=\"hljs-keyword\">int</span>&gt;, greater&lt;<span class=\"hljs-keyword\">int</span>&gt;&gt; app_que;<span class=\"hljs-comment\">//小的数字优先</span><br>\t<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>自定义优先级:重载运算符</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Student</span></span><br><span class=\"hljs-class\">&#123;</span><br>    <span class=\"hljs-keyword\">int</span> id;<br>    <span class=\"hljs-keyword\">char</span> name[<span class=\"hljs-number\">20</span>];<br>    <span class=\"hljs-keyword\">bool</span> gender;<br>    <span class=\"hljs-keyword\">bool</span> <span class=\"hljs-keyword\">operator</span> &lt; (Student &amp;a) <span class=\"hljs-keyword\">const</span><br>    &#123;<br>        <span class=\"hljs-keyword\">return</span> id &gt; a.id;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"STL算法\"><a href=\"#STL算法\" class=\"headerlink\" title=\"STL算法\"></a>STL算法</h2><h4 id=\"快排-sort-包含在algorithm\"><a href=\"#快排-sort-包含在algorithm\" class=\"headerlink\" title=\"快排(sort),包含在algorithm\"></a>快排(sort),包含在algorithm</h4><p>这个算法极其牛逼,解放了万千程序员的双手(赞美)!!!</p>\n<p>快排作用的内容:数组/向量容器等</p>\n<p>C++使用实例</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-built_in\">vector</span>&lt;<span class=\"hljs-keyword\">int</span>&gt; v1;<br><span class=\"hljs-keyword\">int</span> numbers[<span class=\"hljs-number\">2</span>][<span class=\"hljs-number\">5</span>];<br><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">student</span></span><br><span class=\"hljs-class\">&#123;</span><br>    <span class=\"hljs-keyword\">int</span> number;<br>    <span class=\"hljs-keyword\">int</span> score;<br>    <span class=\"hljs-built_in\">string</span> name;<br>&#125;<br><span class=\"hljs-comment\">//此处省略若干行插入数据代码,让我们假设这这里面有很多数据</span><br>sort(v1.<span class=\"hljs-built_in\">begin</span>(),v1.<span class=\"hljs-built_in\">end</span>());<span class=\"hljs-comment\">//默认从小到大排列</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">bool</span> <span class=\"hljs-title\">compare</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> a , <span class=\"hljs-keyword\">int</span> b)</span><span class=\"hljs-comment\">//按某种排序方案排序</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-keyword\">return</span> a&gt;b;<span class=\"hljs-comment\">//这样是降序排列</span><br>    <span class=\"hljs-keyword\">return</span> numbers[a][<span class=\"hljs-number\">0</span>]&gt;numbers[b][<span class=\"hljs-number\">0</span>];<span class=\"hljs-comment\">//还能读取某些数据的元素排列</span><br>    <span class=\"hljs-keyword\">return</span> student[a].score&gt;student[b].score;<span class=\"hljs-comment\">//还能读取某些结构体的成员</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"常用基础算法-一些很基本的-要背的\"><a href=\"#常用基础算法-一些很基本的-要背的\" class=\"headerlink\" title=\"常用基础算法(一些很基本的,要背的)\"></a>常用基础算法(一些很基本的,要背的)</h2><h4 id=\"公因数公倍数\"><a href=\"#公因数公倍数\" class=\"headerlink\" title=\"公因数公倍数\"></a>公因数公倍数</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;math.h&gt;</span></span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-keyword\">int</span> m, n;<br>    <span class=\"hljs-keyword\">int</span> s = <span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-keyword\">int</span> <span class=\"hljs-built_in\">min</span> = <span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">\"%d%d\"</span>, &amp;m, &amp;n);<br>    <span class=\"hljs-comment\">//最大公约数</span><br>    <span class=\"hljs-keyword\">if</span> (m &gt; n)<br>    &#123;<br>        s = m;<br>        <span class=\"hljs-built_in\">min</span> = n;<br>    &#125;<br>    <span class=\"hljs-keyword\">else</span><br>    &#123;<br>        s = n;<br>        <span class=\"hljs-built_in\">min</span> = m;<br>    &#125;<br>    <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-built_in\">min</span> != <span class=\"hljs-number\">0</span>)<br>    &#123;<br>        <span class=\"hljs-keyword\">int</span> t = s%<span class=\"hljs-built_in\">min</span>;<br>        s = <span class=\"hljs-built_in\">min</span>;<br>        <span class=\"hljs-built_in\">min</span> = t;<br>    &#125;<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"%d\\n\"</span>,s);<br>    <span class=\"hljs-comment\">//重置两个数</span><br>    <span class=\"hljs-keyword\">if</span> (m &gt; n)<br>    &#123;<br>        s = m;<br>        <span class=\"hljs-built_in\">min</span> = n;<br>    &#125;<br>    <span class=\"hljs-keyword\">else</span><br>    &#123;<br>        s = n;<br>        <span class=\"hljs-built_in\">min</span> = m;<br>    &#125;<br>    <span class=\"hljs-comment\">//公倍数</span><br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-built_in\">min</span>;; i += <span class=\"hljs-built_in\">min</span>)<br>    &#123;<br>        <span class=\"hljs-keyword\">double</span> resR = (<span class=\"hljs-keyword\">double</span>)i / s;<br>        <span class=\"hljs-keyword\">int</span> <span class=\"hljs-built_in\">floor</span> = i / s;<br><br>        <span class=\"hljs-keyword\">if</span> ((<span class=\"hljs-keyword\">double</span>)<span class=\"hljs-built_in\">floor</span> == resR)<br>        &#123;<br>            <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"%d\\n\"</span>, i);<br>            <span class=\"hljs-keyword\">break</span>;<br>        &#125;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"筛法判断质数\"><a href=\"#筛法判断质数\" class=\"headerlink\" title=\"筛法判断质数\"></a>筛法判断质数</h4><p>上代码:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">bool</span> <span class=\"hljs-title\">isPrime</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> a)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-keyword\">if</span> (a == <span class=\"hljs-number\">2</span>)<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<br>    <span class=\"hljs-keyword\">if</span> (a % <span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">0</span>)<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>    <span class=\"hljs-keyword\">int</span> x = <span class=\"hljs-built_in\">sqrt</span>(a);<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">2</span>; i &lt;= x; ++i)<br>    &#123;<br>        <span class=\"hljs-keyword\">if</span> (a % i == <span class=\"hljs-number\">0</span>)<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"素数的埃式筛法\"><a href=\"#素数的埃式筛法\" class=\"headerlink\" title=\"素数的埃式筛法\"></a>素数的埃式筛法</h4><p>先确认一个数是素数,然后划掉其倍数,在找到下一个素数后,再划掉其倍数,最后只剩素数.</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-keyword\">int</span> number_list[<span class=\"hljs-number\">1000</span>] = &#123;<span class=\"hljs-number\">0</span>&#125;; <span class=\"hljs-comment\">//we can get primes below 1000</span><br>    <span class=\"hljs-keyword\">bool</span> break_flag = <span class=\"hljs-literal\">false</span>;<br>    number_list[<span class=\"hljs-number\">0</span>] = <span class=\"hljs-number\">1</span>;<br>    <span class=\"hljs-keyword\">int</span> pri = <span class=\"hljs-number\">2</span>;<br>    <span class=\"hljs-keyword\">while</span> (!break_flag)<br>    &#123;<br>        <span class=\"hljs-comment\">// the non-prime will be mark 1</span><br>        <span class=\"hljs-keyword\">int</span> count = pri;<br>        <span class=\"hljs-keyword\">while</span> (count &lt;= <span class=\"hljs-number\">1000</span>)<br>        &#123;<br>            count += pri;<br>            <span class=\"hljs-keyword\">if</span> (count &gt;= <span class=\"hljs-number\">1000</span>)<br>                <span class=\"hljs-keyword\">break</span>;<br>            number_list[count] = <span class=\"hljs-number\">1</span>;<br>        &#125;<br>        <span class=\"hljs-keyword\">int</span> temp_pri = pri;<br>        <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-literal\">true</span>)<br>        &#123;<br>            temp_pri++;<br>            <span class=\"hljs-keyword\">if</span> (temp_pri &gt;= <span class=\"hljs-number\">999</span>)<br>            &#123;<br>                break_flag = <span class=\"hljs-literal\">true</span>;<br>                <span class=\"hljs-keyword\">break</span>;<br>            &#125;<br>            <span class=\"hljs-keyword\">if</span> (number_list[temp_pri] == <span class=\"hljs-number\">0</span>)<br>            &#123;<br>                pri = temp_pri;<br>                <span class=\"hljs-keyword\">break</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">1000</span>; i++)<br>    &#123;<br>        <span class=\"hljs-keyword\">if</span> (number_list[i] == <span class=\"hljs-number\">0</span>)<br>        &#123;<br>            <span class=\"hljs-built_in\">cout</span> &lt;&lt; i &lt;&lt; <span class=\"hljs-string\">\" \"</span>;<br>        &#125;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"分解质因数-简便方法\"><a href=\"#分解质因数-简便方法\" class=\"headerlink\" title=\"分解质因数(简便方法)\"></a>分解质因数(简便方法)</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;math.h&gt;</span></span><br><span class=\"hljs-comment\">//这个程序适合好好阅读并分析</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">foo</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">long</span> <span class=\"hljs-keyword\">long</span> <span class=\"hljs-keyword\">int</span> n)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-keyword\">long</span> <span class=\"hljs-keyword\">long</span> <span class=\"hljs-keyword\">int</span> sqr = <span class=\"hljs-built_in\">sqrt</span>(n);<span class=\"hljs-comment\">//测试质数只需测到平方的取整</span><br>    <span class=\"hljs-keyword\">long</span> <span class=\"hljs-keyword\">long</span> <span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-keyword\">for</span>(i = <span class=\"hljs-number\">2</span>; i &lt;= sqr; i++)<span class=\"hljs-comment\">//从2开始测</span><br>    &#123;<br>        <span class=\"hljs-keyword\">if</span>(n % i == <span class=\"hljs-number\">0</span> &amp;&amp; (n /= i))<span class=\"hljs-comment\">//后面的表达式指的是除i留下剩余部分</span><br>        &#123;<br>            <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"%lld \"</span>, i--);<br>        &#125;<br>    &#125;<br>    <span class=\"hljs-keyword\">if</span>(n != <span class=\"hljs-number\">1</span>)<span class=\"hljs-comment\">//不打印1作为因子</span><br>    &#123;<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"%lld\"</span>, n);<br>    &#125;<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"\\n\"</span>);<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-keyword\">long</span> <span class=\"hljs-keyword\">long</span> <span class=\"hljs-keyword\">int</span> n ;<br>    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">\"%lld\"</span>, &amp;n);<br>    foo(n);<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"查找字符-这是C标准库里的内容\"><a href=\"#查找字符-这是C标准库里的内容\" class=\"headerlink\" title=\"查找字符(这是C标准库里的内容)\"></a>查找字符(这是C标准库里的内容)</h4><p>用于在一个字符串(也就是char数组)中查找指定的字符</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-built_in\">strchr</span>(string_name, <span class=\"hljs-string\">'A'</span>);<span class=\"hljs-comment\">//在string name 这个字符串中寻找A这个字符</span><br><span class=\"hljs-comment\">//返回有多种可能,若找到,返回指向这个字符的指针,否则返回NULL(这个NULL是标识符,不是字符串之类的玩意)</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"位运算\"><a href=\"#位运算\" class=\"headerlink\" title=\"位运算\"></a>位运算</h4><p>位运算是一种直接操作位的运算,其包含多种运算符:</p>\n<p>上代码:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\">&lt;&lt;; <span class=\"hljs-comment\">//左移运算符,移动时丢弃左边的位,用0补充</span><br><span class=\"hljs-string\">\"11110000\"</span>&lt;&lt;<span class=\"hljs-string\">\"10000000\"</span>;<span class=\"hljs-comment\">//左移了3位!!!</span><br>&gt;&gt;; <span class=\"hljs-comment\">//右移运算符,移动时丢弃右边的位,左边用0或原来丢弃的左边的位补充!!!</span><br><span class=\"hljs-string\">\"11111111\"</span>&gt;&gt;<span class=\"hljs-string\">\"00001111\"</span>;<span class=\"hljs-comment\">//右移了四位!!!</span><br>    <br><span class=\"hljs-comment\">//接下来看看逻辑位运算</span><br>~;<span class=\"hljs-comment\">//按位非,倒置0/1</span><br>|;<span class=\"hljs-comment\">//按位或,有一为1,否则为0</span><br>^;<span class=\"hljs-comment\">//XOR,相同为0,不同为1</span><br>&amp;;<span class=\"hljs-comment\">//AND,都为1才为1,否则为0</span><br><br><span class=\"hljs-comment\">//一些常用的位逻辑运算:</span><br>lottabits |= <span class=\"hljs-built_in\">pow</span>(<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>);<span class=\"hljs-comment\">//打开位,也就是将某一位置为1,其中后面的2的多少次方代表着打开的位置(2的0次方代表右起第一位,以此类推)</span><br>lottabits ^= <span class=\"hljs-built_in\">pow</span>(<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>);<span class=\"hljs-comment\">//切换位:置反</span><br>lottabits &amp;= <span class=\"hljs-built_in\">pow</span>(<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>);<span class=\"hljs-comment\">//关闭位:置0</span><br><span class=\"hljs-keyword\">bool</span> isOpen = lottabits &amp; <span class=\"hljs-built_in\">pow</span>(<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>);<span class=\"hljs-comment\">//测试某一位是否为1(打开),返回true or false.</span><br></code></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<p>[TOC]</p>\n<blockquote>\n<p>I’m refactoring this note into English version. This may spend me lots of time.</p>\n<p>But I believe it will be a good form for me to learn English.</p>\n<p>Carry on! </p>\n</blockquote>\n<h1 id=\"C-Language-Studying-Section-1\"><a href=\"#C-Language-Studying-Section-1\" class=\"headerlink\" title=\"C++ Language Studying(Section 1)\"></a>C++ Language Studying(Section 1)</h1><h2 id=\"Basic-C-Knowledge\"><a href=\"#Basic-C-Knowledge\" class=\"headerlink\" title=\"Basic C++ Knowledge\"></a>Basic C++ Knowledge</h2><h3 id=\"Some-tiny-knowledge-points\"><a href=\"#Some-tiny-knowledge-points\" class=\"headerlink\" title=\"Some tiny knowledge points\"></a>Some tiny knowledge points</h3><p>1B=8bit(B refers byte and b refers bit)</p>\n<h2 id=\"C-I-O\"><a href=\"#C-I-O\" class=\"headerlink\" title=\"C++ I/O\"></a>C++ I/O</h2><h2 id=\"C-Sentences\"><a href=\"#C-Sentences\" class=\"headerlink\" title=\"C++ Sentences\"></a>C++ Sentences</h2><h4 id=\"Range-for\"><a href=\"#Range-for\" class=\"headerlink\" title=\"Range for\"></a>Range for</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">auto</span> s:str1)<br>&#123;<br>    <span class=\"hljs-built_in\">cout</span>&lt;&lt;S&lt;&lt;<span class=\"hljs-built_in\">endl</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>By using range for, you can process each element in an array or a sequence .</p>\n<h2 id=\"C-类\"><a href=\"#C-类\" class=\"headerlink\" title=\"C++ 类\"></a>C++ 类</h2><p>众所周知，支持面向对象编程是C++的一个重要特性，接下来我们来看类。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Box</span></span><br><span class=\"hljs-class\">&#123;</span><br>   <span class=\"hljs-keyword\">public</span>:<br>      <span class=\"hljs-keyword\">double</span> length;   <span class=\"hljs-comment\">// 盒子的长度</span><br>      <span class=\"hljs-keyword\">double</span> breadth;  <span class=\"hljs-comment\">// 盒子的宽度</span><br>      <span class=\"hljs-keyword\">double</span> <span class=\"hljs-built_in\">height</span>;   <span class=\"hljs-comment\">// 盒子的高度</span><br>&#125;;<br></code></pre></td></tr></table></figure>\n\n<p>带成员函数声明和定义：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Box</span></span><br><span class=\"hljs-class\">&#123;</span><br>   <span class=\"hljs-keyword\">public</span>:<br>      <span class=\"hljs-keyword\">double</span> length;   <span class=\"hljs-comment\">// 长度</span><br>      <span class=\"hljs-keyword\">double</span> breadth;  <span class=\"hljs-comment\">// 宽度</span><br>      <span class=\"hljs-keyword\">double</span> <span class=\"hljs-built_in\">height</span>;   <span class=\"hljs-comment\">// 高度</span><br>      <span class=\"hljs-comment\">// 成员函数声明</span><br>      <span class=\"hljs-function\"><span class=\"hljs-keyword\">double</span> <span class=\"hljs-title\">get</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">void</span>)</span></span>;<br>      <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">set</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">double</span> len, <span class=\"hljs-keyword\">double</span> bre, <span class=\"hljs-keyword\">double</span> hei )</span></span>;<br>&#125;;<br><span class=\"hljs-comment\">// 成员函数定义</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">double</span> <span class=\"hljs-title\">Box::get</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">void</span>)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-keyword\">return</span> length * breadth * <span class=\"hljs-built_in\">height</span>;<br>&#125;<br> <br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Box::set</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">double</span> len, <span class=\"hljs-keyword\">double</span> bre, <span class=\"hljs-keyword\">double</span> hei)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    length = len;<br>    breadth = bre;<br>    <span class=\"hljs-built_in\">height</span> = hei;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"析构函数：\"><a href=\"#析构函数：\" class=\"headerlink\" title=\"析构函数：\"></a>析构函数：</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">String</span>&#123;</span><br><span class=\"hljs-keyword\">private</span>:<br>    <span class=\"hljs-keyword\">char</span>* p;<br><span class=\"hljs-keyword\">public</span>:<br>    <span class=\"hljs-keyword\">String</span>(<span class=\"hljs-keyword\">int</span> n);<br>    ~<span class=\"hljs-keyword\">String</span>();<br>&#125;;<br><span class=\"hljs-keyword\">String</span>::~<span class=\"hljs-keyword\">String</span>()&#123;   <span class=\"hljs-comment\">//析构函数</span><br>    <span class=\"hljs-keyword\">delete</span>[] p;<br>&#125;<br><span class=\"hljs-keyword\">String</span>::<span class=\"hljs-keyword\">String</span>(<span class=\"hljs-keyword\">int</span> n)&#123;<br>    p = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">char</span>[n];<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"c-继承\"><a href=\"#c-继承\" class=\"headerlink\" title=\"c++继承\"></a>c++继承</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-comment\">// 基类</span><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Shape</span> </span><br><span class=\"hljs-class\">&#123;</span><br>   <span class=\"hljs-keyword\">public</span>:<br>      <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setWidth</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> w)</span></span><br><span class=\"hljs-function\">      </span>&#123;<br>         <span class=\"hljs-built_in\">width</span> = w;<br>      &#125;<br>      <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setHeight</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> h)</span></span><br><span class=\"hljs-function\">      </span>&#123;<br>         <span class=\"hljs-built_in\">height</span> = h;<br>      &#125;<br>   <span class=\"hljs-keyword\">protected</span>:<br>      <span class=\"hljs-keyword\">int</span> <span class=\"hljs-built_in\">width</span>;<br>      <span class=\"hljs-keyword\">int</span> <span class=\"hljs-built_in\">height</span>;<br>&#125;;<br> <br><span class=\"hljs-comment\">// 派生类</span><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Rectangle</span>:</span> <span class=\"hljs-keyword\">public</span> Shape<br>&#123;<br>   <span class=\"hljs-keyword\">public</span>:<br>      <span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">getArea</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\">      </span>&#123; <br>         <span class=\"hljs-keyword\">return</span> (<span class=\"hljs-built_in\">width</span> * <span class=\"hljs-built_in\">height</span>); <br>      &#125;<br>&#125;;<br><br><span class=\"hljs-comment\">//多继承</span><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> &lt;派生类名&gt;:</span>&lt;继承方式<span class=\"hljs-number\">1</span>&gt;&lt;基类名<span class=\"hljs-number\">1</span>&gt;,&lt;继承方式<span class=\"hljs-number\">2</span>&gt;&lt;基类名<span class=\"hljs-number\">2</span>&gt;,…<br>&#123;<br>&lt;派生类类体&gt;<br>&#125;;<br></code></pre></td></tr></table></figure>\n\n\n\n<p>重载：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-comment\">//运算符重载：</span><br>Box <span class=\"hljs-keyword\">operator</span>+(<span class=\"hljs-keyword\">const</span> Box&amp; b)<br>      &#123;<br>         Box box;<br>         box.length = <span class=\"hljs-keyword\">this</span>-&gt;length + b.length;<br>         box.breadth = <span class=\"hljs-keyword\">this</span>-&gt;breadth + b.breadth;<br>         box.<span class=\"hljs-built_in\">height</span> = <span class=\"hljs-keyword\">this</span>-&gt;<span class=\"hljs-built_in\">height</span> + b.<span class=\"hljs-built_in\">height</span>;<br>         <span class=\"hljs-keyword\">return</span> box;<br>      &#125;<br><br><span class=\"hljs-comment\">//函数重载：</span><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">printData</span></span><br><span class=\"hljs-class\">&#123;</span><br>   <span class=\"hljs-keyword\">public</span>:<br>      <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">print</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> i)</span> </span>&#123;<br>        <span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">\"整数为: \"</span> &lt;&lt; i &lt;&lt; <span class=\"hljs-built_in\">endl</span>;<br>      &#125;<br> <br>      <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">print</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">double</span>  f)</span> </span>&#123;<br>        <span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">\"浮点数为: \"</span> &lt;&lt; f &lt;&lt; <span class=\"hljs-built_in\">endl</span>;<br>      &#125;<br> <br>      <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">print</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">char</span> c[])</span> </span>&#123;<br>        <span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">\"字符串为: \"</span> &lt;&lt; c &lt;&lt; <span class=\"hljs-built_in\">endl</span>;<br>      &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"命名空间\"><a href=\"#命名空间\" class=\"headerlink\" title=\"命名空间\"></a>命名空间</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-comment\">// 第一个命名空间</span><br><span class=\"hljs-keyword\">namespace</span> first_space&#123;<br>   <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">func</span><span class=\"hljs-params\">()</span></span>&#123;<br>      <span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">\"Inside first_space\"</span> &lt;&lt; <span class=\"hljs-built_in\">endl</span>;<br>   &#125;<br>&#125;<br><span class=\"hljs-comment\">// 第二个命名空间</span><br><span class=\"hljs-keyword\">namespace</span> second_space&#123;<br>   <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">func</span><span class=\"hljs-params\">()</span></span>&#123;<br>      <span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">\"Inside second_space\"</span> &lt;&lt; <span class=\"hljs-built_in\">endl</span>;<br>   &#125;<br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span> <span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br> <br>   <span class=\"hljs-comment\">// 调用第一个命名空间中的函数</span><br>   first_space::func();<br>   <br>   <span class=\"hljs-comment\">// 调用第二个命名空间中的函数</span><br>   second_space::func(); <br> <br>   <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"王氏C-——应付考试内容\"><a href=\"#王氏C-——应付考试内容\" class=\"headerlink\" title=\"王氏C++——应付考试内容\"></a>王氏C++——应付考试内容</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-comment\">//自由函数与成员函数，运算符重载的不同</span><br><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">&lt;bits/stdc++.h&gt;</span></span><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">complex</span>&#123;</span><br>    <span class=\"hljs-keyword\">public</span>:<br>    <span class=\"hljs-built_in\">complex</span>(<span class=\"hljs-keyword\">int</span> ri = <span class=\"hljs-number\">0</span>, <span class=\"hljs-keyword\">int</span> ii = <span class=\"hljs-number\">0</span>)&#123;<br>        r = ri;<br>        i = ii;<br>    &#125;<br>    <span class=\"hljs-keyword\">int</span> r;<br>    <span class=\"hljs-keyword\">int</span> i;<br>    <span class=\"hljs-keyword\">friend</span> <span class=\"hljs-built_in\">complex</span> <span class=\"hljs-keyword\">operator</span>+(<span class=\"hljs-keyword\">const</span> <span class=\"hljs-built_in\">complex</span> &amp;b) ;<span class=\"hljs-comment\">//友元函数</span><br>    <span class=\"hljs-comment\">//complex operator+(const complex &amp;b) const;  成员函数</span><br>&#125;;<br><br><span class=\"hljs-built_in\">complex</span> <span class=\"hljs-keyword\">operator</span>+(<span class=\"hljs-keyword\">const</span> <span class=\"hljs-built_in\">complex</span> &amp;a,<span class=\"hljs-keyword\">const</span> <span class=\"hljs-built_in\">complex</span> &amp;b) &#123;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">complex</span>(a.r+b.r,a.i+b.i);<br>&#125;<br><br><span class=\"hljs-comment\">/*</span><br><span class=\"hljs-comment\">成员函数</span><br><span class=\"hljs-comment\">complex complex::operator+(const complex &amp;b) const&#123;</span><br><span class=\"hljs-comment\">    return complex(r+b.r,i+b.i);</span><br><span class=\"hljs-comment\">&#125;</span><br><span class=\"hljs-comment\">*/</span><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>&#123;<br>    <span class=\"hljs-function\"><span class=\"hljs-built_in\">complex</span> <span class=\"hljs-title\">c1</span><span class=\"hljs-params\">(<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">1</span>)</span></span>;<br>    <span class=\"hljs-function\"><span class=\"hljs-built_in\">complex</span> <span class=\"hljs-title\">c2</span><span class=\"hljs-params\">(<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">2</span>)</span></span>;<br>    <span class=\"hljs-built_in\">complex</span> c3 = c1+c2;<br>    <span class=\"hljs-built_in\">complex</span> c4 = c2+<span class=\"hljs-number\">3</span>;<span class=\"hljs-comment\">//成员函数无法执行此操作，而友元函数会得出结果c4.r = c2.r+3,c4.r = c2.r;</span><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br><br><span class=\"hljs-comment\">//有关数组一说</span><br><span class=\"hljs-keyword\">float</span>[<span class=\"hljs-number\">2</span>] x[<span class=\"hljs-number\">100</span>];<span class=\"hljs-comment\">//这是每个元素为2个float元素为元素的数组的数组。但是是错的，编译不通过。</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"引用：\"><a href=\"#引用：\" class=\"headerlink\" title=\"引用：\"></a>引用：</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">int</span> x = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">int</span> &amp;rx = x;<br><span class=\"hljs-comment\">//rx = 7-&gt;x = 7</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"函数：\"><a href=\"#函数：\" class=\"headerlink\" title=\"函数：\"></a>函数：</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-function\">datatype <span class=\"hljs-title\">func_name</span><span class=\"hljs-params\">(datatype a)</span></span>&#123;<br>\t<br>&#125;<br><br><span class=\"hljs-function\">datatype <span class=\"hljs-title\">func_name</span><span class=\"hljs-params\">(datatype &amp;rr)</span></span>&#123;<br>    rr = <span class=\"hljs-number\">2</span>;<br>&#125;<br><br><span class=\"hljs-function\">datatype <span class=\"hljs-title\">func_name</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">const</span> <span class=\"hljs-keyword\">float</span> &amp;rr)</span></span>&#123;<br>    rr = <span class=\"hljs-number\">2</span>;<span class=\"hljs-comment\">//ERROR</span><br>&#125;<br><br><span class=\"hljs-comment\">//example:</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">fun</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> &amp;i)</span></span>&#123;<br>    i = <span class=\"hljs-number\">36</span>;<br>    <span class=\"hljs-keyword\">return</span> i;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>&#123;<br>    <span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">3</span>;<br>    <span class=\"hljs-keyword\">int</span> f = fun(i);<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br><br><span class=\"hljs-comment\">//数组名做参数</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">calcsum</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> x[],<span class=\"hljs-keyword\">int</span> <span class=\"hljs-built_in\">size</span>)</span></span>&#123;<br>    <span class=\"hljs-keyword\">int</span> sum;<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-built_in\">size</span>; i++)<br>    &#123;<br>        sum+=x[i];<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> sum;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>&#123;<br>    <span class=\"hljs-keyword\">int</span> x[<span class=\"hljs-number\">2</span>]=&#123;<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>&#125;;<br>    <span class=\"hljs-keyword\">int</span> sum = calcsum(x,<span class=\"hljs-number\">2</span>);<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"有关类的四个基本函数\"><a href=\"#有关类的四个基本函数\" class=\"headerlink\" title=\"有关类的四个基本函数\"></a>有关类的四个基本函数</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Clock</span>&#123;</span><br>    <span class=\"hljs-keyword\">private</span>:<br>    <span class=\"hljs-keyword\">int</span> a;<br>    <span class=\"hljs-keyword\">int</span> b;<br>    <span class=\"hljs-keyword\">public</span>:<br>    clock(<span class=\"hljs-keyword\">int</span> a, <span class=\"hljs-keyword\">int</span> b);<span class=\"hljs-comment\">//构造函数</span><br>    clock();<span class=\"hljs-comment\">//默认构造函数</span><br>    clock(<span class=\"hljs-keyword\">int</span> i,<span class=\"hljs-keyword\">int</span> j)&#123;<br>        a = i;<br>        b = j;<br>    &#125;<br>    <br>    <span class=\"hljs-comment\">//初始化列表：</span><br>    clock(<span class=\"hljs-keyword\">int</span> s, <span class=\"hljs-keyword\">int</span> i):a(s), b(i)&#123;&#125;;<br>    <br>    <span class=\"hljs-comment\">//析构函数</span><br>    ~clock;<br>    <br>    <span class=\"hljs-comment\">//拷贝构造函数</span><br>    clock(<span class=\"hljs-keyword\">const</span> clock &amp;c)&#123;<br>        a = c.a;<br>        b = c.b;<br>    &#125;<br>    <br>    <span class=\"hljs-comment\">//拷贝赋值函数</span><br>    clock&amp; <span class=\"hljs-keyword\">operator</span>=(<span class=\"hljs-keyword\">const</span> clock &amp;c)&#123;<br>        <span class=\"hljs-keyword\">if</span> (&amp;c!= <span class=\"hljs-keyword\">this</span>)&#123;   <span class=\"hljs-comment\">//避免自己拷贝自己的情况</span><br>            a = c.a;<br>            b = c.b;<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> *<span class=\"hljs-keyword\">this</span>;<br>    &#125;<br>    <br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"常函数：\"><a href=\"#常函数：\" class=\"headerlink\" title=\"常函数：\"></a>常函数：</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">circle</span>&#123;</span><br>    <span class=\"hljs-keyword\">private</span>:<br>    <span class=\"hljs-keyword\">int</span> r;<br>    <span class=\"hljs-keyword\">public</span>:<br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">getR</span><span class=\"hljs-params\">()</span></span>&#123;<br>        <span class=\"hljs-keyword\">return</span> r;<br>    &#125;<br>    <span class=\"hljs-built_in\">circle</span>(<span class=\"hljs-keyword\">int</span> i)&#123;<br>        r = i;<br>    &#125;<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">float</span> <span class=\"hljs-title\">getArea</span><span class=\"hljs-params\">()</span> <span class=\"hljs-comment\">/*(const)*/</span></span>&#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">3.1415926</span> *r*r;<br>    &#125;<br>    float getAreaC() const)&#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">3.1415926</span> *r*r;<br>    &#125;<br>&#125;;<br><br><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>&#123;<br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-built_in\">circle</span> <span class=\"hljs-title\">c1</span><span class=\"hljs-params\">(<span class=\"hljs-number\">1</span>)</span></span>;<br>    <span class=\"hljs-keyword\">float</span> area = c1.getArea();<span class=\"hljs-comment\">//错误，不是常函数无法访问const修饰的对象</span><br>    <span class=\"hljs-keyword\">float</span> area = c1.getAreaC();<span class=\"hljs-comment\">//正确</span><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"继承：\"><a href=\"#继承：\" class=\"headerlink\" title=\"继承：\"></a>继承：</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">circle2</span>:</span><span class=\"hljs-comment\">/*(private or protected or public)*/</span><span class=\"hljs-built_in\">circle</span>&#123;<br>    ......<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"虚函数：\"><a href=\"#虚函数：\" class=\"headerlink\" title=\"虚函数：\"></a>虚函数：</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">&lt;iostream&gt;</span></span><br><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Base1</span>&#123;</span><br>\t<span class=\"hljs-keyword\">public</span>:<br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">display</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">const</span></span>;<br>&#125;;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Base1::display</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">const</span></span>&#123;<br>    <span class=\"hljs-built_in\">std</span>::<span class=\"hljs-built_in\">cout</span>&lt;&lt;<span class=\"hljs-number\">1</span>&lt;&lt;<span class=\"hljs-built_in\">std</span>::<span class=\"hljs-built_in\">endl</span>;<br>&#125;<br><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Base2</span>:</span><span class=\"hljs-keyword\">public</span> Base1&#123;<br>    <span class=\"hljs-keyword\">public</span>:<br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">display</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">const</span> </span>;<br>&#125;;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Base2::display</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">const</span></span>&#123;<br>    <span class=\"hljs-built_in\">std</span>::<span class=\"hljs-built_in\">cout</span>&lt;&lt;<span class=\"hljs-number\">2</span>&lt;&lt;<span class=\"hljs-built_in\">std</span>::<span class=\"hljs-built_in\">endl</span>;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">function</span><span class=\"hljs-params\">(Base1 *ptr)</span></span>&#123;<span class=\"hljs-comment\">//一个指向父类的指针</span><br>    ptr-&gt;<span class=\"hljs-built_in\">display</span>();<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>&#123;<br>    Base1 b1;<br>    Base2 b2;<br>    function(&amp;b1);<span class=\"hljs-comment\">//调用 void Base1::display() const</span><br>    function(&amp;b2);<span class=\"hljs-comment\">//调用 void Base2::display() const</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>三种继承方式：父类成员对子类的可见性：</p>\n<table>\n<thead>\n<tr>\n<th>父类访问控制/继承方式：</th>\n<th>public</th>\n<th>protected</th>\n<th>private</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>public</td>\n<td>public</td>\n<td>protected</td>\n<td>private</td>\n</tr>\n<tr>\n<td>protected</td>\n<td>protected</td>\n<td>protected</td>\n<td>private</td>\n</tr>\n<tr>\n<td>private</td>\n<td>private</td>\n<td>private</td>\n<td>private</td>\n</tr>\n</tbody></table>\n<h2 id=\"C-Variable\"><a href=\"#C-Variable\" class=\"headerlink\" title=\"C++ Variable\"></a>C++ Variable</h2><h4 id=\"C-Variable-types\"><a href=\"#C-Variable-types\" class=\"headerlink\" title=\"C++ Variable types:\"></a>C++ Variable types:</h4><table>\n<thead>\n<tr>\n<th>Type</th>\n<th>Implication</th>\n<th>size</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>bool</td>\n<td>bool type</td>\n<td>undefined</td>\n</tr>\n<tr>\n<td>char</td>\n<td>character</td>\n<td>8b</td>\n</tr>\n<tr>\n<td>wchar_t</td>\n<td>wide character</td>\n<td>16b</td>\n</tr>\n<tr>\n<td>char16_t</td>\n<td>Unicode character</td>\n<td>16b</td>\n</tr>\n<tr>\n<td>char32_t</td>\n<td>Unicode character</td>\n<td>32b</td>\n</tr>\n<tr>\n<td>short</td>\n<td>short integer</td>\n<td>16b</td>\n</tr>\n<tr>\n<td>int</td>\n<td>integer</td>\n<td>16b</td>\n</tr>\n<tr>\n<td>long</td>\n<td>long integer</td>\n<td>32b</td>\n</tr>\n<tr>\n<td>long long</td>\n<td>long long integer</td>\n<td>64b</td>\n</tr>\n<tr>\n<td>float</td>\n<td>single-precision floating point number</td>\n<td>6 significant digit</td>\n</tr>\n<tr>\n<td>double</td>\n<td>double-precision floating point number</td>\n<td>10 significant digit</td>\n</tr>\n<tr>\n<td>long double</td>\n<td>expand double-precision floating point number</td>\n<td>10 significant digit</td>\n</tr>\n</tbody></table>\n<p>Use <code>unsigned</code> to state an unsigned variable type, an unsigned variable do not have a sign digit.</p>\n<h4 id=\"Type-conversion\"><a href=\"#Type-conversion\" class=\"headerlink\" title=\"Type conversion\"></a>Type conversion</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">bool</span> a =<span class=\"hljs-number\">42</span>;<span class=\"hljs-comment\">// 0 refers true and the others refer false.</span><br><span class=\"hljs-keyword\">int</span> i =<span class=\"hljs-number\">3.14</span>;<span class=\"hljs-comment\">// the value of i is 3,the fractional digit has been dropped.</span><br><span class=\"hljs-keyword\">double</span> pi =i;<span class=\"hljs-comment\">//the value of pi is 3</span><br><span class=\"hljs-keyword\">unsigned</span> <span class=\"hljs-keyword\">char</span> c = <span class=\"hljs-number\">-1</span>; <span class=\"hljs-comment\">//the value of c is 255</span><br></code></pre></td></tr></table></figure>\n\n<p><code>WARNING</code>: <strong>DO NOT USE UNSIGNED TYPE AND  SIGNED TYPE VARIABLE AT THE SAME TIME !!!</strong></p>\n<h4 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">int</span> a=<span class=\"hljs-number\">3</span>;<br><span class=\"hljs-keyword\">int</span> &amp;num = a;<span class=\"hljs-comment\">// num is a reference of a</span><br><span class=\"hljs-keyword\">int</span> &amp;num2;<span class=\"hljs-comment\">//ERROR: reference must be initialized</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"Pointer\"><a href=\"#Pointer\" class=\"headerlink\" title=\"Pointer\"></a>Pointer</h4><p>Pointers point to a pointer:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">int</span> a=<span class=\"hljs-number\">1024</span>;<br><span class=\"hljs-keyword\">int</span> *ptr1 = &amp;a;<br><span class=\"hljs-keyword\">int</span> **ptr2 = &amp;ptr1;<br><span class=\"hljs-built_in\">cout</span>&lt;&lt;**ptr2&lt;&lt;<span class=\"hljs-built_in\">endl</span>;<span class=\"hljs-comment\">// output 1024</span><br></code></pre></td></tr></table></figure>\n\n<p>C++ Standard Library :: begin, end</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">int</span> ia[]=&#123;<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">6</span>,<span class=\"hljs-number\">7</span>,<span class=\"hljs-number\">8</span>,<span class=\"hljs-number\">9</span>&#125;;<br><span class=\"hljs-keyword\">int</span> *beg = <span class=\"hljs-built_in\">begin</span>(ia);<span class=\"hljs-comment\">//refer a[0]</span><br><span class=\"hljs-keyword\">int</span> *<span class=\"hljs-built_in\">end</span> = <span class=\"hljs-built_in\">end</span>(ia);<span class=\"hljs-comment\">//refer the next position after the last element of an array</span><br></code></pre></td></tr></table></figure>\n\n<p>Pointer with custom size:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">int</span> a[<span class=\"hljs-number\">2</span>][<span class=\"hljs-number\">2</span>];<br><span class=\"hljs-keyword\">int</span> *p[<span class=\"hljs-number\">2</span>];<span class=\"hljs-comment\">//NOT THIS: It created a pointer array</span><br><span class=\"hljs-keyword\">int</span> (*p2)[<span class=\"hljs-number\">2</span>];<span class=\"hljs-comment\">//a pointer which can point to an array with 2 ints.</span><br><span class=\"hljs-comment\">//use decltype or auto:</span><br><span class=\"hljs-keyword\">decltype</span> *p3 = a;<br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"Const\"><a href=\"#Const\" class=\"headerlink\" title=\"Const\"></a>Const</h4><p>You can use <code>const</code> to make a variable unchangeable.</p>\n<p><strong>Top-level-const and Low-level-const:</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">0</span>;<br><span class=\"hljs-keyword\">int</span> *<span class=\"hljs-keyword\">const</span> p1 = &amp;i;<span class=\"hljs-comment\">//the value of pointer can not be changed,top-level-const</span><br><span class=\"hljs-keyword\">const</span> <span class=\"hljs-keyword\">int</span> ci =<span class=\"hljs-number\">42</span>;<span class=\"hljs-comment\">//the value of ci can not be changed.</span><br><span class=\"hljs-keyword\">const</span> <span class=\"hljs-keyword\">int</span> *p2 = &amp;ci;<span class=\"hljs-comment\">//the value of pointer can not be changed</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"Typedef\"><a href=\"#Typedef\" class=\"headerlink\" title=\"Typedef\"></a>Typedef</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-keyword\">double</span> wages;<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"Decltype\"><a href=\"#Decltype\" class=\"headerlink\" title=\"Decltype\"></a>Decltype</h4><p>Use decltype to get a type that a function returns.</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">decltype</span>(f()) sum =<span class=\"hljs-number\">0</span>;<span class=\"hljs-comment\">//the type of sum is just the type that f() returns.</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"Write-your-own-head-file\"><a href=\"#Write-your-own-head-file\" class=\"headerlink\" title=\"Write your own head file\"></a>Write your own head file</h4><p>You’d better define your struct and class in a head file .</p>\n<h2 id=\"Data-Structure-STL\"><a href=\"#Data-Structure-STL\" class=\"headerlink\" title=\"Data Structure(STL)\"></a>Data Structure(STL)</h2><h4 id=\"Using-statement\"><a href=\"#Using-statement\" class=\"headerlink\" title=\"Using statement\"></a>Using statement</h4><p>Before using C++ Standard Library, you can:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-comment\">//method 1</span><br><span class=\"hljs-built_in\">std</span>::<span class=\"hljs-built_in\">cout</span>&lt;&lt;<span class=\"hljs-string\">\"Test\"</span>&lt;&lt;<span class=\"hljs-built_in\">std</span>::<span class=\"hljs-built_in\">endl</span>;<br><span class=\"hljs-comment\">//method 2:</span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-built_in\">std</span>;<br><span class=\"hljs-built_in\">cout</span>&lt;&lt;<span class=\"hljs-string\">\"123\"</span>&lt;&lt;<span class=\"hljs-built_in\">endl</span>;<br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"Using-iterator\"><a href=\"#Using-iterator\" class=\"headerlink\" title=\"Using iterator\"></a>Using iterator</h4><p>A sort of intelligence pointer , used for STD .</p>\n<p>C++ example:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;bits/stdc++.h&gt;</span></span><br><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-built_in\">std</span>;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-built_in\">vector</span>&lt;<span class=\"hljs-keyword\">int</span>&gt; vec1;<span class=\"hljs-comment\">//Statement</span><br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">5</span>; i++)<br>    &#123;<br>        vec1.push_back(i);<br>    &#125;<br>    <span class=\"hljs-keyword\">auto</span> it = vec1.<span class=\"hljs-built_in\">begin</span>();<span class=\"hljs-comment\">//Auto Statement</span><br>    <span class=\"hljs-built_in\">vector</span>&lt;<span class=\"hljs-keyword\">int</span>&gt;:: iterator it = vec1.<span class=\"hljs-built_in\">begin</span>();<span class=\"hljs-comment\">//Standard statement</span><br><br>    <span class=\"hljs-built_in\">cout</span> &lt;&lt; *it &lt;&lt; <span class=\"hljs-built_in\">endl</span>;<br>    <span class=\"hljs-keyword\">for</span> (; it != vec1.<span class=\"hljs-built_in\">end</span>(); it++)<br>    &#123;<br>        <span class=\"hljs-built_in\">cout</span> &lt;&lt; *it &lt;&lt; <span class=\"hljs-built_in\">endl</span>;<br>    &#125;<br>    <br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>    <br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>Operations:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\">it = v1.<span class=\"hljs-built_in\">begin</span>();<span class=\"hljs-comment\">//set v1 refer to the first</span><br>*it;<span class=\"hljs-comment\">//return value</span><br>it++;<span class=\"hljs-comment\">//point to the next</span><br>*it = <span class=\"hljs-number\">1234</span>;<span class=\"hljs-comment\">//change value</span><br>it2 = it + <span class=\"hljs-number\">2</span>;<span class=\"hljs-comment\">//send the address + 2 to another</span><br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"Stack-a-LIFO-Last-in-First-out-data-structure\"><a href=\"#Stack-a-LIFO-Last-in-First-out-data-structure\" class=\"headerlink\" title=\"Stack: a LIFO(Last in First out) data structure\"></a>Stack: a LIFO(Last in First out) data structure</h4><p>Statement in C++:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-built_in\">stack</span>&lt;<span class=\"hljs-keyword\">int</span>&gt; stack_name;<br></code></pre></td></tr></table></figure>\n\n<p>Basic operations:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\">stack_name.push(data);<span class=\"hljs-comment\">//push a data into the stack</span><br><span class=\"hljs-built_in\">cout</span>&lt;&lt;stack_name.top();<span class=\"hljs-comment\">//read the data at top</span><br>stack_name.pop();<span class=\"hljs-comment\">//pop out the data at top</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"Queue-a-FIFO-First-in-First-out-data-structure\"><a href=\"#Queue-a-FIFO-First-in-First-out-data-structure\" class=\"headerlink\" title=\"Queue: a FIFO(First in First out) data structure\"></a>Queue: a FIFO(First in First out) data structure</h4><p>Statement in C++:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-built_in\">queue</span>&lt;<span class=\"hljs-keyword\">int</span>&gt; q;<br></code></pre></td></tr></table></figure>\n\n<p>Basic operations:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\">q.front();<span class=\"hljs-comment\">//read the data at the front</span><br>q.push();<span class=\"hljs-comment\">//push a data at the end of the queue</span><br>q.pop();<span class=\"hljs-comment\">//pop out the data at the front</span><br>q = <span class=\"hljs-built_in\">queue</span>&lt;<span class=\"hljs-keyword\">int</span>&gt;();<span class=\"hljs-comment\">//empty the queue</span><br></code></pre></td></tr></table></figure>\n\n<p>Then, let’s see a sample of using queue.</p>\n<p>Cruel torture (AHU77)</p>\n<hr>\n<p>Please read the question at <a href=\"oj.bofc.tech\">bofcOJ</a></p>\n<hr>\n<p>Code:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;bits/stdc++.h&gt;</span></span><br><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-built_in\">std</span>;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-keyword\">int</span> qty_children = <span class=\"hljs-number\">0</span>, k;<br>    <span class=\"hljs-built_in\">cin</span> &gt;&gt; qty_children &gt;&gt; k;<br><br>    <br>    <span class=\"hljs-keyword\">int</span> sum = <span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-built_in\">queue</span>&lt;<span class=\"hljs-keyword\">int</span>&gt; children;<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">1</span>; i &lt;= qty_children; i++)<br>    &#123;<br>        children.push(i);<br>    &#125; <span class=\"hljs-comment\">//statement queue</span><br>    <span class=\"hljs-keyword\">while</span> (sum &lt; qty_children<span class=\"hljs-number\">-1</span>)<br>    &#123;<br><br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; k<span class=\"hljs-number\">-1</span>; i++)<br>        &#123;<br>            children.push(children.front());<span class=\"hljs-comment\">//if we do not pull out the line, thus we let this wild kid get to the back.</span><br>            children.pop();<br>        &#125;<br>        children.pop();<span class=\"hljs-comment\">//when it comes to pull out the line, this wild kid is over.</span><br>        sum++;<br>    &#125;<br>    <span class=\"hljs-built_in\">cout</span> &lt;&lt; children.front();<br><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"Using-dynamic-array-with-pointer\"><a href=\"#Using-dynamic-array-with-pointer\" class=\"headerlink\" title=\"Using dynamic array with pointer\"></a>Using dynamic array with pointer</h4><p>Code demo:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">int</span> *p = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">int</span>[<span class=\"hljs-number\">10</span>];<span class=\"hljs-comment\">//Create an array when running.</span><br><span class=\"hljs-keyword\">delete</span>[] p;<span class=\"hljs-comment\">//the realease of a dynamic array method is not same with a variable</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"bitset\"><a href=\"#bitset\" class=\"headerlink\" title=\"bitset\"></a>bitset</h4><p>A data structure which storages bit.</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-built_in\">bitset</span>&lt;4&gt; bitset1;<span class=\"hljs-comment\">//construct without parameter:set space 4</span><br><br><span class=\"hljs-function\"><span class=\"hljs-built_in\">bitset</span>&lt;8&gt; <span class=\"hljs-title\">bitset2</span><span class=\"hljs-params\">(<span class=\"hljs-number\">12</span>)</span></span>;<span class=\"hljs-comment\">//the space is 8, storge 12 into binary system,use 0 to fill the blank bit.</span><br><br><span class=\"hljs-built_in\">string</span> s = <span class=\"hljs-string\">\"100101\"</span>;<br><span class=\"hljs-function\"><span class=\"hljs-built_in\">bitset</span>&lt;10&gt; <span class=\"hljs-title\">bitset3</span><span class=\"hljs-params\">(s)</span></span>;<span class=\"hljs-comment\">//the space is 10,use 0 to fill the blank bit,the string CAN ONLY CONTAINS 0 and 1.</span><br><br><span class=\"hljs-keyword\">char</span> s2[] = <span class=\"hljs-string\">\"10101\"</span>;<br><span class=\"hljs-function\"><span class=\"hljs-built_in\">bitset</span>&lt;13&gt; <span class=\"hljs-title\">bitset4</span><span class=\"hljs-params\">(s2)</span></span>;<span class=\"hljs-comment\">//the space is 13,use 0 to fill the blank bit</span><br><br><span class=\"hljs-built_in\">cout</span> &lt;&lt; bitset1 &lt;&lt; <span class=\"hljs-built_in\">endl</span>;<span class=\"hljs-comment\">//0000</span><br><span class=\"hljs-built_in\">cout</span> &lt;&lt; bitset2 &lt;&lt; <span class=\"hljs-built_in\">endl</span>;<span class=\"hljs-comment\">//00001100</span><br><span class=\"hljs-built_in\">cout</span> &lt;&lt; bitset3 &lt;&lt; <span class=\"hljs-built_in\">endl</span>;<span class=\"hljs-comment\">//0000100101</span><br><span class=\"hljs-built_in\">cout</span> &lt;&lt; bitset4 &lt;&lt; <span class=\"hljs-built_in\">endl</span>;<span class=\"hljs-comment\">//0000000010101</span><br>bitset3[<span class=\"hljs-number\">0</span>];<span class=\"hljs-comment\">//Simular as array,use subscript to access the elements.</span><br></code></pre></td></tr></table></figure>\n\n<p>There’s so many ways to use bitset, but let’s see struct first.</p>\n<h4 id=\"Struct\"><a href=\"#Struct\" class=\"headerlink\" title=\"Struct\"></a>Struct</h4><p>A struct is a data structure which contains serval variable type. The struct can also form an array!</p>\n<p>C++ examples</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Books</span></span><br><span class=\"hljs-class\">&#123;</span><br>   <span class=\"hljs-keyword\">char</span>  title[<span class=\"hljs-number\">50</span>];<br>   <span class=\"hljs-keyword\">char</span>  author[<span class=\"hljs-number\">50</span>];<br>   <span class=\"hljs-keyword\">char</span>  subject[<span class=\"hljs-number\">100</span>];<br>   <span class=\"hljs-keyword\">int</span>   book_id;<br>&#125; book = &#123;<span class=\"hljs-string\">\"C Language\"</span>, <span class=\"hljs-string\">\"RUNOOB\"</span>, <span class=\"hljs-string\">\"Programing Language\"</span>, <span class=\"hljs-number\">123456</span>&#125;;<span class=\"hljs-comment\">//define a struct and initialize</span><br></code></pre></td></tr></table></figure>\n\n<p>//Of course, you can use it as below: No initialize.</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;bits/stdc++.h&gt;</span></span><br><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-built_in\">std</span>;<br><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">student</span> //<span class=\"hljs-title\">define</span> <span class=\"hljs-title\">the</span> <span class=\"hljs-title\">struct</span> <span class=\"hljs-title\">of</span> <span class=\"hljs-title\">single</span> <span class=\"hljs-title\">student</span></span><br><span class=\"hljs-class\">&#123;</span><br>    <span class=\"hljs-keyword\">int</span> number;<br>    <span class=\"hljs-keyword\">int</span> score;<br>&#125;;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\tstudent students[<span class=\"hljs-number\">10000</span>];<br>       <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; total; i++) <span class=\"hljs-comment\">//input scores</span><br>      &#123;<br>        <span class=\"hljs-built_in\">cin</span> &gt;&gt; students[i].number &gt;&gt; students[i].score;<span class=\"hljs-comment\">//See the examples here!</span><br>      &#125;<br><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br><br>&#125;<br><span class=\"hljs-comment\">//It means you can only define a struct and use it as a data type!</span><br></code></pre></td></tr></table></figure>\n\n<h5 id=\"Struct-pointer\"><a href=\"#Struct-pointer\" class=\"headerlink\" title=\"Struct pointer\"></a>Struct pointer</h5><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;string.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;stdlib.h&gt;</span></span><br><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">student</span> //<span class=\"hljs-title\">define</span> <span class=\"hljs-title\">the</span> <span class=\"hljs-title\">struct</span> <span class=\"hljs-title\">of</span> <span class=\"hljs-title\">single</span> <span class=\"hljs-title\">student</span></span><br><span class=\"hljs-class\">&#123;</span><br>    <span class=\"hljs-keyword\">int</span> number;<br>    <span class=\"hljs-keyword\">int</span> score;<br>&#125;;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">student</span> <span class=\"hljs-title\">students</span>[100];</span><br><br>    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">\"%d%d\"</span>, &amp;students[<span class=\"hljs-number\">0</span>].number, &amp;students[<span class=\"hljs-number\">0</span>].score); <span class=\"hljs-comment\">//See the examples here!</span><br><br>    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">student</span> *<span class=\"hljs-title\">p</span> = <span class=\"hljs-title\">students</span>;</span> <span class=\"hljs-comment\">//initialize the pointer.</span><br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"%d\"</span>, p-&gt;number);      <br>    p++;                          <span class=\"hljs-comment\">//go to next student.</span><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;string.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;stdlib.h&gt;</span></span><br><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">student</span></span><br><span class=\"hljs-class\">&#123;</span><br>    <span class=\"hljs-keyword\">int</span> id;<br>    <span class=\"hljs-keyword\">int</span> maths;<br>&#125;;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">student</span> <span class=\"hljs-title\">stu1</span>[2];</span><br>    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">student</span> *<span class=\"hljs-title\">p</span> ;</span><br>    p=stu1;<br>    <br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"%d\"</span>,p-&gt;id);<br><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"Vector\"><a href=\"#Vector\" class=\"headerlink\" title=\"Vector\"></a>Vector</h4><p>This is a significant data structure in  C++ standard library , equals an array that can change memory size at will,and you can also CRUD in it in will.</p>\n<p>Basic operations:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-built_in\">vector</span>&lt;<span class=\"hljs-keyword\">int</span>&gt; c;<br>c.push_back(<span class=\"hljs-number\">1</span>);<span class=\"hljs-comment\">//place the element at the end of the vector.</span><br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-built_in\">vector</span>&lt;Sales_item&gt; sales_vec;<span class=\"hljs-comment\">//vector can also store class or struct</span><br><span class=\"hljs-built_in\">vector</span>&lt;<span class=\"hljs-built_in\">vector</span>&lt;<span class=\"hljs-built_in\">string</span>&gt;&gt;;<span class=\"hljs-comment\">//the elements in this vector are also vector objects.</span><br></code></pre></td></tr></table></figure>\n\n<p>Other operations:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-built_in\">vector</span>&lt;T&gt; v1&#123;<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">5</span>&#125;;<br><span class=\"hljs-function\"><span class=\"hljs-built_in\">vector</span>&lt;T&gt; <span class=\"hljs-title\">v2</span><span class=\"hljs-params\">(<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">5</span>)</span></span>;<span class=\"hljs-comment\">//&#123;5,5,5,5,5&#125;</span><br><span class=\"hljs-built_in\">vector</span>&lt;<span class=\"hljs-built_in\">string</span>&gt; v3=&#123;<span class=\"hljs-string\">\"Hello\"</span>,<span class=\"hljs-string\">\"World\"</span>,<span class=\"hljs-string\">\"!\"</span>&#125;;<br><span class=\"hljs-function\"><span class=\"hljs-built_in\">vector</span>&lt;<span class=\"hljs-keyword\">int</span>&gt; <span class=\"hljs-title\">v4</span><span class=\"hljs-params\">(<span class=\"hljs-number\">10</span>)</span></span>; <span class=\"hljs-comment\">//Create a vector have 10 elements, initialized by 0.</span><br>v4.push_back(<span class=\"hljs-number\">1</span>);<span class=\"hljs-comment\">//put an elemnet to the back of the vector;</span><br>v4.<span class=\"hljs-built_in\">size</span>();<br></code></pre></td></tr></table></figure>\n\n<p>Use array to initialize a vector </p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">int</span> a[]=&#123;<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">5</span>&#125;;<br><span class=\"hljs-function\"><span class=\"hljs-built_in\">vector</span>&lt;<span class=\"hljs-keyword\">int</span>&gt; <span class=\"hljs-title\">v1</span><span class=\"hljs-params\">(<span class=\"hljs-built_in\">begin</span>(a),<span class=\"hljs-built_in\">end</span>(arr))</span></span>;<span class=\"hljs-comment\">//send the begin and end to construct.</span><br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"String\"><a href=\"#String\" class=\"headerlink\" title=\"String\"></a>String</h4><p>String is a <strong>char</strong> sequence whose size is changeable .</p>\n<p>Initialize:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-built_in\">string</span> s1;<span class=\"hljs-comment\">//an empty string has been created</span><br><span class=\"hljs-function\"><span class=\"hljs-built_in\">string</span> <span class=\"hljs-title\">s2</span><span class=\"hljs-params\">(<span class=\"hljs-number\">10</span>,<span class=\"hljs-string\">'c'</span>)</span></span>;<span class=\"hljs-comment\">//\"cccccccccc\"</span><br></code></pre></td></tr></table></figure>\n\n<p>Operations:</p>\n<table>\n<thead>\n<tr>\n<th>Operation</th>\n<th>Action</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>os&lt;&lt;s;</td>\n<td>Write s to ostream</td>\n</tr>\n<tr>\n<td>is&gt;&gt;s;</td>\n<td>Write instream to s</td>\n</tr>\n<tr>\n<td>s.size();</td>\n<td>Return the length;</td>\n</tr>\n<tr>\n<td>s1+s2</td>\n<td>Connect two strings</td>\n</tr>\n<tr>\n<td>s1&gt;=s2</td>\n<td>compare, use <em>dictionary order</em></td>\n</tr>\n</tbody></table>\n<p><strong>Get line</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">while</span>(getline(<span class=\"hljs-built_in\">cin</span>,<span class=\"hljs-built_in\">line</span>)&amp;&amp;<span class=\"hljs-built_in\">line</span>.<span class=\"hljs-built_in\">size</span>()&gt;<span class=\"hljs-number\">0</span>)<br>&#123;<br>    <span class=\"hljs-comment\">//code</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><strong>Character type:</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-built_in\">tolower</span>(c);<span class=\"hljs-comment\">//change into lower size</span><br><span class=\"hljs-built_in\">toupper</span>(c);<span class=\"hljs-comment\">//change into upper size</span><br></code></pre></td></tr></table></figure>\n\n<p><code>Warning</code>: Do not do this:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">char</span> a[]=<span class=\"hljs-string\">\"fff\"</span>;<br><span class=\"hljs-keyword\">char</span> b[]=<span class=\"hljs-string\">\"aaa\"</span>;<br><span class=\"hljs-built_in\">string</span> c = a+b;<span class=\"hljs-comment\">//ERROR: you are trying to add two pointers!!!</span><br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"Set\"><a href=\"#Set\" class=\"headerlink\" title=\"Set\"></a>Set</h4><p>An example:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;iostream&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;set&gt;</span></span><br><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-built_in\">std</span>;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-keyword\">int</span> case_number;<br>    <span class=\"hljs-built_in\">cin</span> &gt;&gt; case_number; <span class=\"hljs-comment\">//Input the amount</span><br>    <span class=\"hljs-built_in\">set</span>&lt;<span class=\"hljs-keyword\">int</span>&gt; numbers;<br>    <span class=\"hljs-keyword\">int</span> put_number;<br>    <span class=\"hljs-built_in\">set</span>&lt;<span class=\"hljs-keyword\">int</span>&gt; :: iterator out_number;<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; case_number; i++) <span class=\"hljs-comment\">// Input data</span><br>    &#123;<br>        <span class=\"hljs-built_in\">cin</span> &gt;&gt; put_number;<br>        numbers.insert(put_number);<br>    &#125;<br>    <span class=\"hljs-built_in\">cout</span> &lt;&lt; numbers.<span class=\"hljs-built_in\">size</span>() &lt;&lt; <span class=\"hljs-built_in\">endl</span>;<br>    <span class=\"hljs-keyword\">int</span> count=<span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-keyword\">for</span> (out_number = numbers.<span class=\"hljs-built_in\">begin</span>(); out_number != numbers.<span class=\"hljs-built_in\">end</span>(); out_number++) <br>    &#123;<br>        <br>        <span class=\"hljs-built_in\">cout</span> &lt;&lt; *out_number ;<br>        count++;<br>        <span class=\"hljs-keyword\">if</span>(count &lt;= numbers.<span class=\"hljs-built_in\">size</span>()<span class=\"hljs-number\">-1</span>) <span class=\"hljs-built_in\">cout</span>&lt;&lt;<span class=\"hljs-string\">\" \"</span>;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>Set can automatically sort, and the elements are strictly diverse .</p>\n<h4 id=\"优先队列-优先级最高的元素先出的队列\"><a href=\"#优先队列-优先级最高的元素先出的队列\" class=\"headerlink\" title=\"优先队列:优先级最高的元素先出的队列\"></a>优先队列:优先级最高的元素先出的队列</h4><p>C++的标准库中包含了一个很好用的数据结构:优先队列.该结构可以将优先级大的元素排到前面.</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;bits/stdc++.h&gt;</span></span><br><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-built_in\">std</span>;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\tpriority_queue&lt;<span class=\"hljs-keyword\">int</span>&gt; que_apples; <span class=\"hljs-comment\">//默认使用vector,大的数字优先</span><br>\tpriority_queue&lt;<span class=\"hljs-keyword\">int</span>, <span class=\"hljs-built_in\">vector</span>&lt;<span class=\"hljs-keyword\">int</span>&gt;, greater&lt;<span class=\"hljs-keyword\">int</span>&gt;&gt; app_que;<span class=\"hljs-comment\">//小的数字优先</span><br>\t<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>自定义优先级:重载运算符</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Student</span></span><br><span class=\"hljs-class\">&#123;</span><br>    <span class=\"hljs-keyword\">int</span> id;<br>    <span class=\"hljs-keyword\">char</span> name[<span class=\"hljs-number\">20</span>];<br>    <span class=\"hljs-keyword\">bool</span> gender;<br>    <span class=\"hljs-keyword\">bool</span> <span class=\"hljs-keyword\">operator</span> &lt; (Student &amp;a) <span class=\"hljs-keyword\">const</span><br>    &#123;<br>        <span class=\"hljs-keyword\">return</span> id &gt; a.id;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"STL算法\"><a href=\"#STL算法\" class=\"headerlink\" title=\"STL算法\"></a>STL算法</h2><h4 id=\"快排-sort-包含在algorithm\"><a href=\"#快排-sort-包含在algorithm\" class=\"headerlink\" title=\"快排(sort),包含在algorithm\"></a>快排(sort),包含在algorithm</h4><p>这个算法极其牛逼,解放了万千程序员的双手(赞美)!!!</p>\n<p>快排作用的内容:数组/向量容器等</p>\n<p>C++使用实例</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-built_in\">vector</span>&lt;<span class=\"hljs-keyword\">int</span>&gt; v1;<br><span class=\"hljs-keyword\">int</span> numbers[<span class=\"hljs-number\">2</span>][<span class=\"hljs-number\">5</span>];<br><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">student</span></span><br><span class=\"hljs-class\">&#123;</span><br>    <span class=\"hljs-keyword\">int</span> number;<br>    <span class=\"hljs-keyword\">int</span> score;<br>    <span class=\"hljs-built_in\">string</span> name;<br>&#125;<br><span class=\"hljs-comment\">//此处省略若干行插入数据代码,让我们假设这这里面有很多数据</span><br>sort(v1.<span class=\"hljs-built_in\">begin</span>(),v1.<span class=\"hljs-built_in\">end</span>());<span class=\"hljs-comment\">//默认从小到大排列</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">bool</span> <span class=\"hljs-title\">compare</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> a , <span class=\"hljs-keyword\">int</span> b)</span><span class=\"hljs-comment\">//按某种排序方案排序</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-keyword\">return</span> a&gt;b;<span class=\"hljs-comment\">//这样是降序排列</span><br>    <span class=\"hljs-keyword\">return</span> numbers[a][<span class=\"hljs-number\">0</span>]&gt;numbers[b][<span class=\"hljs-number\">0</span>];<span class=\"hljs-comment\">//还能读取某些数据的元素排列</span><br>    <span class=\"hljs-keyword\">return</span> student[a].score&gt;student[b].score;<span class=\"hljs-comment\">//还能读取某些结构体的成员</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"常用基础算法-一些很基本的-要背的\"><a href=\"#常用基础算法-一些很基本的-要背的\" class=\"headerlink\" title=\"常用基础算法(一些很基本的,要背的)\"></a>常用基础算法(一些很基本的,要背的)</h2><h4 id=\"公因数公倍数\"><a href=\"#公因数公倍数\" class=\"headerlink\" title=\"公因数公倍数\"></a>公因数公倍数</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;math.h&gt;</span></span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-keyword\">int</span> m, n;<br>    <span class=\"hljs-keyword\">int</span> s = <span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-keyword\">int</span> <span class=\"hljs-built_in\">min</span> = <span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">\"%d%d\"</span>, &amp;m, &amp;n);<br>    <span class=\"hljs-comment\">//最大公约数</span><br>    <span class=\"hljs-keyword\">if</span> (m &gt; n)<br>    &#123;<br>        s = m;<br>        <span class=\"hljs-built_in\">min</span> = n;<br>    &#125;<br>    <span class=\"hljs-keyword\">else</span><br>    &#123;<br>        s = n;<br>        <span class=\"hljs-built_in\">min</span> = m;<br>    &#125;<br>    <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-built_in\">min</span> != <span class=\"hljs-number\">0</span>)<br>    &#123;<br>        <span class=\"hljs-keyword\">int</span> t = s%<span class=\"hljs-built_in\">min</span>;<br>        s = <span class=\"hljs-built_in\">min</span>;<br>        <span class=\"hljs-built_in\">min</span> = t;<br>    &#125;<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"%d\\n\"</span>,s);<br>    <span class=\"hljs-comment\">//重置两个数</span><br>    <span class=\"hljs-keyword\">if</span> (m &gt; n)<br>    &#123;<br>        s = m;<br>        <span class=\"hljs-built_in\">min</span> = n;<br>    &#125;<br>    <span class=\"hljs-keyword\">else</span><br>    &#123;<br>        s = n;<br>        <span class=\"hljs-built_in\">min</span> = m;<br>    &#125;<br>    <span class=\"hljs-comment\">//公倍数</span><br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-built_in\">min</span>;; i += <span class=\"hljs-built_in\">min</span>)<br>    &#123;<br>        <span class=\"hljs-keyword\">double</span> resR = (<span class=\"hljs-keyword\">double</span>)i / s;<br>        <span class=\"hljs-keyword\">int</span> <span class=\"hljs-built_in\">floor</span> = i / s;<br><br>        <span class=\"hljs-keyword\">if</span> ((<span class=\"hljs-keyword\">double</span>)<span class=\"hljs-built_in\">floor</span> == resR)<br>        &#123;<br>            <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"%d\\n\"</span>, i);<br>            <span class=\"hljs-keyword\">break</span>;<br>        &#125;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"筛法判断质数\"><a href=\"#筛法判断质数\" class=\"headerlink\" title=\"筛法判断质数\"></a>筛法判断质数</h4><p>上代码:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">bool</span> <span class=\"hljs-title\">isPrime</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> a)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-keyword\">if</span> (a == <span class=\"hljs-number\">2</span>)<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<br>    <span class=\"hljs-keyword\">if</span> (a % <span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">0</span>)<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>    <span class=\"hljs-keyword\">int</span> x = <span class=\"hljs-built_in\">sqrt</span>(a);<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">2</span>; i &lt;= x; ++i)<br>    &#123;<br>        <span class=\"hljs-keyword\">if</span> (a % i == <span class=\"hljs-number\">0</span>)<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"素数的埃式筛法\"><a href=\"#素数的埃式筛法\" class=\"headerlink\" title=\"素数的埃式筛法\"></a>素数的埃式筛法</h4><p>先确认一个数是素数,然后划掉其倍数,在找到下一个素数后,再划掉其倍数,最后只剩素数.</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-keyword\">int</span> number_list[<span class=\"hljs-number\">1000</span>] = &#123;<span class=\"hljs-number\">0</span>&#125;; <span class=\"hljs-comment\">//we can get primes below 1000</span><br>    <span class=\"hljs-keyword\">bool</span> break_flag = <span class=\"hljs-literal\">false</span>;<br>    number_list[<span class=\"hljs-number\">0</span>] = <span class=\"hljs-number\">1</span>;<br>    <span class=\"hljs-keyword\">int</span> pri = <span class=\"hljs-number\">2</span>;<br>    <span class=\"hljs-keyword\">while</span> (!break_flag)<br>    &#123;<br>        <span class=\"hljs-comment\">// the non-prime will be mark 1</span><br>        <span class=\"hljs-keyword\">int</span> count = pri;<br>        <span class=\"hljs-keyword\">while</span> (count &lt;= <span class=\"hljs-number\">1000</span>)<br>        &#123;<br>            count += pri;<br>            <span class=\"hljs-keyword\">if</span> (count &gt;= <span class=\"hljs-number\">1000</span>)<br>                <span class=\"hljs-keyword\">break</span>;<br>            number_list[count] = <span class=\"hljs-number\">1</span>;<br>        &#125;<br>        <span class=\"hljs-keyword\">int</span> temp_pri = pri;<br>        <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-literal\">true</span>)<br>        &#123;<br>            temp_pri++;<br>            <span class=\"hljs-keyword\">if</span> (temp_pri &gt;= <span class=\"hljs-number\">999</span>)<br>            &#123;<br>                break_flag = <span class=\"hljs-literal\">true</span>;<br>                <span class=\"hljs-keyword\">break</span>;<br>            &#125;<br>            <span class=\"hljs-keyword\">if</span> (number_list[temp_pri] == <span class=\"hljs-number\">0</span>)<br>            &#123;<br>                pri = temp_pri;<br>                <span class=\"hljs-keyword\">break</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">1000</span>; i++)<br>    &#123;<br>        <span class=\"hljs-keyword\">if</span> (number_list[i] == <span class=\"hljs-number\">0</span>)<br>        &#123;<br>            <span class=\"hljs-built_in\">cout</span> &lt;&lt; i &lt;&lt; <span class=\"hljs-string\">\" \"</span>;<br>        &#125;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"分解质因数-简便方法\"><a href=\"#分解质因数-简便方法\" class=\"headerlink\" title=\"分解质因数(简便方法)\"></a>分解质因数(简便方法)</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;math.h&gt;</span></span><br><span class=\"hljs-comment\">//这个程序适合好好阅读并分析</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">foo</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">long</span> <span class=\"hljs-keyword\">long</span> <span class=\"hljs-keyword\">int</span> n)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-keyword\">long</span> <span class=\"hljs-keyword\">long</span> <span class=\"hljs-keyword\">int</span> sqr = <span class=\"hljs-built_in\">sqrt</span>(n);<span class=\"hljs-comment\">//测试质数只需测到平方的取整</span><br>    <span class=\"hljs-keyword\">long</span> <span class=\"hljs-keyword\">long</span> <span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-keyword\">for</span>(i = <span class=\"hljs-number\">2</span>; i &lt;= sqr; i++)<span class=\"hljs-comment\">//从2开始测</span><br>    &#123;<br>        <span class=\"hljs-keyword\">if</span>(n % i == <span class=\"hljs-number\">0</span> &amp;&amp; (n /= i))<span class=\"hljs-comment\">//后面的表达式指的是除i留下剩余部分</span><br>        &#123;<br>            <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"%lld \"</span>, i--);<br>        &#125;<br>    &#125;<br>    <span class=\"hljs-keyword\">if</span>(n != <span class=\"hljs-number\">1</span>)<span class=\"hljs-comment\">//不打印1作为因子</span><br>    &#123;<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"%lld\"</span>, n);<br>    &#125;<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"\\n\"</span>);<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-keyword\">long</span> <span class=\"hljs-keyword\">long</span> <span class=\"hljs-keyword\">int</span> n ;<br>    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">\"%lld\"</span>, &amp;n);<br>    foo(n);<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"查找字符-这是C标准库里的内容\"><a href=\"#查找字符-这是C标准库里的内容\" class=\"headerlink\" title=\"查找字符(这是C标准库里的内容)\"></a>查找字符(这是C标准库里的内容)</h4><p>用于在一个字符串(也就是char数组)中查找指定的字符</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-built_in\">strchr</span>(string_name, <span class=\"hljs-string\">'A'</span>);<span class=\"hljs-comment\">//在string name 这个字符串中寻找A这个字符</span><br><span class=\"hljs-comment\">//返回有多种可能,若找到,返回指向这个字符的指针,否则返回NULL(这个NULL是标识符,不是字符串之类的玩意)</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"位运算\"><a href=\"#位运算\" class=\"headerlink\" title=\"位运算\"></a>位运算</h4><p>位运算是一种直接操作位的运算,其包含多种运算符:</p>\n<p>上代码:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\">&lt;&lt;; <span class=\"hljs-comment\">//左移运算符,移动时丢弃左边的位,用0补充</span><br><span class=\"hljs-string\">\"11110000\"</span>&lt;&lt;<span class=\"hljs-string\">\"10000000\"</span>;<span class=\"hljs-comment\">//左移了3位!!!</span><br>&gt;&gt;; <span class=\"hljs-comment\">//右移运算符,移动时丢弃右边的位,左边用0或原来丢弃的左边的位补充!!!</span><br><span class=\"hljs-string\">\"11111111\"</span>&gt;&gt;<span class=\"hljs-string\">\"00001111\"</span>;<span class=\"hljs-comment\">//右移了四位!!!</span><br>    <br><span class=\"hljs-comment\">//接下来看看逻辑位运算</span><br>~;<span class=\"hljs-comment\">//按位非,倒置0/1</span><br>|;<span class=\"hljs-comment\">//按位或,有一为1,否则为0</span><br>^;<span class=\"hljs-comment\">//XOR,相同为0,不同为1</span><br>&amp;;<span class=\"hljs-comment\">//AND,都为1才为1,否则为0</span><br><br><span class=\"hljs-comment\">//一些常用的位逻辑运算:</span><br>lottabits |= <span class=\"hljs-built_in\">pow</span>(<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>);<span class=\"hljs-comment\">//打开位,也就是将某一位置为1,其中后面的2的多少次方代表着打开的位置(2的0次方代表右起第一位,以此类推)</span><br>lottabits ^= <span class=\"hljs-built_in\">pow</span>(<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>);<span class=\"hljs-comment\">//切换位:置反</span><br>lottabits &amp;= <span class=\"hljs-built_in\">pow</span>(<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>);<span class=\"hljs-comment\">//关闭位:置0</span><br><span class=\"hljs-keyword\">bool</span> isOpen = lottabits &amp; <span class=\"hljs-built_in\">pow</span>(<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>);<span class=\"hljs-comment\">//测试某一位是否为1(打开),返回true or false.</span><br></code></pre></td></tr></table></figure>\n\n"},{"layout":"post","title":"开发自己的Hexo主题","intro":"","date":"2020-02-16T05:13:00.000Z","author":"Makinohara","catalog":true,"_content":"\n\n\n# 开发属于自己的博客主题\n\n之前写博客一直都是用的别人的主题,用久了难免会觉得有些不爽......毕竟主题不是自己的,怎么用都感到有什么地方不满意.再加上我一直有一个想法,就是把 Mac OS 的一些效果尝试在 Web 上实现,于是便开始着手学习 Web 开发的相关知识,开始打造属于自己的 Hexo 主题.\n\n## 前置知识学习\n\n要想开发主题就得先学习前置知识,属于前端的三大基本技能就是 Html CSS JavaScript. 一开始看这些知识的时候我感到非常痛苦,因为 Html 标签和 CSS 样式指令有点难背,所以磨了不少时间在上面,按照日记上的记录应该是2月6日到2月8日,在这期间我只是学了一点浅薄的知识,但还是没有搞懂CSS盒模型啥的,造出来的网页也是一塌糊涂.\n\n## 在开发中学习\n\n后来我就琢磨,既然这些样式这么难背,还不如直接开始制作页面,等到需要用什么的时候再 Google. 于是从2月9号开始就直接利用现成的一点技能赶鸭子上架似的开始做主题了.在此期间 Chrome 标签页基本上都是开了15个朝上,开了若干窗口用来查询 CSS , JavaScript 等样式及指令. 在这个阶段我还没有做博客内容注入,只是搭建了一个框架,在这段时间我没有考虑其他的东西,重点是放在设计样式和优化排版上面. 做这些事情大概花了我3天时间,也就是2月9日至11日.\n\n## 注入博客内容:与EJS鏖战\n\n待到网站基本框架搭出来后,就要开始注入内容了,注入内容的方式我计划直接参考别人的博客,看看他们是怎么注入内容的.\n\n不过待到我打开别人的主题文件的时候,我发现事情没那么简单.他们的网页是用一种从未见过的格式------ EJS 写的.此种格式可以自动填充内容,并在网页中嵌入简化的 JavaScript 脚本.此时我的 JavaScript 学习还停留在只会写几个函数,改几个 CSS 样式的水平,想要做内容根本就是不可能. 没办法,只好读文档,读别人的网页代码,看别人写的脚本,然后照葫芦画瓢地往自己的网页里面套......这样的过程大概又持续了2天,也就是2月12日至13日.\n\n## 样式修改与犯强迫症\n\n在内容注入成功后,最初的样式大概是这样的:\n\n![1版样式1](/img/1版主页.png)\n\n![1版样式2](/img/1版样式.png)\n\n虽说有了一丢丢扁平化设计的雏形,但总体来看还是不堪入眼:大色块造成的视觉冲击会给人在浏览时带来心塞的感觉,于是又修改了两天样式,参考了无数的优秀主题和网站,当然最大的参考还是 Mac OS 的样式(我在虚拟机里装了一个 Mac OS 10.15 Catalina 以作参考),然后又上[日本传统色](https://nipponcolors.com/)网站找配色方案,最终终于修改成了现在的样式(截图我就不放了,因为现在使用的就是这样的样式).\n\n当然,这个样式还不是最终的样式,如果我有了什么能把这个网站变得更好看的构想,便会着手修改样式.\n\n## 未完成的想法\n\n一开始我做这个主题时,是想把这个主题制作成一个可高度定制的,可在浏览器端修改样式的交互式网页.不过由于这些功能的实现需要 JavaScript 脚本作为支持,所以目前还没有付诸实践.原来想把这个网页的动画做得像 Mac OS 一样流畅,但由于 CSS3 的动画还没有学,所以只好先作罢.接下来就是要去深入学习 JavaScript, CSS3 , 继续完善这个主题,使之运行起来如 Mac OS 一般流畅自然.\n\n还有一个巨大的问题:这个主题目前还没有做手机端适配,打算待到前端技术深入了解后,再处理手机端适配一事.\n\nPS:不得不说,苹果的设计师还是有水平的.虽然 Mac OS 难用,但它好看啊!\n\n","source":"_posts/2020-2-16-DevelopingTheme.md","raw":"---\nlayout:     post\ntitle:      \"开发自己的Hexo主题\"\nintro:   \"\"\ndate:       2020-2-16 13:13:00\nauthor:     \"Makinohara\"\ncatalog: true\ntags:\n    - 工程开发\n---\n\n\n\n# 开发属于自己的博客主题\n\n之前写博客一直都是用的别人的主题,用久了难免会觉得有些不爽......毕竟主题不是自己的,怎么用都感到有什么地方不满意.再加上我一直有一个想法,就是把 Mac OS 的一些效果尝试在 Web 上实现,于是便开始着手学习 Web 开发的相关知识,开始打造属于自己的 Hexo 主题.\n\n## 前置知识学习\n\n要想开发主题就得先学习前置知识,属于前端的三大基本技能就是 Html CSS JavaScript. 一开始看这些知识的时候我感到非常痛苦,因为 Html 标签和 CSS 样式指令有点难背,所以磨了不少时间在上面,按照日记上的记录应该是2月6日到2月8日,在这期间我只是学了一点浅薄的知识,但还是没有搞懂CSS盒模型啥的,造出来的网页也是一塌糊涂.\n\n## 在开发中学习\n\n后来我就琢磨,既然这些样式这么难背,还不如直接开始制作页面,等到需要用什么的时候再 Google. 于是从2月9号开始就直接利用现成的一点技能赶鸭子上架似的开始做主题了.在此期间 Chrome 标签页基本上都是开了15个朝上,开了若干窗口用来查询 CSS , JavaScript 等样式及指令. 在这个阶段我还没有做博客内容注入,只是搭建了一个框架,在这段时间我没有考虑其他的东西,重点是放在设计样式和优化排版上面. 做这些事情大概花了我3天时间,也就是2月9日至11日.\n\n## 注入博客内容:与EJS鏖战\n\n待到网站基本框架搭出来后,就要开始注入内容了,注入内容的方式我计划直接参考别人的博客,看看他们是怎么注入内容的.\n\n不过待到我打开别人的主题文件的时候,我发现事情没那么简单.他们的网页是用一种从未见过的格式------ EJS 写的.此种格式可以自动填充内容,并在网页中嵌入简化的 JavaScript 脚本.此时我的 JavaScript 学习还停留在只会写几个函数,改几个 CSS 样式的水平,想要做内容根本就是不可能. 没办法,只好读文档,读别人的网页代码,看别人写的脚本,然后照葫芦画瓢地往自己的网页里面套......这样的过程大概又持续了2天,也就是2月12日至13日.\n\n## 样式修改与犯强迫症\n\n在内容注入成功后,最初的样式大概是这样的:\n\n![1版样式1](/img/1版主页.png)\n\n![1版样式2](/img/1版样式.png)\n\n虽说有了一丢丢扁平化设计的雏形,但总体来看还是不堪入眼:大色块造成的视觉冲击会给人在浏览时带来心塞的感觉,于是又修改了两天样式,参考了无数的优秀主题和网站,当然最大的参考还是 Mac OS 的样式(我在虚拟机里装了一个 Mac OS 10.15 Catalina 以作参考),然后又上[日本传统色](https://nipponcolors.com/)网站找配色方案,最终终于修改成了现在的样式(截图我就不放了,因为现在使用的就是这样的样式).\n\n当然,这个样式还不是最终的样式,如果我有了什么能把这个网站变得更好看的构想,便会着手修改样式.\n\n## 未完成的想法\n\n一开始我做这个主题时,是想把这个主题制作成一个可高度定制的,可在浏览器端修改样式的交互式网页.不过由于这些功能的实现需要 JavaScript 脚本作为支持,所以目前还没有付诸实践.原来想把这个网页的动画做得像 Mac OS 一样流畅,但由于 CSS3 的动画还没有学,所以只好先作罢.接下来就是要去深入学习 JavaScript, CSS3 , 继续完善这个主题,使之运行起来如 Mac OS 一般流畅自然.\n\n还有一个巨大的问题:这个主题目前还没有做手机端适配,打算待到前端技术深入了解后,再处理手机端适配一事.\n\nPS:不得不说,苹果的设计师还是有水平的.虽然 Mac OS 难用,但它好看啊!\n\n","slug":"2020-2-16-DevelopingTheme","published":1,"updated":"2021-10-24T02:04:35.825Z","_id":"ckey85uj8000lho8agl8oa2fs","comments":1,"photos":[],"link":"","content":"<h1 id=\"开发属于自己的博客主题\"><a href=\"#开发属于自己的博客主题\" class=\"headerlink\" title=\"开发属于自己的博客主题\"></a>开发属于自己的博客主题</h1><p>之前写博客一直都是用的别人的主题,用久了难免会觉得有些不爽……毕竟主题不是自己的,怎么用都感到有什么地方不满意.再加上我一直有一个想法,就是把 Mac OS 的一些效果尝试在 Web 上实现,于是便开始着手学习 Web 开发的相关知识,开始打造属于自己的 Hexo 主题.</p>\n<h2 id=\"前置知识学习\"><a href=\"#前置知识学习\" class=\"headerlink\" title=\"前置知识学习\"></a>前置知识学习</h2><p>要想开发主题就得先学习前置知识,属于前端的三大基本技能就是 Html CSS JavaScript. 一开始看这些知识的时候我感到非常痛苦,因为 Html 标签和 CSS 样式指令有点难背,所以磨了不少时间在上面,按照日记上的记录应该是2月6日到2月8日,在这期间我只是学了一点浅薄的知识,但还是没有搞懂CSS盒模型啥的,造出来的网页也是一塌糊涂.</p>\n<h2 id=\"在开发中学习\"><a href=\"#在开发中学习\" class=\"headerlink\" title=\"在开发中学习\"></a>在开发中学习</h2><p>后来我就琢磨,既然这些样式这么难背,还不如直接开始制作页面,等到需要用什么的时候再 Google. 于是从2月9号开始就直接利用现成的一点技能赶鸭子上架似的开始做主题了.在此期间 Chrome 标签页基本上都是开了15个朝上,开了若干窗口用来查询 CSS , JavaScript 等样式及指令. 在这个阶段我还没有做博客内容注入,只是搭建了一个框架,在这段时间我没有考虑其他的东西,重点是放在设计样式和优化排版上面. 做这些事情大概花了我3天时间,也就是2月9日至11日.</p>\n<h2 id=\"注入博客内容-与EJS鏖战\"><a href=\"#注入博客内容-与EJS鏖战\" class=\"headerlink\" title=\"注入博客内容:与EJS鏖战\"></a>注入博客内容:与EJS鏖战</h2><p>待到网站基本框架搭出来后,就要开始注入内容了,注入内容的方式我计划直接参考别人的博客,看看他们是怎么注入内容的.</p>\n<p>不过待到我打开别人的主题文件的时候,我发现事情没那么简单.他们的网页是用一种从未见过的格式——— EJS 写的.此种格式可以自动填充内容,并在网页中嵌入简化的 JavaScript 脚本.此时我的 JavaScript 学习还停留在只会写几个函数,改几个 CSS 样式的水平,想要做内容根本就是不可能. 没办法,只好读文档,读别人的网页代码,看别人写的脚本,然后照葫芦画瓢地往自己的网页里面套……这样的过程大概又持续了2天,也就是2月12日至13日.</p>\n<h2 id=\"样式修改与犯强迫症\"><a href=\"#样式修改与犯强迫症\" class=\"headerlink\" title=\"样式修改与犯强迫症\"></a>样式修改与犯强迫症</h2><p>在内容注入成功后,最初的样式大概是这样的:</p>\n<p><img src=\"/img/1版主页.png\" alt=\"1版样式1\"></p>\n<p><img src=\"/img/1版样式.png\" alt=\"1版样式2\"></p>\n<p>虽说有了一丢丢扁平化设计的雏形,但总体来看还是不堪入眼:大色块造成的视觉冲击会给人在浏览时带来心塞的感觉,于是又修改了两天样式,参考了无数的优秀主题和网站,当然最大的参考还是 Mac OS 的样式(我在虚拟机里装了一个 Mac OS 10.15 Catalina 以作参考),然后又上<a href=\"https://nipponcolors.com/\" target=\"_blank\" rel=\"noopener\">日本传统色</a>网站找配色方案,最终终于修改成了现在的样式(截图我就不放了,因为现在使用的就是这样的样式).</p>\n<p>当然,这个样式还不是最终的样式,如果我有了什么能把这个网站变得更好看的构想,便会着手修改样式.</p>\n<h2 id=\"未完成的想法\"><a href=\"#未完成的想法\" class=\"headerlink\" title=\"未完成的想法\"></a>未完成的想法</h2><p>一开始我做这个主题时,是想把这个主题制作成一个可高度定制的,可在浏览器端修改样式的交互式网页.不过由于这些功能的实现需要 JavaScript 脚本作为支持,所以目前还没有付诸实践.原来想把这个网页的动画做得像 Mac OS 一样流畅,但由于 CSS3 的动画还没有学,所以只好先作罢.接下来就是要去深入学习 JavaScript, CSS3 , 继续完善这个主题,使之运行起来如 Mac OS 一般流畅自然.</p>\n<p>还有一个巨大的问题:这个主题目前还没有做手机端适配,打算待到前端技术深入了解后,再处理手机端适配一事.</p>\n<p>PS:不得不说,苹果的设计师还是有水平的.虽然 Mac OS 难用,但它好看啊!</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"开发属于自己的博客主题\"><a href=\"#开发属于自己的博客主题\" class=\"headerlink\" title=\"开发属于自己的博客主题\"></a>开发属于自己的博客主题</h1><p>之前写博客一直都是用的别人的主题,用久了难免会觉得有些不爽……毕竟主题不是自己的,怎么用都感到有什么地方不满意.再加上我一直有一个想法,就是把 Mac OS 的一些效果尝试在 Web 上实现,于是便开始着手学习 Web 开发的相关知识,开始打造属于自己的 Hexo 主题.</p>\n<h2 id=\"前置知识学习\"><a href=\"#前置知识学习\" class=\"headerlink\" title=\"前置知识学习\"></a>前置知识学习</h2><p>要想开发主题就得先学习前置知识,属于前端的三大基本技能就是 Html CSS JavaScript. 一开始看这些知识的时候我感到非常痛苦,因为 Html 标签和 CSS 样式指令有点难背,所以磨了不少时间在上面,按照日记上的记录应该是2月6日到2月8日,在这期间我只是学了一点浅薄的知识,但还是没有搞懂CSS盒模型啥的,造出来的网页也是一塌糊涂.</p>\n<h2 id=\"在开发中学习\"><a href=\"#在开发中学习\" class=\"headerlink\" title=\"在开发中学习\"></a>在开发中学习</h2><p>后来我就琢磨,既然这些样式这么难背,还不如直接开始制作页面,等到需要用什么的时候再 Google. 于是从2月9号开始就直接利用现成的一点技能赶鸭子上架似的开始做主题了.在此期间 Chrome 标签页基本上都是开了15个朝上,开了若干窗口用来查询 CSS , JavaScript 等样式及指令. 在这个阶段我还没有做博客内容注入,只是搭建了一个框架,在这段时间我没有考虑其他的东西,重点是放在设计样式和优化排版上面. 做这些事情大概花了我3天时间,也就是2月9日至11日.</p>\n<h2 id=\"注入博客内容-与EJS鏖战\"><a href=\"#注入博客内容-与EJS鏖战\" class=\"headerlink\" title=\"注入博客内容:与EJS鏖战\"></a>注入博客内容:与EJS鏖战</h2><p>待到网站基本框架搭出来后,就要开始注入内容了,注入内容的方式我计划直接参考别人的博客,看看他们是怎么注入内容的.</p>\n<p>不过待到我打开别人的主题文件的时候,我发现事情没那么简单.他们的网页是用一种从未见过的格式——— EJS 写的.此种格式可以自动填充内容,并在网页中嵌入简化的 JavaScript 脚本.此时我的 JavaScript 学习还停留在只会写几个函数,改几个 CSS 样式的水平,想要做内容根本就是不可能. 没办法,只好读文档,读别人的网页代码,看别人写的脚本,然后照葫芦画瓢地往自己的网页里面套……这样的过程大概又持续了2天,也就是2月12日至13日.</p>\n<h2 id=\"样式修改与犯强迫症\"><a href=\"#样式修改与犯强迫症\" class=\"headerlink\" title=\"样式修改与犯强迫症\"></a>样式修改与犯强迫症</h2><p>在内容注入成功后,最初的样式大概是这样的:</p>\n<p><img src=\"/img/1版主页.png\" alt=\"1版样式1\"></p>\n<p><img src=\"/img/1版样式.png\" alt=\"1版样式2\"></p>\n<p>虽说有了一丢丢扁平化设计的雏形,但总体来看还是不堪入眼:大色块造成的视觉冲击会给人在浏览时带来心塞的感觉,于是又修改了两天样式,参考了无数的优秀主题和网站,当然最大的参考还是 Mac OS 的样式(我在虚拟机里装了一个 Mac OS 10.15 Catalina 以作参考),然后又上<a href=\"https://nipponcolors.com/\" target=\"_blank\" rel=\"noopener\">日本传统色</a>网站找配色方案,最终终于修改成了现在的样式(截图我就不放了,因为现在使用的就是这样的样式).</p>\n<p>当然,这个样式还不是最终的样式,如果我有了什么能把这个网站变得更好看的构想,便会着手修改样式.</p>\n<h2 id=\"未完成的想法\"><a href=\"#未完成的想法\" class=\"headerlink\" title=\"未完成的想法\"></a>未完成的想法</h2><p>一开始我做这个主题时,是想把这个主题制作成一个可高度定制的,可在浏览器端修改样式的交互式网页.不过由于这些功能的实现需要 JavaScript 脚本作为支持,所以目前还没有付诸实践.原来想把这个网页的动画做得像 Mac OS 一样流畅,但由于 CSS3 的动画还没有学,所以只好先作罢.接下来就是要去深入学习 JavaScript, CSS3 , 继续完善这个主题,使之运行起来如 Mac OS 一般流畅自然.</p>\n<p>还有一个巨大的问题:这个主题目前还没有做手机端适配,打算待到前端技术深入了解后,再处理手机端适配一事.</p>\n<p>PS:不得不说,苹果的设计师还是有水平的.虽然 Mac OS 难用,但它好看啊!</p>\n"},{"layout":"post","title":"数据结构2：树、散列、堆、图","intro":"","date":"2020-02-17T08:13:00.000Z","author":"Makinohara","catalog":true,"_content":"\n\n\n\n\n# 树\n\n树的一些基本概念:\n\n1.一棵树是一些结点的集合\n\n2.树和子树之间通过有向的\"边\"连接.\n\n3.每一棵子树的根是父根的\"儿子\"而父根是子树的\"父亲\".\n\n4.没有儿子的结点叫做叶\n\n5.从一个结点到另一个结点的路径叫做\"序列\",序列的长是路径上边的个数,\n\n6.结点的深度是从根到结点唯一路径的长.\n\n7.如果存在一条n1到n2的路径,那么n1是n2的祖先,n2是n1的后裔.若n1!=n2,则n1是n2的真祖先.\n\n8.树的简单实现:\n\n```c++\nstruct node\n{\n    object element;\n    node *firstchild;\n    node *nextsibling;\n};\n```\n\n接下来看一个最基本的树型结构:\n\n## 二叉树\n\n二叉树的每一个结点都不能超过有两个儿子.但子树皆可能为空.\n\n二叉树的伪代码:\n\n```c++\nstruct node\n{\n    int a;\n    int b;//这些是结点包含的元素\n    node *left;\n    node *right;//这些是指向子树的指针\n};\n```\n\n表达式树的解释:\n\n![表达式树](/img/tree1.jpg)\n\n树有多种遍历方式:\n\n**中序遍历:**\n\n依次遍历左,结点,右,并且每一层都这么遍历,最终遍历结果为中缀表达式:\n\n(a+b\\*c)+((d\\*e+f)*g)\n\n**后序遍历:**\n\n先打印左右子树,再打印结点:\n\na b c * + d e * f + g * +\n\n构造一个后缀表达式树:\n\n原理:每读入一个表达式就形成一个新的树.\n\n参见      *数据结构与算法分析:树*     ,我们下面只考虑代码实现:\n\n```c++\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nstruct node //定义一个结点\n{\n    char elem;\n    node *left;\n    node *right;\n};\n\nint main()\n{\n    stack<node *> temp_in; //构建一个栈用于存放指针(建树压栈)\n    char char_in;          //构建一个临时变量用于读入(符号或数字)\n    node node_arr[10000];  //构建一个数组用于存放树\n    int pos = 0;           //构建的结点在数组中的位置(每构建一个结点时更新)\n    while (true)\n    {\n        cin >> char_in;\n        if (char_in == '!')\n            break;\n\n        if (char_in != '+' && char_in != '-' && char_in != '*' && char_in != '/') //读取非运算符(正常压栈)\n        {\n            node_arr[pos].elem = char_in; //把内容写入树\n            temp_in.push(&node_arr[pos]); //将指针压入栈\n        }\n        else\n        {\n            node_arr[pos].elem = char_in;        //将运算符写入树\n            node_arr[pos].right = temp_in.top(); //取为右儿子\n            temp_in.pop();                       //弹出\n            node_arr[pos].left = temp_in.top();  //取为左儿子\n            temp_in.pop();                       //弹出\n            //最后将这个树入栈\n            temp_in.push(&node_arr[pos]);\n        }\n        pos++;\n    }\n    //此时树已经建立成功!!!接下来我们需要尝试以中序遍历和后序遍历来输出这个表达式\n    node *print_node = temp_in.top(); //当前读出的根,先将栈顶的表达式读入\n    temp_in.pop();//待会还要压进去\n    while (true)\n    {\n        if ((*print_node).left == 0x0)\n        {\n            cout << (*print_node).elem;//若为最左叶,打印\n            if (temp_in.empty())//打印完了要是栈顶为空,则跳出循环\n            {\n                break;\n            }\n            cout<<(*temp_in.top()).elem;//将根打印出来\n            print_node = (*temp_in.top()).right;//修改读数为栈顶右儿子\n            temp_in.pop();//将根从栈顶取出\n        }\n        else\n        {\n            temp_in.push(print_node);\n            print_node = (*print_node).left;\n        }\n    } //找到最左侧元素\n\n    return 0;\n}\n```\n\n# 图论算法\n\n## 图的介绍\n\n图 G=(V,E)由顶点(vertex)的集V和边(edge)的集E组成.\n\n每一条边是一个点对(v,w),v,w∈V,如果点对有序,图就为有向图.\n\n当存在(v,w)∈E,v和w邻接.\n\n边可以有一个权或值.\n\n路径是一个顶点序列,路径的长为该路径上的边数.一个顶点到自身的路径长度为0.\n\n一个从顶点到自身的路径叫\"环\",不常见.\n\n回路指的是W1=Wn的长至少为1的路径,无向图要求边互异.\n\n## 图的表示\n\n先考虑有向图的表示:\n\n用数字对顶点标号:\n\n![图](/img/graph.jpg)\n\n1.使用二维数组(邻接矩阵)\n\nA\\[u][v]表示一条从u到v的边,A\\[u][v]=true指边存在,反之不存在.A\\[u][v]=2可以表示一个边的权.\n\n2.邻接表表示,若有权也可以附加进去\n\n| 序号 | 值    |\n| ---- | ----- |\n| 1    | 2,4,3 |\n| 2    | 4,5   |\n| 3    | 6     |\n| 4    | 6,7,3 |\n| 5    | 4,7   |\n| 6    | (空)  |\n| 7    | 6     |\n","source":"_posts/2020-2-17-Data2.md","raw":"---\nlayout:     post\ntitle:      \"数据结构2：树、散列、堆、图\"\nintro:      \"\"\ndate:       2020-2-17 16:13:00\nauthor:     \"Makinohara\"\ncatalog: true\ntags:\n\t- 计算机基础\n---\n\n\n\n\n\n# 树\n\n树的一些基本概念:\n\n1.一棵树是一些结点的集合\n\n2.树和子树之间通过有向的\"边\"连接.\n\n3.每一棵子树的根是父根的\"儿子\"而父根是子树的\"父亲\".\n\n4.没有儿子的结点叫做叶\n\n5.从一个结点到另一个结点的路径叫做\"序列\",序列的长是路径上边的个数,\n\n6.结点的深度是从根到结点唯一路径的长.\n\n7.如果存在一条n1到n2的路径,那么n1是n2的祖先,n2是n1的后裔.若n1!=n2,则n1是n2的真祖先.\n\n8.树的简单实现:\n\n```c++\nstruct node\n{\n    object element;\n    node *firstchild;\n    node *nextsibling;\n};\n```\n\n接下来看一个最基本的树型结构:\n\n## 二叉树\n\n二叉树的每一个结点都不能超过有两个儿子.但子树皆可能为空.\n\n二叉树的伪代码:\n\n```c++\nstruct node\n{\n    int a;\n    int b;//这些是结点包含的元素\n    node *left;\n    node *right;//这些是指向子树的指针\n};\n```\n\n表达式树的解释:\n\n![表达式树](/img/tree1.jpg)\n\n树有多种遍历方式:\n\n**中序遍历:**\n\n依次遍历左,结点,右,并且每一层都这么遍历,最终遍历结果为中缀表达式:\n\n(a+b\\*c)+((d\\*e+f)*g)\n\n**后序遍历:**\n\n先打印左右子树,再打印结点:\n\na b c * + d e * f + g * +\n\n构造一个后缀表达式树:\n\n原理:每读入一个表达式就形成一个新的树.\n\n参见      *数据结构与算法分析:树*     ,我们下面只考虑代码实现:\n\n```c++\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nstruct node //定义一个结点\n{\n    char elem;\n    node *left;\n    node *right;\n};\n\nint main()\n{\n    stack<node *> temp_in; //构建一个栈用于存放指针(建树压栈)\n    char char_in;          //构建一个临时变量用于读入(符号或数字)\n    node node_arr[10000];  //构建一个数组用于存放树\n    int pos = 0;           //构建的结点在数组中的位置(每构建一个结点时更新)\n    while (true)\n    {\n        cin >> char_in;\n        if (char_in == '!')\n            break;\n\n        if (char_in != '+' && char_in != '-' && char_in != '*' && char_in != '/') //读取非运算符(正常压栈)\n        {\n            node_arr[pos].elem = char_in; //把内容写入树\n            temp_in.push(&node_arr[pos]); //将指针压入栈\n        }\n        else\n        {\n            node_arr[pos].elem = char_in;        //将运算符写入树\n            node_arr[pos].right = temp_in.top(); //取为右儿子\n            temp_in.pop();                       //弹出\n            node_arr[pos].left = temp_in.top();  //取为左儿子\n            temp_in.pop();                       //弹出\n            //最后将这个树入栈\n            temp_in.push(&node_arr[pos]);\n        }\n        pos++;\n    }\n    //此时树已经建立成功!!!接下来我们需要尝试以中序遍历和后序遍历来输出这个表达式\n    node *print_node = temp_in.top(); //当前读出的根,先将栈顶的表达式读入\n    temp_in.pop();//待会还要压进去\n    while (true)\n    {\n        if ((*print_node).left == 0x0)\n        {\n            cout << (*print_node).elem;//若为最左叶,打印\n            if (temp_in.empty())//打印完了要是栈顶为空,则跳出循环\n            {\n                break;\n            }\n            cout<<(*temp_in.top()).elem;//将根打印出来\n            print_node = (*temp_in.top()).right;//修改读数为栈顶右儿子\n            temp_in.pop();//将根从栈顶取出\n        }\n        else\n        {\n            temp_in.push(print_node);\n            print_node = (*print_node).left;\n        }\n    } //找到最左侧元素\n\n    return 0;\n}\n```\n\n# 图论算法\n\n## 图的介绍\n\n图 G=(V,E)由顶点(vertex)的集V和边(edge)的集E组成.\n\n每一条边是一个点对(v,w),v,w∈V,如果点对有序,图就为有向图.\n\n当存在(v,w)∈E,v和w邻接.\n\n边可以有一个权或值.\n\n路径是一个顶点序列,路径的长为该路径上的边数.一个顶点到自身的路径长度为0.\n\n一个从顶点到自身的路径叫\"环\",不常见.\n\n回路指的是W1=Wn的长至少为1的路径,无向图要求边互异.\n\n## 图的表示\n\n先考虑有向图的表示:\n\n用数字对顶点标号:\n\n![图](/img/graph.jpg)\n\n1.使用二维数组(邻接矩阵)\n\nA\\[u][v]表示一条从u到v的边,A\\[u][v]=true指边存在,反之不存在.A\\[u][v]=2可以表示一个边的权.\n\n2.邻接表表示,若有权也可以附加进去\n\n| 序号 | 值    |\n| ---- | ----- |\n| 1    | 2,4,3 |\n| 2    | 4,5   |\n| 3    | 6     |\n| 4    | 6,7,3 |\n| 5    | 4,7   |\n| 6    | (空)  |\n| 7    | 6     |\n","slug":"2020-2-17-Data2","published":1,"updated":"2021-10-24T02:04:35.829Z","_id":"ckey85uj9000oho8a36nwg5tx","comments":1,"photos":[],"link":"","content":"<h1 id=\"树\"><a href=\"#树\" class=\"headerlink\" title=\"树\"></a>树</h1><p>树的一些基本概念:</p>\n<p>1.一棵树是一些结点的集合</p>\n<p>2.树和子树之间通过有向的”边”连接.</p>\n<p>3.每一棵子树的根是父根的”儿子”而父根是子树的”父亲”.</p>\n<p>4.没有儿子的结点叫做叶</p>\n<p>5.从一个结点到另一个结点的路径叫做”序列”,序列的长是路径上边的个数,</p>\n<p>6.结点的深度是从根到结点唯一路径的长.</p>\n<p>7.如果存在一条n1到n2的路径,那么n1是n2的祖先,n2是n1的后裔.若n1!=n2,则n1是n2的真祖先.</p>\n<p>8.树的简单实现:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">node</span><br>&#123;</span><br>    object element;<br>    node *firstchild;<br>    node *nextsibling;<br>&#125;;<br></code></pre></td></tr></table></figure>\n<p>接下来看一个最基本的树型结构:</p>\n<h2 id=\"二叉树\"><a href=\"#二叉树\" class=\"headerlink\" title=\"二叉树\"></a>二叉树</h2><p>二叉树的每一个结点都不能超过有两个儿子.但子树皆可能为空.</p>\n<p>二叉树的伪代码:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">node</span><br>&#123;</span><br>    <span class=\"hljs-keyword\">int</span> a;<br>    <span class=\"hljs-keyword\">int</span> b;<span class=\"hljs-comment\">//这些是结点包含的元素</span><br>    node *left;<br>    node *right;<span class=\"hljs-comment\">//这些是指向子树的指针</span><br>&#125;;<br></code></pre></td></tr></table></figure>\n<p>表达式树的解释:</p>\n<p><img src=\"/img/tree1.jpg\" alt=\"表达式树\"></p>\n<p>树有多种遍历方式:</p>\n<p><strong>中序遍历:</strong></p>\n<p>依次遍历左,结点,右,并且每一层都这么遍历,最终遍历结果为中缀表达式:</p>\n<p>(a+b*c)+((d*e+f)*g)</p>\n<p><strong>后序遍历:</strong></p>\n<p>先打印左右子树,再打印结点:</p>\n<p>a b c <em> + d e </em> f + g * +</p>\n<p>构造一个后缀表达式树:</p>\n<p>原理:每读入一个表达式就形成一个新的树.</p>\n<p>参见      <em>数据结构与算法分析:树</em>     ,我们下面只考虑代码实现:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;bits/stdc++.h&gt;</span></span><br><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-built_in\">std</span>;<br><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">node</span> //定义一个结点<br>&#123;</span><br>    <span class=\"hljs-keyword\">char</span> elem;<br>    node *left;<br>    node *right;<br>&#125;;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span><br></span>&#123;<br>    <span class=\"hljs-built_in\">stack</span>&lt;node *&gt; temp_in; <span class=\"hljs-comment\">//构建一个栈用于存放指针(建树压栈)</span><br>    <span class=\"hljs-keyword\">char</span> char_in;          <span class=\"hljs-comment\">//构建一个临时变量用于读入(符号或数字)</span><br>    node node_arr[<span class=\"hljs-number\">10000</span>];  <span class=\"hljs-comment\">//构建一个数组用于存放树</span><br>    <span class=\"hljs-keyword\">int</span> pos = <span class=\"hljs-number\">0</span>;           <span class=\"hljs-comment\">//构建的结点在数组中的位置(每构建一个结点时更新)</span><br>    <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-literal\">true</span>)<br>    &#123;<br>        <span class=\"hljs-built_in\">cin</span> &gt;&gt; char_in;<br>        <span class=\"hljs-keyword\">if</span> (char_in == <span class=\"hljs-string\">'!'</span>)<br>            <span class=\"hljs-keyword\">break</span>;<br><br>        <span class=\"hljs-keyword\">if</span> (char_in != <span class=\"hljs-string\">'+'</span> &amp;&amp; char_in != <span class=\"hljs-string\">'-'</span> &amp;&amp; char_in != <span class=\"hljs-string\">'*'</span> &amp;&amp; char_in != <span class=\"hljs-string\">'/'</span>) <span class=\"hljs-comment\">//读取非运算符(正常压栈)</span><br>        &#123;<br>            node_arr[pos].elem = char_in; <span class=\"hljs-comment\">//把内容写入树</span><br>            temp_in.push(&amp;node_arr[pos]); <span class=\"hljs-comment\">//将指针压入栈</span><br>        &#125;<br>        <span class=\"hljs-keyword\">else</span><br>        &#123;<br>            node_arr[pos].elem = char_in;        <span class=\"hljs-comment\">//将运算符写入树</span><br>            node_arr[pos].right = temp_in.top(); <span class=\"hljs-comment\">//取为右儿子</span><br>            temp_in.pop();                       <span class=\"hljs-comment\">//弹出</span><br>            node_arr[pos].left = temp_in.top();  <span class=\"hljs-comment\">//取为左儿子</span><br>            temp_in.pop();                       <span class=\"hljs-comment\">//弹出</span><br>            <span class=\"hljs-comment\">//最后将这个树入栈</span><br>            temp_in.push(&amp;node_arr[pos]);<br>        &#125;<br>        pos++;<br>    &#125;<br>    <span class=\"hljs-comment\">//此时树已经建立成功!!!接下来我们需要尝试以中序遍历和后序遍历来输出这个表达式</span><br>    node *print_node = temp_in.top(); <span class=\"hljs-comment\">//当前读出的根,先将栈顶的表达式读入</span><br>    temp_in.pop();<span class=\"hljs-comment\">//待会还要压进去</span><br>    <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-literal\">true</span>)<br>    &#123;<br>        <span class=\"hljs-keyword\">if</span> ((*print_node).left == <span class=\"hljs-number\">0x0</span>)<br>        &#123;<br>            <span class=\"hljs-built_in\">cout</span> &lt;&lt; (*print_node).elem;<span class=\"hljs-comment\">//若为最左叶,打印</span><br>            <span class=\"hljs-keyword\">if</span> (temp_in.empty())<span class=\"hljs-comment\">//打印完了要是栈顶为空,则跳出循环</span><br>            &#123;<br>                <span class=\"hljs-keyword\">break</span>;<br>            &#125;<br>            <span class=\"hljs-built_in\">cout</span>&lt;&lt;(*temp_in.top()).elem;<span class=\"hljs-comment\">//将根打印出来</span><br>            print_node = (*temp_in.top()).right;<span class=\"hljs-comment\">//修改读数为栈顶右儿子</span><br>            temp_in.pop();<span class=\"hljs-comment\">//将根从栈顶取出</span><br>        &#125;<br>        <span class=\"hljs-keyword\">else</span><br>        &#123;<br>            temp_in.push(print_node);<br>            print_node = (*print_node).left;<br>        &#125;<br>    &#125; <span class=\"hljs-comment\">//找到最左侧元素</span><br><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h1 id=\"图论算法\"><a href=\"#图论算法\" class=\"headerlink\" title=\"图论算法\"></a>图论算法</h1><h2 id=\"图的介绍\"><a href=\"#图的介绍\" class=\"headerlink\" title=\"图的介绍\"></a>图的介绍</h2><p>图 G=(V,E)由顶点(vertex)的集V和边(edge)的集E组成.</p>\n<p>每一条边是一个点对(v,w),v,w∈V,如果点对有序,图就为有向图.</p>\n<p>当存在(v,w)∈E,v和w邻接.</p>\n<p>边可以有一个权或值.</p>\n<p>路径是一个顶点序列,路径的长为该路径上的边数.一个顶点到自身的路径长度为0.</p>\n<p>一个从顶点到自身的路径叫”环”,不常见.</p>\n<p>回路指的是W1=Wn的长至少为1的路径,无向图要求边互异.</p>\n<h2 id=\"图的表示\"><a href=\"#图的表示\" class=\"headerlink\" title=\"图的表示\"></a>图的表示</h2><p>先考虑有向图的表示:</p>\n<p>用数字对顶点标号:</p>\n<p><img src=\"/img/graph.jpg\" alt=\"图\"></p>\n<p>1.使用二维数组(邻接矩阵)</p>\n<p>A[u][v]表示一条从u到v的边,A[u][v]=true指边存在,反之不存在.A[u][v]=2可以表示一个边的权.</p>\n<p>2.邻接表表示,若有权也可以附加进去</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>序号</th>\n<th>值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>2,4,3</td>\n</tr>\n<tr>\n<td>2</td>\n<td>4,5</td>\n</tr>\n<tr>\n<td>3</td>\n<td>6</td>\n</tr>\n<tr>\n<td>4</td>\n<td>6,7,3</td>\n</tr>\n<tr>\n<td>5</td>\n<td>4,7</td>\n</tr>\n<tr>\n<td>6</td>\n<td>(空)</td>\n</tr>\n<tr>\n<td>7</td>\n<td>6</td>\n</tr>\n</tbody>\n</table>\n</div>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"树\"><a href=\"#树\" class=\"headerlink\" title=\"树\"></a>树</h1><p>树的一些基本概念:</p>\n<p>1.一棵树是一些结点的集合</p>\n<p>2.树和子树之间通过有向的”边”连接.</p>\n<p>3.每一棵子树的根是父根的”儿子”而父根是子树的”父亲”.</p>\n<p>4.没有儿子的结点叫做叶</p>\n<p>5.从一个结点到另一个结点的路径叫做”序列”,序列的长是路径上边的个数,</p>\n<p>6.结点的深度是从根到结点唯一路径的长.</p>\n<p>7.如果存在一条n1到n2的路径,那么n1是n2的祖先,n2是n1的后裔.若n1!=n2,则n1是n2的真祖先.</p>\n<p>8.树的简单实现:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">node</span><br>&#123;</span><br>    object element;<br>    node *firstchild;<br>    node *nextsibling;<br>&#125;;<br></code></pre></td></tr></table></figure>\n<p>接下来看一个最基本的树型结构:</p>\n<h2 id=\"二叉树\"><a href=\"#二叉树\" class=\"headerlink\" title=\"二叉树\"></a>二叉树</h2><p>二叉树的每一个结点都不能超过有两个儿子.但子树皆可能为空.</p>\n<p>二叉树的伪代码:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">node</span><br>&#123;</span><br>    <span class=\"hljs-keyword\">int</span> a;<br>    <span class=\"hljs-keyword\">int</span> b;<span class=\"hljs-comment\">//这些是结点包含的元素</span><br>    node *left;<br>    node *right;<span class=\"hljs-comment\">//这些是指向子树的指针</span><br>&#125;;<br></code></pre></td></tr></table></figure>\n<p>表达式树的解释:</p>\n<p><img src=\"/img/tree1.jpg\" alt=\"表达式树\"></p>\n<p>树有多种遍历方式:</p>\n<p><strong>中序遍历:</strong></p>\n<p>依次遍历左,结点,右,并且每一层都这么遍历,最终遍历结果为中缀表达式:</p>\n<p>(a+b*c)+((d*e+f)*g)</p>\n<p><strong>后序遍历:</strong></p>\n<p>先打印左右子树,再打印结点:</p>\n<p>a b c <em> + d e </em> f + g * +</p>\n<p>构造一个后缀表达式树:</p>\n<p>原理:每读入一个表达式就形成一个新的树.</p>\n<p>参见      <em>数据结构与算法分析:树</em>     ,我们下面只考虑代码实现:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;bits/stdc++.h&gt;</span></span><br><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-built_in\">std</span>;<br><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">node</span> //定义一个结点<br>&#123;</span><br>    <span class=\"hljs-keyword\">char</span> elem;<br>    node *left;<br>    node *right;<br>&#125;;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span><br></span>&#123;<br>    <span class=\"hljs-built_in\">stack</span>&lt;node *&gt; temp_in; <span class=\"hljs-comment\">//构建一个栈用于存放指针(建树压栈)</span><br>    <span class=\"hljs-keyword\">char</span> char_in;          <span class=\"hljs-comment\">//构建一个临时变量用于读入(符号或数字)</span><br>    node node_arr[<span class=\"hljs-number\">10000</span>];  <span class=\"hljs-comment\">//构建一个数组用于存放树</span><br>    <span class=\"hljs-keyword\">int</span> pos = <span class=\"hljs-number\">0</span>;           <span class=\"hljs-comment\">//构建的结点在数组中的位置(每构建一个结点时更新)</span><br>    <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-literal\">true</span>)<br>    &#123;<br>        <span class=\"hljs-built_in\">cin</span> &gt;&gt; char_in;<br>        <span class=\"hljs-keyword\">if</span> (char_in == <span class=\"hljs-string\">'!'</span>)<br>            <span class=\"hljs-keyword\">break</span>;<br><br>        <span class=\"hljs-keyword\">if</span> (char_in != <span class=\"hljs-string\">'+'</span> &amp;&amp; char_in != <span class=\"hljs-string\">'-'</span> &amp;&amp; char_in != <span class=\"hljs-string\">'*'</span> &amp;&amp; char_in != <span class=\"hljs-string\">'/'</span>) <span class=\"hljs-comment\">//读取非运算符(正常压栈)</span><br>        &#123;<br>            node_arr[pos].elem = char_in; <span class=\"hljs-comment\">//把内容写入树</span><br>            temp_in.push(&amp;node_arr[pos]); <span class=\"hljs-comment\">//将指针压入栈</span><br>        &#125;<br>        <span class=\"hljs-keyword\">else</span><br>        &#123;<br>            node_arr[pos].elem = char_in;        <span class=\"hljs-comment\">//将运算符写入树</span><br>            node_arr[pos].right = temp_in.top(); <span class=\"hljs-comment\">//取为右儿子</span><br>            temp_in.pop();                       <span class=\"hljs-comment\">//弹出</span><br>            node_arr[pos].left = temp_in.top();  <span class=\"hljs-comment\">//取为左儿子</span><br>            temp_in.pop();                       <span class=\"hljs-comment\">//弹出</span><br>            <span class=\"hljs-comment\">//最后将这个树入栈</span><br>            temp_in.push(&amp;node_arr[pos]);<br>        &#125;<br>        pos++;<br>    &#125;<br>    <span class=\"hljs-comment\">//此时树已经建立成功!!!接下来我们需要尝试以中序遍历和后序遍历来输出这个表达式</span><br>    node *print_node = temp_in.top(); <span class=\"hljs-comment\">//当前读出的根,先将栈顶的表达式读入</span><br>    temp_in.pop();<span class=\"hljs-comment\">//待会还要压进去</span><br>    <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-literal\">true</span>)<br>    &#123;<br>        <span class=\"hljs-keyword\">if</span> ((*print_node).left == <span class=\"hljs-number\">0x0</span>)<br>        &#123;<br>            <span class=\"hljs-built_in\">cout</span> &lt;&lt; (*print_node).elem;<span class=\"hljs-comment\">//若为最左叶,打印</span><br>            <span class=\"hljs-keyword\">if</span> (temp_in.empty())<span class=\"hljs-comment\">//打印完了要是栈顶为空,则跳出循环</span><br>            &#123;<br>                <span class=\"hljs-keyword\">break</span>;<br>            &#125;<br>            <span class=\"hljs-built_in\">cout</span>&lt;&lt;(*temp_in.top()).elem;<span class=\"hljs-comment\">//将根打印出来</span><br>            print_node = (*temp_in.top()).right;<span class=\"hljs-comment\">//修改读数为栈顶右儿子</span><br>            temp_in.pop();<span class=\"hljs-comment\">//将根从栈顶取出</span><br>        &#125;<br>        <span class=\"hljs-keyword\">else</span><br>        &#123;<br>            temp_in.push(print_node);<br>            print_node = (*print_node).left;<br>        &#125;<br>    &#125; <span class=\"hljs-comment\">//找到最左侧元素</span><br><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h1 id=\"图论算法\"><a href=\"#图论算法\" class=\"headerlink\" title=\"图论算法\"></a>图论算法</h1><h2 id=\"图的介绍\"><a href=\"#图的介绍\" class=\"headerlink\" title=\"图的介绍\"></a>图的介绍</h2><p>图 G=(V,E)由顶点(vertex)的集V和边(edge)的集E组成.</p>\n<p>每一条边是一个点对(v,w),v,w∈V,如果点对有序,图就为有向图.</p>\n<p>当存在(v,w)∈E,v和w邻接.</p>\n<p>边可以有一个权或值.</p>\n<p>路径是一个顶点序列,路径的长为该路径上的边数.一个顶点到自身的路径长度为0.</p>\n<p>一个从顶点到自身的路径叫”环”,不常见.</p>\n<p>回路指的是W1=Wn的长至少为1的路径,无向图要求边互异.</p>\n<h2 id=\"图的表示\"><a href=\"#图的表示\" class=\"headerlink\" title=\"图的表示\"></a>图的表示</h2><p>先考虑有向图的表示:</p>\n<p>用数字对顶点标号:</p>\n<p><img src=\"/img/graph.jpg\" alt=\"图\"></p>\n<p>1.使用二维数组(邻接矩阵)</p>\n<p>A[u][v]表示一条从u到v的边,A[u][v]=true指边存在,反之不存在.A[u][v]=2可以表示一个边的权.</p>\n<p>2.邻接表表示,若有权也可以附加进去</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>序号</th>\n<th>值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>2,4,3</td>\n</tr>\n<tr>\n<td>2</td>\n<td>4,5</td>\n</tr>\n<tr>\n<td>3</td>\n<td>6</td>\n</tr>\n<tr>\n<td>4</td>\n<td>6,7,3</td>\n</tr>\n<tr>\n<td>5</td>\n<td>4,7</td>\n</tr>\n<tr>\n<td>6</td>\n<td>(空)</td>\n</tr>\n<tr>\n<td>7</td>\n<td>6</td>\n</tr>\n</tbody>\n</table>\n</div>\n"},{"layout":"post","title":"To the end of 2019.","intro":"What's going on?","date":"2019-12-27T15:13:00.000Z","author":"Makinohara","featured_image":"http://msfasr.com/img/2020.jpg","catalog":true,"_content":"\n\n\n## 在反思中开始的2019\n\n![2018年终总结]( /img/2018end.png)\n\n2018年我给自己的年终总结是:我是傻逼.这句浓缩于我简短说说里的四个字包含了太多的我对2018年的反思.在那一年里,我做了数量极多的傻事,而其中的某些直至今日我想起都感到无比的羞耻与可笑.所以我极其希望能够在2019年开始后少做一些傻事.\n\n但接下来呢?我仍旧在做傻事的道路上越走越远.在这方面唯一不同的是我已经接受了在我身上会发生经常性大脑短路这一事实.所以,对于做傻事,我已经不纠结了.做就做呗,谁人没个糊涂的时候?\n\n## 所以,不到残血不会玩是吗\n\n<img src=\"\\img\\score.png\" alt=\"成绩报告\"  />\n\n2019年开始后的第一场考试给了我当头棒喝,这个不足以上线一本的分数竟然在这样一个时间点出现了.此时距离高考已不足6个月,若是你在这时对某个拿着这个分数的人说:\"不用担心,努把力,你一定能考上211的\",他一定会觉得你的安慰过于虚假:只是知道211这个名词,就可以到处胡乱用吗?难道你没有考虑过要考上这样的学校意味着什么吗?\n\n令人感到欣喜的是:我的身边没有这样的人存在.因为他们的知识水平足够高,已经具备了基本的判断力.认为学渣会逆袭成功的人可能只有在人才辈出,说话不用考虑扯不扯淡的知乎和贴吧里才存在了.\n\n在我的身边不存在这样的人,怎么办呢?我只好开始走自我麻痹之路.首先是把所有算错的分和由于概念不清,背书不熟的分加上.由是,分数终于过了一本线,接下来是加上那些我认为我可以通过坑蒙拐骗来在高考中骗来的过程分,然后是加上我认为我可以通过自己的努力在下班学期里取得的分数.七拼八凑,胡搞蛮搞,这分数终于能上所差不多的211了.我看着这样的成绩,笑道:对嘛,这才是我真实的高考分数!此时我的脑中已经开始想象高考完到哪里去玩了.\n\n不得不说这自我麻痹的用处还挺大:那半年里我几乎没有感到任何的紧张.我甚至在那段时间还追了几部番,入坑了几款游戏,收了一套随身听和耳机(笑).要是你说我不务正业也罢了,反正我是认为没了那些东西做精神慰藉,我的成绩甚至还会下降.\n\n于是,就这样,我平静地度过了高中时期最后的6个月.在那六个月里我学了很多,也思考了很多.在那六个月里我写下了很多文字,记述了我的心理状态与一些对人生大义的思考.现在再翻开那本杂想录,我看到的是那时候的我,无比清醒地写下我对未来的期望与对自身应当如何追求正确价值观的讨论.现在的我已经离开了牢笼,再也无法平静下来思考这些所谓的\"崇高理想\"了.\n\n再后来的事情大家都知道了:我就这样莫名其妙地上了大学.\n\n## 在遗憾之后,是新的开始\n\n在那之后我入学了安徽大学,一所不好也不差的211大学.但我要说,我本应该入学哈尔滨工业大学,你会相信吗?\n\n<img src=\"\\img\\zx.png\" style=\"zoom: 67%;\" />\n\n在\"质心事件\",\"解剖鱼事件\"发生后,2019年的自招政策相比于2018年发生了大幅度缩水.在往年,竞赛降分40/60分已是常态,而到了2019年,却是最高只降20分.这样的降分,对于曾经花费了大量的时间在学科竞赛与创新性比赛上的人,实在是难以发挥什么实质性作用.\n\n于是,本人便由于这突然收紧的政策,错失了哈尔滨工业大学(威海)的录取通知书.那所在美丽的黄海边的学校从此与我无缘.好在我的高考考得不算太烂,不至于由于这方面的挫折彻底完蛋.\n\n2019届的考生注定是被高考改革献祭的一批考生.这一年的题目出得完全不按套路:数学的题序大改,创新题增多与理综的信息量加大使得许多考生无法适应,以至于逼上了复读的道路.相比于他们,我又是幸运的:我那死猪不怕开水烫的心理素质保证了我在任何时候都不会发生巨大的心态波动.于是我坦然地通过了这一次心理与精神上的双重考验.\n\n后来,我便来到了这所大学.虽说还是有那么一些小小的遗憾,但我仍旧感到知足:毕竟以我之前的水平,想上一所好点的一本都是困难的.既来之则安之.既然选择了这里,就好好开始新生活,向着下一个目标前进吧.\n\n*2020.2.16补:现在自招彻底没了,搞了个强基计划......高考占比85%以上,有这时间学竞赛还不如带学带玩念三年书呢*\n\n## 再美好的计划也逃脱不了惰性\n\n我在高考前制定了一个宏伟的计划,要在暑假练字,看书,学C++,看经典电影,制作更多有意思的视频.但很遗憾的是,惰性把这些东西毁了大半:C++只是入门了一点,练字没能坚持,时间都浪费在了刷知乎与贴吧上面:鬼知道这些玩意怎么就这么耗时间?\n\n后来我明白了:再美好的计划也逃脱不了惰性.在暑假我想干什么就干什么,反倒使我陷入选择困难,以至于无事可干,只好拿手机消磨时间.现在我上了大学,由于数学基础羸弱而错失了ACM实验室的招新机会,由于没能完整地学完C++错失了字节的实习机会......原来机会就是这样错过的:你不早做准备,它便不给你留情面.当那些美好的计划被惰性毁灭时,其毁灭的也许就不止计划本身了.\n\n就在前几天,有一位学长在群里发了一则字节跳动招收寒假实习生的讯息.当我们班的一位同学问及:\"我们也能参加吗\"时,辅导员回了一句:你们还啥都不会呢.\n\n我当时无言.无言的原因之一是我们的辅导员对这一届学生属实是太没信心,以至于不相信我们班可能会存在已经自学了许多内容的人拿到这机会.无言的原因之二是:要是我在暑假时能完成学习C++的计划,也许我就能参加这次实习,告诉全班人:就是有这种人存在.\n\n但即便如此,我在计算机方面的学术水平依然处于领先地位.由于我有从事机器人编程的经验,曾在2017年的FLL英国国际公开赛中拿到最佳程序设计奖与场地赛冠军(这个奖是颁给团队的,不过考虑到编程的重要性,能拿到这个奖,我也算是做出了一些微小的贡献.最起码我写的程序在场上能够基本无视场地环境改变与电池电压等因素影响稳定发挥,容错率算是较高).我在高二时期也曾挑战过制作海报与制作MV,微电影,在此期间学到了许多设计上的技巧.唯一美中不足的就是我在高一升高二暑假期间学的Java烂尾了,否则我就可以带着一门编程语言的基础上大学了.\n\n不过既然现在我意识到了这个问题,就应当去做出些改变才是.否则还是说归说,懒还是一样的懒.\n\n## 放弃多彩的校园生活,然后呢\n\n在刚开学时,我就立下一个志向:不要去碰那些类似于现充社团,学生会等充斥着无用社交的活动,精心提升自己的学术水平与\"内力\",不要去太过于在意类似于外表,社交圈子,社会地位之类的无用的事物.然而,这样做的话,我就很显然的要与多彩的校园生活说再见了.\n\n> We've been gaining one good thing through losing another.\n>\n> I'm so proud to be with you, my love.\n>\n> Now you know the meaning of sunshine after rain.\n>\n> Let me tell you life is good my friend.\n\n既然我放弃了这些,不做出些事业似乎就是说不过去的事了.要是我不仅丢掉了社交,还丢掉了学习与科研,那就是在闹笑话了.有的人选择热热闹闹地度过大学四年,而我选择平稳安静地度过大学四年.热热闹闹地度过大学四年太耗精力,并且容易使一个人的精神长期处于兴奋状态,在这种状态下,自然就难以静下心来做出点成果.\n\n做出成果......谁都想做出成果.然而即便放弃了这些,耐心依旧是决定性因素.\n\n## 在这个时代,人们不需要亲密关系\n\n单身是一件在这个时代很自由很美好的事情,所以我们不再有必要和别人产生联系.既然我们有影视与游戏,炸鸡与啤酒,那么我们何必去为了脱单而煞费苦心呢?\n\n诚然,在这个时代,有太多的东西值得我们去沉迷,并在此上面浪费时间.由是,恋爱,这一在以往看作是大学生活必不可少的事情,在如今变得越来越不重要.越来越少的人有脱单的想法,因为他/她们的生活幸福美满,又少有生活压力.没有压力也就意味着没有必要去找一个伴侣去与自己同甘共苦.就算要去找一个伴侣,我想大多数的人也只想\"同甘\"而不愿意\"共苦\".毕竟我有那么多选择,我不去选择那些能带我玩,讲好听撩人的情话的,我还来选择那些沉闷的,三句不离学术话题的,简直是脑子有问题.毕竟,相信一个人能够得到良好的发展,并在背后支持其的风险实在太大,我只要等你有一日出头了和你\"同甘\"就得了.\n\n所以,人们不需要亲密关系.有的人觉得产生亲密关系是纯属浪费时间,消耗钱财,吃力不讨好,还容易影响情绪的破事;有的人认为亲密关系本质上就是青春期荷尔蒙过剩,性激素分泌旺盛的产物;有的人认为亲密关系的产生不过就是某些耐不住寂寞的人受不住苦,需要一个人作为心理慰藉,排解心中的空虚与无力......强者总是独行,而弱者才喜欢互相搀扶.\n\n但即便如此,我个人还是认为亲密关系是一件很美好的事.因为这样我才能有一种感觉,我所做的事不全是为了自己,也为某个对我来说重要的人.一想到如此,便有了继续奋斗的动力.\n\n![虫](/img/to.jpg)\n\n> *再苦的菜都有虫喜欢*\n\n## 996之后,迎来的不一定仅仅是ICU,还有可能是保安与镣铐\n\n在今年年末发生了两件事,一件事是网易员工因身患绝症被HR清出,在其后被保安赶走.另一件事是华为离职员工因离职赔偿问题被扣上\"敲诈勒索\"的帽子,被关押251天.\n\n这两起事件都足够说明一个问题:互联网企业压榨员工的现状并没有得到妥善改善,甚至还有变本加厉的可能.\n\n毕竟,我们真的不缺人.每年都有大量的年轻人想入行互联网行业,你不愿意996,自然有人等着顶替你的位置.这不是劳动法能解决的问题,因为你认为我违法,你可以选择不干.\n\n我们作为计算机专业的学生,对待这类事件,一定要引起重视.因为这个行业现在已经开始面临严重的内卷.有几个人,有几个公司,为了出头而搞什么\"狼性文化\",搞得别的公司为了不被淘汰,也被迫这么搞,直到最后全部的互联网公司都996,往哪去都没得跳. \t\n\n计算机专业,也许是知乎为数不多的几个不劝退的专业了.生物劝退,机械劝退,到了后面居然还出现了\"劝人学医天打雷劈\"这样的古怪说法......大家一边骂着996制度给人带来的压迫,一边拿着上万块的月薪和几万的年终奖,大呼\"真香\"......但许多人没有考虑到一个问题:那些喜欢在网络上发声的人,是否大多都比较成功?那么那些既996又拿不到多少钱的人呢?他们消失了吗?\n\n996的真正受害者,不是那些大厂员工.因为他们加班,是真的有钱拿.但996的风气一旦成型,有些在小公司上班的员工,本来工资就极其微薄,却还要由于这难逃的制度而被迫加班,最后败了身子,还拿不到钱.\n\n![996](/img/icu.png)\n\n## 在前面等着我的,还有什么\n\n在这一年里,我开始意识到:在时代的洪流中,个人的力量实在是太微小了.一次小小的政策调整,就直接影响了我大学四年在什么样层次的学校读书......若是再过十几年,这个行业发生什么动荡,是不是就意味着我先前所做全完蛋了?\n\n我在担心一个行业会发生什么动荡自然是在杞人忧天.计算机行业再怎么衰落,也是不会低于传统工科的下限的.如今第四次工业革命开始了,AI 物联网 下一代通信技术......,其发展都需要大量的计算机与电信人才作为支撑.在可预见的未来里,至少计算机行业仍旧会生生不息.\n\n但这也意味着,仅靠写点垃圾代码就可以混饭吃的时代结束了.以往,一个没有任何编程基础的人可能在辅导机构报一个Java编程班就可以去上班.到了今日,这种状况虽说还存在,但那些通过补习班来入职的低端员工的待遇已经大不如前.互联网行业的竞争越发激烈,只是凭着一张211毕业证就能拿到好offer的时代已经一去不复返了.\n\n所以,在前面等着我的是什么,我也不知道.现在很明显的是我要去读研,但在那之后呢?为了更高的工资和更优渥的工作环境,鬼知道我又会怎么想.\n\n我学计算机专业很大因素上是因为我热爱钻研有关计算机的东西,我上小学时就开始学着制作PPT,上初中则是参加机器人比赛,顺便把PS也给学了.上高中后,我接触到的东西就更多,多到我现在已经无法一一列举......后来上了大学,我本以为有很多和我怀着相似想法的人报考这个专业,但事实却截然相反.他们只是不讨厌计算机,或是觉得学这个能赚大钱......\n\n钱什么的,其实够用就行.研究计算机是我的乐趣,研究设计也是我的乐趣.我希望我一直维持着这种心态,仅此而已.\n\n## 消费主义与追求更好生活的欲望\n\n我在2019年寒假购入了一套A45+MDR-1A音频设备.这两个绝配的设备给了我曾未有过的音乐体验.后来我一上贴吧,才发现这不过是弟中弟水平.\n\n要想达到一个能听的水平,我得搞来一台ZX300A加上平衡线才行.在这之后是升级更好的耳机,买来更好的耳放或是上台机......我看着令人眼花缭乱的价目表,久久无言.\n\n耳机,游戏电脑,手机,相机等电子产品,都逃脱不了\"一分钱一分货,十分钱1.1分货,一百分钱1.11分货\"的情况:想要获得一些微小的提升,却要花费十几倍甚至百倍价格的资金!\n\n\"摄影穷三代，单反毁一生.\"可能人对于更高水平设备的要求总是无止境的吧......那些奢侈品,那些跑车与豪宅,那些令人感到眼花缭乱的饰品......这些事物究竟是欲望,还是艺术?\n\n很可惜,我不是身处于一个富人阶级,所以对于这些,可能我一生都触不可及.人的欲望一旦宣泄出来,就是一个无底洞,人总想要追求更多,更好,到了最后已经不知道自己在追求什么了.我深深地认为想要过上一个幸福的生活,就得先学着把心沉下来,不要为了那些纸醉金迷的玩意而心神不宁:那样怎么也没法得到幸福.\n\n为了使内心得到平静,去练字吧!练了一小会,觉得这个钢笔可能还不够好.工欲善其事,必先利其器,是时候升级钢笔了.\n\n## 终章:我该如何迎接我的2020\n\n2020终于要来了,断断续续写了这么多,总得给自己的新的一年来点期望和计划.\n\n首先,最为重要的自然是把分数搞上来.而其中最为要紧的自然是数学.我的数学底子一直不好,所以在大二开了一堆子数学课后,我可能会感到力不从心..为了避免这样的事情发生,我还是尽量提前预习一些为妙.\n\n其次,或是不能说其次,是与数学一样重要的计算机技术.在明年我打算深入学习C++,Java,node.js,Linux方面的内容,可能再附带学一些Python的基础.除语言之外,欲提高编程素养,算法与数据结构,设计模式是必不可少的内容,这些基础中的基础是将会决定我研究水平的上限.\n\n2020年我打算读至少20本文学类的读物,以此提升我的文化素养.2020年我希望能把体重减到150一下,并争取在引体向上这一项目上实现\"零的突破\".\n\n说实话,这些期望写在这里也许并无必要,因为它们早已作为项目安排在了我2020年的时间表上,我只需一一验收完成即可.相比于这些,更重要的好像是如何继续提升\"内力\".\n\n\"内力\"指的就是那些无法从外表或表现上看出来的能力.比如耐心,比如专注力,抗干扰力......这些能力的提升无法在社交活动上发挥任何作用,亦不能作为什么特长来展示.所以对于想要结识更多男男女女的现充而言,还是不要做这种吃力不讨好的事情为妙.\n\n","source":"_posts/2019-12-27-19End.md","raw":"---\nlayout:     post\ntitle:      \"To the end of 2019.\"\nintro:   \"What's going on?\"\ndate:       2019-12-27 23:13:00\nauthor:     \"Makinohara\"\nfeatured_image: http://msfasr.com/img/2020.jpg\ncatalog: true\ntags:\n    - 生活感想\n\n---\n\n\n\n## 在反思中开始的2019\n\n![2018年终总结]( /img/2018end.png)\n\n2018年我给自己的年终总结是:我是傻逼.这句浓缩于我简短说说里的四个字包含了太多的我对2018年的反思.在那一年里,我做了数量极多的傻事,而其中的某些直至今日我想起都感到无比的羞耻与可笑.所以我极其希望能够在2019年开始后少做一些傻事.\n\n但接下来呢?我仍旧在做傻事的道路上越走越远.在这方面唯一不同的是我已经接受了在我身上会发生经常性大脑短路这一事实.所以,对于做傻事,我已经不纠结了.做就做呗,谁人没个糊涂的时候?\n\n## 所以,不到残血不会玩是吗\n\n<img src=\"\\img\\score.png\" alt=\"成绩报告\"  />\n\n2019年开始后的第一场考试给了我当头棒喝,这个不足以上线一本的分数竟然在这样一个时间点出现了.此时距离高考已不足6个月,若是你在这时对某个拿着这个分数的人说:\"不用担心,努把力,你一定能考上211的\",他一定会觉得你的安慰过于虚假:只是知道211这个名词,就可以到处胡乱用吗?难道你没有考虑过要考上这样的学校意味着什么吗?\n\n令人感到欣喜的是:我的身边没有这样的人存在.因为他们的知识水平足够高,已经具备了基本的判断力.认为学渣会逆袭成功的人可能只有在人才辈出,说话不用考虑扯不扯淡的知乎和贴吧里才存在了.\n\n在我的身边不存在这样的人,怎么办呢?我只好开始走自我麻痹之路.首先是把所有算错的分和由于概念不清,背书不熟的分加上.由是,分数终于过了一本线,接下来是加上那些我认为我可以通过坑蒙拐骗来在高考中骗来的过程分,然后是加上我认为我可以通过自己的努力在下班学期里取得的分数.七拼八凑,胡搞蛮搞,这分数终于能上所差不多的211了.我看着这样的成绩,笑道:对嘛,这才是我真实的高考分数!此时我的脑中已经开始想象高考完到哪里去玩了.\n\n不得不说这自我麻痹的用处还挺大:那半年里我几乎没有感到任何的紧张.我甚至在那段时间还追了几部番,入坑了几款游戏,收了一套随身听和耳机(笑).要是你说我不务正业也罢了,反正我是认为没了那些东西做精神慰藉,我的成绩甚至还会下降.\n\n于是,就这样,我平静地度过了高中时期最后的6个月.在那六个月里我学了很多,也思考了很多.在那六个月里我写下了很多文字,记述了我的心理状态与一些对人生大义的思考.现在再翻开那本杂想录,我看到的是那时候的我,无比清醒地写下我对未来的期望与对自身应当如何追求正确价值观的讨论.现在的我已经离开了牢笼,再也无法平静下来思考这些所谓的\"崇高理想\"了.\n\n再后来的事情大家都知道了:我就这样莫名其妙地上了大学.\n\n## 在遗憾之后,是新的开始\n\n在那之后我入学了安徽大学,一所不好也不差的211大学.但我要说,我本应该入学哈尔滨工业大学,你会相信吗?\n\n<img src=\"\\img\\zx.png\" style=\"zoom: 67%;\" />\n\n在\"质心事件\",\"解剖鱼事件\"发生后,2019年的自招政策相比于2018年发生了大幅度缩水.在往年,竞赛降分40/60分已是常态,而到了2019年,却是最高只降20分.这样的降分,对于曾经花费了大量的时间在学科竞赛与创新性比赛上的人,实在是难以发挥什么实质性作用.\n\n于是,本人便由于这突然收紧的政策,错失了哈尔滨工业大学(威海)的录取通知书.那所在美丽的黄海边的学校从此与我无缘.好在我的高考考得不算太烂,不至于由于这方面的挫折彻底完蛋.\n\n2019届的考生注定是被高考改革献祭的一批考生.这一年的题目出得完全不按套路:数学的题序大改,创新题增多与理综的信息量加大使得许多考生无法适应,以至于逼上了复读的道路.相比于他们,我又是幸运的:我那死猪不怕开水烫的心理素质保证了我在任何时候都不会发生巨大的心态波动.于是我坦然地通过了这一次心理与精神上的双重考验.\n\n后来,我便来到了这所大学.虽说还是有那么一些小小的遗憾,但我仍旧感到知足:毕竟以我之前的水平,想上一所好点的一本都是困难的.既来之则安之.既然选择了这里,就好好开始新生活,向着下一个目标前进吧.\n\n*2020.2.16补:现在自招彻底没了,搞了个强基计划......高考占比85%以上,有这时间学竞赛还不如带学带玩念三年书呢*\n\n## 再美好的计划也逃脱不了惰性\n\n我在高考前制定了一个宏伟的计划,要在暑假练字,看书,学C++,看经典电影,制作更多有意思的视频.但很遗憾的是,惰性把这些东西毁了大半:C++只是入门了一点,练字没能坚持,时间都浪费在了刷知乎与贴吧上面:鬼知道这些玩意怎么就这么耗时间?\n\n后来我明白了:再美好的计划也逃脱不了惰性.在暑假我想干什么就干什么,反倒使我陷入选择困难,以至于无事可干,只好拿手机消磨时间.现在我上了大学,由于数学基础羸弱而错失了ACM实验室的招新机会,由于没能完整地学完C++错失了字节的实习机会......原来机会就是这样错过的:你不早做准备,它便不给你留情面.当那些美好的计划被惰性毁灭时,其毁灭的也许就不止计划本身了.\n\n就在前几天,有一位学长在群里发了一则字节跳动招收寒假实习生的讯息.当我们班的一位同学问及:\"我们也能参加吗\"时,辅导员回了一句:你们还啥都不会呢.\n\n我当时无言.无言的原因之一是我们的辅导员对这一届学生属实是太没信心,以至于不相信我们班可能会存在已经自学了许多内容的人拿到这机会.无言的原因之二是:要是我在暑假时能完成学习C++的计划,也许我就能参加这次实习,告诉全班人:就是有这种人存在.\n\n但即便如此,我在计算机方面的学术水平依然处于领先地位.由于我有从事机器人编程的经验,曾在2017年的FLL英国国际公开赛中拿到最佳程序设计奖与场地赛冠军(这个奖是颁给团队的,不过考虑到编程的重要性,能拿到这个奖,我也算是做出了一些微小的贡献.最起码我写的程序在场上能够基本无视场地环境改变与电池电压等因素影响稳定发挥,容错率算是较高).我在高二时期也曾挑战过制作海报与制作MV,微电影,在此期间学到了许多设计上的技巧.唯一美中不足的就是我在高一升高二暑假期间学的Java烂尾了,否则我就可以带着一门编程语言的基础上大学了.\n\n不过既然现在我意识到了这个问题,就应当去做出些改变才是.否则还是说归说,懒还是一样的懒.\n\n## 放弃多彩的校园生活,然后呢\n\n在刚开学时,我就立下一个志向:不要去碰那些类似于现充社团,学生会等充斥着无用社交的活动,精心提升自己的学术水平与\"内力\",不要去太过于在意类似于外表,社交圈子,社会地位之类的无用的事物.然而,这样做的话,我就很显然的要与多彩的校园生活说再见了.\n\n> We've been gaining one good thing through losing another.\n>\n> I'm so proud to be with you, my love.\n>\n> Now you know the meaning of sunshine after rain.\n>\n> Let me tell you life is good my friend.\n\n既然我放弃了这些,不做出些事业似乎就是说不过去的事了.要是我不仅丢掉了社交,还丢掉了学习与科研,那就是在闹笑话了.有的人选择热热闹闹地度过大学四年,而我选择平稳安静地度过大学四年.热热闹闹地度过大学四年太耗精力,并且容易使一个人的精神长期处于兴奋状态,在这种状态下,自然就难以静下心来做出点成果.\n\n做出成果......谁都想做出成果.然而即便放弃了这些,耐心依旧是决定性因素.\n\n## 在这个时代,人们不需要亲密关系\n\n单身是一件在这个时代很自由很美好的事情,所以我们不再有必要和别人产生联系.既然我们有影视与游戏,炸鸡与啤酒,那么我们何必去为了脱单而煞费苦心呢?\n\n诚然,在这个时代,有太多的东西值得我们去沉迷,并在此上面浪费时间.由是,恋爱,这一在以往看作是大学生活必不可少的事情,在如今变得越来越不重要.越来越少的人有脱单的想法,因为他/她们的生活幸福美满,又少有生活压力.没有压力也就意味着没有必要去找一个伴侣去与自己同甘共苦.就算要去找一个伴侣,我想大多数的人也只想\"同甘\"而不愿意\"共苦\".毕竟我有那么多选择,我不去选择那些能带我玩,讲好听撩人的情话的,我还来选择那些沉闷的,三句不离学术话题的,简直是脑子有问题.毕竟,相信一个人能够得到良好的发展,并在背后支持其的风险实在太大,我只要等你有一日出头了和你\"同甘\"就得了.\n\n所以,人们不需要亲密关系.有的人觉得产生亲密关系是纯属浪费时间,消耗钱财,吃力不讨好,还容易影响情绪的破事;有的人认为亲密关系本质上就是青春期荷尔蒙过剩,性激素分泌旺盛的产物;有的人认为亲密关系的产生不过就是某些耐不住寂寞的人受不住苦,需要一个人作为心理慰藉,排解心中的空虚与无力......强者总是独行,而弱者才喜欢互相搀扶.\n\n但即便如此,我个人还是认为亲密关系是一件很美好的事.因为这样我才能有一种感觉,我所做的事不全是为了自己,也为某个对我来说重要的人.一想到如此,便有了继续奋斗的动力.\n\n![虫](/img/to.jpg)\n\n> *再苦的菜都有虫喜欢*\n\n## 996之后,迎来的不一定仅仅是ICU,还有可能是保安与镣铐\n\n在今年年末发生了两件事,一件事是网易员工因身患绝症被HR清出,在其后被保安赶走.另一件事是华为离职员工因离职赔偿问题被扣上\"敲诈勒索\"的帽子,被关押251天.\n\n这两起事件都足够说明一个问题:互联网企业压榨员工的现状并没有得到妥善改善,甚至还有变本加厉的可能.\n\n毕竟,我们真的不缺人.每年都有大量的年轻人想入行互联网行业,你不愿意996,自然有人等着顶替你的位置.这不是劳动法能解决的问题,因为你认为我违法,你可以选择不干.\n\n我们作为计算机专业的学生,对待这类事件,一定要引起重视.因为这个行业现在已经开始面临严重的内卷.有几个人,有几个公司,为了出头而搞什么\"狼性文化\",搞得别的公司为了不被淘汰,也被迫这么搞,直到最后全部的互联网公司都996,往哪去都没得跳. \t\n\n计算机专业,也许是知乎为数不多的几个不劝退的专业了.生物劝退,机械劝退,到了后面居然还出现了\"劝人学医天打雷劈\"这样的古怪说法......大家一边骂着996制度给人带来的压迫,一边拿着上万块的月薪和几万的年终奖,大呼\"真香\"......但许多人没有考虑到一个问题:那些喜欢在网络上发声的人,是否大多都比较成功?那么那些既996又拿不到多少钱的人呢?他们消失了吗?\n\n996的真正受害者,不是那些大厂员工.因为他们加班,是真的有钱拿.但996的风气一旦成型,有些在小公司上班的员工,本来工资就极其微薄,却还要由于这难逃的制度而被迫加班,最后败了身子,还拿不到钱.\n\n![996](/img/icu.png)\n\n## 在前面等着我的,还有什么\n\n在这一年里,我开始意识到:在时代的洪流中,个人的力量实在是太微小了.一次小小的政策调整,就直接影响了我大学四年在什么样层次的学校读书......若是再过十几年,这个行业发生什么动荡,是不是就意味着我先前所做全完蛋了?\n\n我在担心一个行业会发生什么动荡自然是在杞人忧天.计算机行业再怎么衰落,也是不会低于传统工科的下限的.如今第四次工业革命开始了,AI 物联网 下一代通信技术......,其发展都需要大量的计算机与电信人才作为支撑.在可预见的未来里,至少计算机行业仍旧会生生不息.\n\n但这也意味着,仅靠写点垃圾代码就可以混饭吃的时代结束了.以往,一个没有任何编程基础的人可能在辅导机构报一个Java编程班就可以去上班.到了今日,这种状况虽说还存在,但那些通过补习班来入职的低端员工的待遇已经大不如前.互联网行业的竞争越发激烈,只是凭着一张211毕业证就能拿到好offer的时代已经一去不复返了.\n\n所以,在前面等着我的是什么,我也不知道.现在很明显的是我要去读研,但在那之后呢?为了更高的工资和更优渥的工作环境,鬼知道我又会怎么想.\n\n我学计算机专业很大因素上是因为我热爱钻研有关计算机的东西,我上小学时就开始学着制作PPT,上初中则是参加机器人比赛,顺便把PS也给学了.上高中后,我接触到的东西就更多,多到我现在已经无法一一列举......后来上了大学,我本以为有很多和我怀着相似想法的人报考这个专业,但事实却截然相反.他们只是不讨厌计算机,或是觉得学这个能赚大钱......\n\n钱什么的,其实够用就行.研究计算机是我的乐趣,研究设计也是我的乐趣.我希望我一直维持着这种心态,仅此而已.\n\n## 消费主义与追求更好生活的欲望\n\n我在2019年寒假购入了一套A45+MDR-1A音频设备.这两个绝配的设备给了我曾未有过的音乐体验.后来我一上贴吧,才发现这不过是弟中弟水平.\n\n要想达到一个能听的水平,我得搞来一台ZX300A加上平衡线才行.在这之后是升级更好的耳机,买来更好的耳放或是上台机......我看着令人眼花缭乱的价目表,久久无言.\n\n耳机,游戏电脑,手机,相机等电子产品,都逃脱不了\"一分钱一分货,十分钱1.1分货,一百分钱1.11分货\"的情况:想要获得一些微小的提升,却要花费十几倍甚至百倍价格的资金!\n\n\"摄影穷三代，单反毁一生.\"可能人对于更高水平设备的要求总是无止境的吧......那些奢侈品,那些跑车与豪宅,那些令人感到眼花缭乱的饰品......这些事物究竟是欲望,还是艺术?\n\n很可惜,我不是身处于一个富人阶级,所以对于这些,可能我一生都触不可及.人的欲望一旦宣泄出来,就是一个无底洞,人总想要追求更多,更好,到了最后已经不知道自己在追求什么了.我深深地认为想要过上一个幸福的生活,就得先学着把心沉下来,不要为了那些纸醉金迷的玩意而心神不宁:那样怎么也没法得到幸福.\n\n为了使内心得到平静,去练字吧!练了一小会,觉得这个钢笔可能还不够好.工欲善其事,必先利其器,是时候升级钢笔了.\n\n## 终章:我该如何迎接我的2020\n\n2020终于要来了,断断续续写了这么多,总得给自己的新的一年来点期望和计划.\n\n首先,最为重要的自然是把分数搞上来.而其中最为要紧的自然是数学.我的数学底子一直不好,所以在大二开了一堆子数学课后,我可能会感到力不从心..为了避免这样的事情发生,我还是尽量提前预习一些为妙.\n\n其次,或是不能说其次,是与数学一样重要的计算机技术.在明年我打算深入学习C++,Java,node.js,Linux方面的内容,可能再附带学一些Python的基础.除语言之外,欲提高编程素养,算法与数据结构,设计模式是必不可少的内容,这些基础中的基础是将会决定我研究水平的上限.\n\n2020年我打算读至少20本文学类的读物,以此提升我的文化素养.2020年我希望能把体重减到150一下,并争取在引体向上这一项目上实现\"零的突破\".\n\n说实话,这些期望写在这里也许并无必要,因为它们早已作为项目安排在了我2020年的时间表上,我只需一一验收完成即可.相比于这些,更重要的好像是如何继续提升\"内力\".\n\n\"内力\"指的就是那些无法从外表或表现上看出来的能力.比如耐心,比如专注力,抗干扰力......这些能力的提升无法在社交活动上发挥任何作用,亦不能作为什么特长来展示.所以对于想要结识更多男男女女的现充而言,还是不要做这种吃力不讨好的事情为妙.\n\n","slug":"2019-12-27-19End","published":1,"updated":"2021-10-27T10:15:26.320Z","_id":"ckey85ujb000qho8a617v39cb","comments":1,"photos":[],"link":"","content":"<h2 id=\"在反思中开始的2019\"><a href=\"#在反思中开始的2019\" class=\"headerlink\" title=\"在反思中开始的2019\"></a>在反思中开始的2019</h2><p><img src=\"/img/2018end.png\" alt=\"2018年终总结\"></p>\n<p>2018年我给自己的年终总结是:我是傻逼.这句浓缩于我简短说说里的四个字包含了太多的我对2018年的反思.在那一年里,我做了数量极多的傻事,而其中的某些直至今日我想起都感到无比的羞耻与可笑.所以我极其希望能够在2019年开始后少做一些傻事.</p>\n<p>但接下来呢?我仍旧在做傻事的道路上越走越远.在这方面唯一不同的是我已经接受了在我身上会发生经常性大脑短路这一事实.所以,对于做傻事,我已经不纠结了.做就做呗,谁人没个糊涂的时候?</p>\n<h2 id=\"所以-不到残血不会玩是吗\"><a href=\"#所以-不到残血不会玩是吗\" class=\"headerlink\" title=\"所以,不到残血不会玩是吗\"></a>所以,不到残血不会玩是吗</h2><p><img src=\"\\img\\score.png\" alt=\"成绩报告\"  /></p>\n<p>2019年开始后的第一场考试给了我当头棒喝,这个不足以上线一本的分数竟然在这样一个时间点出现了.此时距离高考已不足6个月,若是你在这时对某个拿着这个分数的人说:”不用担心,努把力,你一定能考上211的”,他一定会觉得你的安慰过于虚假:只是知道211这个名词,就可以到处胡乱用吗?难道你没有考虑过要考上这样的学校意味着什么吗?</p>\n<p>令人感到欣喜的是:我的身边没有这样的人存在.因为他们的知识水平足够高,已经具备了基本的判断力.认为学渣会逆袭成功的人可能只有在人才辈出,说话不用考虑扯不扯淡的知乎和贴吧里才存在了.</p>\n<p>在我的身边不存在这样的人,怎么办呢?我只好开始走自我麻痹之路.首先是把所有算错的分和由于概念不清,背书不熟的分加上.由是,分数终于过了一本线,接下来是加上那些我认为我可以通过坑蒙拐骗来在高考中骗来的过程分,然后是加上我认为我可以通过自己的努力在下班学期里取得的分数.七拼八凑,胡搞蛮搞,这分数终于能上所差不多的211了.我看着这样的成绩,笑道:对嘛,这才是我真实的高考分数!此时我的脑中已经开始想象高考完到哪里去玩了.</p>\n<p>不得不说这自我麻痹的用处还挺大:那半年里我几乎没有感到任何的紧张.我甚至在那段时间还追了几部番,入坑了几款游戏,收了一套随身听和耳机(笑).要是你说我不务正业也罢了,反正我是认为没了那些东西做精神慰藉,我的成绩甚至还会下降.</p>\n<p>于是,就这样,我平静地度过了高中时期最后的6个月.在那六个月里我学了很多,也思考了很多.在那六个月里我写下了很多文字,记述了我的心理状态与一些对人生大义的思考.现在再翻开那本杂想录,我看到的是那时候的我,无比清醒地写下我对未来的期望与对自身应当如何追求正确价值观的讨论.现在的我已经离开了牢笼,再也无法平静下来思考这些所谓的”崇高理想”了.</p>\n<p>再后来的事情大家都知道了:我就这样莫名其妙地上了大学.</p>\n<h2 id=\"在遗憾之后-是新的开始\"><a href=\"#在遗憾之后-是新的开始\" class=\"headerlink\" title=\"在遗憾之后,是新的开始\"></a>在遗憾之后,是新的开始</h2><p>在那之后我入学了安徽大学,一所不好也不差的211大学.但我要说,我本应该入学哈尔滨工业大学,你会相信吗?</p>\n<p><img src=\"\\img\\zx.png\" style=\"zoom: 67%;\" /></p>\n<p>在”质心事件”,”解剖鱼事件”发生后,2019年的自招政策相比于2018年发生了大幅度缩水.在往年,竞赛降分40/60分已是常态,而到了2019年,却是最高只降20分.这样的降分,对于曾经花费了大量的时间在学科竞赛与创新性比赛上的人,实在是难以发挥什么实质性作用.</p>\n<p>于是,本人便由于这突然收紧的政策,错失了哈尔滨工业大学(威海)的录取通知书.那所在美丽的黄海边的学校从此与我无缘.好在我的高考考得不算太烂,不至于由于这方面的挫折彻底完蛋.</p>\n<p>2019届的考生注定是被高考改革献祭的一批考生.这一年的题目出得完全不按套路:数学的题序大改,创新题增多与理综的信息量加大使得许多考生无法适应,以至于逼上了复读的道路.相比于他们,我又是幸运的:我那死猪不怕开水烫的心理素质保证了我在任何时候都不会发生巨大的心态波动.于是我坦然地通过了这一次心理与精神上的双重考验.</p>\n<p>后来,我便来到了这所大学.虽说还是有那么一些小小的遗憾,但我仍旧感到知足:毕竟以我之前的水平,想上一所好点的一本都是困难的.既来之则安之.既然选择了这里,就好好开始新生活,向着下一个目标前进吧.</p>\n<p><em>2020.2.16补:现在自招彻底没了,搞了个强基计划……高考占比85%以上,有这时间学竞赛还不如带学带玩念三年书呢</em></p>\n<h2 id=\"再美好的计划也逃脱不了惰性\"><a href=\"#再美好的计划也逃脱不了惰性\" class=\"headerlink\" title=\"再美好的计划也逃脱不了惰性\"></a>再美好的计划也逃脱不了惰性</h2><p>我在高考前制定了一个宏伟的计划,要在暑假练字,看书,学C++,看经典电影,制作更多有意思的视频.但很遗憾的是,惰性把这些东西毁了大半:C++只是入门了一点,练字没能坚持,时间都浪费在了刷知乎与贴吧上面:鬼知道这些玩意怎么就这么耗时间?</p>\n<p>后来我明白了:再美好的计划也逃脱不了惰性.在暑假我想干什么就干什么,反倒使我陷入选择困难,以至于无事可干,只好拿手机消磨时间.现在我上了大学,由于数学基础羸弱而错失了ACM实验室的招新机会,由于没能完整地学完C++错失了字节的实习机会……原来机会就是这样错过的:你不早做准备,它便不给你留情面.当那些美好的计划被惰性毁灭时,其毁灭的也许就不止计划本身了.</p>\n<p>就在前几天,有一位学长在群里发了一则字节跳动招收寒假实习生的讯息.当我们班的一位同学问及:”我们也能参加吗”时,辅导员回了一句:你们还啥都不会呢.</p>\n<p>我当时无言.无言的原因之一是我们的辅导员对这一届学生属实是太没信心,以至于不相信我们班可能会存在已经自学了许多内容的人拿到这机会.无言的原因之二是:要是我在暑假时能完成学习C++的计划,也许我就能参加这次实习,告诉全班人:就是有这种人存在.</p>\n<p>但即便如此,我在计算机方面的学术水平依然处于领先地位.由于我有从事机器人编程的经验,曾在2017年的FLL英国国际公开赛中拿到最佳程序设计奖与场地赛冠军(这个奖是颁给团队的,不过考虑到编程的重要性,能拿到这个奖,我也算是做出了一些微小的贡献.最起码我写的程序在场上能够基本无视场地环境改变与电池电压等因素影响稳定发挥,容错率算是较高).我在高二时期也曾挑战过制作海报与制作MV,微电影,在此期间学到了许多设计上的技巧.唯一美中不足的就是我在高一升高二暑假期间学的Java烂尾了,否则我就可以带着一门编程语言的基础上大学了.</p>\n<p>不过既然现在我意识到了这个问题,就应当去做出些改变才是.否则还是说归说,懒还是一样的懒.</p>\n<h2 id=\"放弃多彩的校园生活-然后呢\"><a href=\"#放弃多彩的校园生活-然后呢\" class=\"headerlink\" title=\"放弃多彩的校园生活,然后呢\"></a>放弃多彩的校园生活,然后呢</h2><p>在刚开学时,我就立下一个志向:不要去碰那些类似于现充社团,学生会等充斥着无用社交的活动,精心提升自己的学术水平与”内力”,不要去太过于在意类似于外表,社交圈子,社会地位之类的无用的事物.然而,这样做的话,我就很显然的要与多彩的校园生活说再见了.</p>\n<blockquote>\n<p>We’ve been gaining one good thing through losing another.</p>\n<p>I’m so proud to be with you, my love.</p>\n<p>Now you know the meaning of sunshine after rain.</p>\n<p>Let me tell you life is good my friend.</p>\n</blockquote>\n<p>既然我放弃了这些,不做出些事业似乎就是说不过去的事了.要是我不仅丢掉了社交,还丢掉了学习与科研,那就是在闹笑话了.有的人选择热热闹闹地度过大学四年,而我选择平稳安静地度过大学四年.热热闹闹地度过大学四年太耗精力,并且容易使一个人的精神长期处于兴奋状态,在这种状态下,自然就难以静下心来做出点成果.</p>\n<p>做出成果……谁都想做出成果.然而即便放弃了这些,耐心依旧是决定性因素.</p>\n<h2 id=\"在这个时代-人们不需要亲密关系\"><a href=\"#在这个时代-人们不需要亲密关系\" class=\"headerlink\" title=\"在这个时代,人们不需要亲密关系\"></a>在这个时代,人们不需要亲密关系</h2><p>单身是一件在这个时代很自由很美好的事情,所以我们不再有必要和别人产生联系.既然我们有影视与游戏,炸鸡与啤酒,那么我们何必去为了脱单而煞费苦心呢?</p>\n<p>诚然,在这个时代,有太多的东西值得我们去沉迷,并在此上面浪费时间.由是,恋爱,这一在以往看作是大学生活必不可少的事情,在如今变得越来越不重要.越来越少的人有脱单的想法,因为他/她们的生活幸福美满,又少有生活压力.没有压力也就意味着没有必要去找一个伴侣去与自己同甘共苦.就算要去找一个伴侣,我想大多数的人也只想”同甘”而不愿意”共苦”.毕竟我有那么多选择,我不去选择那些能带我玩,讲好听撩人的情话的,我还来选择那些沉闷的,三句不离学术话题的,简直是脑子有问题.毕竟,相信一个人能够得到良好的发展,并在背后支持其的风险实在太大,我只要等你有一日出头了和你”同甘”就得了.</p>\n<p>所以,人们不需要亲密关系.有的人觉得产生亲密关系是纯属浪费时间,消耗钱财,吃力不讨好,还容易影响情绪的破事;有的人认为亲密关系本质上就是青春期荷尔蒙过剩,性激素分泌旺盛的产物;有的人认为亲密关系的产生不过就是某些耐不住寂寞的人受不住苦,需要一个人作为心理慰藉,排解心中的空虚与无力……强者总是独行,而弱者才喜欢互相搀扶.</p>\n<p>但即便如此,我个人还是认为亲密关系是一件很美好的事.因为这样我才能有一种感觉,我所做的事不全是为了自己,也为某个对我来说重要的人.一想到如此,便有了继续奋斗的动力.</p>\n<p><img src=\"/img/to.jpg\" alt=\"虫\"></p>\n<blockquote>\n<p><em>再苦的菜都有虫喜欢</em></p>\n</blockquote>\n<h2 id=\"996之后-迎来的不一定仅仅是ICU-还有可能是保安与镣铐\"><a href=\"#996之后-迎来的不一定仅仅是ICU-还有可能是保安与镣铐\" class=\"headerlink\" title=\"996之后,迎来的不一定仅仅是ICU,还有可能是保安与镣铐\"></a>996之后,迎来的不一定仅仅是ICU,还有可能是保安与镣铐</h2><p>在今年年末发生了两件事,一件事是网易员工因身患绝症被HR清出,在其后被保安赶走.另一件事是华为离职员工因离职赔偿问题被扣上”敲诈勒索”的帽子,被关押251天.</p>\n<p>这两起事件都足够说明一个问题:互联网企业压榨员工的现状并没有得到妥善改善,甚至还有变本加厉的可能.</p>\n<p>毕竟,我们真的不缺人.每年都有大量的年轻人想入行互联网行业,你不愿意996,自然有人等着顶替你的位置.这不是劳动法能解决的问题,因为你认为我违法,你可以选择不干.</p>\n<p>我们作为计算机专业的学生,对待这类事件,一定要引起重视.因为这个行业现在已经开始面临严重的内卷.有几个人,有几个公司,为了出头而搞什么”狼性文化”,搞得别的公司为了不被淘汰,也被迫这么搞,直到最后全部的互联网公司都996,往哪去都没得跳.     </p>\n<p>计算机专业,也许是知乎为数不多的几个不劝退的专业了.生物劝退,机械劝退,到了后面居然还出现了”劝人学医天打雷劈”这样的古怪说法……大家一边骂着996制度给人带来的压迫,一边拿着上万块的月薪和几万的年终奖,大呼”真香”……但许多人没有考虑到一个问题:那些喜欢在网络上发声的人,是否大多都比较成功?那么那些既996又拿不到多少钱的人呢?他们消失了吗?</p>\n<p>996的真正受害者,不是那些大厂员工.因为他们加班,是真的有钱拿.但996的风气一旦成型,有些在小公司上班的员工,本来工资就极其微薄,却还要由于这难逃的制度而被迫加班,最后败了身子,还拿不到钱.</p>\n<p><img src=\"/img/icu.png\" alt=\"996\"></p>\n<h2 id=\"在前面等着我的-还有什么\"><a href=\"#在前面等着我的-还有什么\" class=\"headerlink\" title=\"在前面等着我的,还有什么\"></a>在前面等着我的,还有什么</h2><p>在这一年里,我开始意识到:在时代的洪流中,个人的力量实在是太微小了.一次小小的政策调整,就直接影响了我大学四年在什么样层次的学校读书……若是再过十几年,这个行业发生什么动荡,是不是就意味着我先前所做全完蛋了?</p>\n<p>我在担心一个行业会发生什么动荡自然是在杞人忧天.计算机行业再怎么衰落,也是不会低于传统工科的下限的.如今第四次工业革命开始了,AI 物联网 下一代通信技术……,其发展都需要大量的计算机与电信人才作为支撑.在可预见的未来里,至少计算机行业仍旧会生生不息.</p>\n<p>但这也意味着,仅靠写点垃圾代码就可以混饭吃的时代结束了.以往,一个没有任何编程基础的人可能在辅导机构报一个Java编程班就可以去上班.到了今日,这种状况虽说还存在,但那些通过补习班来入职的低端员工的待遇已经大不如前.互联网行业的竞争越发激烈,只是凭着一张211毕业证就能拿到好offer的时代已经一去不复返了.</p>\n<p>所以,在前面等着我的是什么,我也不知道.现在很明显的是我要去读研,但在那之后呢?为了更高的工资和更优渥的工作环境,鬼知道我又会怎么想.</p>\n<p>我学计算机专业很大因素上是因为我热爱钻研有关计算机的东西,我上小学时就开始学着制作PPT,上初中则是参加机器人比赛,顺便把PS也给学了.上高中后,我接触到的东西就更多,多到我现在已经无法一一列举……后来上了大学,我本以为有很多和我怀着相似想法的人报考这个专业,但事实却截然相反.他们只是不讨厌计算机,或是觉得学这个能赚大钱……</p>\n<p>钱什么的,其实够用就行.研究计算机是我的乐趣,研究设计也是我的乐趣.我希望我一直维持着这种心态,仅此而已.</p>\n<h2 id=\"消费主义与追求更好生活的欲望\"><a href=\"#消费主义与追求更好生活的欲望\" class=\"headerlink\" title=\"消费主义与追求更好生活的欲望\"></a>消费主义与追求更好生活的欲望</h2><p>我在2019年寒假购入了一套A45+MDR-1A音频设备.这两个绝配的设备给了我曾未有过的音乐体验.后来我一上贴吧,才发现这不过是弟中弟水平.</p>\n<p>要想达到一个能听的水平,我得搞来一台ZX300A加上平衡线才行.在这之后是升级更好的耳机,买来更好的耳放或是上台机……我看着令人眼花缭乱的价目表,久久无言.</p>\n<p>耳机,游戏电脑,手机,相机等电子产品,都逃脱不了”一分钱一分货,十分钱1.1分货,一百分钱1.11分货”的情况:想要获得一些微小的提升,却要花费十几倍甚至百倍价格的资金!</p>\n<p>“摄影穷三代，单反毁一生.”可能人对于更高水平设备的要求总是无止境的吧……那些奢侈品,那些跑车与豪宅,那些令人感到眼花缭乱的饰品……这些事物究竟是欲望,还是艺术?</p>\n<p>很可惜,我不是身处于一个富人阶级,所以对于这些,可能我一生都触不可及.人的欲望一旦宣泄出来,就是一个无底洞,人总想要追求更多,更好,到了最后已经不知道自己在追求什么了.我深深地认为想要过上一个幸福的生活,就得先学着把心沉下来,不要为了那些纸醉金迷的玩意而心神不宁:那样怎么也没法得到幸福.</p>\n<p>为了使内心得到平静,去练字吧!练了一小会,觉得这个钢笔可能还不够好.工欲善其事,必先利其器,是时候升级钢笔了.</p>\n<h2 id=\"终章-我该如何迎接我的2020\"><a href=\"#终章-我该如何迎接我的2020\" class=\"headerlink\" title=\"终章:我该如何迎接我的2020\"></a>终章:我该如何迎接我的2020</h2><p>2020终于要来了,断断续续写了这么多,总得给自己的新的一年来点期望和计划.</p>\n<p>首先,最为重要的自然是把分数搞上来.而其中最为要紧的自然是数学.我的数学底子一直不好,所以在大二开了一堆子数学课后,我可能会感到力不从心..为了避免这样的事情发生,我还是尽量提前预习一些为妙.</p>\n<p>其次,或是不能说其次,是与数学一样重要的计算机技术.在明年我打算深入学习C++,Java,node.js,Linux方面的内容,可能再附带学一些Python的基础.除语言之外,欲提高编程素养,算法与数据结构,设计模式是必不可少的内容,这些基础中的基础是将会决定我研究水平的上限.</p>\n<p>2020年我打算读至少20本文学类的读物,以此提升我的文化素养.2020年我希望能把体重减到150一下,并争取在引体向上这一项目上实现”零的突破”.</p>\n<p>说实话,这些期望写在这里也许并无必要,因为它们早已作为项目安排在了我2020年的时间表上,我只需一一验收完成即可.相比于这些,更重要的好像是如何继续提升”内力”.</p>\n<p>“内力”指的就是那些无法从外表或表现上看出来的能力.比如耐心,比如专注力,抗干扰力……这些能力的提升无法在社交活动上发挥任何作用,亦不能作为什么特长来展示.所以对于想要结识更多男男女女的现充而言,还是不要做这种吃力不讨好的事情为妙.</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"在反思中开始的2019\"><a href=\"#在反思中开始的2019\" class=\"headerlink\" title=\"在反思中开始的2019\"></a>在反思中开始的2019</h2><p><img src=\"/img/2018end.png\" alt=\"2018年终总结\"></p>\n<p>2018年我给自己的年终总结是:我是傻逼.这句浓缩于我简短说说里的四个字包含了太多的我对2018年的反思.在那一年里,我做了数量极多的傻事,而其中的某些直至今日我想起都感到无比的羞耻与可笑.所以我极其希望能够在2019年开始后少做一些傻事.</p>\n<p>但接下来呢?我仍旧在做傻事的道路上越走越远.在这方面唯一不同的是我已经接受了在我身上会发生经常性大脑短路这一事实.所以,对于做傻事,我已经不纠结了.做就做呗,谁人没个糊涂的时候?</p>\n<h2 id=\"所以-不到残血不会玩是吗\"><a href=\"#所以-不到残血不会玩是吗\" class=\"headerlink\" title=\"所以,不到残血不会玩是吗\"></a>所以,不到残血不会玩是吗</h2><p><img src=\"\\img\\score.png\" alt=\"成绩报告\"  /></p>\n<p>2019年开始后的第一场考试给了我当头棒喝,这个不足以上线一本的分数竟然在这样一个时间点出现了.此时距离高考已不足6个月,若是你在这时对某个拿着这个分数的人说:”不用担心,努把力,你一定能考上211的”,他一定会觉得你的安慰过于虚假:只是知道211这个名词,就可以到处胡乱用吗?难道你没有考虑过要考上这样的学校意味着什么吗?</p>\n<p>令人感到欣喜的是:我的身边没有这样的人存在.因为他们的知识水平足够高,已经具备了基本的判断力.认为学渣会逆袭成功的人可能只有在人才辈出,说话不用考虑扯不扯淡的知乎和贴吧里才存在了.</p>\n<p>在我的身边不存在这样的人,怎么办呢?我只好开始走自我麻痹之路.首先是把所有算错的分和由于概念不清,背书不熟的分加上.由是,分数终于过了一本线,接下来是加上那些我认为我可以通过坑蒙拐骗来在高考中骗来的过程分,然后是加上我认为我可以通过自己的努力在下班学期里取得的分数.七拼八凑,胡搞蛮搞,这分数终于能上所差不多的211了.我看着这样的成绩,笑道:对嘛,这才是我真实的高考分数!此时我的脑中已经开始想象高考完到哪里去玩了.</p>\n<p>不得不说这自我麻痹的用处还挺大:那半年里我几乎没有感到任何的紧张.我甚至在那段时间还追了几部番,入坑了几款游戏,收了一套随身听和耳机(笑).要是你说我不务正业也罢了,反正我是认为没了那些东西做精神慰藉,我的成绩甚至还会下降.</p>\n<p>于是,就这样,我平静地度过了高中时期最后的6个月.在那六个月里我学了很多,也思考了很多.在那六个月里我写下了很多文字,记述了我的心理状态与一些对人生大义的思考.现在再翻开那本杂想录,我看到的是那时候的我,无比清醒地写下我对未来的期望与对自身应当如何追求正确价值观的讨论.现在的我已经离开了牢笼,再也无法平静下来思考这些所谓的”崇高理想”了.</p>\n<p>再后来的事情大家都知道了:我就这样莫名其妙地上了大学.</p>\n<h2 id=\"在遗憾之后-是新的开始\"><a href=\"#在遗憾之后-是新的开始\" class=\"headerlink\" title=\"在遗憾之后,是新的开始\"></a>在遗憾之后,是新的开始</h2><p>在那之后我入学了安徽大学,一所不好也不差的211大学.但我要说,我本应该入学哈尔滨工业大学,你会相信吗?</p>\n<p><img src=\"\\img\\zx.png\" style=\"zoom: 67%;\" /></p>\n<p>在”质心事件”,”解剖鱼事件”发生后,2019年的自招政策相比于2018年发生了大幅度缩水.在往年,竞赛降分40/60分已是常态,而到了2019年,却是最高只降20分.这样的降分,对于曾经花费了大量的时间在学科竞赛与创新性比赛上的人,实在是难以发挥什么实质性作用.</p>\n<p>于是,本人便由于这突然收紧的政策,错失了哈尔滨工业大学(威海)的录取通知书.那所在美丽的黄海边的学校从此与我无缘.好在我的高考考得不算太烂,不至于由于这方面的挫折彻底完蛋.</p>\n<p>2019届的考生注定是被高考改革献祭的一批考生.这一年的题目出得完全不按套路:数学的题序大改,创新题增多与理综的信息量加大使得许多考生无法适应,以至于逼上了复读的道路.相比于他们,我又是幸运的:我那死猪不怕开水烫的心理素质保证了我在任何时候都不会发生巨大的心态波动.于是我坦然地通过了这一次心理与精神上的双重考验.</p>\n<p>后来,我便来到了这所大学.虽说还是有那么一些小小的遗憾,但我仍旧感到知足:毕竟以我之前的水平,想上一所好点的一本都是困难的.既来之则安之.既然选择了这里,就好好开始新生活,向着下一个目标前进吧.</p>\n<p><em>2020.2.16补:现在自招彻底没了,搞了个强基计划……高考占比85%以上,有这时间学竞赛还不如带学带玩念三年书呢</em></p>\n<h2 id=\"再美好的计划也逃脱不了惰性\"><a href=\"#再美好的计划也逃脱不了惰性\" class=\"headerlink\" title=\"再美好的计划也逃脱不了惰性\"></a>再美好的计划也逃脱不了惰性</h2><p>我在高考前制定了一个宏伟的计划,要在暑假练字,看书,学C++,看经典电影,制作更多有意思的视频.但很遗憾的是,惰性把这些东西毁了大半:C++只是入门了一点,练字没能坚持,时间都浪费在了刷知乎与贴吧上面:鬼知道这些玩意怎么就这么耗时间?</p>\n<p>后来我明白了:再美好的计划也逃脱不了惰性.在暑假我想干什么就干什么,反倒使我陷入选择困难,以至于无事可干,只好拿手机消磨时间.现在我上了大学,由于数学基础羸弱而错失了ACM实验室的招新机会,由于没能完整地学完C++错失了字节的实习机会……原来机会就是这样错过的:你不早做准备,它便不给你留情面.当那些美好的计划被惰性毁灭时,其毁灭的也许就不止计划本身了.</p>\n<p>就在前几天,有一位学长在群里发了一则字节跳动招收寒假实习生的讯息.当我们班的一位同学问及:”我们也能参加吗”时,辅导员回了一句:你们还啥都不会呢.</p>\n<p>我当时无言.无言的原因之一是我们的辅导员对这一届学生属实是太没信心,以至于不相信我们班可能会存在已经自学了许多内容的人拿到这机会.无言的原因之二是:要是我在暑假时能完成学习C++的计划,也许我就能参加这次实习,告诉全班人:就是有这种人存在.</p>\n<p>但即便如此,我在计算机方面的学术水平依然处于领先地位.由于我有从事机器人编程的经验,曾在2017年的FLL英国国际公开赛中拿到最佳程序设计奖与场地赛冠军(这个奖是颁给团队的,不过考虑到编程的重要性,能拿到这个奖,我也算是做出了一些微小的贡献.最起码我写的程序在场上能够基本无视场地环境改变与电池电压等因素影响稳定发挥,容错率算是较高).我在高二时期也曾挑战过制作海报与制作MV,微电影,在此期间学到了许多设计上的技巧.唯一美中不足的就是我在高一升高二暑假期间学的Java烂尾了,否则我就可以带着一门编程语言的基础上大学了.</p>\n<p>不过既然现在我意识到了这个问题,就应当去做出些改变才是.否则还是说归说,懒还是一样的懒.</p>\n<h2 id=\"放弃多彩的校园生活-然后呢\"><a href=\"#放弃多彩的校园生活-然后呢\" class=\"headerlink\" title=\"放弃多彩的校园生活,然后呢\"></a>放弃多彩的校园生活,然后呢</h2><p>在刚开学时,我就立下一个志向:不要去碰那些类似于现充社团,学生会等充斥着无用社交的活动,精心提升自己的学术水平与”内力”,不要去太过于在意类似于外表,社交圈子,社会地位之类的无用的事物.然而,这样做的话,我就很显然的要与多彩的校园生活说再见了.</p>\n<blockquote>\n<p>We’ve been gaining one good thing through losing another.</p>\n<p>I’m so proud to be with you, my love.</p>\n<p>Now you know the meaning of sunshine after rain.</p>\n<p>Let me tell you life is good my friend.</p>\n</blockquote>\n<p>既然我放弃了这些,不做出些事业似乎就是说不过去的事了.要是我不仅丢掉了社交,还丢掉了学习与科研,那就是在闹笑话了.有的人选择热热闹闹地度过大学四年,而我选择平稳安静地度过大学四年.热热闹闹地度过大学四年太耗精力,并且容易使一个人的精神长期处于兴奋状态,在这种状态下,自然就难以静下心来做出点成果.</p>\n<p>做出成果……谁都想做出成果.然而即便放弃了这些,耐心依旧是决定性因素.</p>\n<h2 id=\"在这个时代-人们不需要亲密关系\"><a href=\"#在这个时代-人们不需要亲密关系\" class=\"headerlink\" title=\"在这个时代,人们不需要亲密关系\"></a>在这个时代,人们不需要亲密关系</h2><p>单身是一件在这个时代很自由很美好的事情,所以我们不再有必要和别人产生联系.既然我们有影视与游戏,炸鸡与啤酒,那么我们何必去为了脱单而煞费苦心呢?</p>\n<p>诚然,在这个时代,有太多的东西值得我们去沉迷,并在此上面浪费时间.由是,恋爱,这一在以往看作是大学生活必不可少的事情,在如今变得越来越不重要.越来越少的人有脱单的想法,因为他/她们的生活幸福美满,又少有生活压力.没有压力也就意味着没有必要去找一个伴侣去与自己同甘共苦.就算要去找一个伴侣,我想大多数的人也只想”同甘”而不愿意”共苦”.毕竟我有那么多选择,我不去选择那些能带我玩,讲好听撩人的情话的,我还来选择那些沉闷的,三句不离学术话题的,简直是脑子有问题.毕竟,相信一个人能够得到良好的发展,并在背后支持其的风险实在太大,我只要等你有一日出头了和你”同甘”就得了.</p>\n<p>所以,人们不需要亲密关系.有的人觉得产生亲密关系是纯属浪费时间,消耗钱财,吃力不讨好,还容易影响情绪的破事;有的人认为亲密关系本质上就是青春期荷尔蒙过剩,性激素分泌旺盛的产物;有的人认为亲密关系的产生不过就是某些耐不住寂寞的人受不住苦,需要一个人作为心理慰藉,排解心中的空虚与无力……强者总是独行,而弱者才喜欢互相搀扶.</p>\n<p>但即便如此,我个人还是认为亲密关系是一件很美好的事.因为这样我才能有一种感觉,我所做的事不全是为了自己,也为某个对我来说重要的人.一想到如此,便有了继续奋斗的动力.</p>\n<p><img src=\"/img/to.jpg\" alt=\"虫\"></p>\n<blockquote>\n<p><em>再苦的菜都有虫喜欢</em></p>\n</blockquote>\n<h2 id=\"996之后-迎来的不一定仅仅是ICU-还有可能是保安与镣铐\"><a href=\"#996之后-迎来的不一定仅仅是ICU-还有可能是保安与镣铐\" class=\"headerlink\" title=\"996之后,迎来的不一定仅仅是ICU,还有可能是保安与镣铐\"></a>996之后,迎来的不一定仅仅是ICU,还有可能是保安与镣铐</h2><p>在今年年末发生了两件事,一件事是网易员工因身患绝症被HR清出,在其后被保安赶走.另一件事是华为离职员工因离职赔偿问题被扣上”敲诈勒索”的帽子,被关押251天.</p>\n<p>这两起事件都足够说明一个问题:互联网企业压榨员工的现状并没有得到妥善改善,甚至还有变本加厉的可能.</p>\n<p>毕竟,我们真的不缺人.每年都有大量的年轻人想入行互联网行业,你不愿意996,自然有人等着顶替你的位置.这不是劳动法能解决的问题,因为你认为我违法,你可以选择不干.</p>\n<p>我们作为计算机专业的学生,对待这类事件,一定要引起重视.因为这个行业现在已经开始面临严重的内卷.有几个人,有几个公司,为了出头而搞什么”狼性文化”,搞得别的公司为了不被淘汰,也被迫这么搞,直到最后全部的互联网公司都996,往哪去都没得跳.     </p>\n<p>计算机专业,也许是知乎为数不多的几个不劝退的专业了.生物劝退,机械劝退,到了后面居然还出现了”劝人学医天打雷劈”这样的古怪说法……大家一边骂着996制度给人带来的压迫,一边拿着上万块的月薪和几万的年终奖,大呼”真香”……但许多人没有考虑到一个问题:那些喜欢在网络上发声的人,是否大多都比较成功?那么那些既996又拿不到多少钱的人呢?他们消失了吗?</p>\n<p>996的真正受害者,不是那些大厂员工.因为他们加班,是真的有钱拿.但996的风气一旦成型,有些在小公司上班的员工,本来工资就极其微薄,却还要由于这难逃的制度而被迫加班,最后败了身子,还拿不到钱.</p>\n<p><img src=\"/img/icu.png\" alt=\"996\"></p>\n<h2 id=\"在前面等着我的-还有什么\"><a href=\"#在前面等着我的-还有什么\" class=\"headerlink\" title=\"在前面等着我的,还有什么\"></a>在前面等着我的,还有什么</h2><p>在这一年里,我开始意识到:在时代的洪流中,个人的力量实在是太微小了.一次小小的政策调整,就直接影响了我大学四年在什么样层次的学校读书……若是再过十几年,这个行业发生什么动荡,是不是就意味着我先前所做全完蛋了?</p>\n<p>我在担心一个行业会发生什么动荡自然是在杞人忧天.计算机行业再怎么衰落,也是不会低于传统工科的下限的.如今第四次工业革命开始了,AI 物联网 下一代通信技术……,其发展都需要大量的计算机与电信人才作为支撑.在可预见的未来里,至少计算机行业仍旧会生生不息.</p>\n<p>但这也意味着,仅靠写点垃圾代码就可以混饭吃的时代结束了.以往,一个没有任何编程基础的人可能在辅导机构报一个Java编程班就可以去上班.到了今日,这种状况虽说还存在,但那些通过补习班来入职的低端员工的待遇已经大不如前.互联网行业的竞争越发激烈,只是凭着一张211毕业证就能拿到好offer的时代已经一去不复返了.</p>\n<p>所以,在前面等着我的是什么,我也不知道.现在很明显的是我要去读研,但在那之后呢?为了更高的工资和更优渥的工作环境,鬼知道我又会怎么想.</p>\n<p>我学计算机专业很大因素上是因为我热爱钻研有关计算机的东西,我上小学时就开始学着制作PPT,上初中则是参加机器人比赛,顺便把PS也给学了.上高中后,我接触到的东西就更多,多到我现在已经无法一一列举……后来上了大学,我本以为有很多和我怀着相似想法的人报考这个专业,但事实却截然相反.他们只是不讨厌计算机,或是觉得学这个能赚大钱……</p>\n<p>钱什么的,其实够用就行.研究计算机是我的乐趣,研究设计也是我的乐趣.我希望我一直维持着这种心态,仅此而已.</p>\n<h2 id=\"消费主义与追求更好生活的欲望\"><a href=\"#消费主义与追求更好生活的欲望\" class=\"headerlink\" title=\"消费主义与追求更好生活的欲望\"></a>消费主义与追求更好生活的欲望</h2><p>我在2019年寒假购入了一套A45+MDR-1A音频设备.这两个绝配的设备给了我曾未有过的音乐体验.后来我一上贴吧,才发现这不过是弟中弟水平.</p>\n<p>要想达到一个能听的水平,我得搞来一台ZX300A加上平衡线才行.在这之后是升级更好的耳机,买来更好的耳放或是上台机……我看着令人眼花缭乱的价目表,久久无言.</p>\n<p>耳机,游戏电脑,手机,相机等电子产品,都逃脱不了”一分钱一分货,十分钱1.1分货,一百分钱1.11分货”的情况:想要获得一些微小的提升,却要花费十几倍甚至百倍价格的资金!</p>\n<p>“摄影穷三代，单反毁一生.”可能人对于更高水平设备的要求总是无止境的吧……那些奢侈品,那些跑车与豪宅,那些令人感到眼花缭乱的饰品……这些事物究竟是欲望,还是艺术?</p>\n<p>很可惜,我不是身处于一个富人阶级,所以对于这些,可能我一生都触不可及.人的欲望一旦宣泄出来,就是一个无底洞,人总想要追求更多,更好,到了最后已经不知道自己在追求什么了.我深深地认为想要过上一个幸福的生活,就得先学着把心沉下来,不要为了那些纸醉金迷的玩意而心神不宁:那样怎么也没法得到幸福.</p>\n<p>为了使内心得到平静,去练字吧!练了一小会,觉得这个钢笔可能还不够好.工欲善其事,必先利其器,是时候升级钢笔了.</p>\n<h2 id=\"终章-我该如何迎接我的2020\"><a href=\"#终章-我该如何迎接我的2020\" class=\"headerlink\" title=\"终章:我该如何迎接我的2020\"></a>终章:我该如何迎接我的2020</h2><p>2020终于要来了,断断续续写了这么多,总得给自己的新的一年来点期望和计划.</p>\n<p>首先,最为重要的自然是把分数搞上来.而其中最为要紧的自然是数学.我的数学底子一直不好,所以在大二开了一堆子数学课后,我可能会感到力不从心..为了避免这样的事情发生,我还是尽量提前预习一些为妙.</p>\n<p>其次,或是不能说其次,是与数学一样重要的计算机技术.在明年我打算深入学习C++,Java,node.js,Linux方面的内容,可能再附带学一些Python的基础.除语言之外,欲提高编程素养,算法与数据结构,设计模式是必不可少的内容,这些基础中的基础是将会决定我研究水平的上限.</p>\n<p>2020年我打算读至少20本文学类的读物,以此提升我的文化素养.2020年我希望能把体重减到150一下,并争取在引体向上这一项目上实现”零的突破”.</p>\n<p>说实话,这些期望写在这里也许并无必要,因为它们早已作为项目安排在了我2020年的时间表上,我只需一一验收完成即可.相比于这些,更重要的好像是如何继续提升”内力”.</p>\n<p>“内力”指的就是那些无法从外表或表现上看出来的能力.比如耐心,比如专注力,抗干扰力……这些能力的提升无法在社交活动上发挥任何作用,亦不能作为什么特长来展示.所以对于想要结识更多男男女女的现充而言,还是不要做这种吃力不讨好的事情为妙.</p>\n"},{"layout":"post","title":"数据结构1:表、栈和队列","intro":"","date":"2020-02-17T08:13:00.000Z","author":"Makinohara","catalog":true,"_content":"\n\n\n# 前导知识\n\n## 时间复杂度\n\n增长率的大O记法:\n\nO(N^2):以二次方级别增长\n\n**一般计算法则:**\n\nfor循环:循环内语句时间*迭代次数\n\n嵌套循环:N^(循环嵌套数)\n\n顺序语句:单纯的将各段的时间相加\n\nif/else:取时间较长者计算\n\n**时间复杂度中的对数:**\n\n程序每次用O(1)时间将问题大小削减为一部分(通常为1/2,二分搜索)\n\n此时时间复杂度为O(logN)\n\n运用分治算法也可以实现一些复杂度为对数的时间复杂度算法.\n\n# 数据结构实现\n\n## 数据结构的表示\n\n```c++\nADT structureName;\n{\n    Data\n\t{\n \t   var a;\n \t   var b;\n \t   //......\n\t}\n\tOperation\n\t{\n \t   Ope1{\n \t       initial condition;\n \t       Operation results;\n\t    }\n \t   Ope2;\n \t   //......\n\t}\n}\n\n```\n\n\n\n## 数组(Array):最简单的表ADT(抽象数据结构)实现\n\n数组是最基本的数据结构,虽然我们在学C++和C时已经了解过,但深入探讨一下数组仍旧很有必要.\n\n 数组是可以再内存中连续存储多个元素的结构，在内存中的分配也是连续的，数组中的元素通过数组下标进行访问，**数组下标从0开始**。\n\nC++实现:\n\n```c++\nint arr[5];//建立数组\nint arr[5]={0};//建立数组时顺便全部初始化为0\nint *p = new int[5];//运行时创建数组\ndelete[] p;//释放内存\n```\n\n优点：\n1、按照索引查询元素速度快\n2、按照索引遍历数组方便\n\n缺点：\n1、数组的大小固定后就无法扩容了\n2、数组只能存储一种类型的数据\n3、添加，删除的操作慢，因为要移动其他的元素。\n\n4.需要一整块连续的存储空间,这个要求就很苛刻,这意味着你没法开很大的数组.\n\n适用场景：\n频繁查询，对存储空间要求不大，很少增加和删除的情况。\n\n## 栈(stack)\n\n接下来讨论栈ADT:\n\n栈可以通过表来实现,任何一种实现表的方法都可以实现栈.\n\n栈只能读取并操作栈顶元素,因此其可以使用一个简单链表来轻松实现:\n\n在链表的最后一个元素的右边直接插入数据.\n\n接下来使用链表式结构实现一个栈，并能做到在其中查找最小值\n\n```c++\n#include <bits/stdc++.h>\n\nusing namespace std;\nclass Node\n{\npublic:\n    int value = 0;\n    Node *next;\n};\n\nclass MinStack\n{\npublic:\n    Node *topNode;\n    int min;\n    bool isFirst = true;\n    /** initialize your data structure here. */\n    MinStack()\n    {\n        topNode = NULL;\n    }\n\n    void push(int x)\n    {\n        Node *currentNode = new Node;\n        currentNode->value = x;\n        currentNode->next = topNode;\n        topNode = currentNode;\n        if (isFirst)\n        {\n            min = x;\n            isFirst = false;\n        }\n        if (x < min)\n        {\n            min = x;\n        }\n    }\n\n    void pop()\n    {\n        \n        if (topNode->value == min)//如果栈顶数为最小值的处理方式\n        {\n            Node *search = topNode;\n            if (search->next != NULL)//注意这里的坑：如果是取最后一个结点，则清空栈\n            {\n                min = search->next->value;\n            }\n            else\n            {\n                isFirst = true;\n            }\n            while (search->next != NULL)\n            {\n                search = search->next;\n                if (search->value < min)\n                {\n                    min = search->value;\n                }\n            }\n        }\n        topNode = topNode->next;\n    }\n\n    int top()\n    {\n        return topNode->value;\n    }\n\n    int getMin()\n    {\n        return min;\n    }\n};\n\n/**\n * Your MinStack object will be instantiated and called as such:\n * MinStack* obj = new MinStack();\n * obj->push(x);\n * obj->pop();\n * int param_3 = obj->top();\n * int param_4 = obj->getMin();\n */\n```\n\n使用一个动态数组也可以简单的实现栈,c++中的模板类vector提供了\n\n```c++\nvector.push_back();\nvector.pop_back();\n```\n\n功能.\n\n栈是最适合实现递归的一种数据结构,我们可以使用栈的思想实现一个逆波兰计算器.\n\n```c++\n//逆波兰计算器(从一个string数组提取输入)\nclass Solution {\npublic:\n    int evalRPN(std::vector<std::string>& tokens) {\n        std::stack<int> cacuList;\n        std::vector<std::string>::iterator cacuValue = tokens.begin();\n        while(cacuValue != tokens.end())\n        {\n            if(cacuValue->length() == 1) {            //在位数为1时确认为符号或数字，将负号与减号分开\n                if ((*cacuValue)[0] == '+') {\n                    int top, res;\n                    top = cacuList.top();\n                    cacuList.pop();\n                    res = cacuList.top() + top;\n                    cacuList.pop();\n                    cacuList.push(res);\n                }\n                else if ((*cacuValue)[0] == '-') {\n                    int top, res;\n                    top = cacuList.top();\n                    cacuList.pop();\n                    res = cacuList.top() - top;\n                    cacuList.pop();\n                    cacuList.push(res);\n                }\n                else if ((*cacuValue)[0] == '*') {\n                    int top, res;\n                    top = cacuList.top();\n                    cacuList.pop();\n                    res = cacuList.top() * top;\n                    cacuList.pop();\n                    cacuList.push(res);\n                }\n                else if ((*cacuValue)[0] == '/') {\n                    int top, res;\n                    top = cacuList.top();\n                    cacuList.pop();\n                    res = cacuList.top() / top;\n                    cacuList.pop();\n                    cacuList.push(res);\n                } else {\n                    cacuList.push((*cacuValue)[0]-'0');\n                }\n            }\n            else{\n                int inputNumber=0;\n                int i=0;\n                bool rev = false;\n                int digit = cacuValue->length() - 1;\n                if((*cacuValue)[0] == '-')\n                {\n                    i++;\n                    rev = true;\n                    digit--;\n                }\n                for (; i < cacuValue->length(); ++i) {\n                    inputNumber += pow(10,digit) * ((*cacuValue)[i]-'0');\n                    digit--;\n                }\n                if(rev)\n                {\n                    inputNumber*= -1;\n                }\n                cacuList.push(inputNumber);\n            }\n            cacuValue++;\n        }\n        return cacuList.top();\n    }\n};\n```\n\n\n\n## 队列\n\n队列的实现:使用链表或是循环数组\n\n链表的实现方式非常简单,只需加上几个方法,出队就是移除初数据,入队就是在队列尾部上一个新数据.由是我们不关心如何用链表实现,我们关心如何用循环数组实现.\n\n首先使用一个数组来模拟一个短队列:\n\n|      |      |   1   |  2   |  3   |  4   |      |      |\n| ---- | ---- | :---: | :--: | :--: | :--: | ---- | ---- |\n|      |      | front |      |      | back |      |      |\n\n当队列塞满数组之后,就绕回到开头:\n\n|  7   |      |   1   |  2   |  3   |  4   |  5   |  6   |\n| :--: | ---- | :---: | :--: | :--: | :--: | :--: | :--: |\n| back |      | front |      |      |      |      |      |\n\n而在队首取数也很容易,只需将队首对应的下标改变:\n\n|  7   |      |      1      |   2   |  3   |  4   |  5   |  6   |\n| :--: | ---- | :---------: | :---: | :--: | :--: | :--: | :--: |\n| back |      | `删除front` | front |      |      |      |      |\n\n实现队列数组的长度取决于队列长度.\n\n循环数组实现的队列：\n\n```c++\nclass MyCircularQueue\n{\npublic:\n    vector<int> queue_data;\n    int queueLength = 0;\n    int queueSize = 0;\n    int qFront = 0;\n    int qEnd = 0;\n    /** Initialize your data structure here. Set the size of the queue to be k. */\n    MyCircularQueue(int k)\n    {\n        queue_data.resize(k);\n        queueSize = k;\n    }\n    /** Insert an element into the circular queue. Return true if the operation is successful. */\n    bool enQueue(int value)\n    {\n        if (queueLength >= queueSize)\n        {\n            return false;\n        }\n        if (queueLength == 0)\n        {\n            queue_data[0] = value;\n            qFront = 0; //这里是一个坑，如果队列初始化时为空队列，首位的位置要重新设置\n            qEnd = 0;\n        }\n        else\n        {\n            qEnd++;\n            if (qEnd == queueSize)\n            {\n                qEnd = 0;\n            }\n            queue_data[qEnd] = value;\n        }\n        queueLength++;\n        return true;\n    }\n\n    /** Delete an element from the circular queue. Return true if the operation is successful. */\n    bool deQueue()\n    {\n        if (queueLength == 0)\n            return false;\n        else\n        {\n            qFront++;\n            if (qFront == queueSize)\n                qFront = 0;\n        }\n        queueLength--;\n        return true;\n    }\n\n    /** Get the front item from the queue. */\n    int Front()\n    {\n        if (queueLength == 0)\n            return -1;\n        return queue_data[qFront];\n    }\n\n    /** Get the last item from the queue. */\n    int Rear()\n    {\n        if (queueLength == 0)\n            return -1;\n        return queue_data[qEnd];\n    }\n\n    /** Checks whether the circular queue is empty or not. */\n    bool isEmpty()\n    {\n        if (queueLength == 0)\n            return true;\n        return false;\n    }\n\n    /** Checks whether the circular queue is full or not. */\n    bool isFull()\n    {\n        if (queueLength == queueSize)\n            return true;\n        return false;\n    }\n};\n```\n\n\n\n## 链表\n\n链表是一种非连续非顺序的数据结构,每一个元素只汇报下一个元素(或前一个元素)的位置(或指针).\n\n链表的插入删除数据十分方便,但是要想读出某个位置的值就很困难,因为你要遍历链表才能知道那个位置的数据.\n\n链表的设计代码(单向链表):\n\n```c++\nclass Node\n{\npublic:\n    int value = 0;\n    Node *next;\n};\n\nclass MyLinkedList\n{\npublic:\n    Node *head, *next, *tail;\n    int length;\n\n    /** Initialize your data structure here. */\n    MyLinkedList()\n    {\n        head = NULL;\n        next = NULL;\n        tail = NULL;\n        length = 0;\n    }\n\n    /** Get the value of the index-th node in the linked list. If the index is invalid, return -1. */\n    int get(int index)\n    {\n        if (index < 0 || index >= length)\n            return -1;\n        else\n        {\n            Node *current = head;\n            int returnVal = head->value;\n            while (index-- >= 0)\n            {\n                returnVal = current->value;\n                current = current->next;\n            }\n            return returnVal;\n        }\n    }\n\n    /** Add a node of value val before the first element of the linked list. After the insertion, the new node will be the first node of the linked list. */\n    void addAtHead(int val)\n    {\n        if (head == NULL)\n        {\n            Node *currentNode = new Node;\n            head = currentNode;\n            head->value = val;\n            head->next = NULL;\n            tail = head;\n            length = 1;\n        }\n        else\n        {\n            Node *currentNode = new Node;\n            (*currentNode).next = head;\n            (*currentNode).value = val;\n            head = currentNode;\n            length++;\n        }\n    }\n\n    /** Append a node of value val to the last element of the linked list. */\n    void addAtTail(int val)\n    {\n        if (head == NULL)\n        {\n            Node *currentNode = new Node;\n            head = currentNode;\n            head->value = val;\n            head->next = NULL;\n            tail = head;\n            length = 1;\n        }\n        else\n        {\n            Node *currentNode = new Node;\n            (*currentNode).next = NULL;\n            (*currentNode).value = val;\n            (*tail).next = currentNode;\n            tail = currentNode;\n            length++;\n        }\n    }\n\n    /** Add a node of value val before the index-th node in the linked list. If index equals to the length of linked list, the node will be appended to the end of linked list. If index is greater than the length, the node will not be inserted. */\n    void addAtIndex(int index, int val)\n    {\n        Node *current = new Node;\n        Node *insert = head;\n        if (index < 0 || index > length)\n        {\n            return;\n        }\n        if (index == 0)\n        {\n            (*this).addAtHead(val);\n        }\n        else\n        {\n            if (index > length)\n                return;\n            if (index == length)\n            {\n                (*this).addAtTail(val);\n            }\n            else\n            {\n                while (index-- > 1)\n                {\n                    insert = insert->next;\n                }\n                current->next = insert->next;\n                current->value = val;\n                insert->next = current;\n                length++;\n            }\n        }\n    }\n\n    /** Delete the index-th node in the linked list, if the index is valid. */\n    void deleteAtIndex(int index)\n    {\n        if (index < 0 || index >= length)\n            return;\n        if (index == 0)\n        {\n            head = head->next;\n            length--;\n        }\n        else\n        {\n            Node *deleteNode = head;\n            while (index-- > 1)\n            {\n                deleteNode = deleteNode->next;\n            }\n            deleteNode->next = deleteNode->next->next;\n            if(deleteNode->next == NULL)\n            {\n                tail = deleteNode;\n            }\n            length--;\n        }\n    }\n};\n\n/**\n * Your MyLinkedList object will be instantiated and called as such:\n * MyLinkedList* obj = new MyLinkedList();\n * int param_1 = obj->get(index);\n * obj->addAtHead(val);\n * obj->addAtTail(val);\n * obj->addAtIndex(index,val);\n * obj->deleteAtIndex(index);\n */\n```\n\n### STL中的链表\n\nC++的STL包含了一个模板类:list.\n\n这个模板类提供了一套完整的链表系统,这样你就不需要动手造轮子.\n\nc++的list是由一个双向链表实现的.\n\n下面是一些用法及实例:\n\n```c++\nlist<int> my_list;  //构造list(空的)\n//将数组赋值到list的示例:\nint myints[] = {75,23,65,42,13};\nlist<int> my_list (myints, myints+5);\n//给予list一个初始大小,但全部赋初值:\nstd::list<int> sayings {20}; // A list of 20 empty int\nstd::list<double> values(50, 3.14159265);//A List of 50 same elements\n//使用迭代器\nmy_list.begin();//返回首迭代器\nmy_list.end();//返回尾迭代器\nmy_list.rbegin();//返回反向的首迭代器,记住,c++的list是一个双向链表,所以你可以这么做.\nmy_list.rend();//返回反向的尾迭代器\n```\n\n元素访问:\n\n迭代器访问:我觉得你应该很懂,参见前面的迭代器使用那一章节\n\n| 函数名 | 作用             |\n| ------ | ---------------- |\n| front  | 访问第一个元素   |\n| back   | 访问最后一个元素 |\n\n元素插入删除:\n\n可以在迭代器指定的位置插入一个新的元素：\n\n```c++\nstd::list<int> data(10, 55); // 构建一个全为55的链表\ndata.insert(++begin(data), 66); // 将66作为第二个元素插入\n```\n\n有关list,我们后面会根据 *C++ Prime* 和 *数据结构与算法分析* 中的内容进行详细说明.\n","source":"_posts/2020-2-17-Data1.md","raw":"---\nlayout:     post\ntitle:      \"数据结构1:表、栈和队列\"\nintro:      \"\"\ndate:       2020-2-17 16:13:00\nauthor:     \"Makinohara\"\ncatalog: true\ntags:\n    - 计算机基础\n\n---\n\n\n\n# 前导知识\n\n## 时间复杂度\n\n增长率的大O记法:\n\nO(N^2):以二次方级别增长\n\n**一般计算法则:**\n\nfor循环:循环内语句时间*迭代次数\n\n嵌套循环:N^(循环嵌套数)\n\n顺序语句:单纯的将各段的时间相加\n\nif/else:取时间较长者计算\n\n**时间复杂度中的对数:**\n\n程序每次用O(1)时间将问题大小削减为一部分(通常为1/2,二分搜索)\n\n此时时间复杂度为O(logN)\n\n运用分治算法也可以实现一些复杂度为对数的时间复杂度算法.\n\n# 数据结构实现\n\n## 数据结构的表示\n\n```c++\nADT structureName;\n{\n    Data\n\t{\n \t   var a;\n \t   var b;\n \t   //......\n\t}\n\tOperation\n\t{\n \t   Ope1{\n \t       initial condition;\n \t       Operation results;\n\t    }\n \t   Ope2;\n \t   //......\n\t}\n}\n\n```\n\n\n\n## 数组(Array):最简单的表ADT(抽象数据结构)实现\n\n数组是最基本的数据结构,虽然我们在学C++和C时已经了解过,但深入探讨一下数组仍旧很有必要.\n\n 数组是可以再内存中连续存储多个元素的结构，在内存中的分配也是连续的，数组中的元素通过数组下标进行访问，**数组下标从0开始**。\n\nC++实现:\n\n```c++\nint arr[5];//建立数组\nint arr[5]={0};//建立数组时顺便全部初始化为0\nint *p = new int[5];//运行时创建数组\ndelete[] p;//释放内存\n```\n\n优点：\n1、按照索引查询元素速度快\n2、按照索引遍历数组方便\n\n缺点：\n1、数组的大小固定后就无法扩容了\n2、数组只能存储一种类型的数据\n3、添加，删除的操作慢，因为要移动其他的元素。\n\n4.需要一整块连续的存储空间,这个要求就很苛刻,这意味着你没法开很大的数组.\n\n适用场景：\n频繁查询，对存储空间要求不大，很少增加和删除的情况。\n\n## 栈(stack)\n\n接下来讨论栈ADT:\n\n栈可以通过表来实现,任何一种实现表的方法都可以实现栈.\n\n栈只能读取并操作栈顶元素,因此其可以使用一个简单链表来轻松实现:\n\n在链表的最后一个元素的右边直接插入数据.\n\n接下来使用链表式结构实现一个栈，并能做到在其中查找最小值\n\n```c++\n#include <bits/stdc++.h>\n\nusing namespace std;\nclass Node\n{\npublic:\n    int value = 0;\n    Node *next;\n};\n\nclass MinStack\n{\npublic:\n    Node *topNode;\n    int min;\n    bool isFirst = true;\n    /** initialize your data structure here. */\n    MinStack()\n    {\n        topNode = NULL;\n    }\n\n    void push(int x)\n    {\n        Node *currentNode = new Node;\n        currentNode->value = x;\n        currentNode->next = topNode;\n        topNode = currentNode;\n        if (isFirst)\n        {\n            min = x;\n            isFirst = false;\n        }\n        if (x < min)\n        {\n            min = x;\n        }\n    }\n\n    void pop()\n    {\n        \n        if (topNode->value == min)//如果栈顶数为最小值的处理方式\n        {\n            Node *search = topNode;\n            if (search->next != NULL)//注意这里的坑：如果是取最后一个结点，则清空栈\n            {\n                min = search->next->value;\n            }\n            else\n            {\n                isFirst = true;\n            }\n            while (search->next != NULL)\n            {\n                search = search->next;\n                if (search->value < min)\n                {\n                    min = search->value;\n                }\n            }\n        }\n        topNode = topNode->next;\n    }\n\n    int top()\n    {\n        return topNode->value;\n    }\n\n    int getMin()\n    {\n        return min;\n    }\n};\n\n/**\n * Your MinStack object will be instantiated and called as such:\n * MinStack* obj = new MinStack();\n * obj->push(x);\n * obj->pop();\n * int param_3 = obj->top();\n * int param_4 = obj->getMin();\n */\n```\n\n使用一个动态数组也可以简单的实现栈,c++中的模板类vector提供了\n\n```c++\nvector.push_back();\nvector.pop_back();\n```\n\n功能.\n\n栈是最适合实现递归的一种数据结构,我们可以使用栈的思想实现一个逆波兰计算器.\n\n```c++\n//逆波兰计算器(从一个string数组提取输入)\nclass Solution {\npublic:\n    int evalRPN(std::vector<std::string>& tokens) {\n        std::stack<int> cacuList;\n        std::vector<std::string>::iterator cacuValue = tokens.begin();\n        while(cacuValue != tokens.end())\n        {\n            if(cacuValue->length() == 1) {            //在位数为1时确认为符号或数字，将负号与减号分开\n                if ((*cacuValue)[0] == '+') {\n                    int top, res;\n                    top = cacuList.top();\n                    cacuList.pop();\n                    res = cacuList.top() + top;\n                    cacuList.pop();\n                    cacuList.push(res);\n                }\n                else if ((*cacuValue)[0] == '-') {\n                    int top, res;\n                    top = cacuList.top();\n                    cacuList.pop();\n                    res = cacuList.top() - top;\n                    cacuList.pop();\n                    cacuList.push(res);\n                }\n                else if ((*cacuValue)[0] == '*') {\n                    int top, res;\n                    top = cacuList.top();\n                    cacuList.pop();\n                    res = cacuList.top() * top;\n                    cacuList.pop();\n                    cacuList.push(res);\n                }\n                else if ((*cacuValue)[0] == '/') {\n                    int top, res;\n                    top = cacuList.top();\n                    cacuList.pop();\n                    res = cacuList.top() / top;\n                    cacuList.pop();\n                    cacuList.push(res);\n                } else {\n                    cacuList.push((*cacuValue)[0]-'0');\n                }\n            }\n            else{\n                int inputNumber=0;\n                int i=0;\n                bool rev = false;\n                int digit = cacuValue->length() - 1;\n                if((*cacuValue)[0] == '-')\n                {\n                    i++;\n                    rev = true;\n                    digit--;\n                }\n                for (; i < cacuValue->length(); ++i) {\n                    inputNumber += pow(10,digit) * ((*cacuValue)[i]-'0');\n                    digit--;\n                }\n                if(rev)\n                {\n                    inputNumber*= -1;\n                }\n                cacuList.push(inputNumber);\n            }\n            cacuValue++;\n        }\n        return cacuList.top();\n    }\n};\n```\n\n\n\n## 队列\n\n队列的实现:使用链表或是循环数组\n\n链表的实现方式非常简单,只需加上几个方法,出队就是移除初数据,入队就是在队列尾部上一个新数据.由是我们不关心如何用链表实现,我们关心如何用循环数组实现.\n\n首先使用一个数组来模拟一个短队列:\n\n|      |      |   1   |  2   |  3   |  4   |      |      |\n| ---- | ---- | :---: | :--: | :--: | :--: | ---- | ---- |\n|      |      | front |      |      | back |      |      |\n\n当队列塞满数组之后,就绕回到开头:\n\n|  7   |      |   1   |  2   |  3   |  4   |  5   |  6   |\n| :--: | ---- | :---: | :--: | :--: | :--: | :--: | :--: |\n| back |      | front |      |      |      |      |      |\n\n而在队首取数也很容易,只需将队首对应的下标改变:\n\n|  7   |      |      1      |   2   |  3   |  4   |  5   |  6   |\n| :--: | ---- | :---------: | :---: | :--: | :--: | :--: | :--: |\n| back |      | `删除front` | front |      |      |      |      |\n\n实现队列数组的长度取决于队列长度.\n\n循环数组实现的队列：\n\n```c++\nclass MyCircularQueue\n{\npublic:\n    vector<int> queue_data;\n    int queueLength = 0;\n    int queueSize = 0;\n    int qFront = 0;\n    int qEnd = 0;\n    /** Initialize your data structure here. Set the size of the queue to be k. */\n    MyCircularQueue(int k)\n    {\n        queue_data.resize(k);\n        queueSize = k;\n    }\n    /** Insert an element into the circular queue. Return true if the operation is successful. */\n    bool enQueue(int value)\n    {\n        if (queueLength >= queueSize)\n        {\n            return false;\n        }\n        if (queueLength == 0)\n        {\n            queue_data[0] = value;\n            qFront = 0; //这里是一个坑，如果队列初始化时为空队列，首位的位置要重新设置\n            qEnd = 0;\n        }\n        else\n        {\n            qEnd++;\n            if (qEnd == queueSize)\n            {\n                qEnd = 0;\n            }\n            queue_data[qEnd] = value;\n        }\n        queueLength++;\n        return true;\n    }\n\n    /** Delete an element from the circular queue. Return true if the operation is successful. */\n    bool deQueue()\n    {\n        if (queueLength == 0)\n            return false;\n        else\n        {\n            qFront++;\n            if (qFront == queueSize)\n                qFront = 0;\n        }\n        queueLength--;\n        return true;\n    }\n\n    /** Get the front item from the queue. */\n    int Front()\n    {\n        if (queueLength == 0)\n            return -1;\n        return queue_data[qFront];\n    }\n\n    /** Get the last item from the queue. */\n    int Rear()\n    {\n        if (queueLength == 0)\n            return -1;\n        return queue_data[qEnd];\n    }\n\n    /** Checks whether the circular queue is empty or not. */\n    bool isEmpty()\n    {\n        if (queueLength == 0)\n            return true;\n        return false;\n    }\n\n    /** Checks whether the circular queue is full or not. */\n    bool isFull()\n    {\n        if (queueLength == queueSize)\n            return true;\n        return false;\n    }\n};\n```\n\n\n\n## 链表\n\n链表是一种非连续非顺序的数据结构,每一个元素只汇报下一个元素(或前一个元素)的位置(或指针).\n\n链表的插入删除数据十分方便,但是要想读出某个位置的值就很困难,因为你要遍历链表才能知道那个位置的数据.\n\n链表的设计代码(单向链表):\n\n```c++\nclass Node\n{\npublic:\n    int value = 0;\n    Node *next;\n};\n\nclass MyLinkedList\n{\npublic:\n    Node *head, *next, *tail;\n    int length;\n\n    /** Initialize your data structure here. */\n    MyLinkedList()\n    {\n        head = NULL;\n        next = NULL;\n        tail = NULL;\n        length = 0;\n    }\n\n    /** Get the value of the index-th node in the linked list. If the index is invalid, return -1. */\n    int get(int index)\n    {\n        if (index < 0 || index >= length)\n            return -1;\n        else\n        {\n            Node *current = head;\n            int returnVal = head->value;\n            while (index-- >= 0)\n            {\n                returnVal = current->value;\n                current = current->next;\n            }\n            return returnVal;\n        }\n    }\n\n    /** Add a node of value val before the first element of the linked list. After the insertion, the new node will be the first node of the linked list. */\n    void addAtHead(int val)\n    {\n        if (head == NULL)\n        {\n            Node *currentNode = new Node;\n            head = currentNode;\n            head->value = val;\n            head->next = NULL;\n            tail = head;\n            length = 1;\n        }\n        else\n        {\n            Node *currentNode = new Node;\n            (*currentNode).next = head;\n            (*currentNode).value = val;\n            head = currentNode;\n            length++;\n        }\n    }\n\n    /** Append a node of value val to the last element of the linked list. */\n    void addAtTail(int val)\n    {\n        if (head == NULL)\n        {\n            Node *currentNode = new Node;\n            head = currentNode;\n            head->value = val;\n            head->next = NULL;\n            tail = head;\n            length = 1;\n        }\n        else\n        {\n            Node *currentNode = new Node;\n            (*currentNode).next = NULL;\n            (*currentNode).value = val;\n            (*tail).next = currentNode;\n            tail = currentNode;\n            length++;\n        }\n    }\n\n    /** Add a node of value val before the index-th node in the linked list. If index equals to the length of linked list, the node will be appended to the end of linked list. If index is greater than the length, the node will not be inserted. */\n    void addAtIndex(int index, int val)\n    {\n        Node *current = new Node;\n        Node *insert = head;\n        if (index < 0 || index > length)\n        {\n            return;\n        }\n        if (index == 0)\n        {\n            (*this).addAtHead(val);\n        }\n        else\n        {\n            if (index > length)\n                return;\n            if (index == length)\n            {\n                (*this).addAtTail(val);\n            }\n            else\n            {\n                while (index-- > 1)\n                {\n                    insert = insert->next;\n                }\n                current->next = insert->next;\n                current->value = val;\n                insert->next = current;\n                length++;\n            }\n        }\n    }\n\n    /** Delete the index-th node in the linked list, if the index is valid. */\n    void deleteAtIndex(int index)\n    {\n        if (index < 0 || index >= length)\n            return;\n        if (index == 0)\n        {\n            head = head->next;\n            length--;\n        }\n        else\n        {\n            Node *deleteNode = head;\n            while (index-- > 1)\n            {\n                deleteNode = deleteNode->next;\n            }\n            deleteNode->next = deleteNode->next->next;\n            if(deleteNode->next == NULL)\n            {\n                tail = deleteNode;\n            }\n            length--;\n        }\n    }\n};\n\n/**\n * Your MyLinkedList object will be instantiated and called as such:\n * MyLinkedList* obj = new MyLinkedList();\n * int param_1 = obj->get(index);\n * obj->addAtHead(val);\n * obj->addAtTail(val);\n * obj->addAtIndex(index,val);\n * obj->deleteAtIndex(index);\n */\n```\n\n### STL中的链表\n\nC++的STL包含了一个模板类:list.\n\n这个模板类提供了一套完整的链表系统,这样你就不需要动手造轮子.\n\nc++的list是由一个双向链表实现的.\n\n下面是一些用法及实例:\n\n```c++\nlist<int> my_list;  //构造list(空的)\n//将数组赋值到list的示例:\nint myints[] = {75,23,65,42,13};\nlist<int> my_list (myints, myints+5);\n//给予list一个初始大小,但全部赋初值:\nstd::list<int> sayings {20}; // A list of 20 empty int\nstd::list<double> values(50, 3.14159265);//A List of 50 same elements\n//使用迭代器\nmy_list.begin();//返回首迭代器\nmy_list.end();//返回尾迭代器\nmy_list.rbegin();//返回反向的首迭代器,记住,c++的list是一个双向链表,所以你可以这么做.\nmy_list.rend();//返回反向的尾迭代器\n```\n\n元素访问:\n\n迭代器访问:我觉得你应该很懂,参见前面的迭代器使用那一章节\n\n| 函数名 | 作用             |\n| ------ | ---------------- |\n| front  | 访问第一个元素   |\n| back   | 访问最后一个元素 |\n\n元素插入删除:\n\n可以在迭代器指定的位置插入一个新的元素：\n\n```c++\nstd::list<int> data(10, 55); // 构建一个全为55的链表\ndata.insert(++begin(data), 66); // 将66作为第二个元素插入\n```\n\n有关list,我们后面会根据 *C++ Prime* 和 *数据结构与算法分析* 中的内容进行详细说明.\n","slug":"2020-2-17-Data1","published":1,"updated":"2021-10-24T02:04:35.827Z","_id":"ckey85ujc000sho8acfwifpp2","comments":1,"photos":[],"link":"","content":"<h1 id=\"前导知识\"><a href=\"#前导知识\" class=\"headerlink\" title=\"前导知识\"></a>前导知识</h1><h2 id=\"时间复杂度\"><a href=\"#时间复杂度\" class=\"headerlink\" title=\"时间复杂度\"></a>时间复杂度</h2><p>增长率的大O记法:</p>\n<p>O(N^2):以二次方级别增长</p>\n<p><strong>一般计算法则:</strong></p>\n<p>for循环:循环内语句时间*迭代次数</p>\n<p>嵌套循环:N^(循环嵌套数)</p>\n<p>顺序语句:单纯的将各段的时间相加</p>\n<p>if/else:取时间较长者计算</p>\n<p><strong>时间复杂度中的对数:</strong></p>\n<p>程序每次用O(1)时间将问题大小削减为一部分(通常为1/2,二分搜索)</p>\n<p>此时时间复杂度为O(logN)</p>\n<p>运用分治算法也可以实现一些复杂度为对数的时间复杂度算法.</p>\n<h1 id=\"数据结构实现\"><a href=\"#数据结构实现\" class=\"headerlink\" title=\"数据结构实现\"></a>数据结构实现</h1><h2 id=\"数据结构的表示\"><a href=\"#数据结构的表示\" class=\"headerlink\" title=\"数据结构的表示\"></a>数据结构的表示</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\">ADT structureName;<br>&#123;<br>    Data<br>\t&#123;<br> \t   var a;<br> \t   var b;<br> \t   <span class=\"hljs-comment\">//......</span><br>\t&#125;<br>\tOperation<br>\t&#123;<br> \t   Ope1&#123;<br> \t       initial condition;<br> \t       Operation results;<br>\t    &#125;<br> \t   Ope2;<br> \t   <span class=\"hljs-comment\">//......</span><br>\t&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h2 id=\"数组-Array-最简单的表ADT-抽象数据结构-实现\"><a href=\"#数组-Array-最简单的表ADT-抽象数据结构-实现\" class=\"headerlink\" title=\"数组(Array):最简单的表ADT(抽象数据结构)实现\"></a>数组(Array):最简单的表ADT(抽象数据结构)实现</h2><p>数组是最基本的数据结构,虽然我们在学C++和C时已经了解过,但深入探讨一下数组仍旧很有必要.</p>\n<p> 数组是可以再内存中连续存储多个元素的结构，在内存中的分配也是连续的，数组中的元素通过数组下标进行访问，<strong>数组下标从0开始</strong>。</p>\n<p>C++实现:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">int</span> arr[<span class=\"hljs-number\">5</span>];<span class=\"hljs-comment\">//建立数组</span><br><span class=\"hljs-keyword\">int</span> arr[<span class=\"hljs-number\">5</span>]=&#123;<span class=\"hljs-number\">0</span>&#125;;<span class=\"hljs-comment\">//建立数组时顺便全部初始化为0</span><br><span class=\"hljs-keyword\">int</span> *p = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">int</span>[<span class=\"hljs-number\">5</span>];<span class=\"hljs-comment\">//运行时创建数组</span><br><span class=\"hljs-keyword\">delete</span>[] p;<span class=\"hljs-comment\">//释放内存</span><br></code></pre></td></tr></table></figure>\n<p>优点：<br>1、按照索引查询元素速度快<br>2、按照索引遍历数组方便</p>\n<p>缺点：<br>1、数组的大小固定后就无法扩容了<br>2、数组只能存储一种类型的数据<br>3、添加，删除的操作慢，因为要移动其他的元素。</p>\n<p>4.需要一整块连续的存储空间,这个要求就很苛刻,这意味着你没法开很大的数组.</p>\n<p>适用场景：<br>频繁查询，对存储空间要求不大，很少增加和删除的情况。</p>\n<h2 id=\"栈-stack\"><a href=\"#栈-stack\" class=\"headerlink\" title=\"栈(stack)\"></a>栈(stack)</h2><p>接下来讨论栈ADT:</p>\n<p>栈可以通过表来实现,任何一种实现表的方法都可以实现栈.</p>\n<p>栈只能读取并操作栈顶元素,因此其可以使用一个简单链表来轻松实现:</p>\n<p>在链表的最后一个元素的右边直接插入数据.</p>\n<p>接下来使用链表式结构实现一个栈，并能做到在其中查找最小值</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;bits/stdc++.h&gt;</span></span><br><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-built_in\">std</span>;<br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Node</span><br>&#123;</span><br><span class=\"hljs-keyword\">public</span>:<br>    <span class=\"hljs-keyword\">int</span> value = <span class=\"hljs-number\">0</span>;<br>    Node *next;<br>&#125;;<br><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MinStack</span><br>&#123;</span><br><span class=\"hljs-keyword\">public</span>:<br>    Node *topNode;<br>    <span class=\"hljs-keyword\">int</span> <span class=\"hljs-built_in\">min</span>;<br>    <span class=\"hljs-keyword\">bool</span> isFirst = <span class=\"hljs-literal\">true</span>;<br>    <span class=\"hljs-comment\">/** initialize your data structure here. */</span><br>    MinStack()<br>    &#123;<br>        topNode = <span class=\"hljs-literal\">NULL</span>;<br>    &#125;<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">push</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> x)</span><br>    </span>&#123;<br>        Node *currentNode = <span class=\"hljs-keyword\">new</span> Node;<br>        currentNode-&gt;value = x;<br>        currentNode-&gt;next = topNode;<br>        topNode = currentNode;<br>        <span class=\"hljs-keyword\">if</span> (isFirst)<br>        &#123;<br>            <span class=\"hljs-built_in\">min</span> = x;<br>            isFirst = <span class=\"hljs-literal\">false</span>;<br>        &#125;<br>        <span class=\"hljs-keyword\">if</span> (x &lt; <span class=\"hljs-built_in\">min</span>)<br>        &#123;<br>            <span class=\"hljs-built_in\">min</span> = x;<br>        &#125;<br>    &#125;<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">pop</span><span class=\"hljs-params\">()</span><br>    </span>&#123;<br>        <br>        <span class=\"hljs-keyword\">if</span> (topNode-&gt;value == <span class=\"hljs-built_in\">min</span>)<span class=\"hljs-comment\">//如果栈顶数为最小值的处理方式</span><br>        &#123;<br>            Node *search = topNode;<br>            <span class=\"hljs-keyword\">if</span> (search-&gt;next != <span class=\"hljs-literal\">NULL</span>)<span class=\"hljs-comment\">//注意这里的坑：如果是取最后一个结点，则清空栈</span><br>            &#123;<br>                <span class=\"hljs-built_in\">min</span> = search-&gt;next-&gt;value;<br>            &#125;<br>            <span class=\"hljs-keyword\">else</span><br>            &#123;<br>                isFirst = <span class=\"hljs-literal\">true</span>;<br>            &#125;<br>            <span class=\"hljs-keyword\">while</span> (search-&gt;next != <span class=\"hljs-literal\">NULL</span>)<br>            &#123;<br>                search = search-&gt;next;<br>                <span class=\"hljs-keyword\">if</span> (search-&gt;value &lt; <span class=\"hljs-built_in\">min</span>)<br>                &#123;<br>                    <span class=\"hljs-built_in\">min</span> = search-&gt;value;<br>                &#125;<br>            &#125;<br>        &#125;<br>        topNode = topNode-&gt;next;<br>    &#125;<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">top</span><span class=\"hljs-params\">()</span><br>    </span>&#123;<br>        <span class=\"hljs-keyword\">return</span> topNode-&gt;value;<br>    &#125;<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">getMin</span><span class=\"hljs-params\">()</span><br>    </span>&#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">min</span>;<br>    &#125;<br>&#125;;<br><br><span class=\"hljs-comment\">/**<br> * Your MinStack object will be instantiated and called as such:<br> * MinStack* obj = new MinStack();<br> * obj-&gt;push(x);<br> * obj-&gt;pop();<br> * int param_3 = obj-&gt;top();<br> * int param_4 = obj-&gt;getMin();<br> */</span><br></code></pre></td></tr></table></figure>\n<p>使用一个动态数组也可以简单的实现栈,c++中的模板类vector提供了</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-built_in\">vector</span>.push_back();<br><span class=\"hljs-built_in\">vector</span>.pop_back();<br></code></pre></td></tr></table></figure>\n<p>功能.</p>\n<p>栈是最适合实现递归的一种数据结构,我们可以使用栈的思想实现一个逆波兰计算器.</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-comment\">//逆波兰计算器(从一个string数组提取输入)</span><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Solution</span> &#123;</span><br><span class=\"hljs-keyword\">public</span>:<br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">evalRPN</span><span class=\"hljs-params\">(<span class=\"hljs-built_in\">std</span>::<span class=\"hljs-built_in\">vector</span>&lt;<span class=\"hljs-built_in\">std</span>::<span class=\"hljs-built_in\">string</span>&gt;&amp; tokens)</span> </span>&#123;<br>        <span class=\"hljs-built_in\">std</span>::<span class=\"hljs-built_in\">stack</span>&lt;<span class=\"hljs-keyword\">int</span>&gt; cacuList;<br>        <span class=\"hljs-built_in\">std</span>::<span class=\"hljs-built_in\">vector</span>&lt;<span class=\"hljs-built_in\">std</span>::<span class=\"hljs-built_in\">string</span>&gt;::iterator cacuValue = tokens.<span class=\"hljs-built_in\">begin</span>();<br>        <span class=\"hljs-keyword\">while</span>(cacuValue != tokens.<span class=\"hljs-built_in\">end</span>())<br>        &#123;<br>            <span class=\"hljs-keyword\">if</span>(cacuValue-&gt;length() == <span class=\"hljs-number\">1</span>) &#123;            <span class=\"hljs-comment\">//在位数为1时确认为符号或数字，将负号与减号分开</span><br>                <span class=\"hljs-keyword\">if</span> ((*cacuValue)[<span class=\"hljs-number\">0</span>] == <span class=\"hljs-string\">'+'</span>) &#123;<br>                    <span class=\"hljs-keyword\">int</span> top, res;<br>                    top = cacuList.top();<br>                    cacuList.pop();<br>                    res = cacuList.top() + top;<br>                    cacuList.pop();<br>                    cacuList.push(res);<br>                &#125;<br>                <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> ((*cacuValue)[<span class=\"hljs-number\">0</span>] == <span class=\"hljs-string\">'-'</span>) &#123;<br>                    <span class=\"hljs-keyword\">int</span> top, res;<br>                    top = cacuList.top();<br>                    cacuList.pop();<br>                    res = cacuList.top() - top;<br>                    cacuList.pop();<br>                    cacuList.push(res);<br>                &#125;<br>                <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> ((*cacuValue)[<span class=\"hljs-number\">0</span>] == <span class=\"hljs-string\">'*'</span>) &#123;<br>                    <span class=\"hljs-keyword\">int</span> top, res;<br>                    top = cacuList.top();<br>                    cacuList.pop();<br>                    res = cacuList.top() * top;<br>                    cacuList.pop();<br>                    cacuList.push(res);<br>                &#125;<br>                <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> ((*cacuValue)[<span class=\"hljs-number\">0</span>] == <span class=\"hljs-string\">'/'</span>) &#123;<br>                    <span class=\"hljs-keyword\">int</span> top, res;<br>                    top = cacuList.top();<br>                    cacuList.pop();<br>                    res = cacuList.top() / top;<br>                    cacuList.pop();<br>                    cacuList.push(res);<br>                &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>                    cacuList.push((*cacuValue)[<span class=\"hljs-number\">0</span>]-<span class=\"hljs-string\">'0'</span>);<br>                &#125;<br>            &#125;<br>            <span class=\"hljs-keyword\">else</span>&#123;<br>                <span class=\"hljs-keyword\">int</span> inputNumber=<span class=\"hljs-number\">0</span>;<br>                <span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">0</span>;<br>                <span class=\"hljs-keyword\">bool</span> rev = <span class=\"hljs-literal\">false</span>;<br>                <span class=\"hljs-keyword\">int</span> digit = cacuValue-&gt;length() - <span class=\"hljs-number\">1</span>;<br>                <span class=\"hljs-keyword\">if</span>((*cacuValue)[<span class=\"hljs-number\">0</span>] == <span class=\"hljs-string\">'-'</span>)<br>                &#123;<br>                    i++;<br>                    rev = <span class=\"hljs-literal\">true</span>;<br>                    digit--;<br>                &#125;<br>                <span class=\"hljs-keyword\">for</span> (; i &lt; cacuValue-&gt;length(); ++i) &#123;<br>                    inputNumber += <span class=\"hljs-built_in\">pow</span>(<span class=\"hljs-number\">10</span>,digit) * ((*cacuValue)[i]-<span class=\"hljs-string\">'0'</span>);<br>                    digit--;<br>                &#125;<br>                <span class=\"hljs-keyword\">if</span>(rev)<br>                &#123;<br>                    inputNumber*= <span class=\"hljs-number\">-1</span>;<br>                &#125;<br>                cacuList.push(inputNumber);<br>            &#125;<br>            cacuValue++;<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> cacuList.top();<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>\n<h2 id=\"队列\"><a href=\"#队列\" class=\"headerlink\" title=\"队列\"></a>队列</h2><p>队列的实现:使用链表或是循环数组</p>\n<p>链表的实现方式非常简单,只需加上几个方法,出队就是移除初数据,入队就是在队列尾部上一个新数据.由是我们不关心如何用链表实现,我们关心如何用循环数组实现.</p>\n<p>首先使用一个数组来模拟一个短队列:</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n<th style=\"text-align:center\">1</th>\n<th style=\"text-align:center\">2</th>\n<th style=\"text-align:center\">3</th>\n<th style=\"text-align:center\">4</th>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td></td>\n<td></td>\n<td style=\"text-align:center\">front</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">back</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>当队列塞满数组之后,就绕回到开头:</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">7</th>\n<th></th>\n<th style=\"text-align:center\">1</th>\n<th style=\"text-align:center\">2</th>\n<th style=\"text-align:center\">3</th>\n<th style=\"text-align:center\">4</th>\n<th style=\"text-align:center\">5</th>\n<th style=\"text-align:center\">6</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">back</td>\n<td></td>\n<td style=\"text-align:center\">front</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>而在队首取数也很容易,只需将队首对应的下标改变:</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">7</th>\n<th></th>\n<th style=\"text-align:center\">1</th>\n<th style=\"text-align:center\">2</th>\n<th style=\"text-align:center\">3</th>\n<th style=\"text-align:center\">4</th>\n<th style=\"text-align:center\">5</th>\n<th style=\"text-align:center\">6</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">back</td>\n<td></td>\n<td style=\"text-align:center\"><code>删除front</code></td>\n<td style=\"text-align:center\">front</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>实现队列数组的长度取决于队列长度.</p>\n<p>循环数组实现的队列：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MyCircularQueue</span><br>&#123;</span><br><span class=\"hljs-keyword\">public</span>:<br>    <span class=\"hljs-built_in\">vector</span>&lt;<span class=\"hljs-keyword\">int</span>&gt; queue_data;<br>    <span class=\"hljs-keyword\">int</span> queueLength = <span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-keyword\">int</span> queueSize = <span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-keyword\">int</span> qFront = <span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-keyword\">int</span> qEnd = <span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-comment\">/** Initialize your data structure here. Set the size of the queue to be k. */</span><br>    MyCircularQueue(<span class=\"hljs-keyword\">int</span> k)<br>    &#123;<br>        queue_data.resize(k);<br>        queueSize = k;<br>    &#125;<br>    <span class=\"hljs-comment\">/** Insert an element into the circular queue. Return true if the operation is successful. */</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">bool</span> <span class=\"hljs-title\">enQueue</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> value)</span><br>    </span>&#123;<br>        <span class=\"hljs-keyword\">if</span> (queueLength &gt;= queueSize)<br>        &#123;<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>        &#125;<br>        <span class=\"hljs-keyword\">if</span> (queueLength == <span class=\"hljs-number\">0</span>)<br>        &#123;<br>            queue_data[<span class=\"hljs-number\">0</span>] = value;<br>            qFront = <span class=\"hljs-number\">0</span>; <span class=\"hljs-comment\">//这里是一个坑，如果队列初始化时为空队列，首位的位置要重新设置</span><br>            qEnd = <span class=\"hljs-number\">0</span>;<br>        &#125;<br>        <span class=\"hljs-keyword\">else</span><br>        &#123;<br>            qEnd++;<br>            <span class=\"hljs-keyword\">if</span> (qEnd == queueSize)<br>            &#123;<br>                qEnd = <span class=\"hljs-number\">0</span>;<br>            &#125;<br>            queue_data[qEnd] = value;<br>        &#125;<br>        queueLength++;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<br>    &#125;<br><br>    <span class=\"hljs-comment\">/** Delete an element from the circular queue. Return true if the operation is successful. */</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">bool</span> <span class=\"hljs-title\">deQueue</span><span class=\"hljs-params\">()</span><br>    </span>&#123;<br>        <span class=\"hljs-keyword\">if</span> (queueLength == <span class=\"hljs-number\">0</span>)<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>        <span class=\"hljs-keyword\">else</span><br>        &#123;<br>            qFront++;<br>            <span class=\"hljs-keyword\">if</span> (qFront == queueSize)<br>                qFront = <span class=\"hljs-number\">0</span>;<br>        &#125;<br>        queueLength--;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<br>    &#125;<br><br>    <span class=\"hljs-comment\">/** Get the front item from the queue. */</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">Front</span><span class=\"hljs-params\">()</span><br>    </span>&#123;<br>        <span class=\"hljs-keyword\">if</span> (queueLength == <span class=\"hljs-number\">0</span>)<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span>;<br>        <span class=\"hljs-keyword\">return</span> queue_data[qFront];<br>    &#125;<br><br>    <span class=\"hljs-comment\">/** Get the last item from the queue. */</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">Rear</span><span class=\"hljs-params\">()</span><br>    </span>&#123;<br>        <span class=\"hljs-keyword\">if</span> (queueLength == <span class=\"hljs-number\">0</span>)<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span>;<br>        <span class=\"hljs-keyword\">return</span> queue_data[qEnd];<br>    &#125;<br><br>    <span class=\"hljs-comment\">/** Checks whether the circular queue is empty or not. */</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">bool</span> <span class=\"hljs-title\">isEmpty</span><span class=\"hljs-params\">()</span><br>    </span>&#123;<br>        <span class=\"hljs-keyword\">if</span> (queueLength == <span class=\"hljs-number\">0</span>)<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>    &#125;<br><br>    <span class=\"hljs-comment\">/** Checks whether the circular queue is full or not. */</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">bool</span> <span class=\"hljs-title\">isFull</span><span class=\"hljs-params\">()</span><br>    </span>&#123;<br>        <span class=\"hljs-keyword\">if</span> (queueLength == queueSize)<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>\n<h2 id=\"链表\"><a href=\"#链表\" class=\"headerlink\" title=\"链表\"></a>链表</h2><p>链表是一种非连续非顺序的数据结构,每一个元素只汇报下一个元素(或前一个元素)的位置(或指针).</p>\n<p>链表的插入删除数据十分方便,但是要想读出某个位置的值就很困难,因为你要遍历链表才能知道那个位置的数据.</p>\n<p>链表的设计代码(单向链表):</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Node</span><br>&#123;</span><br><span class=\"hljs-keyword\">public</span>:<br>    <span class=\"hljs-keyword\">int</span> value = <span class=\"hljs-number\">0</span>;<br>    Node *next;<br>&#125;;<br><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MyLinkedList</span><br>&#123;</span><br><span class=\"hljs-keyword\">public</span>:<br>    Node *head, *next, *tail;<br>    <span class=\"hljs-keyword\">int</span> length;<br><br>    <span class=\"hljs-comment\">/** Initialize your data structure here. */</span><br>    MyLinkedList()<br>    &#123;<br>        head = <span class=\"hljs-literal\">NULL</span>;<br>        next = <span class=\"hljs-literal\">NULL</span>;<br>        tail = <span class=\"hljs-literal\">NULL</span>;<br>        length = <span class=\"hljs-number\">0</span>;<br>    &#125;<br><br>    <span class=\"hljs-comment\">/** Get the value of the index-th node in the linked list. If the index is invalid, return -1. */</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">get</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> index)</span><br>    </span>&#123;<br>        <span class=\"hljs-keyword\">if</span> (index &lt; <span class=\"hljs-number\">0</span> || index &gt;= length)<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span>;<br>        <span class=\"hljs-keyword\">else</span><br>        &#123;<br>            Node *current = head;<br>            <span class=\"hljs-keyword\">int</span> returnVal = head-&gt;value;<br>            <span class=\"hljs-keyword\">while</span> (index-- &gt;= <span class=\"hljs-number\">0</span>)<br>            &#123;<br>                returnVal = current-&gt;value;<br>                current = current-&gt;next;<br>            &#125;<br>            <span class=\"hljs-keyword\">return</span> returnVal;<br>        &#125;<br>    &#125;<br><br>    <span class=\"hljs-comment\">/** Add a node of value val before the first element of the linked list. After the insertion, the new node will be the first node of the linked list. */</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">addAtHead</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> val)</span><br>    </span>&#123;<br>        <span class=\"hljs-keyword\">if</span> (head == <span class=\"hljs-literal\">NULL</span>)<br>        &#123;<br>            Node *currentNode = <span class=\"hljs-keyword\">new</span> Node;<br>            head = currentNode;<br>            head-&gt;value = val;<br>            head-&gt;next = <span class=\"hljs-literal\">NULL</span>;<br>            tail = head;<br>            length = <span class=\"hljs-number\">1</span>;<br>        &#125;<br>        <span class=\"hljs-keyword\">else</span><br>        &#123;<br>            Node *currentNode = <span class=\"hljs-keyword\">new</span> Node;<br>            (*currentNode).next = head;<br>            (*currentNode).value = val;<br>            head = currentNode;<br>            length++;<br>        &#125;<br>    &#125;<br><br>    <span class=\"hljs-comment\">/** Append a node of value val to the last element of the linked list. */</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">addAtTail</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> val)</span><br>    </span>&#123;<br>        <span class=\"hljs-keyword\">if</span> (head == <span class=\"hljs-literal\">NULL</span>)<br>        &#123;<br>            Node *currentNode = <span class=\"hljs-keyword\">new</span> Node;<br>            head = currentNode;<br>            head-&gt;value = val;<br>            head-&gt;next = <span class=\"hljs-literal\">NULL</span>;<br>            tail = head;<br>            length = <span class=\"hljs-number\">1</span>;<br>        &#125;<br>        <span class=\"hljs-keyword\">else</span><br>        &#123;<br>            Node *currentNode = <span class=\"hljs-keyword\">new</span> Node;<br>            (*currentNode).next = <span class=\"hljs-literal\">NULL</span>;<br>            (*currentNode).value = val;<br>            (*tail).next = currentNode;<br>            tail = currentNode;<br>            length++;<br>        &#125;<br>    &#125;<br><br>    <span class=\"hljs-comment\">/** Add a node of value val before the index-th node in the linked list. If index equals to the length of linked list, the node will be appended to the end of linked list. If index is greater than the length, the node will not be inserted. */</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">addAtIndex</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> index, <span class=\"hljs-keyword\">int</span> val)</span><br>    </span>&#123;<br>        Node *current = <span class=\"hljs-keyword\">new</span> Node;<br>        Node *insert = head;<br>        <span class=\"hljs-keyword\">if</span> (index &lt; <span class=\"hljs-number\">0</span> || index &gt; length)<br>        &#123;<br>            <span class=\"hljs-keyword\">return</span>;<br>        &#125;<br>        <span class=\"hljs-keyword\">if</span> (index == <span class=\"hljs-number\">0</span>)<br>        &#123;<br>            (*<span class=\"hljs-keyword\">this</span>).addAtHead(val);<br>        &#125;<br>        <span class=\"hljs-keyword\">else</span><br>        &#123;<br>            <span class=\"hljs-keyword\">if</span> (index &gt; length)<br>                <span class=\"hljs-keyword\">return</span>;<br>            <span class=\"hljs-keyword\">if</span> (index == length)<br>            &#123;<br>                (*<span class=\"hljs-keyword\">this</span>).addAtTail(val);<br>            &#125;<br>            <span class=\"hljs-keyword\">else</span><br>            &#123;<br>                <span class=\"hljs-keyword\">while</span> (index-- &gt; <span class=\"hljs-number\">1</span>)<br>                &#123;<br>                    insert = insert-&gt;next;<br>                &#125;<br>                current-&gt;next = insert-&gt;next;<br>                current-&gt;value = val;<br>                insert-&gt;next = current;<br>                length++;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class=\"hljs-comment\">/** Delete the index-th node in the linked list, if the index is valid. */</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">deleteAtIndex</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> index)</span><br>    </span>&#123;<br>        <span class=\"hljs-keyword\">if</span> (index &lt; <span class=\"hljs-number\">0</span> || index &gt;= length)<br>            <span class=\"hljs-keyword\">return</span>;<br>        <span class=\"hljs-keyword\">if</span> (index == <span class=\"hljs-number\">0</span>)<br>        &#123;<br>            head = head-&gt;next;<br>            length--;<br>        &#125;<br>        <span class=\"hljs-keyword\">else</span><br>        &#123;<br>            Node *deleteNode = head;<br>            <span class=\"hljs-keyword\">while</span> (index-- &gt; <span class=\"hljs-number\">1</span>)<br>            &#123;<br>                deleteNode = deleteNode-&gt;next;<br>            &#125;<br>            deleteNode-&gt;next = deleteNode-&gt;next-&gt;next;<br>            <span class=\"hljs-keyword\">if</span>(deleteNode-&gt;next == <span class=\"hljs-literal\">NULL</span>)<br>            &#123;<br>                tail = deleteNode;<br>            &#125;<br>            length--;<br>        &#125;<br>    &#125;<br>&#125;;<br><br><span class=\"hljs-comment\">/**<br> * Your MyLinkedList object will be instantiated and called as such:<br> * MyLinkedList* obj = new MyLinkedList();<br> * int param_1 = obj-&gt;get(index);<br> * obj-&gt;addAtHead(val);<br> * obj-&gt;addAtTail(val);<br> * obj-&gt;addAtIndex(index,val);<br> * obj-&gt;deleteAtIndex(index);<br> */</span><br></code></pre></td></tr></table></figure>\n<h3 id=\"STL中的链表\"><a href=\"#STL中的链表\" class=\"headerlink\" title=\"STL中的链表\"></a>STL中的链表</h3><p>C++的STL包含了一个模板类:list.</p>\n<p>这个模板类提供了一套完整的链表系统,这样你就不需要动手造轮子.</p>\n<p>c++的list是由一个双向链表实现的.</p>\n<p>下面是一些用法及实例:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-built_in\">list</span>&lt;<span class=\"hljs-keyword\">int</span>&gt; my_list;  <span class=\"hljs-comment\">//构造list(空的)</span><br><span class=\"hljs-comment\">//将数组赋值到list的示例:</span><br><span class=\"hljs-keyword\">int</span> myints[] = &#123;<span class=\"hljs-number\">75</span>,<span class=\"hljs-number\">23</span>,<span class=\"hljs-number\">65</span>,<span class=\"hljs-number\">42</span>,<span class=\"hljs-number\">13</span>&#125;;<br><span class=\"hljs-function\"><span class=\"hljs-built_in\">list</span>&lt;<span class=\"hljs-keyword\">int</span>&gt; <span class=\"hljs-title\">my_list</span> <span class=\"hljs-params\">(myints, myints+<span class=\"hljs-number\">5</span>)</span></span>;<br><span class=\"hljs-comment\">//给予list一个初始大小,但全部赋初值:</span><br><span class=\"hljs-built_in\">std</span>::<span class=\"hljs-built_in\">list</span>&lt;<span class=\"hljs-keyword\">int</span>&gt; sayings &#123;<span class=\"hljs-number\">20</span>&#125;; <span class=\"hljs-comment\">// A list of 20 empty int</span><br><span class=\"hljs-function\"><span class=\"hljs-built_in\">std</span>::<span class=\"hljs-built_in\">list</span>&lt;<span class=\"hljs-keyword\">double</span>&gt; <span class=\"hljs-title\">values</span><span class=\"hljs-params\">(<span class=\"hljs-number\">50</span>, <span class=\"hljs-number\">3.14159265</span>)</span></span>;<span class=\"hljs-comment\">//A List of 50 same elements</span><br><span class=\"hljs-comment\">//使用迭代器</span><br>my_list.<span class=\"hljs-built_in\">begin</span>();<span class=\"hljs-comment\">//返回首迭代器</span><br>my_list.<span class=\"hljs-built_in\">end</span>();<span class=\"hljs-comment\">//返回尾迭代器</span><br>my_list.rbegin();<span class=\"hljs-comment\">//返回反向的首迭代器,记住,c++的list是一个双向链表,所以你可以这么做.</span><br>my_list.rend();<span class=\"hljs-comment\">//返回反向的尾迭代器</span><br></code></pre></td></tr></table></figure>\n<p>元素访问:</p>\n<p>迭代器访问:我觉得你应该很懂,参见前面的迭代器使用那一章节</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>函数名</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>front</td>\n<td>访问第一个元素</td>\n</tr>\n<tr>\n<td>back</td>\n<td>访问最后一个元素</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>元素插入删除:</p>\n<p>可以在迭代器指定的位置插入一个新的元素：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-function\"><span class=\"hljs-built_in\">std</span>::<span class=\"hljs-built_in\">list</span>&lt;<span class=\"hljs-keyword\">int</span>&gt; <span class=\"hljs-title\">data</span><span class=\"hljs-params\">(<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">55</span>)</span></span>; <span class=\"hljs-comment\">// 构建一个全为55的链表</span><br>data.insert(++<span class=\"hljs-built_in\">begin</span>(data), <span class=\"hljs-number\">66</span>); <span class=\"hljs-comment\">// 将66作为第二个元素插入</span><br></code></pre></td></tr></table></figure>\n<p>有关list,我们后面会根据 <em>C++ Prime</em> 和 <em>数据结构与算法分析</em> 中的内容进行详细说明.</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"前导知识\"><a href=\"#前导知识\" class=\"headerlink\" title=\"前导知识\"></a>前导知识</h1><h2 id=\"时间复杂度\"><a href=\"#时间复杂度\" class=\"headerlink\" title=\"时间复杂度\"></a>时间复杂度</h2><p>增长率的大O记法:</p>\n<p>O(N^2):以二次方级别增长</p>\n<p><strong>一般计算法则:</strong></p>\n<p>for循环:循环内语句时间*迭代次数</p>\n<p>嵌套循环:N^(循环嵌套数)</p>\n<p>顺序语句:单纯的将各段的时间相加</p>\n<p>if/else:取时间较长者计算</p>\n<p><strong>时间复杂度中的对数:</strong></p>\n<p>程序每次用O(1)时间将问题大小削减为一部分(通常为1/2,二分搜索)</p>\n<p>此时时间复杂度为O(logN)</p>\n<p>运用分治算法也可以实现一些复杂度为对数的时间复杂度算法.</p>\n<h1 id=\"数据结构实现\"><a href=\"#数据结构实现\" class=\"headerlink\" title=\"数据结构实现\"></a>数据结构实现</h1><h2 id=\"数据结构的表示\"><a href=\"#数据结构的表示\" class=\"headerlink\" title=\"数据结构的表示\"></a>数据结构的表示</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\">ADT structureName;<br>&#123;<br>    Data<br>\t&#123;<br> \t   var a;<br> \t   var b;<br> \t   <span class=\"hljs-comment\">//......</span><br>\t&#125;<br>\tOperation<br>\t&#123;<br> \t   Ope1&#123;<br> \t       initial condition;<br> \t       Operation results;<br>\t    &#125;<br> \t   Ope2;<br> \t   <span class=\"hljs-comment\">//......</span><br>\t&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h2 id=\"数组-Array-最简单的表ADT-抽象数据结构-实现\"><a href=\"#数组-Array-最简单的表ADT-抽象数据结构-实现\" class=\"headerlink\" title=\"数组(Array):最简单的表ADT(抽象数据结构)实现\"></a>数组(Array):最简单的表ADT(抽象数据结构)实现</h2><p>数组是最基本的数据结构,虽然我们在学C++和C时已经了解过,但深入探讨一下数组仍旧很有必要.</p>\n<p> 数组是可以再内存中连续存储多个元素的结构，在内存中的分配也是连续的，数组中的元素通过数组下标进行访问，<strong>数组下标从0开始</strong>。</p>\n<p>C++实现:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">int</span> arr[<span class=\"hljs-number\">5</span>];<span class=\"hljs-comment\">//建立数组</span><br><span class=\"hljs-keyword\">int</span> arr[<span class=\"hljs-number\">5</span>]=&#123;<span class=\"hljs-number\">0</span>&#125;;<span class=\"hljs-comment\">//建立数组时顺便全部初始化为0</span><br><span class=\"hljs-keyword\">int</span> *p = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">int</span>[<span class=\"hljs-number\">5</span>];<span class=\"hljs-comment\">//运行时创建数组</span><br><span class=\"hljs-keyword\">delete</span>[] p;<span class=\"hljs-comment\">//释放内存</span><br></code></pre></td></tr></table></figure>\n<p>优点：<br>1、按照索引查询元素速度快<br>2、按照索引遍历数组方便</p>\n<p>缺点：<br>1、数组的大小固定后就无法扩容了<br>2、数组只能存储一种类型的数据<br>3、添加，删除的操作慢，因为要移动其他的元素。</p>\n<p>4.需要一整块连续的存储空间,这个要求就很苛刻,这意味着你没法开很大的数组.</p>\n<p>适用场景：<br>频繁查询，对存储空间要求不大，很少增加和删除的情况。</p>\n<h2 id=\"栈-stack\"><a href=\"#栈-stack\" class=\"headerlink\" title=\"栈(stack)\"></a>栈(stack)</h2><p>接下来讨论栈ADT:</p>\n<p>栈可以通过表来实现,任何一种实现表的方法都可以实现栈.</p>\n<p>栈只能读取并操作栈顶元素,因此其可以使用一个简单链表来轻松实现:</p>\n<p>在链表的最后一个元素的右边直接插入数据.</p>\n<p>接下来使用链表式结构实现一个栈，并能做到在其中查找最小值</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;bits/stdc++.h&gt;</span></span><br><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-built_in\">std</span>;<br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Node</span><br>&#123;</span><br><span class=\"hljs-keyword\">public</span>:<br>    <span class=\"hljs-keyword\">int</span> value = <span class=\"hljs-number\">0</span>;<br>    Node *next;<br>&#125;;<br><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MinStack</span><br>&#123;</span><br><span class=\"hljs-keyword\">public</span>:<br>    Node *topNode;<br>    <span class=\"hljs-keyword\">int</span> <span class=\"hljs-built_in\">min</span>;<br>    <span class=\"hljs-keyword\">bool</span> isFirst = <span class=\"hljs-literal\">true</span>;<br>    <span class=\"hljs-comment\">/** initialize your data structure here. */</span><br>    MinStack()<br>    &#123;<br>        topNode = <span class=\"hljs-literal\">NULL</span>;<br>    &#125;<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">push</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> x)</span><br>    </span>&#123;<br>        Node *currentNode = <span class=\"hljs-keyword\">new</span> Node;<br>        currentNode-&gt;value = x;<br>        currentNode-&gt;next = topNode;<br>        topNode = currentNode;<br>        <span class=\"hljs-keyword\">if</span> (isFirst)<br>        &#123;<br>            <span class=\"hljs-built_in\">min</span> = x;<br>            isFirst = <span class=\"hljs-literal\">false</span>;<br>        &#125;<br>        <span class=\"hljs-keyword\">if</span> (x &lt; <span class=\"hljs-built_in\">min</span>)<br>        &#123;<br>            <span class=\"hljs-built_in\">min</span> = x;<br>        &#125;<br>    &#125;<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">pop</span><span class=\"hljs-params\">()</span><br>    </span>&#123;<br>        <br>        <span class=\"hljs-keyword\">if</span> (topNode-&gt;value == <span class=\"hljs-built_in\">min</span>)<span class=\"hljs-comment\">//如果栈顶数为最小值的处理方式</span><br>        &#123;<br>            Node *search = topNode;<br>            <span class=\"hljs-keyword\">if</span> (search-&gt;next != <span class=\"hljs-literal\">NULL</span>)<span class=\"hljs-comment\">//注意这里的坑：如果是取最后一个结点，则清空栈</span><br>            &#123;<br>                <span class=\"hljs-built_in\">min</span> = search-&gt;next-&gt;value;<br>            &#125;<br>            <span class=\"hljs-keyword\">else</span><br>            &#123;<br>                isFirst = <span class=\"hljs-literal\">true</span>;<br>            &#125;<br>            <span class=\"hljs-keyword\">while</span> (search-&gt;next != <span class=\"hljs-literal\">NULL</span>)<br>            &#123;<br>                search = search-&gt;next;<br>                <span class=\"hljs-keyword\">if</span> (search-&gt;value &lt; <span class=\"hljs-built_in\">min</span>)<br>                &#123;<br>                    <span class=\"hljs-built_in\">min</span> = search-&gt;value;<br>                &#125;<br>            &#125;<br>        &#125;<br>        topNode = topNode-&gt;next;<br>    &#125;<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">top</span><span class=\"hljs-params\">()</span><br>    </span>&#123;<br>        <span class=\"hljs-keyword\">return</span> topNode-&gt;value;<br>    &#125;<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">getMin</span><span class=\"hljs-params\">()</span><br>    </span>&#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">min</span>;<br>    &#125;<br>&#125;;<br><br><span class=\"hljs-comment\">/**<br> * Your MinStack object will be instantiated and called as such:<br> * MinStack* obj = new MinStack();<br> * obj-&gt;push(x);<br> * obj-&gt;pop();<br> * int param_3 = obj-&gt;top();<br> * int param_4 = obj-&gt;getMin();<br> */</span><br></code></pre></td></tr></table></figure>\n<p>使用一个动态数组也可以简单的实现栈,c++中的模板类vector提供了</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-built_in\">vector</span>.push_back();<br><span class=\"hljs-built_in\">vector</span>.pop_back();<br></code></pre></td></tr></table></figure>\n<p>功能.</p>\n<p>栈是最适合实现递归的一种数据结构,我们可以使用栈的思想实现一个逆波兰计算器.</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-comment\">//逆波兰计算器(从一个string数组提取输入)</span><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Solution</span> &#123;</span><br><span class=\"hljs-keyword\">public</span>:<br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">evalRPN</span><span class=\"hljs-params\">(<span class=\"hljs-built_in\">std</span>::<span class=\"hljs-built_in\">vector</span>&lt;<span class=\"hljs-built_in\">std</span>::<span class=\"hljs-built_in\">string</span>&gt;&amp; tokens)</span> </span>&#123;<br>        <span class=\"hljs-built_in\">std</span>::<span class=\"hljs-built_in\">stack</span>&lt;<span class=\"hljs-keyword\">int</span>&gt; cacuList;<br>        <span class=\"hljs-built_in\">std</span>::<span class=\"hljs-built_in\">vector</span>&lt;<span class=\"hljs-built_in\">std</span>::<span class=\"hljs-built_in\">string</span>&gt;::iterator cacuValue = tokens.<span class=\"hljs-built_in\">begin</span>();<br>        <span class=\"hljs-keyword\">while</span>(cacuValue != tokens.<span class=\"hljs-built_in\">end</span>())<br>        &#123;<br>            <span class=\"hljs-keyword\">if</span>(cacuValue-&gt;length() == <span class=\"hljs-number\">1</span>) &#123;            <span class=\"hljs-comment\">//在位数为1时确认为符号或数字，将负号与减号分开</span><br>                <span class=\"hljs-keyword\">if</span> ((*cacuValue)[<span class=\"hljs-number\">0</span>] == <span class=\"hljs-string\">'+'</span>) &#123;<br>                    <span class=\"hljs-keyword\">int</span> top, res;<br>                    top = cacuList.top();<br>                    cacuList.pop();<br>                    res = cacuList.top() + top;<br>                    cacuList.pop();<br>                    cacuList.push(res);<br>                &#125;<br>                <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> ((*cacuValue)[<span class=\"hljs-number\">0</span>] == <span class=\"hljs-string\">'-'</span>) &#123;<br>                    <span class=\"hljs-keyword\">int</span> top, res;<br>                    top = cacuList.top();<br>                    cacuList.pop();<br>                    res = cacuList.top() - top;<br>                    cacuList.pop();<br>                    cacuList.push(res);<br>                &#125;<br>                <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> ((*cacuValue)[<span class=\"hljs-number\">0</span>] == <span class=\"hljs-string\">'*'</span>) &#123;<br>                    <span class=\"hljs-keyword\">int</span> top, res;<br>                    top = cacuList.top();<br>                    cacuList.pop();<br>                    res = cacuList.top() * top;<br>                    cacuList.pop();<br>                    cacuList.push(res);<br>                &#125;<br>                <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> ((*cacuValue)[<span class=\"hljs-number\">0</span>] == <span class=\"hljs-string\">'/'</span>) &#123;<br>                    <span class=\"hljs-keyword\">int</span> top, res;<br>                    top = cacuList.top();<br>                    cacuList.pop();<br>                    res = cacuList.top() / top;<br>                    cacuList.pop();<br>                    cacuList.push(res);<br>                &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>                    cacuList.push((*cacuValue)[<span class=\"hljs-number\">0</span>]-<span class=\"hljs-string\">'0'</span>);<br>                &#125;<br>            &#125;<br>            <span class=\"hljs-keyword\">else</span>&#123;<br>                <span class=\"hljs-keyword\">int</span> inputNumber=<span class=\"hljs-number\">0</span>;<br>                <span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">0</span>;<br>                <span class=\"hljs-keyword\">bool</span> rev = <span class=\"hljs-literal\">false</span>;<br>                <span class=\"hljs-keyword\">int</span> digit = cacuValue-&gt;length() - <span class=\"hljs-number\">1</span>;<br>                <span class=\"hljs-keyword\">if</span>((*cacuValue)[<span class=\"hljs-number\">0</span>] == <span class=\"hljs-string\">'-'</span>)<br>                &#123;<br>                    i++;<br>                    rev = <span class=\"hljs-literal\">true</span>;<br>                    digit--;<br>                &#125;<br>                <span class=\"hljs-keyword\">for</span> (; i &lt; cacuValue-&gt;length(); ++i) &#123;<br>                    inputNumber += <span class=\"hljs-built_in\">pow</span>(<span class=\"hljs-number\">10</span>,digit) * ((*cacuValue)[i]-<span class=\"hljs-string\">'0'</span>);<br>                    digit--;<br>                &#125;<br>                <span class=\"hljs-keyword\">if</span>(rev)<br>                &#123;<br>                    inputNumber*= <span class=\"hljs-number\">-1</span>;<br>                &#125;<br>                cacuList.push(inputNumber);<br>            &#125;<br>            cacuValue++;<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> cacuList.top();<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>\n<h2 id=\"队列\"><a href=\"#队列\" class=\"headerlink\" title=\"队列\"></a>队列</h2><p>队列的实现:使用链表或是循环数组</p>\n<p>链表的实现方式非常简单,只需加上几个方法,出队就是移除初数据,入队就是在队列尾部上一个新数据.由是我们不关心如何用链表实现,我们关心如何用循环数组实现.</p>\n<p>首先使用一个数组来模拟一个短队列:</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n<th style=\"text-align:center\">1</th>\n<th style=\"text-align:center\">2</th>\n<th style=\"text-align:center\">3</th>\n<th style=\"text-align:center\">4</th>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td></td>\n<td></td>\n<td style=\"text-align:center\">front</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">back</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>当队列塞满数组之后,就绕回到开头:</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">7</th>\n<th></th>\n<th style=\"text-align:center\">1</th>\n<th style=\"text-align:center\">2</th>\n<th style=\"text-align:center\">3</th>\n<th style=\"text-align:center\">4</th>\n<th style=\"text-align:center\">5</th>\n<th style=\"text-align:center\">6</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">back</td>\n<td></td>\n<td style=\"text-align:center\">front</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>而在队首取数也很容易,只需将队首对应的下标改变:</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">7</th>\n<th></th>\n<th style=\"text-align:center\">1</th>\n<th style=\"text-align:center\">2</th>\n<th style=\"text-align:center\">3</th>\n<th style=\"text-align:center\">4</th>\n<th style=\"text-align:center\">5</th>\n<th style=\"text-align:center\">6</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">back</td>\n<td></td>\n<td style=\"text-align:center\"><code>删除front</code></td>\n<td style=\"text-align:center\">front</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>实现队列数组的长度取决于队列长度.</p>\n<p>循环数组实现的队列：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MyCircularQueue</span><br>&#123;</span><br><span class=\"hljs-keyword\">public</span>:<br>    <span class=\"hljs-built_in\">vector</span>&lt;<span class=\"hljs-keyword\">int</span>&gt; queue_data;<br>    <span class=\"hljs-keyword\">int</span> queueLength = <span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-keyword\">int</span> queueSize = <span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-keyword\">int</span> qFront = <span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-keyword\">int</span> qEnd = <span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-comment\">/** Initialize your data structure here. Set the size of the queue to be k. */</span><br>    MyCircularQueue(<span class=\"hljs-keyword\">int</span> k)<br>    &#123;<br>        queue_data.resize(k);<br>        queueSize = k;<br>    &#125;<br>    <span class=\"hljs-comment\">/** Insert an element into the circular queue. Return true if the operation is successful. */</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">bool</span> <span class=\"hljs-title\">enQueue</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> value)</span><br>    </span>&#123;<br>        <span class=\"hljs-keyword\">if</span> (queueLength &gt;= queueSize)<br>        &#123;<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>        &#125;<br>        <span class=\"hljs-keyword\">if</span> (queueLength == <span class=\"hljs-number\">0</span>)<br>        &#123;<br>            queue_data[<span class=\"hljs-number\">0</span>] = value;<br>            qFront = <span class=\"hljs-number\">0</span>; <span class=\"hljs-comment\">//这里是一个坑，如果队列初始化时为空队列，首位的位置要重新设置</span><br>            qEnd = <span class=\"hljs-number\">0</span>;<br>        &#125;<br>        <span class=\"hljs-keyword\">else</span><br>        &#123;<br>            qEnd++;<br>            <span class=\"hljs-keyword\">if</span> (qEnd == queueSize)<br>            &#123;<br>                qEnd = <span class=\"hljs-number\">0</span>;<br>            &#125;<br>            queue_data[qEnd] = value;<br>        &#125;<br>        queueLength++;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<br>    &#125;<br><br>    <span class=\"hljs-comment\">/** Delete an element from the circular queue. Return true if the operation is successful. */</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">bool</span> <span class=\"hljs-title\">deQueue</span><span class=\"hljs-params\">()</span><br>    </span>&#123;<br>        <span class=\"hljs-keyword\">if</span> (queueLength == <span class=\"hljs-number\">0</span>)<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>        <span class=\"hljs-keyword\">else</span><br>        &#123;<br>            qFront++;<br>            <span class=\"hljs-keyword\">if</span> (qFront == queueSize)<br>                qFront = <span class=\"hljs-number\">0</span>;<br>        &#125;<br>        queueLength--;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<br>    &#125;<br><br>    <span class=\"hljs-comment\">/** Get the front item from the queue. */</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">Front</span><span class=\"hljs-params\">()</span><br>    </span>&#123;<br>        <span class=\"hljs-keyword\">if</span> (queueLength == <span class=\"hljs-number\">0</span>)<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span>;<br>        <span class=\"hljs-keyword\">return</span> queue_data[qFront];<br>    &#125;<br><br>    <span class=\"hljs-comment\">/** Get the last item from the queue. */</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">Rear</span><span class=\"hljs-params\">()</span><br>    </span>&#123;<br>        <span class=\"hljs-keyword\">if</span> (queueLength == <span class=\"hljs-number\">0</span>)<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span>;<br>        <span class=\"hljs-keyword\">return</span> queue_data[qEnd];<br>    &#125;<br><br>    <span class=\"hljs-comment\">/** Checks whether the circular queue is empty or not. */</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">bool</span> <span class=\"hljs-title\">isEmpty</span><span class=\"hljs-params\">()</span><br>    </span>&#123;<br>        <span class=\"hljs-keyword\">if</span> (queueLength == <span class=\"hljs-number\">0</span>)<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>    &#125;<br><br>    <span class=\"hljs-comment\">/** Checks whether the circular queue is full or not. */</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">bool</span> <span class=\"hljs-title\">isFull</span><span class=\"hljs-params\">()</span><br>    </span>&#123;<br>        <span class=\"hljs-keyword\">if</span> (queueLength == queueSize)<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>\n<h2 id=\"链表\"><a href=\"#链表\" class=\"headerlink\" title=\"链表\"></a>链表</h2><p>链表是一种非连续非顺序的数据结构,每一个元素只汇报下一个元素(或前一个元素)的位置(或指针).</p>\n<p>链表的插入删除数据十分方便,但是要想读出某个位置的值就很困难,因为你要遍历链表才能知道那个位置的数据.</p>\n<p>链表的设计代码(单向链表):</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Node</span><br>&#123;</span><br><span class=\"hljs-keyword\">public</span>:<br>    <span class=\"hljs-keyword\">int</span> value = <span class=\"hljs-number\">0</span>;<br>    Node *next;<br>&#125;;<br><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MyLinkedList</span><br>&#123;</span><br><span class=\"hljs-keyword\">public</span>:<br>    Node *head, *next, *tail;<br>    <span class=\"hljs-keyword\">int</span> length;<br><br>    <span class=\"hljs-comment\">/** Initialize your data structure here. */</span><br>    MyLinkedList()<br>    &#123;<br>        head = <span class=\"hljs-literal\">NULL</span>;<br>        next = <span class=\"hljs-literal\">NULL</span>;<br>        tail = <span class=\"hljs-literal\">NULL</span>;<br>        length = <span class=\"hljs-number\">0</span>;<br>    &#125;<br><br>    <span class=\"hljs-comment\">/** Get the value of the index-th node in the linked list. If the index is invalid, return -1. */</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">get</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> index)</span><br>    </span>&#123;<br>        <span class=\"hljs-keyword\">if</span> (index &lt; <span class=\"hljs-number\">0</span> || index &gt;= length)<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span>;<br>        <span class=\"hljs-keyword\">else</span><br>        &#123;<br>            Node *current = head;<br>            <span class=\"hljs-keyword\">int</span> returnVal = head-&gt;value;<br>            <span class=\"hljs-keyword\">while</span> (index-- &gt;= <span class=\"hljs-number\">0</span>)<br>            &#123;<br>                returnVal = current-&gt;value;<br>                current = current-&gt;next;<br>            &#125;<br>            <span class=\"hljs-keyword\">return</span> returnVal;<br>        &#125;<br>    &#125;<br><br>    <span class=\"hljs-comment\">/** Add a node of value val before the first element of the linked list. After the insertion, the new node will be the first node of the linked list. */</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">addAtHead</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> val)</span><br>    </span>&#123;<br>        <span class=\"hljs-keyword\">if</span> (head == <span class=\"hljs-literal\">NULL</span>)<br>        &#123;<br>            Node *currentNode = <span class=\"hljs-keyword\">new</span> Node;<br>            head = currentNode;<br>            head-&gt;value = val;<br>            head-&gt;next = <span class=\"hljs-literal\">NULL</span>;<br>            tail = head;<br>            length = <span class=\"hljs-number\">1</span>;<br>        &#125;<br>        <span class=\"hljs-keyword\">else</span><br>        &#123;<br>            Node *currentNode = <span class=\"hljs-keyword\">new</span> Node;<br>            (*currentNode).next = head;<br>            (*currentNode).value = val;<br>            head = currentNode;<br>            length++;<br>        &#125;<br>    &#125;<br><br>    <span class=\"hljs-comment\">/** Append a node of value val to the last element of the linked list. */</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">addAtTail</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> val)</span><br>    </span>&#123;<br>        <span class=\"hljs-keyword\">if</span> (head == <span class=\"hljs-literal\">NULL</span>)<br>        &#123;<br>            Node *currentNode = <span class=\"hljs-keyword\">new</span> Node;<br>            head = currentNode;<br>            head-&gt;value = val;<br>            head-&gt;next = <span class=\"hljs-literal\">NULL</span>;<br>            tail = head;<br>            length = <span class=\"hljs-number\">1</span>;<br>        &#125;<br>        <span class=\"hljs-keyword\">else</span><br>        &#123;<br>            Node *currentNode = <span class=\"hljs-keyword\">new</span> Node;<br>            (*currentNode).next = <span class=\"hljs-literal\">NULL</span>;<br>            (*currentNode).value = val;<br>            (*tail).next = currentNode;<br>            tail = currentNode;<br>            length++;<br>        &#125;<br>    &#125;<br><br>    <span class=\"hljs-comment\">/** Add a node of value val before the index-th node in the linked list. If index equals to the length of linked list, the node will be appended to the end of linked list. If index is greater than the length, the node will not be inserted. */</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">addAtIndex</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> index, <span class=\"hljs-keyword\">int</span> val)</span><br>    </span>&#123;<br>        Node *current = <span class=\"hljs-keyword\">new</span> Node;<br>        Node *insert = head;<br>        <span class=\"hljs-keyword\">if</span> (index &lt; <span class=\"hljs-number\">0</span> || index &gt; length)<br>        &#123;<br>            <span class=\"hljs-keyword\">return</span>;<br>        &#125;<br>        <span class=\"hljs-keyword\">if</span> (index == <span class=\"hljs-number\">0</span>)<br>        &#123;<br>            (*<span class=\"hljs-keyword\">this</span>).addAtHead(val);<br>        &#125;<br>        <span class=\"hljs-keyword\">else</span><br>        &#123;<br>            <span class=\"hljs-keyword\">if</span> (index &gt; length)<br>                <span class=\"hljs-keyword\">return</span>;<br>            <span class=\"hljs-keyword\">if</span> (index == length)<br>            &#123;<br>                (*<span class=\"hljs-keyword\">this</span>).addAtTail(val);<br>            &#125;<br>            <span class=\"hljs-keyword\">else</span><br>            &#123;<br>                <span class=\"hljs-keyword\">while</span> (index-- &gt; <span class=\"hljs-number\">1</span>)<br>                &#123;<br>                    insert = insert-&gt;next;<br>                &#125;<br>                current-&gt;next = insert-&gt;next;<br>                current-&gt;value = val;<br>                insert-&gt;next = current;<br>                length++;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class=\"hljs-comment\">/** Delete the index-th node in the linked list, if the index is valid. */</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">deleteAtIndex</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> index)</span><br>    </span>&#123;<br>        <span class=\"hljs-keyword\">if</span> (index &lt; <span class=\"hljs-number\">0</span> || index &gt;= length)<br>            <span class=\"hljs-keyword\">return</span>;<br>        <span class=\"hljs-keyword\">if</span> (index == <span class=\"hljs-number\">0</span>)<br>        &#123;<br>            head = head-&gt;next;<br>            length--;<br>        &#125;<br>        <span class=\"hljs-keyword\">else</span><br>        &#123;<br>            Node *deleteNode = head;<br>            <span class=\"hljs-keyword\">while</span> (index-- &gt; <span class=\"hljs-number\">1</span>)<br>            &#123;<br>                deleteNode = deleteNode-&gt;next;<br>            &#125;<br>            deleteNode-&gt;next = deleteNode-&gt;next-&gt;next;<br>            <span class=\"hljs-keyword\">if</span>(deleteNode-&gt;next == <span class=\"hljs-literal\">NULL</span>)<br>            &#123;<br>                tail = deleteNode;<br>            &#125;<br>            length--;<br>        &#125;<br>    &#125;<br>&#125;;<br><br><span class=\"hljs-comment\">/**<br> * Your MyLinkedList object will be instantiated and called as such:<br> * MyLinkedList* obj = new MyLinkedList();<br> * int param_1 = obj-&gt;get(index);<br> * obj-&gt;addAtHead(val);<br> * obj-&gt;addAtTail(val);<br> * obj-&gt;addAtIndex(index,val);<br> * obj-&gt;deleteAtIndex(index);<br> */</span><br></code></pre></td></tr></table></figure>\n<h3 id=\"STL中的链表\"><a href=\"#STL中的链表\" class=\"headerlink\" title=\"STL中的链表\"></a>STL中的链表</h3><p>C++的STL包含了一个模板类:list.</p>\n<p>这个模板类提供了一套完整的链表系统,这样你就不需要动手造轮子.</p>\n<p>c++的list是由一个双向链表实现的.</p>\n<p>下面是一些用法及实例:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-built_in\">list</span>&lt;<span class=\"hljs-keyword\">int</span>&gt; my_list;  <span class=\"hljs-comment\">//构造list(空的)</span><br><span class=\"hljs-comment\">//将数组赋值到list的示例:</span><br><span class=\"hljs-keyword\">int</span> myints[] = &#123;<span class=\"hljs-number\">75</span>,<span class=\"hljs-number\">23</span>,<span class=\"hljs-number\">65</span>,<span class=\"hljs-number\">42</span>,<span class=\"hljs-number\">13</span>&#125;;<br><span class=\"hljs-function\"><span class=\"hljs-built_in\">list</span>&lt;<span class=\"hljs-keyword\">int</span>&gt; <span class=\"hljs-title\">my_list</span> <span class=\"hljs-params\">(myints, myints+<span class=\"hljs-number\">5</span>)</span></span>;<br><span class=\"hljs-comment\">//给予list一个初始大小,但全部赋初值:</span><br><span class=\"hljs-built_in\">std</span>::<span class=\"hljs-built_in\">list</span>&lt;<span class=\"hljs-keyword\">int</span>&gt; sayings &#123;<span class=\"hljs-number\">20</span>&#125;; <span class=\"hljs-comment\">// A list of 20 empty int</span><br><span class=\"hljs-function\"><span class=\"hljs-built_in\">std</span>::<span class=\"hljs-built_in\">list</span>&lt;<span class=\"hljs-keyword\">double</span>&gt; <span class=\"hljs-title\">values</span><span class=\"hljs-params\">(<span class=\"hljs-number\">50</span>, <span class=\"hljs-number\">3.14159265</span>)</span></span>;<span class=\"hljs-comment\">//A List of 50 same elements</span><br><span class=\"hljs-comment\">//使用迭代器</span><br>my_list.<span class=\"hljs-built_in\">begin</span>();<span class=\"hljs-comment\">//返回首迭代器</span><br>my_list.<span class=\"hljs-built_in\">end</span>();<span class=\"hljs-comment\">//返回尾迭代器</span><br>my_list.rbegin();<span class=\"hljs-comment\">//返回反向的首迭代器,记住,c++的list是一个双向链表,所以你可以这么做.</span><br>my_list.rend();<span class=\"hljs-comment\">//返回反向的尾迭代器</span><br></code></pre></td></tr></table></figure>\n<p>元素访问:</p>\n<p>迭代器访问:我觉得你应该很懂,参见前面的迭代器使用那一章节</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>函数名</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>front</td>\n<td>访问第一个元素</td>\n</tr>\n<tr>\n<td>back</td>\n<td>访问最后一个元素</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>元素插入删除:</p>\n<p>可以在迭代器指定的位置插入一个新的元素：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-function\"><span class=\"hljs-built_in\">std</span>::<span class=\"hljs-built_in\">list</span>&lt;<span class=\"hljs-keyword\">int</span>&gt; <span class=\"hljs-title\">data</span><span class=\"hljs-params\">(<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">55</span>)</span></span>; <span class=\"hljs-comment\">// 构建一个全为55的链表</span><br>data.insert(++<span class=\"hljs-built_in\">begin</span>(data), <span class=\"hljs-number\">66</span>); <span class=\"hljs-comment\">// 将66作为第二个元素插入</span><br></code></pre></td></tr></table></figure>\n<p>有关list,我们后面会根据 <em>C++ Prime</em> 和 <em>数据结构与算法分析</em> 中的内容进行详细说明.</p>\n"},{"layout":"post","title":"Web开发基础：HTML与CSS","intro":"","date":"2020-02-18T01:00:00.000Z","author":"Makinohara","catalog":true,"_content":"\n\n\n# 基础知识\n\n## 目录与相对目录\n\n```\n根目录： /\n上级目录： ../\n根目录下的路径：/img/......\n当前目录下的下级目录：img/......\n```\n\n","source":"_posts/2020-2-18-Web.markdown","raw":"---\nlayout:     post\ntitle:      \"Web开发基础：HTML与CSS\"\nintro:      \"\"\ndate:       2020-2-18 09:00:00\nauthor:     \"Makinohara\"\ncatalog: true\ntags:\n    - 工程开发\n---\n\n\n\n# 基础知识\n\n## 目录与相对目录\n\n```\n根目录： /\n上级目录： ../\n根目录下的路径：/img/......\n当前目录下的下级目录：img/......\n```\n\n","slug":"2020-2-18-Web","published":1,"updated":"2021-10-24T02:04:35.830Z","_id":"ckey85ujd000uho8a431rgx5e","comments":1,"photos":[],"link":"","content":"<h1 id=\"基础知识\"><a href=\"#基础知识\" class=\"headerlink\" title=\"基础知识\"></a>基础知识</h1><h2 id=\"目录与相对目录\"><a href=\"#目录与相对目录\" class=\"headerlink\" title=\"目录与相对目录\"></a>目录与相对目录</h2><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\">根目录： /<br>上级目录： <span class=\"hljs-built_in\">..</span>/<br>根目录下的路径：/img/<span class=\"hljs-built_in\">..</span><span class=\"hljs-built_in\">..</span><span class=\"hljs-built_in\">..</span><br>当前目录下的下级目录：img/<span class=\"hljs-built_in\">..</span><span class=\"hljs-built_in\">..</span><span class=\"hljs-built_in\">..</span><br></code></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"基础知识\"><a href=\"#基础知识\" class=\"headerlink\" title=\"基础知识\"></a>基础知识</h1><h2 id=\"目录与相对目录\"><a href=\"#目录与相对目录\" class=\"headerlink\" title=\"目录与相对目录\"></a>目录与相对目录</h2><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\">根目录： /<br>上级目录： <span class=\"hljs-built_in\">..</span>/<br>根目录下的路径：/img/<span class=\"hljs-built_in\">..</span><span class=\"hljs-built_in\">..</span><span class=\"hljs-built_in\">..</span><br>当前目录下的下级目录：img/<span class=\"hljs-built_in\">..</span><span class=\"hljs-built_in\">..</span><span class=\"hljs-built_in\">..</span><br></code></pre></td></tr></table></figure>\n"},{"layout":"post","title":"(转载)程序员修炼之路","intro":"","date":"2020-01-20T15:13:00.000Z","author":"Makinohara","featured_image":"http://msfasr.com/img/about-bg-walle.jpg","catalog":true,"_content":"\n\n\n> 本文转载自github文章 [程序员修炼之路 ](https://github.com/Snailclimb/programmer-advancement),作者是 [SnailClimb](https://github.com/Snailclimb).由于Github近日访问异常,故备份于此处与诸君共赏\n\n# 程序员修炼之路\n\n## 学习/编程好习惯\n\n养成一个学习习惯和编程习惯真的太重要了，一个好习惯的养成真的对后面的学习有很大帮助。说实话我自己当初在这方面吃了不少亏，很多比较好的习惯我也是后面自己才慢慢发现，所以这里想着重给大家说一下有哪些好的学习和编程习惯。\n\n### 正确提问\n\n我们平时任何时候都离不开提问特别是初学的时候，但是真正知道如何正确的提问的人很少。问别人问题前不要来一句“在吗”，你说你问了在吗我是回复好还是不回复好呢 ？不要让别人给你发 32 位的 JDK，除非你是喜欢那个人。\n\n更多关于如何提问的内容，详见 github 上开源版[『提问的智慧』]( https://github.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way/blob/master/README-zh_CN.md)，抽时间看一下，我想看完之后应该会有很多收获。\n\n更多内容可以查看我的这篇原创文章：[如何提问](https://github.com/Snailclimb/programmer-advancement/blob/master/docs/how-to-ask.md)\n\n### 健康生活\n\n我一直觉得这一方面是最重要的，我想很多人和我一样会无意识间忽略它，等到真的身体不舒服了，你才开始意识到健康生活的重要性。\n\n1. 除非万不得已，不要熬夜了。熬夜的危害就不用多说了，秃头加内分泌失调，你懂得！\n2. 看电脑 45 分钟之后，起来走 5 分钟，看看远方放松一下。不要觉得这 5 分钟浪费时间，相反，这 5 分钟可能为你带来更大的效率提升。\n3. 可以考虑买一个电脑架子，保护好自己脊椎的同时，办公体验也会提升很多。\n4. 可以下载一个护眼宝，感觉可以护眼模式挺棒的，非常适合我们这种需要经常盯着电脑的人使用，强烈安利。\n\n### 高效搜索\n\n尽量用 google 查找技术资料以及自己在学习中遇到的一些问题。\n\n### 解决 bug\n\n程序遇到问题先在 stackoverflow 找找，大部分别人已经遇到过了。如果上面没有的话，再考虑其他解决办法。实在解决不了的话，再去问你觉得有能力帮你解决的人（注意描述好自己的问题，不要随便截一个 Bug 图）。\n\n### 善于总结\n\n学习完任何一门知识后，你可能当时看视频感觉老师讲的挺容易懂的。但是，过几天后你发现你忘的一干二净，别人问你一个类似的问题，你一点思路都没有。所以，我推荐你学完一门知识后不光要及时复习，还要做好总结，让知识形成一个体系。另外，你可以假想自己要给别人讲这个知识点，你能不能把这个知识点讲清楚呢？如果不能，说明你对这个知识点还没有彻底了解。这也就是人们经常说的费曼学习技巧。\n\n总结的方式：\n\n1. 有道云笔记、OneNote......这类专门用来记录笔记的软件上；\n2. 思维导图；\n3. 通过写博客输出。可以考虑自己搭建一个博客(hexo+GithubPages 非常简单)，你也可以在简书、掘金......等等技术交流社区写博客。Markdown 格式参考：https://github.com/sparanoid/chinese-copywriting-guidelines 中文文案排版指北：https://github.com/sparanoid/chinese-copywriting-guidelines\n\n### 写博客\n\n写博客有哪些好处：\n\n1. 对知识有更加深的认识，让自己的知识体系更加完整;\n2. 督促自己学习;\n3. 可能会带来不错的经济收入;\n4. 提升个人影响力;\n5. 拥有更多机会;\n6. ......\n\n**总的来说，写博客是一件利己利彼的事情。你可能会从中收获到很多东西，你写的东西也可能对别人也有很大的帮助。但是，写博客还是比较耗费自己时间的，你需要和工作做好权衡。**\n\n**分享是一种美德，任何行业都不是靠单打独斗的，写博客、写好博客是一个程序员很好的习惯。我为人人，人人为我！**\n\n更多内容可以查看我的这篇原创文章：[我为什么推荐你写博客?](https://github.com/Snailclimb/programmer-advancement/blob/master/docs/我为什么推荐你写博客.md)\n\n### 多用 Github\n\n没事多去 Github 转转，如果有能力可以参与到一些开源项目中。多看看别人开源的优秀项目，看看别人的代码和设计思路，看的多了，你的编程思想也会慢慢得到提升。除了这些优秀的开源项目之外，Github 上面还有很多不错的开源文档、开源资料什么的，我觉得对我们平时学习都挺有帮助。Github 用得好还能装一下，毕竟人家还是一个全英文网站，咳咳咳。\n\n### 实践\n\n多去实践，将学到的东西运用到实际项目中去。很多人都找我抱怨过没有实际项目让自己去做，怎么能有项目经验呢？如果实在没有实际项目让你去做，我觉得你可以通过下面几种方式：\n\n1. 在网上找一个符合自己能力与找工作需求的实战项目视频或者博客跟着老师一起做。做的过程中，你要有自己的思考，不要浅尝辄止，对于很多知识点，别人的讲解可能只是满足项目就够了，你自己想多点知识的话，对于重要的知识点就要自己学会去往深出学。\n2. Github 或者码云上面有很多实战类别项目，你可以选择一个来研究，为了让自己对这个项目更加理解，在理解原有代码的基础上，你可以对原有项目进行改进或者增加功能。\n3. 自己动手去做一个自己想完成的东西，遇到不会的东西就临时去学，现学现卖。\n\n### 注意代码规范\n\n从学习编程的第一天起就要养成不错的编码习惯，包、类、方法的命名这些是最基本的。\n\n推荐阅读：\n\n- 阿里巴巴 Java 开发手册（详尽版）[https://github.com/alibaba/p3c/blob/master/阿里巴巴 Java 开发手册（详尽版）.pdf](https://github.com/alibaba/p3c/blob/master/阿里巴巴Java开发手册（详尽版）.pdf)\n- Google Java 编程风格指南：http://www.hawstein.com/posts/google-java-style.html\n- Effective Java 第三版中文版: https://legacy.gitbook.com/book/jiapengcai/effective-java\n\n### 其他\n\n- [别死写代码，这 25 条比涨工资都重要](https://mp.weixin.qq.com/s?__biz=Mzg2OTA0Njk0OA==&mid=2247485670&idx=3&sn=1dc4c00d74695daa6cb0c29b5956b77a&chksm=cea2472df9d5ce3b11a7f459d79fa2003776bb6081257c6a2ac31b9aefc99963131f60264158&token=1328169465&lang=zh_CN#rd)\n\n### 沟通能力\n\n程序员也离不开沟通。你可能需要与客户交流需求，还要和同事交流项目问题，还有可能定期需要向领导汇报项目进展情况。所以，我觉得不错的沟通能力也是一个优秀的程序员应该有的基本素质。\n\n## 如何提升个人影响力\n\n1. 写博客；\n2. 参与开源项目；\n3. 写书；\n4. ......\n\n## 面试必知\n\n### 如何获取大厂面试机会?\n\n**在讲如何获取大厂面试机会之前，先来给大家科普/对比一下两个校招非常常见的概念——春招和秋招。**\n\n1. **招聘人数** ：秋招多于春招 ；\n2. **招聘时间** ： 秋招一般 7 月左右开始，大概一直持续到 10 月底。但是大厂（如 BAT）都会早开始早结束，所以一定要把握好时间。春招最佳时间为 3 月，次佳时间为 4 月，进入 5 月基本就不会再有春招了（金三银四）。\n3. **应聘难度** ：秋招略大于春招；\n4. **招聘公司：** 秋招数量多，而春招数量较少，一般为秋招的补充。\n\n综上，一般来说，秋招的含金量明显是高于春招的。\n\n**下面我就说一下我自己知道的一些方法，不过应该也涵盖了大部分获取面试机会的方法。**\n\n1. 关注大厂官网，随时投递简历（走流程的网申）；\n2. 线下参加宣讲会，直接投递简历(相比于线上投递成功的几率会高很多！)；\n3. 找到师兄师姐/认识的人，帮忙内推（能够让你避开网申简历筛选，笔试筛选，还是挺不错的，不过也还是需要你的简历够棒）；\n4. 博客发文被看中/Github 优秀开源项目作者，大厂内部人员邀请你面试；\n5. 求职类网站投递简历（不是太推荐，适合海投）。\n\n### 面试的时候应该穿什么?\n\n穿西装、打领带、小皮鞋？NO！NO！NO！这是互联网公司面试又不是去走红毯，所以你只需要穿的简单大方就好，不需要太正式。\n\n### 面试前有哪些需要注意的地方?\n\n1. [提前准备好自我介绍;](https://github.com/Snailclimb/programmer-advancement#怎么自我介绍比较好)\n2. 随身带上自己的成绩单和简历(有的公司在面试前都会让你交一份成绩单和简历当做面试中的参考);\n3. 如果需要笔试就提前刷一些笔试题;\n4. 花时间做一些逻辑题和智力题(面试中发现有些公司都有逻辑题或者智力题测试环节，并且都把逻辑提或者智力题成绩作为很重要的一个参考);\n5. [准备好自己的项目介绍;](https://github.com/Snailclimb/programmer-advancement#如何介绍自己的项目)\n6. 面试之前做好定向复习(所谓定向复习就是专门针对你要面试的公司来复习。比如你在面试之前可以在网上找找有没有你要面试的公司的面经);\n\n### 怎么自我介绍比较好?\n\n从 HR 面、技术面到高管面/部门主管面，面试官一般会让你先自我介绍一下，所以好好准备自己的自我介绍真的非常重要。网上一般建议的是准备好两份自我介绍：一份对 hr 说的，主要讲能突出自己的经历，会的编程技术一语带过；另一份对技术面试官说的，主要讲自己会的技术细节，项目经验，经历那些就一语带过。\n\n我这里简单分享一下我自己的自我介绍的一个简单的模板吧：\n\n> 面试官，您好！我叫某某。大学时间我主要利用课外时间学习某某。在校期间参与过一个某某系统的开发，另外，自己学习过程中也写过很多系统比如某某系统。在学习之余，我比较喜欢通过博客整理分享自己所学知识。我现在是某某社区的认证作者，写过某某很不错的文章。另外，我获得过某某奖,我的 Github 上开源的某个项目已经有多少 Star 了。\n\n### 如何介绍自己的项目?\n\n如果有项目的话，技术面试第一步，面试官一般都是让你自己介绍一下你的项目。你可以从下面几个方向来考虑：\n\n1. 对项目整体设计的一个感受（面试官可能会让你画系统的架构图）\n2. 在这个项目中你负责了什么、做了什么、担任了什么角色\n3. 从这个项目中你学会了那些东西，使用到了那些技术，学会了那些新技术的使用\n4. 另外项目描述中，最好可以体现自己的综合素质，比如你是如何协调项目组成员协同开发的或者在遇到某一个棘手的问题的时候你是如何解决的又或者说你在这个项目用了什么技术实现了什么功能比如:用 redis 做缓存提高访问速度和并发量、使用消息队列削峰和降流等等。\n\n### 如果面试官问\"你有什么问题问我吗?\"时,你该如何回答\n\n[如果面试官问\"你有什么问题问我吗?\"时,你该如何回答](docs/如果面试官问你“你有什么问题问我吗”时%2C 你该如何回答.md \"如果面试官问\"你有什么问题问我吗?\"时,你该如何回答\")\n\n几乎每一场面试，特别是 HR 面和高管面的时候，面试官总是会在结尾问我:“问了你这么多问题了，你有什么问题问我吗？”。不管是技术面试还是非技术面试，如果你想赢得公司的青睐和尊重，我觉得我们都应该重视这个问题。\n\n网上提供了很多问题模板，我觉得回答这个问题重要要的就是:真诚一点,不要问太 Low 的问题。\n\n### 面试官问你的优点是什么，应该如何回答?\n\n回答这样的问题，最好能够结合你要应聘的职位来做针对性回答。一般面试官问这个问题的时候，很可能会只让你说几个你觉得最能体现你能力的优点，为了避免自己在面试过程中不知道该说自己的那些优点，你可以在面试之前好好准备一下。 面试的时候最好可以说几个你要应聘的职位所做的事情需要的优点或者说你要应聘的公司比较看重的优点(企业文化)。\n\n### 面试官问你的缺点是什么，应该如何回答?\n\n缺点肯定不能是目标岗位需要的关键能力！！！\n\n总之，记住一点，面试官问你这个问题的话，你可以说一些不影响你这个职位工作需要的一些缺点。比如你面试后端工程师，面试官问你的缺点是什么的话，你可以这样说：自己比较内向，平时不太爱与人交流，但是考虑到以后可能要和客户沟通，自己正在努力改。\n\n## 如何写出更优秀的代码\n\n### Java\n\n1. 使用 IntelliJ IDEA 作为您的集成开发环境 (IDE)\n2. 使用 JDK 8 或更高版本\n3. 使用 Maven/Gradle\n4. 使用 Lombok\n5. 编写单元测试\n6. 重构:常见,但也很慢\n7. 注意代码规范\n8. 定期联络客户，以获取他们的反馈\n\n上述建议的详细内容：[八点建议助您写出优雅的 Java 代码](https://github.com/Snailclimb/programmer-advancement/blob/master/docs/八点建议助您写出优雅的Java代码.md)。\n\n更多代码优化相关内容推荐：\n\n- [业务复杂=if else？刚来的大神竟然用策略+工厂彻底干掉了他们！](https://juejin.im/post/5dad23685188251d2c4ea2b6)\n- [一些不错的 Java 实践！推荐阅读 3 遍以上！](http://lrwinx.github.io/2017/03/04/细思极恐-你真的会写java吗/)\n- [ [解锁新姿势]兄 dei，你代码需要优化了](https://juejin.im/post/5dafbc02e51d4524a0060bdd)\n- [消灭 Java 代码的“坏味道”](https://mp.weixin.qq.com/s?__biz=Mzg2OTA0Njk0OA==&mid=2247485599&idx=1&sn=d83ff4e6b1ee951a0a33508a10980ea3&chksm=cea24754f9d5ce426d18b435a8c373ddc580c06c7d6a45cc51377361729c31c7301f1bbc3b78&token=1328169465&lang=zh_CN#rd)\n\n## 作为 IT 行业的过来人,你有什么话想对后辈说的?\n\n- [写给软件工程师的 30 条建议](https://mp.weixin.qq.com/s/gZYSE4Kl0oeJT5GV7sm9kw)\n- **[世界上没有技术驱动型公司](https://github.com/Snailclimb/programmer-advancement/blob/master/docs/proverbs/世界上没有技术驱动型公司.md)**\n- [不要一味的迷恋所谓的管理，把当官作为职场唯一的追求](https://github.com/Snailclimb/programmer-advancement/blob/master/docs/proverbs/不要一味的迷恋所谓的管理-把当官作为职场唯一的追求.md)\n- [认清现状，抓住机会](https://github.com/Snailclimb/programmer-advancement/blob/master/docs/proverbs/认清现状-抓住机会.md)\n- [结合自己这些年在互联网的经历,送你一些不错的建议](https://github.com/Snailclimb/programmer-advancement/blob/master/docs/proverbs/这些年在互联网的经历-送你一些不错的建议.md)\n- [如何超过大多数人](https://mp.weixin.qq.com/s?__biz=Mzg2OTA0Njk0OA==&mid=2247485441&idx=1&sn=303a25ab02fa9f14a319923e6b0d9759&chksm=cea247caf9d5cedc3a5e1d31f26c08d8ae4c11c349fbdc91ac1d90d8b35807517accb5f5d527&token=2128752750&lang=zh_CN#rd)\n- [别死写代码，这 25 条比涨工资都重要](https://mp.weixin.qq.com/s?__biz=Mzg2OTA0Njk0OA==&mid=2247485670&idx=3&sn=1dc4c00d74695daa6cb0c29b5956b77a&chksm=cea2472df9d5ce3b11a7f459d79fa2003776bb6081257c6a2ac31b9aefc99963131f60264158&token=1679986187&lang=zh_CN#rd)","source":"_posts/2020-1-20-Programmer's advancement.md","raw":"---\nlayout:     post\ntitle:      \"(转载)程序员修炼之路\"\nintro:   \"\"\ndate:       2020-1-20 23:13:00\nauthor:     \"Makinohara\"\nfeatured_image: http://msfasr.com/img/about-bg-walle.jpg\ncatalog: true\ntags:\n    - 生活感想\n    - 计算机基础\n\n---\n\n\n\n> 本文转载自github文章 [程序员修炼之路 ](https://github.com/Snailclimb/programmer-advancement),作者是 [SnailClimb](https://github.com/Snailclimb).由于Github近日访问异常,故备份于此处与诸君共赏\n\n# 程序员修炼之路\n\n## 学习/编程好习惯\n\n养成一个学习习惯和编程习惯真的太重要了，一个好习惯的养成真的对后面的学习有很大帮助。说实话我自己当初在这方面吃了不少亏，很多比较好的习惯我也是后面自己才慢慢发现，所以这里想着重给大家说一下有哪些好的学习和编程习惯。\n\n### 正确提问\n\n我们平时任何时候都离不开提问特别是初学的时候，但是真正知道如何正确的提问的人很少。问别人问题前不要来一句“在吗”，你说你问了在吗我是回复好还是不回复好呢 ？不要让别人给你发 32 位的 JDK，除非你是喜欢那个人。\n\n更多关于如何提问的内容，详见 github 上开源版[『提问的智慧』]( https://github.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way/blob/master/README-zh_CN.md)，抽时间看一下，我想看完之后应该会有很多收获。\n\n更多内容可以查看我的这篇原创文章：[如何提问](https://github.com/Snailclimb/programmer-advancement/blob/master/docs/how-to-ask.md)\n\n### 健康生活\n\n我一直觉得这一方面是最重要的，我想很多人和我一样会无意识间忽略它，等到真的身体不舒服了，你才开始意识到健康生活的重要性。\n\n1. 除非万不得已，不要熬夜了。熬夜的危害就不用多说了，秃头加内分泌失调，你懂得！\n2. 看电脑 45 分钟之后，起来走 5 分钟，看看远方放松一下。不要觉得这 5 分钟浪费时间，相反，这 5 分钟可能为你带来更大的效率提升。\n3. 可以考虑买一个电脑架子，保护好自己脊椎的同时，办公体验也会提升很多。\n4. 可以下载一个护眼宝，感觉可以护眼模式挺棒的，非常适合我们这种需要经常盯着电脑的人使用，强烈安利。\n\n### 高效搜索\n\n尽量用 google 查找技术资料以及自己在学习中遇到的一些问题。\n\n### 解决 bug\n\n程序遇到问题先在 stackoverflow 找找，大部分别人已经遇到过了。如果上面没有的话，再考虑其他解决办法。实在解决不了的话，再去问你觉得有能力帮你解决的人（注意描述好自己的问题，不要随便截一个 Bug 图）。\n\n### 善于总结\n\n学习完任何一门知识后，你可能当时看视频感觉老师讲的挺容易懂的。但是，过几天后你发现你忘的一干二净，别人问你一个类似的问题，你一点思路都没有。所以，我推荐你学完一门知识后不光要及时复习，还要做好总结，让知识形成一个体系。另外，你可以假想自己要给别人讲这个知识点，你能不能把这个知识点讲清楚呢？如果不能，说明你对这个知识点还没有彻底了解。这也就是人们经常说的费曼学习技巧。\n\n总结的方式：\n\n1. 有道云笔记、OneNote......这类专门用来记录笔记的软件上；\n2. 思维导图；\n3. 通过写博客输出。可以考虑自己搭建一个博客(hexo+GithubPages 非常简单)，你也可以在简书、掘金......等等技术交流社区写博客。Markdown 格式参考：https://github.com/sparanoid/chinese-copywriting-guidelines 中文文案排版指北：https://github.com/sparanoid/chinese-copywriting-guidelines\n\n### 写博客\n\n写博客有哪些好处：\n\n1. 对知识有更加深的认识，让自己的知识体系更加完整;\n2. 督促自己学习;\n3. 可能会带来不错的经济收入;\n4. 提升个人影响力;\n5. 拥有更多机会;\n6. ......\n\n**总的来说，写博客是一件利己利彼的事情。你可能会从中收获到很多东西，你写的东西也可能对别人也有很大的帮助。但是，写博客还是比较耗费自己时间的，你需要和工作做好权衡。**\n\n**分享是一种美德，任何行业都不是靠单打独斗的，写博客、写好博客是一个程序员很好的习惯。我为人人，人人为我！**\n\n更多内容可以查看我的这篇原创文章：[我为什么推荐你写博客?](https://github.com/Snailclimb/programmer-advancement/blob/master/docs/我为什么推荐你写博客.md)\n\n### 多用 Github\n\n没事多去 Github 转转，如果有能力可以参与到一些开源项目中。多看看别人开源的优秀项目，看看别人的代码和设计思路，看的多了，你的编程思想也会慢慢得到提升。除了这些优秀的开源项目之外，Github 上面还有很多不错的开源文档、开源资料什么的，我觉得对我们平时学习都挺有帮助。Github 用得好还能装一下，毕竟人家还是一个全英文网站，咳咳咳。\n\n### 实践\n\n多去实践，将学到的东西运用到实际项目中去。很多人都找我抱怨过没有实际项目让自己去做，怎么能有项目经验呢？如果实在没有实际项目让你去做，我觉得你可以通过下面几种方式：\n\n1. 在网上找一个符合自己能力与找工作需求的实战项目视频或者博客跟着老师一起做。做的过程中，你要有自己的思考，不要浅尝辄止，对于很多知识点，别人的讲解可能只是满足项目就够了，你自己想多点知识的话，对于重要的知识点就要自己学会去往深出学。\n2. Github 或者码云上面有很多实战类别项目，你可以选择一个来研究，为了让自己对这个项目更加理解，在理解原有代码的基础上，你可以对原有项目进行改进或者增加功能。\n3. 自己动手去做一个自己想完成的东西，遇到不会的东西就临时去学，现学现卖。\n\n### 注意代码规范\n\n从学习编程的第一天起就要养成不错的编码习惯，包、类、方法的命名这些是最基本的。\n\n推荐阅读：\n\n- 阿里巴巴 Java 开发手册（详尽版）[https://github.com/alibaba/p3c/blob/master/阿里巴巴 Java 开发手册（详尽版）.pdf](https://github.com/alibaba/p3c/blob/master/阿里巴巴Java开发手册（详尽版）.pdf)\n- Google Java 编程风格指南：http://www.hawstein.com/posts/google-java-style.html\n- Effective Java 第三版中文版: https://legacy.gitbook.com/book/jiapengcai/effective-java\n\n### 其他\n\n- [别死写代码，这 25 条比涨工资都重要](https://mp.weixin.qq.com/s?__biz=Mzg2OTA0Njk0OA==&mid=2247485670&idx=3&sn=1dc4c00d74695daa6cb0c29b5956b77a&chksm=cea2472df9d5ce3b11a7f459d79fa2003776bb6081257c6a2ac31b9aefc99963131f60264158&token=1328169465&lang=zh_CN#rd)\n\n### 沟通能力\n\n程序员也离不开沟通。你可能需要与客户交流需求，还要和同事交流项目问题，还有可能定期需要向领导汇报项目进展情况。所以，我觉得不错的沟通能力也是一个优秀的程序员应该有的基本素质。\n\n## 如何提升个人影响力\n\n1. 写博客；\n2. 参与开源项目；\n3. 写书；\n4. ......\n\n## 面试必知\n\n### 如何获取大厂面试机会?\n\n**在讲如何获取大厂面试机会之前，先来给大家科普/对比一下两个校招非常常见的概念——春招和秋招。**\n\n1. **招聘人数** ：秋招多于春招 ；\n2. **招聘时间** ： 秋招一般 7 月左右开始，大概一直持续到 10 月底。但是大厂（如 BAT）都会早开始早结束，所以一定要把握好时间。春招最佳时间为 3 月，次佳时间为 4 月，进入 5 月基本就不会再有春招了（金三银四）。\n3. **应聘难度** ：秋招略大于春招；\n4. **招聘公司：** 秋招数量多，而春招数量较少，一般为秋招的补充。\n\n综上，一般来说，秋招的含金量明显是高于春招的。\n\n**下面我就说一下我自己知道的一些方法，不过应该也涵盖了大部分获取面试机会的方法。**\n\n1. 关注大厂官网，随时投递简历（走流程的网申）；\n2. 线下参加宣讲会，直接投递简历(相比于线上投递成功的几率会高很多！)；\n3. 找到师兄师姐/认识的人，帮忙内推（能够让你避开网申简历筛选，笔试筛选，还是挺不错的，不过也还是需要你的简历够棒）；\n4. 博客发文被看中/Github 优秀开源项目作者，大厂内部人员邀请你面试；\n5. 求职类网站投递简历（不是太推荐，适合海投）。\n\n### 面试的时候应该穿什么?\n\n穿西装、打领带、小皮鞋？NO！NO！NO！这是互联网公司面试又不是去走红毯，所以你只需要穿的简单大方就好，不需要太正式。\n\n### 面试前有哪些需要注意的地方?\n\n1. [提前准备好自我介绍;](https://github.com/Snailclimb/programmer-advancement#怎么自我介绍比较好)\n2. 随身带上自己的成绩单和简历(有的公司在面试前都会让你交一份成绩单和简历当做面试中的参考);\n3. 如果需要笔试就提前刷一些笔试题;\n4. 花时间做一些逻辑题和智力题(面试中发现有些公司都有逻辑题或者智力题测试环节，并且都把逻辑提或者智力题成绩作为很重要的一个参考);\n5. [准备好自己的项目介绍;](https://github.com/Snailclimb/programmer-advancement#如何介绍自己的项目)\n6. 面试之前做好定向复习(所谓定向复习就是专门针对你要面试的公司来复习。比如你在面试之前可以在网上找找有没有你要面试的公司的面经);\n\n### 怎么自我介绍比较好?\n\n从 HR 面、技术面到高管面/部门主管面，面试官一般会让你先自我介绍一下，所以好好准备自己的自我介绍真的非常重要。网上一般建议的是准备好两份自我介绍：一份对 hr 说的，主要讲能突出自己的经历，会的编程技术一语带过；另一份对技术面试官说的，主要讲自己会的技术细节，项目经验，经历那些就一语带过。\n\n我这里简单分享一下我自己的自我介绍的一个简单的模板吧：\n\n> 面试官，您好！我叫某某。大学时间我主要利用课外时间学习某某。在校期间参与过一个某某系统的开发，另外，自己学习过程中也写过很多系统比如某某系统。在学习之余，我比较喜欢通过博客整理分享自己所学知识。我现在是某某社区的认证作者，写过某某很不错的文章。另外，我获得过某某奖,我的 Github 上开源的某个项目已经有多少 Star 了。\n\n### 如何介绍自己的项目?\n\n如果有项目的话，技术面试第一步，面试官一般都是让你自己介绍一下你的项目。你可以从下面几个方向来考虑：\n\n1. 对项目整体设计的一个感受（面试官可能会让你画系统的架构图）\n2. 在这个项目中你负责了什么、做了什么、担任了什么角色\n3. 从这个项目中你学会了那些东西，使用到了那些技术，学会了那些新技术的使用\n4. 另外项目描述中，最好可以体现自己的综合素质，比如你是如何协调项目组成员协同开发的或者在遇到某一个棘手的问题的时候你是如何解决的又或者说你在这个项目用了什么技术实现了什么功能比如:用 redis 做缓存提高访问速度和并发量、使用消息队列削峰和降流等等。\n\n### 如果面试官问\"你有什么问题问我吗?\"时,你该如何回答\n\n[如果面试官问\"你有什么问题问我吗?\"时,你该如何回答](docs/如果面试官问你“你有什么问题问我吗”时%2C 你该如何回答.md \"如果面试官问\"你有什么问题问我吗?\"时,你该如何回答\")\n\n几乎每一场面试，特别是 HR 面和高管面的时候，面试官总是会在结尾问我:“问了你这么多问题了，你有什么问题问我吗？”。不管是技术面试还是非技术面试，如果你想赢得公司的青睐和尊重，我觉得我们都应该重视这个问题。\n\n网上提供了很多问题模板，我觉得回答这个问题重要要的就是:真诚一点,不要问太 Low 的问题。\n\n### 面试官问你的优点是什么，应该如何回答?\n\n回答这样的问题，最好能够结合你要应聘的职位来做针对性回答。一般面试官问这个问题的时候，很可能会只让你说几个你觉得最能体现你能力的优点，为了避免自己在面试过程中不知道该说自己的那些优点，你可以在面试之前好好准备一下。 面试的时候最好可以说几个你要应聘的职位所做的事情需要的优点或者说你要应聘的公司比较看重的优点(企业文化)。\n\n### 面试官问你的缺点是什么，应该如何回答?\n\n缺点肯定不能是目标岗位需要的关键能力！！！\n\n总之，记住一点，面试官问你这个问题的话，你可以说一些不影响你这个职位工作需要的一些缺点。比如你面试后端工程师，面试官问你的缺点是什么的话，你可以这样说：自己比较内向，平时不太爱与人交流，但是考虑到以后可能要和客户沟通，自己正在努力改。\n\n## 如何写出更优秀的代码\n\n### Java\n\n1. 使用 IntelliJ IDEA 作为您的集成开发环境 (IDE)\n2. 使用 JDK 8 或更高版本\n3. 使用 Maven/Gradle\n4. 使用 Lombok\n5. 编写单元测试\n6. 重构:常见,但也很慢\n7. 注意代码规范\n8. 定期联络客户，以获取他们的反馈\n\n上述建议的详细内容：[八点建议助您写出优雅的 Java 代码](https://github.com/Snailclimb/programmer-advancement/blob/master/docs/八点建议助您写出优雅的Java代码.md)。\n\n更多代码优化相关内容推荐：\n\n- [业务复杂=if else？刚来的大神竟然用策略+工厂彻底干掉了他们！](https://juejin.im/post/5dad23685188251d2c4ea2b6)\n- [一些不错的 Java 实践！推荐阅读 3 遍以上！](http://lrwinx.github.io/2017/03/04/细思极恐-你真的会写java吗/)\n- [ [解锁新姿势]兄 dei，你代码需要优化了](https://juejin.im/post/5dafbc02e51d4524a0060bdd)\n- [消灭 Java 代码的“坏味道”](https://mp.weixin.qq.com/s?__biz=Mzg2OTA0Njk0OA==&mid=2247485599&idx=1&sn=d83ff4e6b1ee951a0a33508a10980ea3&chksm=cea24754f9d5ce426d18b435a8c373ddc580c06c7d6a45cc51377361729c31c7301f1bbc3b78&token=1328169465&lang=zh_CN#rd)\n\n## 作为 IT 行业的过来人,你有什么话想对后辈说的?\n\n- [写给软件工程师的 30 条建议](https://mp.weixin.qq.com/s/gZYSE4Kl0oeJT5GV7sm9kw)\n- **[世界上没有技术驱动型公司](https://github.com/Snailclimb/programmer-advancement/blob/master/docs/proverbs/世界上没有技术驱动型公司.md)**\n- [不要一味的迷恋所谓的管理，把当官作为职场唯一的追求](https://github.com/Snailclimb/programmer-advancement/blob/master/docs/proverbs/不要一味的迷恋所谓的管理-把当官作为职场唯一的追求.md)\n- [认清现状，抓住机会](https://github.com/Snailclimb/programmer-advancement/blob/master/docs/proverbs/认清现状-抓住机会.md)\n- [结合自己这些年在互联网的经历,送你一些不错的建议](https://github.com/Snailclimb/programmer-advancement/blob/master/docs/proverbs/这些年在互联网的经历-送你一些不错的建议.md)\n- [如何超过大多数人](https://mp.weixin.qq.com/s?__biz=Mzg2OTA0Njk0OA==&mid=2247485441&idx=1&sn=303a25ab02fa9f14a319923e6b0d9759&chksm=cea247caf9d5cedc3a5e1d31f26c08d8ae4c11c349fbdc91ac1d90d8b35807517accb5f5d527&token=2128752750&lang=zh_CN#rd)\n- [别死写代码，这 25 条比涨工资都重要](https://mp.weixin.qq.com/s?__biz=Mzg2OTA0Njk0OA==&mid=2247485670&idx=3&sn=1dc4c00d74695daa6cb0c29b5956b77a&chksm=cea2472df9d5ce3b11a7f459d79fa2003776bb6081257c6a2ac31b9aefc99963131f60264158&token=1679986187&lang=zh_CN#rd)","slug":"2020-1-20-Programmer's advancement","published":1,"updated":"2021-10-24T02:04:35.824Z","_id":"ckey85ujd000vho8a90aw8fyx","comments":1,"photos":[],"link":"","content":"<blockquote>\n<p>本文转载自github文章 <a href=\"https://github.com/Snailclimb/programmer-advancement\" target=\"_blank\" rel=\"noopener\">程序员修炼之路 </a>,作者是 <a href=\"https://github.com/Snailclimb\" target=\"_blank\" rel=\"noopener\">SnailClimb</a>.由于Github近日访问异常,故备份于此处与诸君共赏</p>\n</blockquote>\n<h1 id=\"程序员修炼之路\"><a href=\"#程序员修炼之路\" class=\"headerlink\" title=\"程序员修炼之路\"></a>程序员修炼之路</h1><h2 id=\"学习-编程好习惯\"><a href=\"#学习-编程好习惯\" class=\"headerlink\" title=\"学习/编程好习惯\"></a>学习/编程好习惯</h2><p>养成一个学习习惯和编程习惯真的太重要了，一个好习惯的养成真的对后面的学习有很大帮助。说实话我自己当初在这方面吃了不少亏，很多比较好的习惯我也是后面自己才慢慢发现，所以这里想着重给大家说一下有哪些好的学习和编程习惯。</p>\n<h3 id=\"正确提问\"><a href=\"#正确提问\" class=\"headerlink\" title=\"正确提问\"></a>正确提问</h3><p>我们平时任何时候都离不开提问特别是初学的时候，但是真正知道如何正确的提问的人很少。问别人问题前不要来一句“在吗”，你说你问了在吗我是回复好还是不回复好呢 ？不要让别人给你发 32 位的 JDK，除非你是喜欢那个人。</p>\n<p>更多关于如何提问的内容，详见 github 上开源版<a href=\"https://github.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way/blob/master/README-zh_CN.md\" target=\"_blank\" rel=\"noopener\">『提问的智慧』</a>，抽时间看一下，我想看完之后应该会有很多收获。</p>\n<p>更多内容可以查看我的这篇原创文章：<a href=\"https://github.com/Snailclimb/programmer-advancement/blob/master/docs/how-to-ask.md\" target=\"_blank\" rel=\"noopener\">如何提问</a></p>\n<h3 id=\"健康生活\"><a href=\"#健康生活\" class=\"headerlink\" title=\"健康生活\"></a>健康生活</h3><p>我一直觉得这一方面是最重要的，我想很多人和我一样会无意识间忽略它，等到真的身体不舒服了，你才开始意识到健康生活的重要性。</p>\n<ol>\n<li>除非万不得已，不要熬夜了。熬夜的危害就不用多说了，秃头加内分泌失调，你懂得！</li>\n<li>看电脑 45 分钟之后，起来走 5 分钟，看看远方放松一下。不要觉得这 5 分钟浪费时间，相反，这 5 分钟可能为你带来更大的效率提升。</li>\n<li>可以考虑买一个电脑架子，保护好自己脊椎的同时，办公体验也会提升很多。</li>\n<li>可以下载一个护眼宝，感觉可以护眼模式挺棒的，非常适合我们这种需要经常盯着电脑的人使用，强烈安利。</li>\n</ol>\n<h3 id=\"高效搜索\"><a href=\"#高效搜索\" class=\"headerlink\" title=\"高效搜索\"></a>高效搜索</h3><p>尽量用 google 查找技术资料以及自己在学习中遇到的一些问题。</p>\n<h3 id=\"解决-bug\"><a href=\"#解决-bug\" class=\"headerlink\" title=\"解决 bug\"></a>解决 bug</h3><p>程序遇到问题先在 stackoverflow 找找，大部分别人已经遇到过了。如果上面没有的话，再考虑其他解决办法。实在解决不了的话，再去问你觉得有能力帮你解决的人（注意描述好自己的问题，不要随便截一个 Bug 图）。</p>\n<h3 id=\"善于总结\"><a href=\"#善于总结\" class=\"headerlink\" title=\"善于总结\"></a>善于总结</h3><p>学习完任何一门知识后，你可能当时看视频感觉老师讲的挺容易懂的。但是，过几天后你发现你忘的一干二净，别人问你一个类似的问题，你一点思路都没有。所以，我推荐你学完一门知识后不光要及时复习，还要做好总结，让知识形成一个体系。另外，你可以假想自己要给别人讲这个知识点，你能不能把这个知识点讲清楚呢？如果不能，说明你对这个知识点还没有彻底了解。这也就是人们经常说的费曼学习技巧。</p>\n<p>总结的方式：</p>\n<ol>\n<li>有道云笔记、OneNote……这类专门用来记录笔记的软件上；</li>\n<li>思维导图；</li>\n<li>通过写博客输出。可以考虑自己搭建一个博客(hexo+GithubPages 非常简单)，你也可以在简书、掘金……等等技术交流社区写博客。Markdown 格式参考：<a href=\"https://github.com/sparanoid/chinese-copywriting-guidelines\" target=\"_blank\" rel=\"noopener\">https://github.com/sparanoid/chinese-copywriting-guidelines</a> 中文文案排版指北：<a href=\"https://github.com/sparanoid/chinese-copywriting-guidelines\" target=\"_blank\" rel=\"noopener\">https://github.com/sparanoid/chinese-copywriting-guidelines</a></li>\n</ol>\n<h3 id=\"写博客\"><a href=\"#写博客\" class=\"headerlink\" title=\"写博客\"></a>写博客</h3><p>写博客有哪些好处：</p>\n<ol>\n<li>对知识有更加深的认识，让自己的知识体系更加完整;</li>\n<li>督促自己学习;</li>\n<li>可能会带来不错的经济收入;</li>\n<li>提升个人影响力;</li>\n<li>拥有更多机会;</li>\n<li>……</li>\n</ol>\n<p><strong>总的来说，写博客是一件利己利彼的事情。你可能会从中收获到很多东西，你写的东西也可能对别人也有很大的帮助。但是，写博客还是比较耗费自己时间的，你需要和工作做好权衡。</strong></p>\n<p><strong>分享是一种美德，任何行业都不是靠单打独斗的，写博客、写好博客是一个程序员很好的习惯。我为人人，人人为我！</strong></p>\n<p>更多内容可以查看我的这篇原创文章：<a href=\"https://github.com/Snailclimb/programmer-advancement/blob/master/docs/我为什么推荐你写博客.md\" target=\"_blank\" rel=\"noopener\">我为什么推荐你写博客?</a></p>\n<h3 id=\"多用-Github\"><a href=\"#多用-Github\" class=\"headerlink\" title=\"多用 Github\"></a>多用 Github</h3><p>没事多去 Github 转转，如果有能力可以参与到一些开源项目中。多看看别人开源的优秀项目，看看别人的代码和设计思路，看的多了，你的编程思想也会慢慢得到提升。除了这些优秀的开源项目之外，Github 上面还有很多不错的开源文档、开源资料什么的，我觉得对我们平时学习都挺有帮助。Github 用得好还能装一下，毕竟人家还是一个全英文网站，咳咳咳。</p>\n<h3 id=\"实践\"><a href=\"#实践\" class=\"headerlink\" title=\"实践\"></a>实践</h3><p>多去实践，将学到的东西运用到实际项目中去。很多人都找我抱怨过没有实际项目让自己去做，怎么能有项目经验呢？如果实在没有实际项目让你去做，我觉得你可以通过下面几种方式：</p>\n<ol>\n<li>在网上找一个符合自己能力与找工作需求的实战项目视频或者博客跟着老师一起做。做的过程中，你要有自己的思考，不要浅尝辄止，对于很多知识点，别人的讲解可能只是满足项目就够了，你自己想多点知识的话，对于重要的知识点就要自己学会去往深出学。</li>\n<li>Github 或者码云上面有很多实战类别项目，你可以选择一个来研究，为了让自己对这个项目更加理解，在理解原有代码的基础上，你可以对原有项目进行改进或者增加功能。</li>\n<li>自己动手去做一个自己想完成的东西，遇到不会的东西就临时去学，现学现卖。</li>\n</ol>\n<h3 id=\"注意代码规范\"><a href=\"#注意代码规范\" class=\"headerlink\" title=\"注意代码规范\"></a>注意代码规范</h3><p>从学习编程的第一天起就要养成不错的编码习惯，包、类、方法的命名这些是最基本的。</p>\n<p>推荐阅读：</p>\n<ul>\n<li>阿里巴巴 Java 开发手册（详尽版）<a href=\"https://github.com/alibaba/p3c/blob/master/阿里巴巴Java开发手册（详尽版）.pdf\" target=\"_blank\" rel=\"noopener\">https://github.com/alibaba/p3c/blob/master/阿里巴巴 Java 开发手册（详尽版）.pdf</a></li>\n<li>Google Java 编程风格指南：<a href=\"http://www.hawstein.com/posts/google-java-style.html\" target=\"_blank\" rel=\"noopener\">http://www.hawstein.com/posts/google-java-style.html</a></li>\n<li>Effective Java 第三版中文版: <a href=\"https://legacy.gitbook.com/book/jiapengcai/effective-java\" target=\"_blank\" rel=\"noopener\">https://legacy.gitbook.com/book/jiapengcai/effective-java</a></li>\n</ul>\n<h3 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h3><ul>\n<li><a href=\"https://mp.weixin.qq.com/s?__biz=Mzg2OTA0Njk0OA==&amp;mid=2247485670&amp;idx=3&amp;sn=1dc4c00d74695daa6cb0c29b5956b77a&amp;chksm=cea2472df9d5ce3b11a7f459d79fa2003776bb6081257c6a2ac31b9aefc99963131f60264158&amp;token=1328169465&amp;lang=zh_CN#rd\" target=\"_blank\" rel=\"noopener\">别死写代码，这 25 条比涨工资都重要</a></li>\n</ul>\n<h3 id=\"沟通能力\"><a href=\"#沟通能力\" class=\"headerlink\" title=\"沟通能力\"></a>沟通能力</h3><p>程序员也离不开沟通。你可能需要与客户交流需求，还要和同事交流项目问题，还有可能定期需要向领导汇报项目进展情况。所以，我觉得不错的沟通能力也是一个优秀的程序员应该有的基本素质。</p>\n<h2 id=\"如何提升个人影响力\"><a href=\"#如何提升个人影响力\" class=\"headerlink\" title=\"如何提升个人影响力\"></a>如何提升个人影响力</h2><ol>\n<li>写博客；</li>\n<li>参与开源项目；</li>\n<li>写书；</li>\n<li>……</li>\n</ol>\n<h2 id=\"面试必知\"><a href=\"#面试必知\" class=\"headerlink\" title=\"面试必知\"></a>面试必知</h2><h3 id=\"如何获取大厂面试机会\"><a href=\"#如何获取大厂面试机会\" class=\"headerlink\" title=\"如何获取大厂面试机会?\"></a>如何获取大厂面试机会?</h3><p><strong>在讲如何获取大厂面试机会之前，先来给大家科普/对比一下两个校招非常常见的概念——春招和秋招。</strong></p>\n<ol>\n<li><strong>招聘人数</strong> ：秋招多于春招 ；</li>\n<li><strong>招聘时间</strong> ： 秋招一般 7 月左右开始，大概一直持续到 10 月底。但是大厂（如 BAT）都会早开始早结束，所以一定要把握好时间。春招最佳时间为 3 月，次佳时间为 4 月，进入 5 月基本就不会再有春招了（金三银四）。</li>\n<li><strong>应聘难度</strong> ：秋招略大于春招；</li>\n<li><strong>招聘公司：</strong> 秋招数量多，而春招数量较少，一般为秋招的补充。</li>\n</ol>\n<p>综上，一般来说，秋招的含金量明显是高于春招的。</p>\n<p><strong>下面我就说一下我自己知道的一些方法，不过应该也涵盖了大部分获取面试机会的方法。</strong></p>\n<ol>\n<li>关注大厂官网，随时投递简历（走流程的网申）；</li>\n<li>线下参加宣讲会，直接投递简历(相比于线上投递成功的几率会高很多！)；</li>\n<li>找到师兄师姐/认识的人，帮忙内推（能够让你避开网申简历筛选，笔试筛选，还是挺不错的，不过也还是需要你的简历够棒）；</li>\n<li>博客发文被看中/Github 优秀开源项目作者，大厂内部人员邀请你面试；</li>\n<li>求职类网站投递简历（不是太推荐，适合海投）。</li>\n</ol>\n<h3 id=\"面试的时候应该穿什么\"><a href=\"#面试的时候应该穿什么\" class=\"headerlink\" title=\"面试的时候应该穿什么?\"></a>面试的时候应该穿什么?</h3><p>穿西装、打领带、小皮鞋？NO！NO！NO！这是互联网公司面试又不是去走红毯，所以你只需要穿的简单大方就好，不需要太正式。</p>\n<h3 id=\"面试前有哪些需要注意的地方\"><a href=\"#面试前有哪些需要注意的地方\" class=\"headerlink\" title=\"面试前有哪些需要注意的地方?\"></a>面试前有哪些需要注意的地方?</h3><ol>\n<li><a href=\"https://github.com/Snailclimb/programmer-advancement#怎么自我介绍比较好\" target=\"_blank\" rel=\"noopener\">提前准备好自我介绍;</a></li>\n<li>随身带上自己的成绩单和简历(有的公司在面试前都会让你交一份成绩单和简历当做面试中的参考);</li>\n<li>如果需要笔试就提前刷一些笔试题;</li>\n<li>花时间做一些逻辑题和智力题(面试中发现有些公司都有逻辑题或者智力题测试环节，并且都把逻辑提或者智力题成绩作为很重要的一个参考);</li>\n<li><a href=\"https://github.com/Snailclimb/programmer-advancement#如何介绍自己的项目\" target=\"_blank\" rel=\"noopener\">准备好自己的项目介绍;</a></li>\n<li>面试之前做好定向复习(所谓定向复习就是专门针对你要面试的公司来复习。比如你在面试之前可以在网上找找有没有你要面试的公司的面经);</li>\n</ol>\n<h3 id=\"怎么自我介绍比较好\"><a href=\"#怎么自我介绍比较好\" class=\"headerlink\" title=\"怎么自我介绍比较好?\"></a>怎么自我介绍比较好?</h3><p>从 HR 面、技术面到高管面/部门主管面，面试官一般会让你先自我介绍一下，所以好好准备自己的自我介绍真的非常重要。网上一般建议的是准备好两份自我介绍：一份对 hr 说的，主要讲能突出自己的经历，会的编程技术一语带过；另一份对技术面试官说的，主要讲自己会的技术细节，项目经验，经历那些就一语带过。</p>\n<p>我这里简单分享一下我自己的自我介绍的一个简单的模板吧：</p>\n<blockquote>\n<p>面试官，您好！我叫某某。大学时间我主要利用课外时间学习某某。在校期间参与过一个某某系统的开发，另外，自己学习过程中也写过很多系统比如某某系统。在学习之余，我比较喜欢通过博客整理分享自己所学知识。我现在是某某社区的认证作者，写过某某很不错的文章。另外，我获得过某某奖,我的 Github 上开源的某个项目已经有多少 Star 了。</p>\n</blockquote>\n<h3 id=\"如何介绍自己的项目\"><a href=\"#如何介绍自己的项目\" class=\"headerlink\" title=\"如何介绍自己的项目?\"></a>如何介绍自己的项目?</h3><p>如果有项目的话，技术面试第一步，面试官一般都是让你自己介绍一下你的项目。你可以从下面几个方向来考虑：</p>\n<ol>\n<li>对项目整体设计的一个感受（面试官可能会让你画系统的架构图）</li>\n<li>在这个项目中你负责了什么、做了什么、担任了什么角色</li>\n<li>从这个项目中你学会了那些东西，使用到了那些技术，学会了那些新技术的使用</li>\n<li>另外项目描述中，最好可以体现自己的综合素质，比如你是如何协调项目组成员协同开发的或者在遇到某一个棘手的问题的时候你是如何解决的又或者说你在这个项目用了什么技术实现了什么功能比如:用 redis 做缓存提高访问速度和并发量、使用消息队列削峰和降流等等。</li>\n</ol>\n<h3 id=\"如果面试官问”你有什么问题问我吗-”时-你该如何回答\"><a href=\"#如果面试官问”你有什么问题问我吗-”时-你该如何回答\" class=\"headerlink\" title=\"如果面试官问”你有什么问题问我吗?”时,你该如何回答\"></a>如果面试官问”你有什么问题问我吗?”时,你该如何回答</h3><p><a href=\"docs/如果面试官问你“你有什么问题问我吗”时%2C 你该如何回答.md\" title=\"如果面试官问&quot;你有什么问题问我吗?&quot;时,你该如何回答\">如果面试官问”你有什么问题问我吗?”时,你该如何回答</a></p>\n<p>几乎每一场面试，特别是 HR 面和高管面的时候，面试官总是会在结尾问我:“问了你这么多问题了，你有什么问题问我吗？”。不管是技术面试还是非技术面试，如果你想赢得公司的青睐和尊重，我觉得我们都应该重视这个问题。</p>\n<p>网上提供了很多问题模板，我觉得回答这个问题重要要的就是:真诚一点,不要问太 Low 的问题。</p>\n<h3 id=\"面试官问你的优点是什么，应该如何回答\"><a href=\"#面试官问你的优点是什么，应该如何回答\" class=\"headerlink\" title=\"面试官问你的优点是什么，应该如何回答?\"></a>面试官问你的优点是什么，应该如何回答?</h3><p>回答这样的问题，最好能够结合你要应聘的职位来做针对性回答。一般面试官问这个问题的时候，很可能会只让你说几个你觉得最能体现你能力的优点，为了避免自己在面试过程中不知道该说自己的那些优点，你可以在面试之前好好准备一下。 面试的时候最好可以说几个你要应聘的职位所做的事情需要的优点或者说你要应聘的公司比较看重的优点(企业文化)。</p>\n<h3 id=\"面试官问你的缺点是什么，应该如何回答\"><a href=\"#面试官问你的缺点是什么，应该如何回答\" class=\"headerlink\" title=\"面试官问你的缺点是什么，应该如何回答?\"></a>面试官问你的缺点是什么，应该如何回答?</h3><p>缺点肯定不能是目标岗位需要的关键能力！！！</p>\n<p>总之，记住一点，面试官问你这个问题的话，你可以说一些不影响你这个职位工作需要的一些缺点。比如你面试后端工程师，面试官问你的缺点是什么的话，你可以这样说：自己比较内向，平时不太爱与人交流，但是考虑到以后可能要和客户沟通，自己正在努力改。</p>\n<h2 id=\"如何写出更优秀的代码\"><a href=\"#如何写出更优秀的代码\" class=\"headerlink\" title=\"如何写出更优秀的代码\"></a>如何写出更优秀的代码</h2><h3 id=\"Java\"><a href=\"#Java\" class=\"headerlink\" title=\"Java\"></a>Java</h3><ol>\n<li>使用 IntelliJ IDEA 作为您的集成开发环境 (IDE)</li>\n<li>使用 JDK 8 或更高版本</li>\n<li>使用 Maven/Gradle</li>\n<li>使用 Lombok</li>\n<li>编写单元测试</li>\n<li>重构:常见,但也很慢</li>\n<li>注意代码规范</li>\n<li>定期联络客户，以获取他们的反馈</li>\n</ol>\n<p>上述建议的详细内容：<a href=\"https://github.com/Snailclimb/programmer-advancement/blob/master/docs/八点建议助您写出优雅的Java代码.md\" target=\"_blank\" rel=\"noopener\">八点建议助您写出优雅的 Java 代码</a>。</p>\n<p>更多代码优化相关内容推荐：</p>\n<ul>\n<li><a href=\"https://juejin.im/post/5dad23685188251d2c4ea2b6\" target=\"_blank\" rel=\"noopener\">业务复杂=if else？刚来的大神竟然用策略+工厂彻底干掉了他们！</a></li>\n<li><a href=\"http://lrwinx.github.io/2017/03/04/细思极恐-你真的会写java吗/\" target=\"_blank\" rel=\"noopener\">一些不错的 Java 实践！推荐阅读 3 遍以上！</a></li>\n<li><a href=\"https://juejin.im/post/5dafbc02e51d4524a0060bdd\" target=\"_blank\" rel=\"noopener\"> [解锁新姿势]兄 dei，你代码需要优化了</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s?__biz=Mzg2OTA0Njk0OA==&amp;mid=2247485599&amp;idx=1&amp;sn=d83ff4e6b1ee951a0a33508a10980ea3&amp;chksm=cea24754f9d5ce426d18b435a8c373ddc580c06c7d6a45cc51377361729c31c7301f1bbc3b78&amp;token=1328169465&amp;lang=zh_CN#rd\" target=\"_blank\" rel=\"noopener\">消灭 Java 代码的“坏味道”</a></li>\n</ul>\n<h2 id=\"作为-IT-行业的过来人-你有什么话想对后辈说的\"><a href=\"#作为-IT-行业的过来人-你有什么话想对后辈说的\" class=\"headerlink\" title=\"作为 IT 行业的过来人,你有什么话想对后辈说的?\"></a>作为 IT 行业的过来人,你有什么话想对后辈说的?</h2><ul>\n<li><a href=\"https://mp.weixin.qq.com/s/gZYSE4Kl0oeJT5GV7sm9kw\" target=\"_blank\" rel=\"noopener\">写给软件工程师的 30 条建议</a></li>\n<li><strong><a href=\"https://github.com/Snailclimb/programmer-advancement/blob/master/docs/proverbs/世界上没有技术驱动型公司.md\" target=\"_blank\" rel=\"noopener\">世界上没有技术驱动型公司</a></strong></li>\n<li><a href=\"https://github.com/Snailclimb/programmer-advancement/blob/master/docs/proverbs/不要一味的迷恋所谓的管理-把当官作为职场唯一的追求.md\" target=\"_blank\" rel=\"noopener\">不要一味的迷恋所谓的管理，把当官作为职场唯一的追求</a></li>\n<li><a href=\"https://github.com/Snailclimb/programmer-advancement/blob/master/docs/proverbs/认清现状-抓住机会.md\" target=\"_blank\" rel=\"noopener\">认清现状，抓住机会</a></li>\n<li><a href=\"https://github.com/Snailclimb/programmer-advancement/blob/master/docs/proverbs/这些年在互联网的经历-送你一些不错的建议.md\" target=\"_blank\" rel=\"noopener\">结合自己这些年在互联网的经历,送你一些不错的建议</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s?__biz=Mzg2OTA0Njk0OA==&amp;mid=2247485441&amp;idx=1&amp;sn=303a25ab02fa9f14a319923e6b0d9759&amp;chksm=cea247caf9d5cedc3a5e1d31f26c08d8ae4c11c349fbdc91ac1d90d8b35807517accb5f5d527&amp;token=2128752750&amp;lang=zh_CN#rd\" target=\"_blank\" rel=\"noopener\">如何超过大多数人</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s?__biz=Mzg2OTA0Njk0OA==&amp;mid=2247485670&amp;idx=3&amp;sn=1dc4c00d74695daa6cb0c29b5956b77a&amp;chksm=cea2472df9d5ce3b11a7f459d79fa2003776bb6081257c6a2ac31b9aefc99963131f60264158&amp;token=1679986187&amp;lang=zh_CN#rd\" target=\"_blank\" rel=\"noopener\">别死写代码，这 25 条比涨工资都重要</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>本文转载自github文章 <a href=\"https://github.com/Snailclimb/programmer-advancement\" target=\"_blank\" rel=\"noopener\">程序员修炼之路 </a>,作者是 <a href=\"https://github.com/Snailclimb\" target=\"_blank\" rel=\"noopener\">SnailClimb</a>.由于Github近日访问异常,故备份于此处与诸君共赏</p>\n</blockquote>\n<h1 id=\"程序员修炼之路\"><a href=\"#程序员修炼之路\" class=\"headerlink\" title=\"程序员修炼之路\"></a>程序员修炼之路</h1><h2 id=\"学习-编程好习惯\"><a href=\"#学习-编程好习惯\" class=\"headerlink\" title=\"学习/编程好习惯\"></a>学习/编程好习惯</h2><p>养成一个学习习惯和编程习惯真的太重要了，一个好习惯的养成真的对后面的学习有很大帮助。说实话我自己当初在这方面吃了不少亏，很多比较好的习惯我也是后面自己才慢慢发现，所以这里想着重给大家说一下有哪些好的学习和编程习惯。</p>\n<h3 id=\"正确提问\"><a href=\"#正确提问\" class=\"headerlink\" title=\"正确提问\"></a>正确提问</h3><p>我们平时任何时候都离不开提问特别是初学的时候，但是真正知道如何正确的提问的人很少。问别人问题前不要来一句“在吗”，你说你问了在吗我是回复好还是不回复好呢 ？不要让别人给你发 32 位的 JDK，除非你是喜欢那个人。</p>\n<p>更多关于如何提问的内容，详见 github 上开源版<a href=\"https://github.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way/blob/master/README-zh_CN.md\" target=\"_blank\" rel=\"noopener\">『提问的智慧』</a>，抽时间看一下，我想看完之后应该会有很多收获。</p>\n<p>更多内容可以查看我的这篇原创文章：<a href=\"https://github.com/Snailclimb/programmer-advancement/blob/master/docs/how-to-ask.md\" target=\"_blank\" rel=\"noopener\">如何提问</a></p>\n<h3 id=\"健康生活\"><a href=\"#健康生活\" class=\"headerlink\" title=\"健康生活\"></a>健康生活</h3><p>我一直觉得这一方面是最重要的，我想很多人和我一样会无意识间忽略它，等到真的身体不舒服了，你才开始意识到健康生活的重要性。</p>\n<ol>\n<li>除非万不得已，不要熬夜了。熬夜的危害就不用多说了，秃头加内分泌失调，你懂得！</li>\n<li>看电脑 45 分钟之后，起来走 5 分钟，看看远方放松一下。不要觉得这 5 分钟浪费时间，相反，这 5 分钟可能为你带来更大的效率提升。</li>\n<li>可以考虑买一个电脑架子，保护好自己脊椎的同时，办公体验也会提升很多。</li>\n<li>可以下载一个护眼宝，感觉可以护眼模式挺棒的，非常适合我们这种需要经常盯着电脑的人使用，强烈安利。</li>\n</ol>\n<h3 id=\"高效搜索\"><a href=\"#高效搜索\" class=\"headerlink\" title=\"高效搜索\"></a>高效搜索</h3><p>尽量用 google 查找技术资料以及自己在学习中遇到的一些问题。</p>\n<h3 id=\"解决-bug\"><a href=\"#解决-bug\" class=\"headerlink\" title=\"解决 bug\"></a>解决 bug</h3><p>程序遇到问题先在 stackoverflow 找找，大部分别人已经遇到过了。如果上面没有的话，再考虑其他解决办法。实在解决不了的话，再去问你觉得有能力帮你解决的人（注意描述好自己的问题，不要随便截一个 Bug 图）。</p>\n<h3 id=\"善于总结\"><a href=\"#善于总结\" class=\"headerlink\" title=\"善于总结\"></a>善于总结</h3><p>学习完任何一门知识后，你可能当时看视频感觉老师讲的挺容易懂的。但是，过几天后你发现你忘的一干二净，别人问你一个类似的问题，你一点思路都没有。所以，我推荐你学完一门知识后不光要及时复习，还要做好总结，让知识形成一个体系。另外，你可以假想自己要给别人讲这个知识点，你能不能把这个知识点讲清楚呢？如果不能，说明你对这个知识点还没有彻底了解。这也就是人们经常说的费曼学习技巧。</p>\n<p>总结的方式：</p>\n<ol>\n<li>有道云笔记、OneNote……这类专门用来记录笔记的软件上；</li>\n<li>思维导图；</li>\n<li>通过写博客输出。可以考虑自己搭建一个博客(hexo+GithubPages 非常简单)，你也可以在简书、掘金……等等技术交流社区写博客。Markdown 格式参考：<a href=\"https://github.com/sparanoid/chinese-copywriting-guidelines\" target=\"_blank\" rel=\"noopener\">https://github.com/sparanoid/chinese-copywriting-guidelines</a> 中文文案排版指北：<a href=\"https://github.com/sparanoid/chinese-copywriting-guidelines\" target=\"_blank\" rel=\"noopener\">https://github.com/sparanoid/chinese-copywriting-guidelines</a></li>\n</ol>\n<h3 id=\"写博客\"><a href=\"#写博客\" class=\"headerlink\" title=\"写博客\"></a>写博客</h3><p>写博客有哪些好处：</p>\n<ol>\n<li>对知识有更加深的认识，让自己的知识体系更加完整;</li>\n<li>督促自己学习;</li>\n<li>可能会带来不错的经济收入;</li>\n<li>提升个人影响力;</li>\n<li>拥有更多机会;</li>\n<li>……</li>\n</ol>\n<p><strong>总的来说，写博客是一件利己利彼的事情。你可能会从中收获到很多东西，你写的东西也可能对别人也有很大的帮助。但是，写博客还是比较耗费自己时间的，你需要和工作做好权衡。</strong></p>\n<p><strong>分享是一种美德，任何行业都不是靠单打独斗的，写博客、写好博客是一个程序员很好的习惯。我为人人，人人为我！</strong></p>\n<p>更多内容可以查看我的这篇原创文章：<a href=\"https://github.com/Snailclimb/programmer-advancement/blob/master/docs/我为什么推荐你写博客.md\" target=\"_blank\" rel=\"noopener\">我为什么推荐你写博客?</a></p>\n<h3 id=\"多用-Github\"><a href=\"#多用-Github\" class=\"headerlink\" title=\"多用 Github\"></a>多用 Github</h3><p>没事多去 Github 转转，如果有能力可以参与到一些开源项目中。多看看别人开源的优秀项目，看看别人的代码和设计思路，看的多了，你的编程思想也会慢慢得到提升。除了这些优秀的开源项目之外，Github 上面还有很多不错的开源文档、开源资料什么的，我觉得对我们平时学习都挺有帮助。Github 用得好还能装一下，毕竟人家还是一个全英文网站，咳咳咳。</p>\n<h3 id=\"实践\"><a href=\"#实践\" class=\"headerlink\" title=\"实践\"></a>实践</h3><p>多去实践，将学到的东西运用到实际项目中去。很多人都找我抱怨过没有实际项目让自己去做，怎么能有项目经验呢？如果实在没有实际项目让你去做，我觉得你可以通过下面几种方式：</p>\n<ol>\n<li>在网上找一个符合自己能力与找工作需求的实战项目视频或者博客跟着老师一起做。做的过程中，你要有自己的思考，不要浅尝辄止，对于很多知识点，别人的讲解可能只是满足项目就够了，你自己想多点知识的话，对于重要的知识点就要自己学会去往深出学。</li>\n<li>Github 或者码云上面有很多实战类别项目，你可以选择一个来研究，为了让自己对这个项目更加理解，在理解原有代码的基础上，你可以对原有项目进行改进或者增加功能。</li>\n<li>自己动手去做一个自己想完成的东西，遇到不会的东西就临时去学，现学现卖。</li>\n</ol>\n<h3 id=\"注意代码规范\"><a href=\"#注意代码规范\" class=\"headerlink\" title=\"注意代码规范\"></a>注意代码规范</h3><p>从学习编程的第一天起就要养成不错的编码习惯，包、类、方法的命名这些是最基本的。</p>\n<p>推荐阅读：</p>\n<ul>\n<li>阿里巴巴 Java 开发手册（详尽版）<a href=\"https://github.com/alibaba/p3c/blob/master/阿里巴巴Java开发手册（详尽版）.pdf\" target=\"_blank\" rel=\"noopener\">https://github.com/alibaba/p3c/blob/master/阿里巴巴 Java 开发手册（详尽版）.pdf</a></li>\n<li>Google Java 编程风格指南：<a href=\"http://www.hawstein.com/posts/google-java-style.html\" target=\"_blank\" rel=\"noopener\">http://www.hawstein.com/posts/google-java-style.html</a></li>\n<li>Effective Java 第三版中文版: <a href=\"https://legacy.gitbook.com/book/jiapengcai/effective-java\" target=\"_blank\" rel=\"noopener\">https://legacy.gitbook.com/book/jiapengcai/effective-java</a></li>\n</ul>\n<h3 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h3><ul>\n<li><a href=\"https://mp.weixin.qq.com/s?__biz=Mzg2OTA0Njk0OA==&amp;mid=2247485670&amp;idx=3&amp;sn=1dc4c00d74695daa6cb0c29b5956b77a&amp;chksm=cea2472df9d5ce3b11a7f459d79fa2003776bb6081257c6a2ac31b9aefc99963131f60264158&amp;token=1328169465&amp;lang=zh_CN#rd\" target=\"_blank\" rel=\"noopener\">别死写代码，这 25 条比涨工资都重要</a></li>\n</ul>\n<h3 id=\"沟通能力\"><a href=\"#沟通能力\" class=\"headerlink\" title=\"沟通能力\"></a>沟通能力</h3><p>程序员也离不开沟通。你可能需要与客户交流需求，还要和同事交流项目问题，还有可能定期需要向领导汇报项目进展情况。所以，我觉得不错的沟通能力也是一个优秀的程序员应该有的基本素质。</p>\n<h2 id=\"如何提升个人影响力\"><a href=\"#如何提升个人影响力\" class=\"headerlink\" title=\"如何提升个人影响力\"></a>如何提升个人影响力</h2><ol>\n<li>写博客；</li>\n<li>参与开源项目；</li>\n<li>写书；</li>\n<li>……</li>\n</ol>\n<h2 id=\"面试必知\"><a href=\"#面试必知\" class=\"headerlink\" title=\"面试必知\"></a>面试必知</h2><h3 id=\"如何获取大厂面试机会\"><a href=\"#如何获取大厂面试机会\" class=\"headerlink\" title=\"如何获取大厂面试机会?\"></a>如何获取大厂面试机会?</h3><p><strong>在讲如何获取大厂面试机会之前，先来给大家科普/对比一下两个校招非常常见的概念——春招和秋招。</strong></p>\n<ol>\n<li><strong>招聘人数</strong> ：秋招多于春招 ；</li>\n<li><strong>招聘时间</strong> ： 秋招一般 7 月左右开始，大概一直持续到 10 月底。但是大厂（如 BAT）都会早开始早结束，所以一定要把握好时间。春招最佳时间为 3 月，次佳时间为 4 月，进入 5 月基本就不会再有春招了（金三银四）。</li>\n<li><strong>应聘难度</strong> ：秋招略大于春招；</li>\n<li><strong>招聘公司：</strong> 秋招数量多，而春招数量较少，一般为秋招的补充。</li>\n</ol>\n<p>综上，一般来说，秋招的含金量明显是高于春招的。</p>\n<p><strong>下面我就说一下我自己知道的一些方法，不过应该也涵盖了大部分获取面试机会的方法。</strong></p>\n<ol>\n<li>关注大厂官网，随时投递简历（走流程的网申）；</li>\n<li>线下参加宣讲会，直接投递简历(相比于线上投递成功的几率会高很多！)；</li>\n<li>找到师兄师姐/认识的人，帮忙内推（能够让你避开网申简历筛选，笔试筛选，还是挺不错的，不过也还是需要你的简历够棒）；</li>\n<li>博客发文被看中/Github 优秀开源项目作者，大厂内部人员邀请你面试；</li>\n<li>求职类网站投递简历（不是太推荐，适合海投）。</li>\n</ol>\n<h3 id=\"面试的时候应该穿什么\"><a href=\"#面试的时候应该穿什么\" class=\"headerlink\" title=\"面试的时候应该穿什么?\"></a>面试的时候应该穿什么?</h3><p>穿西装、打领带、小皮鞋？NO！NO！NO！这是互联网公司面试又不是去走红毯，所以你只需要穿的简单大方就好，不需要太正式。</p>\n<h3 id=\"面试前有哪些需要注意的地方\"><a href=\"#面试前有哪些需要注意的地方\" class=\"headerlink\" title=\"面试前有哪些需要注意的地方?\"></a>面试前有哪些需要注意的地方?</h3><ol>\n<li><a href=\"https://github.com/Snailclimb/programmer-advancement#怎么自我介绍比较好\" target=\"_blank\" rel=\"noopener\">提前准备好自我介绍;</a></li>\n<li>随身带上自己的成绩单和简历(有的公司在面试前都会让你交一份成绩单和简历当做面试中的参考);</li>\n<li>如果需要笔试就提前刷一些笔试题;</li>\n<li>花时间做一些逻辑题和智力题(面试中发现有些公司都有逻辑题或者智力题测试环节，并且都把逻辑提或者智力题成绩作为很重要的一个参考);</li>\n<li><a href=\"https://github.com/Snailclimb/programmer-advancement#如何介绍自己的项目\" target=\"_blank\" rel=\"noopener\">准备好自己的项目介绍;</a></li>\n<li>面试之前做好定向复习(所谓定向复习就是专门针对你要面试的公司来复习。比如你在面试之前可以在网上找找有没有你要面试的公司的面经);</li>\n</ol>\n<h3 id=\"怎么自我介绍比较好\"><a href=\"#怎么自我介绍比较好\" class=\"headerlink\" title=\"怎么自我介绍比较好?\"></a>怎么自我介绍比较好?</h3><p>从 HR 面、技术面到高管面/部门主管面，面试官一般会让你先自我介绍一下，所以好好准备自己的自我介绍真的非常重要。网上一般建议的是准备好两份自我介绍：一份对 hr 说的，主要讲能突出自己的经历，会的编程技术一语带过；另一份对技术面试官说的，主要讲自己会的技术细节，项目经验，经历那些就一语带过。</p>\n<p>我这里简单分享一下我自己的自我介绍的一个简单的模板吧：</p>\n<blockquote>\n<p>面试官，您好！我叫某某。大学时间我主要利用课外时间学习某某。在校期间参与过一个某某系统的开发，另外，自己学习过程中也写过很多系统比如某某系统。在学习之余，我比较喜欢通过博客整理分享自己所学知识。我现在是某某社区的认证作者，写过某某很不错的文章。另外，我获得过某某奖,我的 Github 上开源的某个项目已经有多少 Star 了。</p>\n</blockquote>\n<h3 id=\"如何介绍自己的项目\"><a href=\"#如何介绍自己的项目\" class=\"headerlink\" title=\"如何介绍自己的项目?\"></a>如何介绍自己的项目?</h3><p>如果有项目的话，技术面试第一步，面试官一般都是让你自己介绍一下你的项目。你可以从下面几个方向来考虑：</p>\n<ol>\n<li>对项目整体设计的一个感受（面试官可能会让你画系统的架构图）</li>\n<li>在这个项目中你负责了什么、做了什么、担任了什么角色</li>\n<li>从这个项目中你学会了那些东西，使用到了那些技术，学会了那些新技术的使用</li>\n<li>另外项目描述中，最好可以体现自己的综合素质，比如你是如何协调项目组成员协同开发的或者在遇到某一个棘手的问题的时候你是如何解决的又或者说你在这个项目用了什么技术实现了什么功能比如:用 redis 做缓存提高访问速度和并发量、使用消息队列削峰和降流等等。</li>\n</ol>\n<h3 id=\"如果面试官问”你有什么问题问我吗-”时-你该如何回答\"><a href=\"#如果面试官问”你有什么问题问我吗-”时-你该如何回答\" class=\"headerlink\" title=\"如果面试官问”你有什么问题问我吗?”时,你该如何回答\"></a>如果面试官问”你有什么问题问我吗?”时,你该如何回答</h3><p><a href=\"docs/如果面试官问你“你有什么问题问我吗”时%2C 你该如何回答.md\" title=\"如果面试官问&quot;你有什么问题问我吗?&quot;时,你该如何回答\">如果面试官问”你有什么问题问我吗?”时,你该如何回答</a></p>\n<p>几乎每一场面试，特别是 HR 面和高管面的时候，面试官总是会在结尾问我:“问了你这么多问题了，你有什么问题问我吗？”。不管是技术面试还是非技术面试，如果你想赢得公司的青睐和尊重，我觉得我们都应该重视这个问题。</p>\n<p>网上提供了很多问题模板，我觉得回答这个问题重要要的就是:真诚一点,不要问太 Low 的问题。</p>\n<h3 id=\"面试官问你的优点是什么，应该如何回答\"><a href=\"#面试官问你的优点是什么，应该如何回答\" class=\"headerlink\" title=\"面试官问你的优点是什么，应该如何回答?\"></a>面试官问你的优点是什么，应该如何回答?</h3><p>回答这样的问题，最好能够结合你要应聘的职位来做针对性回答。一般面试官问这个问题的时候，很可能会只让你说几个你觉得最能体现你能力的优点，为了避免自己在面试过程中不知道该说自己的那些优点，你可以在面试之前好好准备一下。 面试的时候最好可以说几个你要应聘的职位所做的事情需要的优点或者说你要应聘的公司比较看重的优点(企业文化)。</p>\n<h3 id=\"面试官问你的缺点是什么，应该如何回答\"><a href=\"#面试官问你的缺点是什么，应该如何回答\" class=\"headerlink\" title=\"面试官问你的缺点是什么，应该如何回答?\"></a>面试官问你的缺点是什么，应该如何回答?</h3><p>缺点肯定不能是目标岗位需要的关键能力！！！</p>\n<p>总之，记住一点，面试官问你这个问题的话，你可以说一些不影响你这个职位工作需要的一些缺点。比如你面试后端工程师，面试官问你的缺点是什么的话，你可以这样说：自己比较内向，平时不太爱与人交流，但是考虑到以后可能要和客户沟通，自己正在努力改。</p>\n<h2 id=\"如何写出更优秀的代码\"><a href=\"#如何写出更优秀的代码\" class=\"headerlink\" title=\"如何写出更优秀的代码\"></a>如何写出更优秀的代码</h2><h3 id=\"Java\"><a href=\"#Java\" class=\"headerlink\" title=\"Java\"></a>Java</h3><ol>\n<li>使用 IntelliJ IDEA 作为您的集成开发环境 (IDE)</li>\n<li>使用 JDK 8 或更高版本</li>\n<li>使用 Maven/Gradle</li>\n<li>使用 Lombok</li>\n<li>编写单元测试</li>\n<li>重构:常见,但也很慢</li>\n<li>注意代码规范</li>\n<li>定期联络客户，以获取他们的反馈</li>\n</ol>\n<p>上述建议的详细内容：<a href=\"https://github.com/Snailclimb/programmer-advancement/blob/master/docs/八点建议助您写出优雅的Java代码.md\" target=\"_blank\" rel=\"noopener\">八点建议助您写出优雅的 Java 代码</a>。</p>\n<p>更多代码优化相关内容推荐：</p>\n<ul>\n<li><a href=\"https://juejin.im/post/5dad23685188251d2c4ea2b6\" target=\"_blank\" rel=\"noopener\">业务复杂=if else？刚来的大神竟然用策略+工厂彻底干掉了他们！</a></li>\n<li><a href=\"http://lrwinx.github.io/2017/03/04/细思极恐-你真的会写java吗/\" target=\"_blank\" rel=\"noopener\">一些不错的 Java 实践！推荐阅读 3 遍以上！</a></li>\n<li><a href=\"https://juejin.im/post/5dafbc02e51d4524a0060bdd\" target=\"_blank\" rel=\"noopener\"> [解锁新姿势]兄 dei，你代码需要优化了</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s?__biz=Mzg2OTA0Njk0OA==&amp;mid=2247485599&amp;idx=1&amp;sn=d83ff4e6b1ee951a0a33508a10980ea3&amp;chksm=cea24754f9d5ce426d18b435a8c373ddc580c06c7d6a45cc51377361729c31c7301f1bbc3b78&amp;token=1328169465&amp;lang=zh_CN#rd\" target=\"_blank\" rel=\"noopener\">消灭 Java 代码的“坏味道”</a></li>\n</ul>\n<h2 id=\"作为-IT-行业的过来人-你有什么话想对后辈说的\"><a href=\"#作为-IT-行业的过来人-你有什么话想对后辈说的\" class=\"headerlink\" title=\"作为 IT 行业的过来人,你有什么话想对后辈说的?\"></a>作为 IT 行业的过来人,你有什么话想对后辈说的?</h2><ul>\n<li><a href=\"https://mp.weixin.qq.com/s/gZYSE4Kl0oeJT5GV7sm9kw\" target=\"_blank\" rel=\"noopener\">写给软件工程师的 30 条建议</a></li>\n<li><strong><a href=\"https://github.com/Snailclimb/programmer-advancement/blob/master/docs/proverbs/世界上没有技术驱动型公司.md\" target=\"_blank\" rel=\"noopener\">世界上没有技术驱动型公司</a></strong></li>\n<li><a href=\"https://github.com/Snailclimb/programmer-advancement/blob/master/docs/proverbs/不要一味的迷恋所谓的管理-把当官作为职场唯一的追求.md\" target=\"_blank\" rel=\"noopener\">不要一味的迷恋所谓的管理，把当官作为职场唯一的追求</a></li>\n<li><a href=\"https://github.com/Snailclimb/programmer-advancement/blob/master/docs/proverbs/认清现状-抓住机会.md\" target=\"_blank\" rel=\"noopener\">认清现状，抓住机会</a></li>\n<li><a href=\"https://github.com/Snailclimb/programmer-advancement/blob/master/docs/proverbs/这些年在互联网的经历-送你一些不错的建议.md\" target=\"_blank\" rel=\"noopener\">结合自己这些年在互联网的经历,送你一些不错的建议</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s?__biz=Mzg2OTA0Njk0OA==&amp;mid=2247485441&amp;idx=1&amp;sn=303a25ab02fa9f14a319923e6b0d9759&amp;chksm=cea247caf9d5cedc3a5e1d31f26c08d8ae4c11c349fbdc91ac1d90d8b35807517accb5f5d527&amp;token=2128752750&amp;lang=zh_CN#rd\" target=\"_blank\" rel=\"noopener\">如何超过大多数人</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s?__biz=Mzg2OTA0Njk0OA==&amp;mid=2247485670&amp;idx=3&amp;sn=1dc4c00d74695daa6cb0c29b5956b77a&amp;chksm=cea2472df9d5ce3b11a7f459d79fa2003776bb6081257c6a2ac31b9aefc99963131f60264158&amp;token=1679986187&amp;lang=zh_CN#rd\" target=\"_blank\" rel=\"noopener\">别死写代码，这 25 条比涨工资都重要</a></li>\n</ul>\n"},{"layout":"post","title":"How to use Linux","intro":"","date":"2019-11-26T00:00:00.000Z","author":"Makinohara","featured_image":"http://msfasr.com/img/Linux.jpg","catalog":true,"_content":"\n\n\n# A brief introduction \n\nLinux是一套免费使用和自由传播的类Unix操作系统。\n\n# Linux系统结构\n\n## 关键文件夹\n\n| 文件夹      | 描述                                                         |\n| ----------- | ------------------------------------------------------------ |\n| /bin        | bin是Binary的缩写, 这个目录存放着最经常使用的命令。          |\n| /boot       | 这里存放的是启动Linux时使用的一些核心文件，包括一些连接文件以及镜像文件。 |\n| /dev        | dev是Device(设备)的缩写, 该目录下存放的是Linux的外部设备，在Linux中访问设备的方式和访问文件的方式是相同的。 |\n| /etc        | 这个目录用来存放所有的系统管理所需要的配置文件和子目录。     |\n| /home       | 用户的主目录，在Linux中，每个用户都有一个自己的目录，一般该目录名是以用户的账号命名的。 |\n| /lib        | 这个目录里存放着系统最基本的动态连接共享库，其作用类似于Windows里的DLL文件。几乎所有的应用程序都需要用到这些共享库。 |\n| /lost+found | 这个目录一般情况下是空的，当系统非法关机后，这里就存放了一些文件。 |\n| /media      | linux系统会自动识别一些设备，例如U盘、光驱等等，当识别后，linux会把识别的设备挂载到这个目录下。 |\n| /mnt        | 系统提供该目录是为了让用户临时挂载别的文件系统的，我们可以将光驱挂载在/mnt/上，然后进入该目录就可以查看光驱里的内容了。 |\n| /opt        | 这是给主机额外安装软件所摆放的目录。比如你安装一个ORACLE数据库则就可以放到这个目录下。默认是空的。 |\n| /proc       | 这个目录是一个虚拟的目录，它是系统内存的映射，我们可以通过直接访问这个目录来获取系统信息。 这个目录的内容不在硬盘上而是在内存里，我们也可以直接修改里面的某些文件，比如可以通过下面的命令来屏蔽主机的ping命令，使别人无法ping你的机器：`echo 1 > /proc/sys/net/ipv4/icmp_echo_ignore_all` |\n| /root       | 该目录为系统管理员，也称作超级权限者的用户主目录。           |\n| /sbin       | s就是Super User的意思，这里存放的是系统管理员使用的系统管理程序。 |\n| /selinux    | 这个目录是Redhat/CentOS所特有的目录，Selinux是一个安全机制，类似于windows的防火墙，但是这套机制比较复杂，这个目录就是存放selinux相关的文件的。 |\n| /srv        | 该目录存放一些服务启动之后需要提取的数据。                   |\n| /sys        | 这是linux2.6内核的一个很大的变化。该目录下安装了2.6内核中新出现的一个文件系统 sysfs 。sysfs文件系统集成了下面3种文件系统的信息：针对进程信息的proc文件系统、针对设备的devfs文件系统以及针对伪终端的devpts文件系统。该文件系统是内核设备树的一个直观反映。当一个内核对象被创建的时候，对应的文件和目录也在内核对象子系统中被创建。 |\n| /tmp        | 这个目录是用来存放一些临时文件的。                           |\n| /usr        | 这是一个非常重要的目录，用户的很多应用程序和文件都放在这个目录下，类似于windows下的program files目录。 |\n| /usr/bin    | 系统用户使用的应用程序。                                     |\n| /usr/sbin   | 超级用户使用的比较高级的管理程序和系统守护程序。             |\n| /usr/src    | 内核源代码默认的放置目录。                                   |\n| /var        | 这个目录中存放着在不断扩充着的东西，我们习惯将那些经常被修改的目录放在这个目录下。包括各种日志文件。 |\n| /run        | 是一个临时文件系统，存储系统启动以来的信息。当系统重启时，这个目录下的文件应该被删掉或清除。如果你的系统上有 /var/run 目录，应该让它指向 run。 |\n\n在 Linux 系统中，有几个目录是比较重要的，平时需要注意不要误删除或者随意更改内部文件。\n\n**/etc**： 上边也提到了，这个是系统中的配置文件，如果你更改了该目录下的某个文件可能会导致系统不能启动。\n\n**/bin, /sbin, /usr/bin, /usr/sbin**: 这是系统预设的执行文件的放置目录，比如 ls 就是在/bin/ls 目录下的。\n\n值得提出的是，/bin, /usr/bin 是给系统用户使用的指令（除root外的通用户），而/sbin, /usr/sbin 则是给root使用的指令。\n\n**/var**： 这是一个非常重要的目录，系统上跑了很多程序，那么每个程序都会有相应的日志产生，而这些日志就被记录到这个目录下，具体在/var/log 目录下，另外mail的预设放置也是在这里。\n\n## 文件属性\n\nLinux系统是一种典型的多用户系统，不同的用户处于不同的地位，拥有不同的权限。为了保护系统的安全性，Linux系统对不同的用户访问同一文件（包括目录文件）的权限做了不同的规定。\n\n在Linux中我们可以使用ll或者ls –l命令来显示一个文件的属性以及文件所属的用户和组，如：\n\n```\n[root@www /]# ls -l\ntotal 64\ndr-xr-xr-x   2 root root 4096 Dec 14  2012 bin\ndr-xr-xr-x   4 root root 4096 Apr 19  2012 boot\n……\n```\n\n实例中，bin文件的第一个属性用\"d\"表示。\"d\"在Linux中代表该文件是一个目录文件。\n\n在Linux中第一个字符代表这个文件是目录、文件或链接文件等等。\n\n- 当为[ **d** ]则是目录\n- 当为[ **-** ]则是文件；\n- 若是[ **l** ]则表示为链接文档(link file)；\n- 若是[ **b** ]则表示为装置文件里面的可供储存的接口设备(可随机存取装置)；\n- 若是[ **c** ]则表示为装置文件里面的串行端口设备，例如键盘、鼠标(一次性读取装置)。\n\n接下来的字符中，以三个为一组，且均为『rwx』 的三个参数的组合。其中，[ r ]代表可读(read)、[ w ]代表可写(write)、[ x ]代表可执行(execute)。 要注意的是，这三个权限的位置不会改变，如果没有权限，就会出现减号[ - ]而已。\n\n每个文件的属性由左边第一部分的10个字符来确定（如下表）。\n\n| 文件类型 | 属主权限   | 属组权限   | 其他用户权限 |\n| -------- | ---------- | ---------- | ------------ |\n| 0        | 1 2 3      | 4 5 6      | 7 8 9        |\n| d        | rwx        | r-x        | r-x          |\n| 目录文件 | 读 写 执行 | 读 写 执行 | 读 写 执行   |\n\n从左至右用0-9这些数字来表示。\n\n第0位确定文件类型，第1-3位确定属主（该文件的所有者）拥有该文件的权限。\n\n第4-6位确定属组（所有者的同组用户）拥有该文件的权限，第7-9位确定其他用户拥有该文件的权限。\n\n其中，第1、4、7位表示读权限，如果用\"r\"字符表示，则有读权限，如果用\"-\"字符表示，则没有读权限；\n\n第2、5、8位表示写权限，如果用\"w\"字符表示，则有写权限，如果用\"-\"字符表示没有写权限；第3、6、9位表示可执行权限，如果用\"x\"字符表示，则有执行权限，如果用\"-\"字符表示，则没有执行权限。\n\n### Linux文件属主和属组\n\n```\n[root@www /]# ls -l\ntotal 64\ndrwxr-xr-x 2 root  root  4096 Feb 15 14:46 cron\ndrwxr-xr-x 3 mysql mysql 4096 Apr 21  2014 mysql\n……\n```\n\n对于文件来说，它都有一个特定的所有者，也就是对该文件具有所有权的用户。\n\n同时，在Linux系统中，用户是按组分类的，一个用户属于一个或多个组。\n\n文件所有者以外的用户又可以分为文件所有者的同组用户和其他用户。\n\n因此，Linux系统按文件所有者、文件所有者同组用户和其他用户来规定了不同的文件访问权限。\n\n在以上实例中，mysql 文件是一个目录文件，属主和属组都为 mysql，属主有可读、可写、可执行的权限；与属主同组的其他用户有可读和可执行的权限；其他用户也有可读和可执行的权限。\n\n对于 root 用户来说，一般情况下，文件的权限对其不起作用。\n\n### 更改文件属性\n\n#### 1、chgrp：更改文件属组\n\n语法：\n\n```\nchgrp [-R] 属组名 文件名\n```\n\n参数选项\n\n- -R：递归更改文件属组，就是在更改某个目录文件的属组时，如果加上-R的参数，那么该目录下的所有文件的属组都会更改。\n\n#### 2、chown：更改文件属主，也可以同时更改文件属组\n\n语法：\n\n```\nchown [–R] 属主名 文件名\nchown [-R] 属主名：属组名 文件名\n```\n\n进入 /root 目录（~）将install.log的拥有者改为bin这个账号：\n\n```\n[root@www ~] cd ~\n[root@www ~]# chown bin install.log\n[root@www ~]# ls -l\n-rw-r--r--  1 bin  users 68495 Jun 25 08:53 install.log\n```\n\n将install.log的拥有者与群组改回为root：\n\n```\n[root@www ~]# chown root:root install.log\n[root@www ~]# ls -l\n-rw-r--r--  1 root root 68495 Jun 25 08:53 install.log\n```\n\n#### 3、chmod：更改文件9个属性\n\nLinux文件属性有两种设置方法，一种是数字，一种是符号。\n\nLinux文件的基本权限就有九个，分别是owner/group/others三种身份各有自己的read/write/execute权限。\n\n先复习一下刚刚上面提到的数据：文件的权限字符为：『-rwxrwxrwx』， 这九个权限是三个三个一组的！其中，我们可以使用数字来代表各个权限，各权限的分数对照表如下：\n\n- r:4\n- w:2\n- x:1\n\n每种身份(owner/group/others)各自的三个权限(r/w/x)分数是需要累加的，例如当权限为： [-rwxrwx---] 分数则是：\n\n- owner = rwx = 4+2+1 = 7\n- group = rwx = 4+2+1 = 7\n- others= --- = 0+0+0 = 0\n\n所以等一下我们设定权限的变更时，该文件的权限数字就是770啦！变更权限的指令chmod的语法是这样的：\n\n```\n chmod [-R] xyz 文件或目录\n```\n\n选项与参数：\n\n- xyz : 就是刚刚提到的数字类型的权限属性，为 rwx 属性数值的相加。\n- -R : 进行递归(recursive)的持续变更，亦即连同次目录下的所有文件都会变更\n\n举例来说，如果要将.bashrc这个文件所有的权限都设定启用，那么命令如下：\n\n```\n[root@www ~]# ls -al .bashrc\n-rw-r--r--  1 root root 395 Jul  4 11:45 .bashrc\n[root@www ~]# chmod 777 .bashrc\n[root@www ~]# ls -al .bashrc\n-rwxrwxrwx  1 root root 395 Jul  4 11:45 .bashrc\n```\n\n那如果要将权限变成 *-rwxr-xr--* 呢？那么权限的分数就成为 \\[4+2+1]\\[4+0+1][4+0+0]=754。\n\n#### 符号类型改变文件权限\n\n还有一个改变权限的方法，从之前的介绍中我们可以发现，基本上就九个权限分别是：\n\n- (1)user\n- (2)group\n- (3)others\n\n那么我们就可以使用 **u, g, o** 来代表三种身份的权限！\n\n此外， **a** 则代表 **all**，即全部的身份。读写的权限可以写成 **r, w, x**，也就是可以使用下表的方式来看：\n\n\n\n| 命令  | 用户、组 | 修改    | 权限 | 项目       |\n| ----- | -------- | ------- | ---- | ---------- |\n| chmod | u        | +(加入) | r    | 文件或目录 |\n|       | g        | -(除去) | w    |            |\n|       | o        | =(设定) | x    |            |\n|       | a        |         |      |            |\n\n如果我们需要将文件权限设置为 `-rwxr-xr--` ，可以使用 `chmod u=rwx,g=rx,o=r 文件名` 来设定:\n\n```\n#  touch test1    // 创建 test1 文件\n# ls -al test1    // 查看 test1 默认权限\n-rw-r--r-- 1 root root 0 Nov 15 10:32 test1\n# chmod u=rwx,g=rx,o=r  test1    // 修改 test1 权限\n# ls -al test1\n-rwxr-xr-- 1 root root 0 Nov 15 10:32 test1\n```\n\n而如果是要将权限去掉而不改变其他已存在的权限呢？例如要拿掉全部人的可执行权限，则：\n\n```\n#  chmod  a-x test1\n# ls -al test1\n-rw-r--r-- 1 root root 0 Nov 15 10:32 test1\n```\n\n## 文件与目录管理\n\n- ls: 列出目录\n- cd：切换目录\n- pwd：显示目前的目录\n- mkdir：创建一个新的目录\n- rmdir：删除一个空的目录\n- cp: 复制文件或目录\n- rm: 移除文件或目录\n- mv: 移动文件与目录，或修改文件与目录的名称\n\n你可以使用 *man [命令]* 来查看各个命令的使用文档，如 ：man cp。","source":"_posts/2019-11-26-Linux.markdown","raw":"---\nlayout:     post\ntitle:      \"How to use Linux\"\nintro:   \"\"\ndate:       2019-11-26 08:00:00\nauthor:     \"Makinohara\"\nfeatured_image: http://msfasr.com/img/Linux.jpg\ncatalog: true\ntags:\n    - 计算机基础\n---\n\n\n\n# A brief introduction \n\nLinux是一套免费使用和自由传播的类Unix操作系统。\n\n# Linux系统结构\n\n## 关键文件夹\n\n| 文件夹      | 描述                                                         |\n| ----------- | ------------------------------------------------------------ |\n| /bin        | bin是Binary的缩写, 这个目录存放着最经常使用的命令。          |\n| /boot       | 这里存放的是启动Linux时使用的一些核心文件，包括一些连接文件以及镜像文件。 |\n| /dev        | dev是Device(设备)的缩写, 该目录下存放的是Linux的外部设备，在Linux中访问设备的方式和访问文件的方式是相同的。 |\n| /etc        | 这个目录用来存放所有的系统管理所需要的配置文件和子目录。     |\n| /home       | 用户的主目录，在Linux中，每个用户都有一个自己的目录，一般该目录名是以用户的账号命名的。 |\n| /lib        | 这个目录里存放着系统最基本的动态连接共享库，其作用类似于Windows里的DLL文件。几乎所有的应用程序都需要用到这些共享库。 |\n| /lost+found | 这个目录一般情况下是空的，当系统非法关机后，这里就存放了一些文件。 |\n| /media      | linux系统会自动识别一些设备，例如U盘、光驱等等，当识别后，linux会把识别的设备挂载到这个目录下。 |\n| /mnt        | 系统提供该目录是为了让用户临时挂载别的文件系统的，我们可以将光驱挂载在/mnt/上，然后进入该目录就可以查看光驱里的内容了。 |\n| /opt        | 这是给主机额外安装软件所摆放的目录。比如你安装一个ORACLE数据库则就可以放到这个目录下。默认是空的。 |\n| /proc       | 这个目录是一个虚拟的目录，它是系统内存的映射，我们可以通过直接访问这个目录来获取系统信息。 这个目录的内容不在硬盘上而是在内存里，我们也可以直接修改里面的某些文件，比如可以通过下面的命令来屏蔽主机的ping命令，使别人无法ping你的机器：`echo 1 > /proc/sys/net/ipv4/icmp_echo_ignore_all` |\n| /root       | 该目录为系统管理员，也称作超级权限者的用户主目录。           |\n| /sbin       | s就是Super User的意思，这里存放的是系统管理员使用的系统管理程序。 |\n| /selinux    | 这个目录是Redhat/CentOS所特有的目录，Selinux是一个安全机制，类似于windows的防火墙，但是这套机制比较复杂，这个目录就是存放selinux相关的文件的。 |\n| /srv        | 该目录存放一些服务启动之后需要提取的数据。                   |\n| /sys        | 这是linux2.6内核的一个很大的变化。该目录下安装了2.6内核中新出现的一个文件系统 sysfs 。sysfs文件系统集成了下面3种文件系统的信息：针对进程信息的proc文件系统、针对设备的devfs文件系统以及针对伪终端的devpts文件系统。该文件系统是内核设备树的一个直观反映。当一个内核对象被创建的时候，对应的文件和目录也在内核对象子系统中被创建。 |\n| /tmp        | 这个目录是用来存放一些临时文件的。                           |\n| /usr        | 这是一个非常重要的目录，用户的很多应用程序和文件都放在这个目录下，类似于windows下的program files目录。 |\n| /usr/bin    | 系统用户使用的应用程序。                                     |\n| /usr/sbin   | 超级用户使用的比较高级的管理程序和系统守护程序。             |\n| /usr/src    | 内核源代码默认的放置目录。                                   |\n| /var        | 这个目录中存放着在不断扩充着的东西，我们习惯将那些经常被修改的目录放在这个目录下。包括各种日志文件。 |\n| /run        | 是一个临时文件系统，存储系统启动以来的信息。当系统重启时，这个目录下的文件应该被删掉或清除。如果你的系统上有 /var/run 目录，应该让它指向 run。 |\n\n在 Linux 系统中，有几个目录是比较重要的，平时需要注意不要误删除或者随意更改内部文件。\n\n**/etc**： 上边也提到了，这个是系统中的配置文件，如果你更改了该目录下的某个文件可能会导致系统不能启动。\n\n**/bin, /sbin, /usr/bin, /usr/sbin**: 这是系统预设的执行文件的放置目录，比如 ls 就是在/bin/ls 目录下的。\n\n值得提出的是，/bin, /usr/bin 是给系统用户使用的指令（除root外的通用户），而/sbin, /usr/sbin 则是给root使用的指令。\n\n**/var**： 这是一个非常重要的目录，系统上跑了很多程序，那么每个程序都会有相应的日志产生，而这些日志就被记录到这个目录下，具体在/var/log 目录下，另外mail的预设放置也是在这里。\n\n## 文件属性\n\nLinux系统是一种典型的多用户系统，不同的用户处于不同的地位，拥有不同的权限。为了保护系统的安全性，Linux系统对不同的用户访问同一文件（包括目录文件）的权限做了不同的规定。\n\n在Linux中我们可以使用ll或者ls –l命令来显示一个文件的属性以及文件所属的用户和组，如：\n\n```\n[root@www /]# ls -l\ntotal 64\ndr-xr-xr-x   2 root root 4096 Dec 14  2012 bin\ndr-xr-xr-x   4 root root 4096 Apr 19  2012 boot\n……\n```\n\n实例中，bin文件的第一个属性用\"d\"表示。\"d\"在Linux中代表该文件是一个目录文件。\n\n在Linux中第一个字符代表这个文件是目录、文件或链接文件等等。\n\n- 当为[ **d** ]则是目录\n- 当为[ **-** ]则是文件；\n- 若是[ **l** ]则表示为链接文档(link file)；\n- 若是[ **b** ]则表示为装置文件里面的可供储存的接口设备(可随机存取装置)；\n- 若是[ **c** ]则表示为装置文件里面的串行端口设备，例如键盘、鼠标(一次性读取装置)。\n\n接下来的字符中，以三个为一组，且均为『rwx』 的三个参数的组合。其中，[ r ]代表可读(read)、[ w ]代表可写(write)、[ x ]代表可执行(execute)。 要注意的是，这三个权限的位置不会改变，如果没有权限，就会出现减号[ - ]而已。\n\n每个文件的属性由左边第一部分的10个字符来确定（如下表）。\n\n| 文件类型 | 属主权限   | 属组权限   | 其他用户权限 |\n| -------- | ---------- | ---------- | ------------ |\n| 0        | 1 2 3      | 4 5 6      | 7 8 9        |\n| d        | rwx        | r-x        | r-x          |\n| 目录文件 | 读 写 执行 | 读 写 执行 | 读 写 执行   |\n\n从左至右用0-9这些数字来表示。\n\n第0位确定文件类型，第1-3位确定属主（该文件的所有者）拥有该文件的权限。\n\n第4-6位确定属组（所有者的同组用户）拥有该文件的权限，第7-9位确定其他用户拥有该文件的权限。\n\n其中，第1、4、7位表示读权限，如果用\"r\"字符表示，则有读权限，如果用\"-\"字符表示，则没有读权限；\n\n第2、5、8位表示写权限，如果用\"w\"字符表示，则有写权限，如果用\"-\"字符表示没有写权限；第3、6、9位表示可执行权限，如果用\"x\"字符表示，则有执行权限，如果用\"-\"字符表示，则没有执行权限。\n\n### Linux文件属主和属组\n\n```\n[root@www /]# ls -l\ntotal 64\ndrwxr-xr-x 2 root  root  4096 Feb 15 14:46 cron\ndrwxr-xr-x 3 mysql mysql 4096 Apr 21  2014 mysql\n……\n```\n\n对于文件来说，它都有一个特定的所有者，也就是对该文件具有所有权的用户。\n\n同时，在Linux系统中，用户是按组分类的，一个用户属于一个或多个组。\n\n文件所有者以外的用户又可以分为文件所有者的同组用户和其他用户。\n\n因此，Linux系统按文件所有者、文件所有者同组用户和其他用户来规定了不同的文件访问权限。\n\n在以上实例中，mysql 文件是一个目录文件，属主和属组都为 mysql，属主有可读、可写、可执行的权限；与属主同组的其他用户有可读和可执行的权限；其他用户也有可读和可执行的权限。\n\n对于 root 用户来说，一般情况下，文件的权限对其不起作用。\n\n### 更改文件属性\n\n#### 1、chgrp：更改文件属组\n\n语法：\n\n```\nchgrp [-R] 属组名 文件名\n```\n\n参数选项\n\n- -R：递归更改文件属组，就是在更改某个目录文件的属组时，如果加上-R的参数，那么该目录下的所有文件的属组都会更改。\n\n#### 2、chown：更改文件属主，也可以同时更改文件属组\n\n语法：\n\n```\nchown [–R] 属主名 文件名\nchown [-R] 属主名：属组名 文件名\n```\n\n进入 /root 目录（~）将install.log的拥有者改为bin这个账号：\n\n```\n[root@www ~] cd ~\n[root@www ~]# chown bin install.log\n[root@www ~]# ls -l\n-rw-r--r--  1 bin  users 68495 Jun 25 08:53 install.log\n```\n\n将install.log的拥有者与群组改回为root：\n\n```\n[root@www ~]# chown root:root install.log\n[root@www ~]# ls -l\n-rw-r--r--  1 root root 68495 Jun 25 08:53 install.log\n```\n\n#### 3、chmod：更改文件9个属性\n\nLinux文件属性有两种设置方法，一种是数字，一种是符号。\n\nLinux文件的基本权限就有九个，分别是owner/group/others三种身份各有自己的read/write/execute权限。\n\n先复习一下刚刚上面提到的数据：文件的权限字符为：『-rwxrwxrwx』， 这九个权限是三个三个一组的！其中，我们可以使用数字来代表各个权限，各权限的分数对照表如下：\n\n- r:4\n- w:2\n- x:1\n\n每种身份(owner/group/others)各自的三个权限(r/w/x)分数是需要累加的，例如当权限为： [-rwxrwx---] 分数则是：\n\n- owner = rwx = 4+2+1 = 7\n- group = rwx = 4+2+1 = 7\n- others= --- = 0+0+0 = 0\n\n所以等一下我们设定权限的变更时，该文件的权限数字就是770啦！变更权限的指令chmod的语法是这样的：\n\n```\n chmod [-R] xyz 文件或目录\n```\n\n选项与参数：\n\n- xyz : 就是刚刚提到的数字类型的权限属性，为 rwx 属性数值的相加。\n- -R : 进行递归(recursive)的持续变更，亦即连同次目录下的所有文件都会变更\n\n举例来说，如果要将.bashrc这个文件所有的权限都设定启用，那么命令如下：\n\n```\n[root@www ~]# ls -al .bashrc\n-rw-r--r--  1 root root 395 Jul  4 11:45 .bashrc\n[root@www ~]# chmod 777 .bashrc\n[root@www ~]# ls -al .bashrc\n-rwxrwxrwx  1 root root 395 Jul  4 11:45 .bashrc\n```\n\n那如果要将权限变成 *-rwxr-xr--* 呢？那么权限的分数就成为 \\[4+2+1]\\[4+0+1][4+0+0]=754。\n\n#### 符号类型改变文件权限\n\n还有一个改变权限的方法，从之前的介绍中我们可以发现，基本上就九个权限分别是：\n\n- (1)user\n- (2)group\n- (3)others\n\n那么我们就可以使用 **u, g, o** 来代表三种身份的权限！\n\n此外， **a** 则代表 **all**，即全部的身份。读写的权限可以写成 **r, w, x**，也就是可以使用下表的方式来看：\n\n\n\n| 命令  | 用户、组 | 修改    | 权限 | 项目       |\n| ----- | -------- | ------- | ---- | ---------- |\n| chmod | u        | +(加入) | r    | 文件或目录 |\n|       | g        | -(除去) | w    |            |\n|       | o        | =(设定) | x    |            |\n|       | a        |         |      |            |\n\n如果我们需要将文件权限设置为 `-rwxr-xr--` ，可以使用 `chmod u=rwx,g=rx,o=r 文件名` 来设定:\n\n```\n#  touch test1    // 创建 test1 文件\n# ls -al test1    // 查看 test1 默认权限\n-rw-r--r-- 1 root root 0 Nov 15 10:32 test1\n# chmod u=rwx,g=rx,o=r  test1    // 修改 test1 权限\n# ls -al test1\n-rwxr-xr-- 1 root root 0 Nov 15 10:32 test1\n```\n\n而如果是要将权限去掉而不改变其他已存在的权限呢？例如要拿掉全部人的可执行权限，则：\n\n```\n#  chmod  a-x test1\n# ls -al test1\n-rw-r--r-- 1 root root 0 Nov 15 10:32 test1\n```\n\n## 文件与目录管理\n\n- ls: 列出目录\n- cd：切换目录\n- pwd：显示目前的目录\n- mkdir：创建一个新的目录\n- rmdir：删除一个空的目录\n- cp: 复制文件或目录\n- rm: 移除文件或目录\n- mv: 移动文件与目录，或修改文件与目录的名称\n\n你可以使用 *man [命令]* 来查看各个命令的使用文档，如 ：man cp。","slug":"2019-11-26-Linux","published":1,"updated":"2021-10-24T02:04:35.822Z","_id":"ckey85ujg0010ho8a5gz6dp1c","comments":1,"photos":[],"link":"","content":"<h1 id=\"A-brief-introduction\"><a href=\"#A-brief-introduction\" class=\"headerlink\" title=\"A brief introduction\"></a>A brief introduction</h1><p>Linux是一套免费使用和自由传播的类Unix操作系统。</p>\n<h1 id=\"Linux系统结构\"><a href=\"#Linux系统结构\" class=\"headerlink\" title=\"Linux系统结构\"></a>Linux系统结构</h1><h2 id=\"关键文件夹\"><a href=\"#关键文件夹\" class=\"headerlink\" title=\"关键文件夹\"></a>关键文件夹</h2><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>文件夹</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>/bin</td>\n<td>bin是Binary的缩写, 这个目录存放着最经常使用的命令。</td>\n</tr>\n<tr>\n<td>/boot</td>\n<td>这里存放的是启动Linux时使用的一些核心文件，包括一些连接文件以及镜像文件。</td>\n</tr>\n<tr>\n<td>/dev</td>\n<td>dev是Device(设备)的缩写, 该目录下存放的是Linux的外部设备，在Linux中访问设备的方式和访问文件的方式是相同的。</td>\n</tr>\n<tr>\n<td>/etc</td>\n<td>这个目录用来存放所有的系统管理所需要的配置文件和子目录。</td>\n</tr>\n<tr>\n<td>/home</td>\n<td>用户的主目录，在Linux中，每个用户都有一个自己的目录，一般该目录名是以用户的账号命名的。</td>\n</tr>\n<tr>\n<td>/lib</td>\n<td>这个目录里存放着系统最基本的动态连接共享库，其作用类似于Windows里的DLL文件。几乎所有的应用程序都需要用到这些共享库。</td>\n</tr>\n<tr>\n<td>/lost+found</td>\n<td>这个目录一般情况下是空的，当系统非法关机后，这里就存放了一些文件。</td>\n</tr>\n<tr>\n<td>/media</td>\n<td>linux系统会自动识别一些设备，例如U盘、光驱等等，当识别后，linux会把识别的设备挂载到这个目录下。</td>\n</tr>\n<tr>\n<td>/mnt</td>\n<td>系统提供该目录是为了让用户临时挂载别的文件系统的，我们可以将光驱挂载在/mnt/上，然后进入该目录就可以查看光驱里的内容了。</td>\n</tr>\n<tr>\n<td>/opt</td>\n<td>这是给主机额外安装软件所摆放的目录。比如你安装一个ORACLE数据库则就可以放到这个目录下。默认是空的。</td>\n</tr>\n<tr>\n<td>/proc</td>\n<td>这个目录是一个虚拟的目录，它是系统内存的映射，我们可以通过直接访问这个目录来获取系统信息。 这个目录的内容不在硬盘上而是在内存里，我们也可以直接修改里面的某些文件，比如可以通过下面的命令来屏蔽主机的ping命令，使别人无法ping你的机器：<code>echo 1 &gt; /proc/sys/net/ipv4/icmp_echo_ignore_all</code></td>\n</tr>\n<tr>\n<td>/root</td>\n<td>该目录为系统管理员，也称作超级权限者的用户主目录。</td>\n</tr>\n<tr>\n<td>/sbin</td>\n<td>s就是Super User的意思，这里存放的是系统管理员使用的系统管理程序。</td>\n</tr>\n<tr>\n<td>/selinux</td>\n<td>这个目录是Redhat/CentOS所特有的目录，Selinux是一个安全机制，类似于windows的防火墙，但是这套机制比较复杂，这个目录就是存放selinux相关的文件的。</td>\n</tr>\n<tr>\n<td>/srv</td>\n<td>该目录存放一些服务启动之后需要提取的数据。</td>\n</tr>\n<tr>\n<td>/sys</td>\n<td>这是linux2.6内核的一个很大的变化。该目录下安装了2.6内核中新出现的一个文件系统 sysfs 。sysfs文件系统集成了下面3种文件系统的信息：针对进程信息的proc文件系统、针对设备的devfs文件系统以及针对伪终端的devpts文件系统。该文件系统是内核设备树的一个直观反映。当一个内核对象被创建的时候，对应的文件和目录也在内核对象子系统中被创建。</td>\n</tr>\n<tr>\n<td>/tmp</td>\n<td>这个目录是用来存放一些临时文件的。</td>\n</tr>\n<tr>\n<td>/usr</td>\n<td>这是一个非常重要的目录，用户的很多应用程序和文件都放在这个目录下，类似于windows下的program files目录。</td>\n</tr>\n<tr>\n<td>/usr/bin</td>\n<td>系统用户使用的应用程序。</td>\n</tr>\n<tr>\n<td>/usr/sbin</td>\n<td>超级用户使用的比较高级的管理程序和系统守护程序。</td>\n</tr>\n<tr>\n<td>/usr/src</td>\n<td>内核源代码默认的放置目录。</td>\n</tr>\n<tr>\n<td>/var</td>\n<td>这个目录中存放着在不断扩充着的东西，我们习惯将那些经常被修改的目录放在这个目录下。包括各种日志文件。</td>\n</tr>\n<tr>\n<td>/run</td>\n<td>是一个临时文件系统，存储系统启动以来的信息。当系统重启时，这个目录下的文件应该被删掉或清除。如果你的系统上有 /var/run 目录，应该让它指向 run。</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>在 Linux 系统中，有几个目录是比较重要的，平时需要注意不要误删除或者随意更改内部文件。</p>\n<p><strong>/etc</strong>： 上边也提到了，这个是系统中的配置文件，如果你更改了该目录下的某个文件可能会导致系统不能启动。</p>\n<p><strong>/bin, /sbin, /usr/bin, /usr/sbin</strong>: 这是系统预设的执行文件的放置目录，比如 ls 就是在/bin/ls 目录下的。</p>\n<p>值得提出的是，/bin, /usr/bin 是给系统用户使用的指令（除root外的通用户），而/sbin, /usr/sbin 则是给root使用的指令。</p>\n<p><strong>/var</strong>： 这是一个非常重要的目录，系统上跑了很多程序，那么每个程序都会有相应的日志产生，而这些日志就被记录到这个目录下，具体在/var/log 目录下，另外mail的预设放置也是在这里。</p>\n<h2 id=\"文件属性\"><a href=\"#文件属性\" class=\"headerlink\" title=\"文件属性\"></a>文件属性</h2><p>Linux系统是一种典型的多用户系统，不同的用户处于不同的地位，拥有不同的权限。为了保护系统的安全性，Linux系统对不同的用户访问同一文件（包括目录文件）的权限做了不同的规定。</p>\n<p>在Linux中我们可以使用ll或者ls –l命令来显示一个文件的属性以及文件所属的用户和组，如：</p>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs angelscript\">[<span class=\"hljs-symbol\">root@</span>www /]# ls -l<br>total <span class=\"hljs-number\">64</span><br>dr-xr-xr-x   <span class=\"hljs-number\">2</span> root root <span class=\"hljs-number\">4096</span> Dec <span class=\"hljs-number\">14</span>  <span class=\"hljs-number\">2012</span> bin<br>dr-xr-xr-x   <span class=\"hljs-number\">4</span> root root <span class=\"hljs-number\">4096</span> Apr <span class=\"hljs-number\">19</span>  <span class=\"hljs-number\">2012</span> boot<br>……<br></code></pre></td></tr></table></figure>\n<p>实例中，bin文件的第一个属性用”d”表示。”d”在Linux中代表该文件是一个目录文件。</p>\n<p>在Linux中第一个字符代表这个文件是目录、文件或链接文件等等。</p>\n<ul>\n<li>当为[ <strong>d</strong> ]则是目录</li>\n<li>当为[ <strong>-</strong> ]则是文件；</li>\n<li>若是[ <strong>l</strong> ]则表示为链接文档(link file)；</li>\n<li>若是[ <strong>b</strong> ]则表示为装置文件里面的可供储存的接口设备(可随机存取装置)；</li>\n<li>若是[ <strong>c</strong> ]则表示为装置文件里面的串行端口设备，例如键盘、鼠标(一次性读取装置)。</li>\n</ul>\n<p>接下来的字符中，以三个为一组，且均为『rwx』 的三个参数的组合。其中，[ r ]代表可读(read)、[ w ]代表可写(write)、[ x ]代表可执行(execute)。 要注意的是，这三个权限的位置不会改变，如果没有权限，就会出现减号[ - ]而已。</p>\n<p>每个文件的属性由左边第一部分的10个字符来确定（如下表）。</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>文件类型</th>\n<th>属主权限</th>\n<th>属组权限</th>\n<th>其他用户权限</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0</td>\n<td>1 2 3</td>\n<td>4 5 6</td>\n<td>7 8 9</td>\n</tr>\n<tr>\n<td>d</td>\n<td>rwx</td>\n<td>r-x</td>\n<td>r-x</td>\n</tr>\n<tr>\n<td>目录文件</td>\n<td>读 写 执行</td>\n<td>读 写 执行</td>\n<td>读 写 执行</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>从左至右用0-9这些数字来表示。</p>\n<p>第0位确定文件类型，第1-3位确定属主（该文件的所有者）拥有该文件的权限。</p>\n<p>第4-6位确定属组（所有者的同组用户）拥有该文件的权限，第7-9位确定其他用户拥有该文件的权限。</p>\n<p>其中，第1、4、7位表示读权限，如果用”r”字符表示，则有读权限，如果用”-“字符表示，则没有读权限；</p>\n<p>第2、5、8位表示写权限，如果用”w”字符表示，则有写权限，如果用”-“字符表示没有写权限；第3、6、9位表示可执行权限，如果用”x”字符表示，则有执行权限，如果用”-“字符表示，则没有执行权限。</p>\n<h3 id=\"Linux文件属主和属组\"><a href=\"#Linux文件属主和属组\" class=\"headerlink\" title=\"Linux文件属主和属组\"></a>Linux文件属主和属组</h3><figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs angelscript\">[<span class=\"hljs-symbol\">root@</span>www /]# ls -l<br>total <span class=\"hljs-number\">64</span><br>drwxr-xr-x <span class=\"hljs-number\">2</span> root  root  <span class=\"hljs-number\">4096</span> Feb <span class=\"hljs-number\">15</span> <span class=\"hljs-number\">14</span>:<span class=\"hljs-number\">46</span> cron<br>drwxr-xr-x <span class=\"hljs-number\">3</span> mysql mysql <span class=\"hljs-number\">4096</span> Apr <span class=\"hljs-number\">21</span>  <span class=\"hljs-number\">2014</span> mysql<br>……<br></code></pre></td></tr></table></figure>\n<p>对于文件来说，它都有一个特定的所有者，也就是对该文件具有所有权的用户。</p>\n<p>同时，在Linux系统中，用户是按组分类的，一个用户属于一个或多个组。</p>\n<p>文件所有者以外的用户又可以分为文件所有者的同组用户和其他用户。</p>\n<p>因此，Linux系统按文件所有者、文件所有者同组用户和其他用户来规定了不同的文件访问权限。</p>\n<p>在以上实例中，mysql 文件是一个目录文件，属主和属组都为 mysql，属主有可读、可写、可执行的权限；与属主同组的其他用户有可读和可执行的权限；其他用户也有可读和可执行的权限。</p>\n<p>对于 root 用户来说，一般情况下，文件的权限对其不起作用。</p>\n<h3 id=\"更改文件属性\"><a href=\"#更改文件属性\" class=\"headerlink\" title=\"更改文件属性\"></a>更改文件属性</h3><h4 id=\"1、chgrp：更改文件属组\"><a href=\"#1、chgrp：更改文件属组\" class=\"headerlink\" title=\"1、chgrp：更改文件属组\"></a>1、chgrp：更改文件属组</h4><p>语法：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-tag\">chgrp</span> <span class=\"hljs-selector-attr\">[-R]</span> 属组名 文件名<br></code></pre></td></tr></table></figure>\n<p>参数选项</p>\n<ul>\n<li>-R：递归更改文件属组，就是在更改某个目录文件的属组时，如果加上-R的参数，那么该目录下的所有文件的属组都会更改。</li>\n</ul>\n<h4 id=\"2、chown：更改文件属主，也可以同时更改文件属组\"><a href=\"#2、chown：更改文件属主，也可以同时更改文件属组\" class=\"headerlink\" title=\"2、chown：更改文件属主，也可以同时更改文件属组\"></a>2、chown：更改文件属主，也可以同时更改文件属组</h4><p>语法：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-tag\">chown</span> <span class=\"hljs-selector-attr\">[–R]</span> 属主名 文件名<br><span class=\"hljs-selector-tag\">chown</span> <span class=\"hljs-selector-attr\">[-R]</span> 属主名：属组名 文件名<br></code></pre></td></tr></table></figure>\n<p>进入 /root 目录（~）将install.log的拥有者改为bin这个账号：</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\">[root@www ~] cd ~<br>[root@www ~]# chown bin install.log<br>[root@www ~]# ls -l<br>-rw-r--r--  1 bin <span class=\"hljs-built_in\"> users </span>68495 Jun 25 08:53 install.log<br></code></pre></td></tr></table></figure>\n<p>将install.log的拥有者与群组改回为root：</p>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs angelscript\">[<span class=\"hljs-symbol\">root@</span>www ~]# chown root:root install.log<br>[<span class=\"hljs-symbol\">root@</span>www ~]# ls -l<br>-rw-r--r--  <span class=\"hljs-number\">1</span> root root <span class=\"hljs-number\">68495</span> Jun <span class=\"hljs-number\">25</span> <span class=\"hljs-number\">08</span>:<span class=\"hljs-number\">53</span> install.log<br></code></pre></td></tr></table></figure>\n<h4 id=\"3、chmod：更改文件9个属性\"><a href=\"#3、chmod：更改文件9个属性\" class=\"headerlink\" title=\"3、chmod：更改文件9个属性\"></a>3、chmod：更改文件9个属性</h4><p>Linux文件属性有两种设置方法，一种是数字，一种是符号。</p>\n<p>Linux文件的基本权限就有九个，分别是owner/group/others三种身份各有自己的read/write/execute权限。</p>\n<p>先复习一下刚刚上面提到的数据：文件的权限字符为：『-rwxrwxrwx』， 这九个权限是三个三个一组的！其中，我们可以使用数字来代表各个权限，各权限的分数对照表如下：</p>\n<ul>\n<li>r:4</li>\n<li>w:2</li>\n<li>x:1</li>\n</ul>\n<p>每种身份(owner/group/others)各自的三个权限(r/w/x)分数是需要累加的，例如当权限为： [-rwxrwx—-] 分数则是：</p>\n<ul>\n<li>owner = rwx = 4+2+1 = 7</li>\n<li>group = rwx = 4+2+1 = 7</li>\n<li>others= —- = 0+0+0 = 0</li>\n</ul>\n<p>所以等一下我们设定权限的变更时，该文件的权限数字就是770啦！变更权限的指令chmod的语法是这样的：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-tag\">chmod</span> <span class=\"hljs-selector-attr\">[-R]</span> <span class=\"hljs-selector-tag\">xyz</span> 文件或目录<br></code></pre></td></tr></table></figure>\n<p>选项与参数：</p>\n<ul>\n<li>xyz : 就是刚刚提到的数字类型的权限属性，为 rwx 属性数值的相加。</li>\n<li>-R : 进行递归(recursive)的持续变更，亦即连同次目录下的所有文件都会变更</li>\n</ul>\n<p>举例来说，如果要将.bashrc这个文件所有的权限都设定启用，那么命令如下：</p>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs angelscript\">[<span class=\"hljs-symbol\">root@</span>www ~]# ls -al .bashrc<br>-rw-r--r--  <span class=\"hljs-number\">1</span> root root <span class=\"hljs-number\">395</span> Jul  <span class=\"hljs-number\">4</span> <span class=\"hljs-number\">11</span>:<span class=\"hljs-number\">45</span> .bashrc<br>[<span class=\"hljs-symbol\">root@</span>www ~]# chmod <span class=\"hljs-number\">777</span> .bashrc<br>[<span class=\"hljs-symbol\">root@</span>www ~]# ls -al .bashrc<br>-rwxrwxrwx  <span class=\"hljs-number\">1</span> root root <span class=\"hljs-number\">395</span> Jul  <span class=\"hljs-number\">4</span> <span class=\"hljs-number\">11</span>:<span class=\"hljs-number\">45</span> .bashrc<br></code></pre></td></tr></table></figure>\n<p>那如果要将权限变成 <em>-rwxr-xr—</em> 呢？那么权限的分数就成为 [4+2+1][4+0+1][4+0+0]=754。</p>\n<h4 id=\"符号类型改变文件权限\"><a href=\"#符号类型改变文件权限\" class=\"headerlink\" title=\"符号类型改变文件权限\"></a>符号类型改变文件权限</h4><p>还有一个改变权限的方法，从之前的介绍中我们可以发现，基本上就九个权限分别是：</p>\n<ul>\n<li>(1)user</li>\n<li>(2)group</li>\n<li>(3)others</li>\n</ul>\n<p>那么我们就可以使用 <strong>u, g, o</strong> 来代表三种身份的权限！</p>\n<p>此外， <strong>a</strong> 则代表 <strong>all</strong>，即全部的身份。读写的权限可以写成 <strong>r, w, x</strong>，也就是可以使用下表的方式来看：</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>命令</th>\n<th>用户、组</th>\n<th>修改</th>\n<th>权限</th>\n<th>项目</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>chmod</td>\n<td>u</td>\n<td>+(加入)</td>\n<td>r</td>\n<td>文件或目录</td>\n</tr>\n<tr>\n<td></td>\n<td>g</td>\n<td>-(除去)</td>\n<td>w</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>o</td>\n<td>=(设定)</td>\n<td>x</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>a</td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>如果我们需要将文件权限设置为 <code>-rwxr-xr--</code> ，可以使用 <code>chmod u=rwx,g=rx,o=r 文件名</code> 来设定:</p>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs angelscript\">#  touch test1    <span class=\"hljs-comment\">// 创建 test1 文件</span><br># ls -al test1    <span class=\"hljs-comment\">// 查看 test1 默认权限</span><br>-rw-r--r-- <span class=\"hljs-number\">1</span> root root <span class=\"hljs-number\">0</span> Nov <span class=\"hljs-number\">15</span> <span class=\"hljs-number\">10</span>:<span class=\"hljs-number\">32</span> test1<br># chmod u=rwx,g=rx,o=r  test1    <span class=\"hljs-comment\">// 修改 test1 权限</span><br># ls -al test1<br>-rwxr-xr-- <span class=\"hljs-number\">1</span> root root <span class=\"hljs-number\">0</span> Nov <span class=\"hljs-number\">15</span> <span class=\"hljs-number\">10</span>:<span class=\"hljs-number\">32</span> test1<br></code></pre></td></tr></table></figure>\n<p>而如果是要将权限去掉而不改变其他已存在的权限呢？例如要拿掉全部人的可执行权限，则：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-comment\">#  chmod  a-x test1</span><br><span class=\"hljs-comment\"># ls -al test1</span><br><span class=\"hljs-string\">-rw-r--r--</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-string\">root</span> <span class=\"hljs-string\">root</span> <span class=\"hljs-number\">0</span> <span class=\"hljs-string\">Nov</span> <span class=\"hljs-number\">15</span> <span class=\"hljs-number\">10</span><span class=\"hljs-string\">:32</span> <span class=\"hljs-string\">test1</span><br></code></pre></td></tr></table></figure>\n<h2 id=\"文件与目录管理\"><a href=\"#文件与目录管理\" class=\"headerlink\" title=\"文件与目录管理\"></a>文件与目录管理</h2><ul>\n<li>ls: 列出目录</li>\n<li>cd：切换目录</li>\n<li>pwd：显示目前的目录</li>\n<li>mkdir：创建一个新的目录</li>\n<li>rmdir：删除一个空的目录</li>\n<li>cp: 复制文件或目录</li>\n<li>rm: 移除文件或目录</li>\n<li>mv: 移动文件与目录，或修改文件与目录的名称</li>\n</ul>\n<p>你可以使用 <em>man [命令]</em> 来查看各个命令的使用文档，如 ：man cp。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"A-brief-introduction\"><a href=\"#A-brief-introduction\" class=\"headerlink\" title=\"A brief introduction\"></a>A brief introduction</h1><p>Linux是一套免费使用和自由传播的类Unix操作系统。</p>\n<h1 id=\"Linux系统结构\"><a href=\"#Linux系统结构\" class=\"headerlink\" title=\"Linux系统结构\"></a>Linux系统结构</h1><h2 id=\"关键文件夹\"><a href=\"#关键文件夹\" class=\"headerlink\" title=\"关键文件夹\"></a>关键文件夹</h2><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>文件夹</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>/bin</td>\n<td>bin是Binary的缩写, 这个目录存放着最经常使用的命令。</td>\n</tr>\n<tr>\n<td>/boot</td>\n<td>这里存放的是启动Linux时使用的一些核心文件，包括一些连接文件以及镜像文件。</td>\n</tr>\n<tr>\n<td>/dev</td>\n<td>dev是Device(设备)的缩写, 该目录下存放的是Linux的外部设备，在Linux中访问设备的方式和访问文件的方式是相同的。</td>\n</tr>\n<tr>\n<td>/etc</td>\n<td>这个目录用来存放所有的系统管理所需要的配置文件和子目录。</td>\n</tr>\n<tr>\n<td>/home</td>\n<td>用户的主目录，在Linux中，每个用户都有一个自己的目录，一般该目录名是以用户的账号命名的。</td>\n</tr>\n<tr>\n<td>/lib</td>\n<td>这个目录里存放着系统最基本的动态连接共享库，其作用类似于Windows里的DLL文件。几乎所有的应用程序都需要用到这些共享库。</td>\n</tr>\n<tr>\n<td>/lost+found</td>\n<td>这个目录一般情况下是空的，当系统非法关机后，这里就存放了一些文件。</td>\n</tr>\n<tr>\n<td>/media</td>\n<td>linux系统会自动识别一些设备，例如U盘、光驱等等，当识别后，linux会把识别的设备挂载到这个目录下。</td>\n</tr>\n<tr>\n<td>/mnt</td>\n<td>系统提供该目录是为了让用户临时挂载别的文件系统的，我们可以将光驱挂载在/mnt/上，然后进入该目录就可以查看光驱里的内容了。</td>\n</tr>\n<tr>\n<td>/opt</td>\n<td>这是给主机额外安装软件所摆放的目录。比如你安装一个ORACLE数据库则就可以放到这个目录下。默认是空的。</td>\n</tr>\n<tr>\n<td>/proc</td>\n<td>这个目录是一个虚拟的目录，它是系统内存的映射，我们可以通过直接访问这个目录来获取系统信息。 这个目录的内容不在硬盘上而是在内存里，我们也可以直接修改里面的某些文件，比如可以通过下面的命令来屏蔽主机的ping命令，使别人无法ping你的机器：<code>echo 1 &gt; /proc/sys/net/ipv4/icmp_echo_ignore_all</code></td>\n</tr>\n<tr>\n<td>/root</td>\n<td>该目录为系统管理员，也称作超级权限者的用户主目录。</td>\n</tr>\n<tr>\n<td>/sbin</td>\n<td>s就是Super User的意思，这里存放的是系统管理员使用的系统管理程序。</td>\n</tr>\n<tr>\n<td>/selinux</td>\n<td>这个目录是Redhat/CentOS所特有的目录，Selinux是一个安全机制，类似于windows的防火墙，但是这套机制比较复杂，这个目录就是存放selinux相关的文件的。</td>\n</tr>\n<tr>\n<td>/srv</td>\n<td>该目录存放一些服务启动之后需要提取的数据。</td>\n</tr>\n<tr>\n<td>/sys</td>\n<td>这是linux2.6内核的一个很大的变化。该目录下安装了2.6内核中新出现的一个文件系统 sysfs 。sysfs文件系统集成了下面3种文件系统的信息：针对进程信息的proc文件系统、针对设备的devfs文件系统以及针对伪终端的devpts文件系统。该文件系统是内核设备树的一个直观反映。当一个内核对象被创建的时候，对应的文件和目录也在内核对象子系统中被创建。</td>\n</tr>\n<tr>\n<td>/tmp</td>\n<td>这个目录是用来存放一些临时文件的。</td>\n</tr>\n<tr>\n<td>/usr</td>\n<td>这是一个非常重要的目录，用户的很多应用程序和文件都放在这个目录下，类似于windows下的program files目录。</td>\n</tr>\n<tr>\n<td>/usr/bin</td>\n<td>系统用户使用的应用程序。</td>\n</tr>\n<tr>\n<td>/usr/sbin</td>\n<td>超级用户使用的比较高级的管理程序和系统守护程序。</td>\n</tr>\n<tr>\n<td>/usr/src</td>\n<td>内核源代码默认的放置目录。</td>\n</tr>\n<tr>\n<td>/var</td>\n<td>这个目录中存放着在不断扩充着的东西，我们习惯将那些经常被修改的目录放在这个目录下。包括各种日志文件。</td>\n</tr>\n<tr>\n<td>/run</td>\n<td>是一个临时文件系统，存储系统启动以来的信息。当系统重启时，这个目录下的文件应该被删掉或清除。如果你的系统上有 /var/run 目录，应该让它指向 run。</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>在 Linux 系统中，有几个目录是比较重要的，平时需要注意不要误删除或者随意更改内部文件。</p>\n<p><strong>/etc</strong>： 上边也提到了，这个是系统中的配置文件，如果你更改了该目录下的某个文件可能会导致系统不能启动。</p>\n<p><strong>/bin, /sbin, /usr/bin, /usr/sbin</strong>: 这是系统预设的执行文件的放置目录，比如 ls 就是在/bin/ls 目录下的。</p>\n<p>值得提出的是，/bin, /usr/bin 是给系统用户使用的指令（除root外的通用户），而/sbin, /usr/sbin 则是给root使用的指令。</p>\n<p><strong>/var</strong>： 这是一个非常重要的目录，系统上跑了很多程序，那么每个程序都会有相应的日志产生，而这些日志就被记录到这个目录下，具体在/var/log 目录下，另外mail的预设放置也是在这里。</p>\n<h2 id=\"文件属性\"><a href=\"#文件属性\" class=\"headerlink\" title=\"文件属性\"></a>文件属性</h2><p>Linux系统是一种典型的多用户系统，不同的用户处于不同的地位，拥有不同的权限。为了保护系统的安全性，Linux系统对不同的用户访问同一文件（包括目录文件）的权限做了不同的规定。</p>\n<p>在Linux中我们可以使用ll或者ls –l命令来显示一个文件的属性以及文件所属的用户和组，如：</p>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs angelscript\">[<span class=\"hljs-symbol\">root@</span>www /]# ls -l<br>total <span class=\"hljs-number\">64</span><br>dr-xr-xr-x   <span class=\"hljs-number\">2</span> root root <span class=\"hljs-number\">4096</span> Dec <span class=\"hljs-number\">14</span>  <span class=\"hljs-number\">2012</span> bin<br>dr-xr-xr-x   <span class=\"hljs-number\">4</span> root root <span class=\"hljs-number\">4096</span> Apr <span class=\"hljs-number\">19</span>  <span class=\"hljs-number\">2012</span> boot<br>……<br></code></pre></td></tr></table></figure>\n<p>实例中，bin文件的第一个属性用”d”表示。”d”在Linux中代表该文件是一个目录文件。</p>\n<p>在Linux中第一个字符代表这个文件是目录、文件或链接文件等等。</p>\n<ul>\n<li>当为[ <strong>d</strong> ]则是目录</li>\n<li>当为[ <strong>-</strong> ]则是文件；</li>\n<li>若是[ <strong>l</strong> ]则表示为链接文档(link file)；</li>\n<li>若是[ <strong>b</strong> ]则表示为装置文件里面的可供储存的接口设备(可随机存取装置)；</li>\n<li>若是[ <strong>c</strong> ]则表示为装置文件里面的串行端口设备，例如键盘、鼠标(一次性读取装置)。</li>\n</ul>\n<p>接下来的字符中，以三个为一组，且均为『rwx』 的三个参数的组合。其中，[ r ]代表可读(read)、[ w ]代表可写(write)、[ x ]代表可执行(execute)。 要注意的是，这三个权限的位置不会改变，如果没有权限，就会出现减号[ - ]而已。</p>\n<p>每个文件的属性由左边第一部分的10个字符来确定（如下表）。</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>文件类型</th>\n<th>属主权限</th>\n<th>属组权限</th>\n<th>其他用户权限</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0</td>\n<td>1 2 3</td>\n<td>4 5 6</td>\n<td>7 8 9</td>\n</tr>\n<tr>\n<td>d</td>\n<td>rwx</td>\n<td>r-x</td>\n<td>r-x</td>\n</tr>\n<tr>\n<td>目录文件</td>\n<td>读 写 执行</td>\n<td>读 写 执行</td>\n<td>读 写 执行</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>从左至右用0-9这些数字来表示。</p>\n<p>第0位确定文件类型，第1-3位确定属主（该文件的所有者）拥有该文件的权限。</p>\n<p>第4-6位确定属组（所有者的同组用户）拥有该文件的权限，第7-9位确定其他用户拥有该文件的权限。</p>\n<p>其中，第1、4、7位表示读权限，如果用”r”字符表示，则有读权限，如果用”-“字符表示，则没有读权限；</p>\n<p>第2、5、8位表示写权限，如果用”w”字符表示，则有写权限，如果用”-“字符表示没有写权限；第3、6、9位表示可执行权限，如果用”x”字符表示，则有执行权限，如果用”-“字符表示，则没有执行权限。</p>\n<h3 id=\"Linux文件属主和属组\"><a href=\"#Linux文件属主和属组\" class=\"headerlink\" title=\"Linux文件属主和属组\"></a>Linux文件属主和属组</h3><figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs angelscript\">[<span class=\"hljs-symbol\">root@</span>www /]# ls -l<br>total <span class=\"hljs-number\">64</span><br>drwxr-xr-x <span class=\"hljs-number\">2</span> root  root  <span class=\"hljs-number\">4096</span> Feb <span class=\"hljs-number\">15</span> <span class=\"hljs-number\">14</span>:<span class=\"hljs-number\">46</span> cron<br>drwxr-xr-x <span class=\"hljs-number\">3</span> mysql mysql <span class=\"hljs-number\">4096</span> Apr <span class=\"hljs-number\">21</span>  <span class=\"hljs-number\">2014</span> mysql<br>……<br></code></pre></td></tr></table></figure>\n<p>对于文件来说，它都有一个特定的所有者，也就是对该文件具有所有权的用户。</p>\n<p>同时，在Linux系统中，用户是按组分类的，一个用户属于一个或多个组。</p>\n<p>文件所有者以外的用户又可以分为文件所有者的同组用户和其他用户。</p>\n<p>因此，Linux系统按文件所有者、文件所有者同组用户和其他用户来规定了不同的文件访问权限。</p>\n<p>在以上实例中，mysql 文件是一个目录文件，属主和属组都为 mysql，属主有可读、可写、可执行的权限；与属主同组的其他用户有可读和可执行的权限；其他用户也有可读和可执行的权限。</p>\n<p>对于 root 用户来说，一般情况下，文件的权限对其不起作用。</p>\n<h3 id=\"更改文件属性\"><a href=\"#更改文件属性\" class=\"headerlink\" title=\"更改文件属性\"></a>更改文件属性</h3><h4 id=\"1、chgrp：更改文件属组\"><a href=\"#1、chgrp：更改文件属组\" class=\"headerlink\" title=\"1、chgrp：更改文件属组\"></a>1、chgrp：更改文件属组</h4><p>语法：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-tag\">chgrp</span> <span class=\"hljs-selector-attr\">[-R]</span> 属组名 文件名<br></code></pre></td></tr></table></figure>\n<p>参数选项</p>\n<ul>\n<li>-R：递归更改文件属组，就是在更改某个目录文件的属组时，如果加上-R的参数，那么该目录下的所有文件的属组都会更改。</li>\n</ul>\n<h4 id=\"2、chown：更改文件属主，也可以同时更改文件属组\"><a href=\"#2、chown：更改文件属主，也可以同时更改文件属组\" class=\"headerlink\" title=\"2、chown：更改文件属主，也可以同时更改文件属组\"></a>2、chown：更改文件属主，也可以同时更改文件属组</h4><p>语法：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-tag\">chown</span> <span class=\"hljs-selector-attr\">[–R]</span> 属主名 文件名<br><span class=\"hljs-selector-tag\">chown</span> <span class=\"hljs-selector-attr\">[-R]</span> 属主名：属组名 文件名<br></code></pre></td></tr></table></figure>\n<p>进入 /root 目录（~）将install.log的拥有者改为bin这个账号：</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\">[root@www ~] cd ~<br>[root@www ~]# chown bin install.log<br>[root@www ~]# ls -l<br>-rw-r--r--  1 bin <span class=\"hljs-built_in\"> users </span>68495 Jun 25 08:53 install.log<br></code></pre></td></tr></table></figure>\n<p>将install.log的拥有者与群组改回为root：</p>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs angelscript\">[<span class=\"hljs-symbol\">root@</span>www ~]# chown root:root install.log<br>[<span class=\"hljs-symbol\">root@</span>www ~]# ls -l<br>-rw-r--r--  <span class=\"hljs-number\">1</span> root root <span class=\"hljs-number\">68495</span> Jun <span class=\"hljs-number\">25</span> <span class=\"hljs-number\">08</span>:<span class=\"hljs-number\">53</span> install.log<br></code></pre></td></tr></table></figure>\n<h4 id=\"3、chmod：更改文件9个属性\"><a href=\"#3、chmod：更改文件9个属性\" class=\"headerlink\" title=\"3、chmod：更改文件9个属性\"></a>3、chmod：更改文件9个属性</h4><p>Linux文件属性有两种设置方法，一种是数字，一种是符号。</p>\n<p>Linux文件的基本权限就有九个，分别是owner/group/others三种身份各有自己的read/write/execute权限。</p>\n<p>先复习一下刚刚上面提到的数据：文件的权限字符为：『-rwxrwxrwx』， 这九个权限是三个三个一组的！其中，我们可以使用数字来代表各个权限，各权限的分数对照表如下：</p>\n<ul>\n<li>r:4</li>\n<li>w:2</li>\n<li>x:1</li>\n</ul>\n<p>每种身份(owner/group/others)各自的三个权限(r/w/x)分数是需要累加的，例如当权限为： [-rwxrwx—-] 分数则是：</p>\n<ul>\n<li>owner = rwx = 4+2+1 = 7</li>\n<li>group = rwx = 4+2+1 = 7</li>\n<li>others= —- = 0+0+0 = 0</li>\n</ul>\n<p>所以等一下我们设定权限的变更时，该文件的权限数字就是770啦！变更权限的指令chmod的语法是这样的：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-tag\">chmod</span> <span class=\"hljs-selector-attr\">[-R]</span> <span class=\"hljs-selector-tag\">xyz</span> 文件或目录<br></code></pre></td></tr></table></figure>\n<p>选项与参数：</p>\n<ul>\n<li>xyz : 就是刚刚提到的数字类型的权限属性，为 rwx 属性数值的相加。</li>\n<li>-R : 进行递归(recursive)的持续变更，亦即连同次目录下的所有文件都会变更</li>\n</ul>\n<p>举例来说，如果要将.bashrc这个文件所有的权限都设定启用，那么命令如下：</p>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs angelscript\">[<span class=\"hljs-symbol\">root@</span>www ~]# ls -al .bashrc<br>-rw-r--r--  <span class=\"hljs-number\">1</span> root root <span class=\"hljs-number\">395</span> Jul  <span class=\"hljs-number\">4</span> <span class=\"hljs-number\">11</span>:<span class=\"hljs-number\">45</span> .bashrc<br>[<span class=\"hljs-symbol\">root@</span>www ~]# chmod <span class=\"hljs-number\">777</span> .bashrc<br>[<span class=\"hljs-symbol\">root@</span>www ~]# ls -al .bashrc<br>-rwxrwxrwx  <span class=\"hljs-number\">1</span> root root <span class=\"hljs-number\">395</span> Jul  <span class=\"hljs-number\">4</span> <span class=\"hljs-number\">11</span>:<span class=\"hljs-number\">45</span> .bashrc<br></code></pre></td></tr></table></figure>\n<p>那如果要将权限变成 <em>-rwxr-xr—</em> 呢？那么权限的分数就成为 [4+2+1][4+0+1][4+0+0]=754。</p>\n<h4 id=\"符号类型改变文件权限\"><a href=\"#符号类型改变文件权限\" class=\"headerlink\" title=\"符号类型改变文件权限\"></a>符号类型改变文件权限</h4><p>还有一个改变权限的方法，从之前的介绍中我们可以发现，基本上就九个权限分别是：</p>\n<ul>\n<li>(1)user</li>\n<li>(2)group</li>\n<li>(3)others</li>\n</ul>\n<p>那么我们就可以使用 <strong>u, g, o</strong> 来代表三种身份的权限！</p>\n<p>此外， <strong>a</strong> 则代表 <strong>all</strong>，即全部的身份。读写的权限可以写成 <strong>r, w, x</strong>，也就是可以使用下表的方式来看：</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>命令</th>\n<th>用户、组</th>\n<th>修改</th>\n<th>权限</th>\n<th>项目</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>chmod</td>\n<td>u</td>\n<td>+(加入)</td>\n<td>r</td>\n<td>文件或目录</td>\n</tr>\n<tr>\n<td></td>\n<td>g</td>\n<td>-(除去)</td>\n<td>w</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>o</td>\n<td>=(设定)</td>\n<td>x</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>a</td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>如果我们需要将文件权限设置为 <code>-rwxr-xr--</code> ，可以使用 <code>chmod u=rwx,g=rx,o=r 文件名</code> 来设定:</p>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs angelscript\">#  touch test1    <span class=\"hljs-comment\">// 创建 test1 文件</span><br># ls -al test1    <span class=\"hljs-comment\">// 查看 test1 默认权限</span><br>-rw-r--r-- <span class=\"hljs-number\">1</span> root root <span class=\"hljs-number\">0</span> Nov <span class=\"hljs-number\">15</span> <span class=\"hljs-number\">10</span>:<span class=\"hljs-number\">32</span> test1<br># chmod u=rwx,g=rx,o=r  test1    <span class=\"hljs-comment\">// 修改 test1 权限</span><br># ls -al test1<br>-rwxr-xr-- <span class=\"hljs-number\">1</span> root root <span class=\"hljs-number\">0</span> Nov <span class=\"hljs-number\">15</span> <span class=\"hljs-number\">10</span>:<span class=\"hljs-number\">32</span> test1<br></code></pre></td></tr></table></figure>\n<p>而如果是要将权限去掉而不改变其他已存在的权限呢？例如要拿掉全部人的可执行权限，则：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-comment\">#  chmod  a-x test1</span><br><span class=\"hljs-comment\"># ls -al test1</span><br><span class=\"hljs-string\">-rw-r--r--</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-string\">root</span> <span class=\"hljs-string\">root</span> <span class=\"hljs-number\">0</span> <span class=\"hljs-string\">Nov</span> <span class=\"hljs-number\">15</span> <span class=\"hljs-number\">10</span><span class=\"hljs-string\">:32</span> <span class=\"hljs-string\">test1</span><br></code></pre></td></tr></table></figure>\n<h2 id=\"文件与目录管理\"><a href=\"#文件与目录管理\" class=\"headerlink\" title=\"文件与目录管理\"></a>文件与目录管理</h2><ul>\n<li>ls: 列出目录</li>\n<li>cd：切换目录</li>\n<li>pwd：显示目前的目录</li>\n<li>mkdir：创建一个新的目录</li>\n<li>rmdir：删除一个空的目录</li>\n<li>cp: 复制文件或目录</li>\n<li>rm: 移除文件或目录</li>\n<li>mv: 移动文件与目录，或修改文件与目录的名称</li>\n</ul>\n<p>你可以使用 <em>man [命令]</em> 来查看各个命令的使用文档，如 ：man cp。</p>\n"},{"layout":"post","title":"算法分析（基础篇）","intro":"","date":"2020-02-17T08:13:00.000Z","author":"Makinohara","catalog":true,"_content":"\n\n\n## 枚举\n\n枚举可以说是算法中最最最最弱智的一种算法了,其基本原理就是根据题目意思将所有可能的情况都试一遍,如果达到题目要求就记录下来或者输出.没有达到题目要求就跳过.但是,枚举也是需要一些技巧的,否则你要把所有的情况都真的试一下后,会遭遇可怜的TLE.\n\n首先,如果遇到非正即反的枚举情况(即情况可以用0或1表示),可以尝试使用[bitset](#bitset)进行救命,因为bitset占用空间少,且只模拟0和1两种情况.\n\n对于某些特殊情况的枚举,可以考虑用前一层枚举的情况直接通过计算得出后面的枚举结果,比如说熄灯问题(这是一个我看过的MOOC的问题,现在不太好解释),这样可以大大减少枚举的时间复杂度.\n\n枚举的实现一般是通过循环实现的.至于怎么循环,怎么嵌套,我想我不必再过多解释**.但值得注意的是,循环变量一定要设置好!!!(尽量自己写循环结构,用vscode自动生成的可能会搞错)且一定要在此时记录循环变量的含义(最好注释下来).这样真的很有利于后面的判断和调试!**\n\n称硬币问题的枚举:(POJ1013)\n\n```c++\n#include <iostream>\n#include <stdio.h>\n#include <string.h>\n\nusing namespace std;\n\nchar eleft[3][7];   //the coin status of eleft\nchar eright[3][7];  //the coin status of eright\nchar eresult[3][7]; //the eresult of each try\n\nbool get_result(char coin, bool isLight)\n{\n    if (isLight)\n    {\n        for (int k = 0; k < 3; k++) //Judge 3 cases\n        {\n            if (eresult[k][0] == 'e') //this case is even\n            {\n                if (strchr(eleft[k], coin) != NULL || strchr(eright[k], coin) != NULL)\n                {\n                    return false;\n                }\n            }\n            if (eresult[k][0] == 'u') //this case is up\n            {\n                if (strchr(eright[k], coin) == NULL)\n                {\n                    return false;\n                }\n            }\n            if (eresult[k][0] == 'd') //this case is down\n            {\n                if (strchr(eleft[k], coin) == NULL)\n                {\n                    return false;\n                }\n            }\n        }\n    }\n    else\n    {\n        for (int k = 0; k < 3; k++) //Judge 3 cases\n        {\n            if (eresult[k][0] == 'e') //this case is even\n            {\n                if (strchr(eleft[k], coin) != NULL || strchr(eright[k], coin) != NULL)\n                {\n                    return false;\n                }\n            }\n            if (eresult[k][0] == 'u') //this case is up\n            {\n                if (strchr(eleft[k], coin) == NULL)\n                {\n                    return false;\n                }\n            }\n            if (eresult[k][0] == 'd') //this case is down\n            {\n                if (strchr(eright[k], coin) == NULL)\n                {\n                    return false;\n                }\n            }\n        }\n    }\n\n    return true;\n};\n\nint main()\n{\n    int case_number = 0;\n    cin >> case_number;                   //Get case number\n    for (int i = 0; i < case_number; i++) //Output the eresult of each case\n    {\n        for (int j = 0; j < 3; j++)\n        {\n            cin >> eleft[j] >> eright[j] >> eresult[j];\n        }\n\n        for (char j = 'A'; j <= 'L'; j++)\n        {\n            bool isLight = true; //The fake coin is light\n            if (get_result(j, isLight))\n                cout << j << \" is the counterfeit coin and it is light.\" << endl;\n            isLight = false;\n            if (get_result(j, isLight))\n                cout << j << \" is the counterfeit coin and it is heavy.\" << endl;\n        }\n    }\n\n    return 0;\n}\n```\n\n关于枚举,先写到这吧,后面如果遇到一些古怪的枚举方式,再补.\n\n## 模拟\n\n模拟,顾名思义,就是根据题目所给的实现方式和思想写代码,这种题目一般来说都伴随着大量的判断和循环,且隐含着一些算法思想.若是单纯的硬模拟可能会导致TLE.\n\n模拟题的数据一般而言会实现地十分古怪,所以你必须考虑一些特殊情况.所以写模拟题最烦人地地方就在于DEBUG!你怎么知道你是不是漏了情况!\n\n模拟题的写法比较灵活多样,并且需要很强的文字阅读能力来理解题意.而且模拟题容易转变为其他类型的算法题,所以也不好直接讨论.\n\n//举例几道题,凑合得了,模拟的笔记我没法写...\n\n## 贪心\n\n贪心算法就是在进行每一步操作时尽可能寻找最优解,此种算法可能需要依托一些数据结构(队列;优先队列<堆>)来实现.\n\n接下来看一道使用贪心算法的题目:\n\n此题使用了优先队列的思想.优先队列其实就是一种贪心,即:先取出优先级最大的元素.而贪心算法的原理就是先执行最优步骤,等到最优步骤执行完后再执行次优步骤.\n\n上代码:\n\n```c++\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nint main()\n{\n    int qty_apple;\n    cin>>qty_apple;\n    priority_queue<int, vector<int>, greater<int>> apples;\n    for (int i = 0; i < qty_apple; i++)\n    {\n        int temp_in;\n        cin >> temp_in;\n        apples.push(temp_in);\n    }\n    int sum = 0;\n    while (true)\n    {\n        int t_effort = 0;\n        t_effort += apples.top();\n        apples.pop();\n        t_effort += apples.top();\n        apples.pop();\n        sum += t_effort;\n        if (apples.empty())\n            break;\n        apples.push(t_effort);\n    }\n    cout << sum << endl;\n    return 0;\n}\n```\n\n\n\n## 递归\n\n递归就是函数自己调用自己.这样就能实现一些较为复杂且很难单纯用循环写出来的算法.\n\n递归的一个典型例子就是***汉诺塔问题***,这个问题不仅是一个对递归思想的很好解释,同时也有利于深刻了解递归的原理.\n\n接下来看汉诺塔问题\n\n汉诺塔 （ 又称河内塔 ） 问题是源于印度一个古老传说的益智玩具 。 古代有一个梵塔 ， 塔内有座 A 、 B 、 C ， A 座上有 64 个盘子 ， 盘子大小不等 ， 大的在下 ， 小的在上 。 有一个和尚想把盘子从 A 座移到 B 座 ， 但每次只能允许移动一个盘子 ， 并且在移动过程中 ， 3 个座上的盘始终保持大盘在下，小盘在上。在移动过程中可以利用 B 座.\n\n```c++\n#include <iostream>\nusing namespace std;\nvoid move(int n, char A, char B,char C);//声明函数(递归的调用)\nint main()\n{ \n\tint discCount;\n    cin>>discCount;\n    move(discCount,'A','B','C');\n\treturn 0;\n}\nvoid move(int n, char A, char B,char C)//自定义函数\n{\n\tif(n==0)//盘子为0的时候返回\n\t{\n\t\treturn;\n\t}\n\telse\n\t{\n\t\t//算法分析:要使得最底下最大的盘子能移到C,必须先把n-1个盘子移到B,于是有:\n        //我们不需要管下一个递归是怎么解决n-1个盘子移动问题的,我们只负责命令它执行:\n        move(n-1,A,C,B);//先把n-1个盘子从A移动到B,借助C\n        //(此时在递归程序里的调用依然是A移动到C,但盘子的序号变了)\n        //当作完成了n-1个盘子的移动,最后有:\n\t\tcout<<A<<\"-->\"<<C<<endl;//把最后一个盘子(相对最大的)从A移动到C\n\t\tmove(n-1,B,A,C);//最后把n-1个盘子从B移动到C,使用A作为中转.\n        //因为此时A上面已经没有比相对最大的盘子大的了\n\t\treturn;//移动完成,程序结束\n\t}\n}\n\n```\n\n\n\n## 深度优先搜索(DFS)\n\n深度优先搜索,即先想某一纵深进行搜索,由于主要是写给自己看的,所以就从简了,简而言之,其是隐式地运用了栈的思想实现的.\n\n先看一个八皇后的问题(洛谷P1219)\n\n------\n\n题目描述\n\n检查一个如下的6 x 6的跳棋棋盘，有六个棋子被放置在棋盘上，使得每行、每列有且只有一个，每条对角线(包括两条主对角线的所有平行线)上至多有一个棋子。\n\n![img](/img/60.png)\n\n上面的布局可以用序列2 4 6 1 3 5来描述，第i个数字表示在第i行的相应位置有一个棋子，如下：\n\n行号 1 2 3 4 5 6\n\n列号 2 4 6 1 3 5\n\n这只是跳棋放置的一个解。请编一个程序找出所有跳棋放置的解。并把它们以上面的序列方法输出。解按字典顺序排列。请输出前3个解。最后一行是解的总个数。\n\n输入格式\n\n一个数字N (6 <= N <= 13) 表示棋盘是N x N大小的。\n\n输出格式\n\n前三行为前三个解，每个解的两个数字之间用一个空格隔开。第四行只有一个数字，表示解的总数。\n\n------\n\n接下来请看代码\n\n```c++\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nint ans[14] = {0};\nint vline[14] = {0};\nint lcross[14] = {0};\nint rcross[114] = {0}; //分别对应列 左 右 对角线(对角线请注意加一个n，n=100)\nint sum = 0;\nvoid dfs(int width, int line)\n{\n    if (line > width) //达到结果就输出(深搜结束标识)\n    {\n        sum++;\n        if (sum <= 3)\n        {\n            for (int j = 1; j <= width; j++) //这里的i代表行号\n            {\n                cout << ans[j] << \" \";\n            }\n            cout << endl;\n        }\n        \n        return;\n    }\n    //正式算法\n    //占位\n    for (int i = 1; i <= width; i++) //排查未用然后使用\n    {\n        if (vline[i] != 1 && lcross[i + line] != 1 && rcross[i - line + 100] != 1)\n        {\n            //占用\n            ans[line] = i;\n            vline[i] = 1;\n            lcross[i + line] = 1;\n            rcross[i - line + 100] = 1;\n            dfs(width, line + 1);\n            //你应当特别注意这一步!这里是深搜向下扩展的重要步骤!!!\n            //回溯(在上面的程序结束后,意味着深搜已经完成并return,\n            //那么在return下面必须将程序的状态恢复到扩展下一层前的状态!!!\n            //注意这很重要,并且可能需要考虑如何做这样一件事)\n            vline[i] = 0;\n            lcross[i + line] = 0;\n            rcross[i - line + 100] = 0;\n        }\n    }\n};\n\nint main()\n{\n    int width = 0;\n    cin >> width;  //获取棋盘的宽度\n    dfs(width, 1); //从第1行开始\n    cout<<sum;\n\n    return 0;\n}\n```\n\n这只是一个深搜的例子,后面我会继续扩充一些其他的例子以及用法!\n\n## 广度优先搜索\n\n广度优先搜索使用了队列的思想.广度优先搜索总是先搜索步长最近的搜索结果,这样就可以求解一些类似于最短路径之类的问题.\n\n广度优先搜索的结果可以搜索到的结果保证步长最短.\n\n## 动态规划\n\n动态规划就是使用历史数据来避免重复计算,从而拆分求解一些复杂的问题.\n\n### 一维动态规划\n\n1.建立动态规划数组dp[]\n\n2.确定dp[i]的含义\n\n3.确定递推表达式\n\n4.找出初始值用于递推\n\n5.由是,可以求出dp[i]的值\n\n接下来看一道简单的动态规划题目:\n\n青蛙跳台阶问题:\n\n> 问题描述：一只青蛙一次可以跳上1级台阶，也可以跳上2级。求该青蛙跳上一个n级的台阶总共有多少种跳法。 \n\n1.建立dp[]\n\n2.确定dp[i] 的含义,这里的dp[i]的含义是第i个台阶青蛙要跳的步数.\n\n3.**找出关系式**:dp[i]=dp[i-2]+dp[i-1],由于青蛙可以从i-2级或i-1级跳上来,所以第i层的情况数就是i-2层的情况和i-1层相加.\n\n4.初始值:dp[0]=0,dp[1]=1,dp[2]=2,OK!\n\n5.编写程序运行:\n\n```c++\n#include <bits/stdc++.h>\nint main()\n{\n    int n;//the floor \n    std::cin >> n;\n    int dp[100] = {0};\n    dp[0] = 0;\n    dp[1] = 1;\n    dp[2] = 2;\n    for (int i = 3; i <= 100; i++)\n    {\n        dp[i] = dp[i - 2] + dp[i - 1];\n    }\n    std::cout << dp[n] << std::endl;\n    return 0;\n}\n```\n\n### 动态规划的背包问题\n\n**0-1背包问题的递推关系**\n\nf[j]=max(f[j],f[j-price[i]]+value[i])(考虑第i个产品的购买问题)\n\n​                ↑不改变背包       ↑改变背包,价值为钱减少后的背包里的价值(当作已算出)加上现有商品的价值\n\n最优方案就是比较这两种方案，哪个会更好些:\n\n题目:洛谷P1060\n\n上代码:\n\n```c++\n#include<iostream>\n#include<algorithm>\nusing namespace std;\nint w[30],v[30],f[50000];//w数组为重要度，v数组为money，f是用来dp的数组\nint n,m;//n是总物品个数，m是总钱数\nint main()\n{\n    cin>>m>>n;//输入\n    for(int i=1;i<=n;i++)\n    {\n        cin>>v[i]>>w[i];\n        w[i]*=v[i];//w数组在这里意义变为总收获（重要度*money）\n    }//将每件物品的价值算出来,保留每件物品的价格(消耗背包空间)\n    \n    //01背包\n    for(int i=1;i<=n;i++)//分别对n个物品单独分析,枚举放不放i号物品\n    {\n        for(int j=m;j>=v[i];j--)//注意从m开始,j>=v[i]的意思是:从大到小循环，\n                               //依次询问使用这么多钱可获得的最大重要度与价格的乘积，\n                              //循环到a[i]就行了,j代表的是使用j数量的钱的背包状况\n        {\n            if(j>=v[i])//剩的钱大于第i件产品的价格\n            {\n                f[j]=max(f[j],f[j-v[i]]+w[i]);//要不就不买,维持背包不变,\n                //若是决定购买,将花完这个钱的背包里的价值加上现在这件产品的价值\n            }\n        }\n    }\n    cout<<f[m]<<endl;//背包大小为m时最大值,注意这个m,m可泛化为金钱等\n    return 0;\n} \n```\n\n最长子序列和问题(HDU1003)\n\n```c++\n#include<iostream>\n\n\n\nusing namespace std;\n\nint main() \n{\n\t//获取情况数\n\tint case_number = 0;\n\tcin >> case_number;\n\tint number_of_sequence = 0;\n\tint sum = -1001;//输出的求和\n\tint temp_sum = 0;//临时求和\n\tint get_number = 0;//获得的数字\n\tint counter = 1;//序列长度\n\tint start_position;//起始位置\n\tint final_counter = 0;//最终序列长度\n\tint final_startpos = 0;//最终起始位置\n\tfor (int i = 0; i < case_number; i++)//每种情况对应的循环\n\t{\n\t\tcounter = 1;\n\t\tfinal_counter = 0;\n\t\tfinal_startpos = 0;\n\t\tsum = -1001;\n\t\tcin >> number_of_sequence;//获取数组数字数目\n\t\ttemp_sum = 0;\n\t\tstart_position = 1;\n\t\tfor (int j = 0; j < number_of_sequence; j++)//核心求和算法\n\t\t{\n\t\t\t\n\t\t\tcin >> get_number;\n\t\t\ttemp_sum += get_number;\n\t\t\t\n\t\t\tif (temp_sum> sum)\n\t\t\t{\n\t\t\t\tsum = temp_sum;\n\t\t\t\tfinal_counter = counter;\n\t\t\t\tfinal_startpos = start_position;\n\t\t\t}\n\t\t\tif (temp_sum <0)\n\t\t\t{\n\t\t\t\ttemp_sum = 0;\n\t\t\t\tcounter = 0;\n\t\t\t\tstart_position = j + 2;\n\t\t\t}\n\t\t\t\n\t\t\tcounter++;\n\t\t\n\t\t}\n\t\t\n\t\tcout << \"Case\" << \" \" << i+1 << \":\" << \"\\n\";\n\t\tcout << sum << \" \" << final_startpos << \" \" << final_startpos + final_counter - 1 ;\n\t\t//输出结束\n\t\tcout << \"\\n\";\n\t\t//空行\n\t\tif (i != (case_number - 1))\n\t\t{\n\t\t\tcout << \"\\n\";\n\t\t}\n\n\t}\n\n}\n```\n\n\n\n## 图论\n\n图论是一个很重要的把抽象问题转发为程序的思想.我们在此处会举一些例子来说明图论的应用.有关这个数据结构的解释可以在后面的[数据结构](#数据结构)章节找到\n\n图论的一些应用:\n\n//还没学,先放着.\n\n## 高精度算法\n\n高精度算法可用于求解大数运算,这是任何一种数据类型(包括longl ong)都无法做到的,接下来就先贴几个代码来解释,以后再来写详细的笔记.\n\n高精度加法(HDU1002)\n\n```c++\n#include <iostream>\n#include <cstdint>\n#include <string>\n#include <vector>\n\nusing namespace std;\n\nint main()\n{\n\t//Get case number\n\tint case_number = 0;\n\tcin >> case_number;\n\t//Get input numbers  of each case\n\t//开始输出结果\n\tfor (int i = 0; i < case_number; i++)\n\t{\n\n\t\tstring num_a;\n\t\tstring num_b;\n\t\tcin >> num_a;\n\t\tcin >> num_b;\n\t\t//Start caculate\n\t\t//Confirm length\n\t\tint length = 0;\n\t\tif (num_a.length() >= num_b.length())\n\t\t{\n\t\t\tlength = num_a.length() + 1;\n\t\t}\n\t\telse if (num_a.length() < num_b.length())\n\t\t{\n\t\t\tlength = num_b.length() + 1;\n\t\t}\n\t\t//Creat result\n\t\tvector<int> result(length);\n\t\tint nextline = 0; //进位\n\t\tint ifline = 0;\n\t\tint Tresult = 0; //每位结果\n\t\tint numberA = 0; //A的位\n\t\tint numberB = 0; //B的位\n\t\t//开始读数\n\t\tfor (int j = 0; j < length; j++)\n\t\t{\n\t\t\tnumberA = (num_a.length() - j - 1); //A读数的位\n\t\t\tnumberB = (num_b.length() - j - 1); //B读数的位\n\t\t\tint tempA = 0;\t\t\t\t\t\t//A临时读数\n\t\t\tint tempB = 0;\t\t\t\t\t\t//B临时读数\n\t\t\t//读A\n\t\t\tif (numberA >= 0)\n\t\t\t{\n\t\t\t\ttempA = num_a[numberA];\n\t\t\t\ttempA = tempA - '0';\n\t\t\t}\n\t\t\t//读B\n\t\t\tif (numberB >= 0)\n\t\t\t{\n\t\t\t\ttempB = num_b[numberB];\n\t\t\t\ttempB = tempB - '0';\n\t\t\t}\n\t\t\t//Input result\n\t\t\tint tempR = 0;\n\n\t\t\tif (j == 0)\n\t\t\t{\n\t\t\t\ttempR = tempA + tempB; //在不进位时结果\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\ttempR = tempA + tempB + nextline; //进位结果\n\t\t\t}\n\n\t\t\t//判断大于10\n\n\t\t\tif (j != (length - 1))\n\t\t\t{\n\t\t\t\tif (tempR >= 10)\n\t\t\t\t{\n\t\t\t\t\tifline = 1;\n\t\t\t\t\t//取模结果输出\n\t\t\t\t\ttempR = tempR % 10;\n\t\t\t\t}\n\t\t\t\telse if (tempR < 10)\n\t\t\t\t{\n\t\t\t\t\tifline = 0;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tint number = length - j - 1;\n\n\t\t\tTresult = tempR;\n\n\t\t\tresult[number] = Tresult;\n\t\t\tif (ifline == 1)\n\t\t\t{\n\t\t\t\tnextline = 1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tnextline = 0;\n\t\t\t}\n\t\t}\n\t\t//Output results\n\n\t\tcout << \"Case \" << i + 1 << \":\"\n\t\t\t << \"\\n\";\n\t\tcout << num_a << \" + \" << num_b << \" = \";\n\t\tint startout = 0;\n\n\t\tfor (int l = 1; l < length; l++) //输出一个数\n\t\t{\n\n\t\t\tif (result[0] != 0 && l == 1)\n\t\t\t{\n\t\t\t\tcout << result[0];\n\t\t\t\tstartout = 1;\n\t\t\t}\n\t\t\tif (result[l] != 0)\n\t\t\t{\n\t\t\t\tstartout = 1;\n\t\t\t}\n\t\t\telse if (l == (length - 1))\n\t\t\t{\n\t\t\t\tstartout = 1;\n\t\t\t}\n\n\t\t\tif (startout == 0)\n\t\t\t{\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tcout << result[l];\n\t\t}\n\t\t//输出结束\n\t\tcout << \"\\n\";\n\t\t//空行\n\t\tif (i != (case_number - 1))\n\t\t{\n\t\t\tcout << \"\\n\";\n\t\t}\n\n\t} //结束单个循环\n\treturn 0;\n}\n\n```\n\n这个算法嘛,写的其实很累赘,但是其中一些进位和控制输出体现了高精度算法所要求的强大的逻辑性\n\n高精度排序(洛谷P1781)\n\n```c++\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nchar president[20][101];\nint bits_number = 0;\n\nbool compare(int a, int b)\n{\n    return president[a][bits_number] > president[b][bits_number];\n};\n\nint main()\n{\n    int number = 0;\n    cin >> number;\n    for (int i = 0; i < number; i++) //Get the votes of president\n    {\n        cin >> president[i];\n    }\n    //ok,let's compare\n    queue<int> president_list; // the presidents left\n\n    int maxbit = 0; // the max votes bit president\n\n    for (int i = 0; i < number; i++) //get the bits of each president\n    {\n        int temp_bits = 0;\n        for (int j = 0; j < 100; j++) // get the bits\n        {\n            if (president[i][j] != 0)\n            {\n                temp_bits++;\n            }\n            else\n            {\n                break;\n            }\n        }\n        //this guy's bit has been recorded\n        if (temp_bits >= maxbit)\n        {\n            \n            president_list.push(i);\n            if (temp_bits > maxbit)\n            {\n                president_list = queue<int>();\n                president_list.push(i);\n            }\n            maxbit = temp_bits;\n        }\n    }\n    //WARNING: THE NUMBER OF PRESIDENT MUST BE PLUSED ONE!\n    //now,compare the president in queue!\n    vector<int> last_list;\n    while (!president_list.empty())\n    {\n        last_list.push_back(president_list.front());\n        president_list.pop();\n    }\n    for (int i = 0; i < maxbit; i++)\n    {\n        bits_number = i;\n        sort(last_list.begin(), last_list.end(), compare);\n        int erase_bit = president[last_list[0]][i];\n\n        for (auto it = last_list.begin(); it != last_list.end(); it++)\n        {\n            cout << \"\";\n            if (president[*it][i] < erase_bit)\n            {\n                last_list.erase(it);\n                it--;\n                cout << \"\";\n            }\n        }\n    }\n    cout << last_list[0] + 1 << endl;\n    for (int i = 0; i < maxbit; i++)\n    {\n        cout << president[last_list[0]][i];\n    }\n\n    return 0;\n}\n```\n\n当然,可以学一门Java/python来应付这个......\n\n这个我们后面可能会开Java/python的笔记.\n\n\n\n","source":"_posts/2020-2-17-Algorithm.md","raw":"---\nlayout:     post\ntitle:      \"算法分析（基础篇）\"\nintro:      \"\"\ndate:       2020-2-17 16:13:00\nauthor:     \"Makinohara\"\ncatalog: true\ntags:\n    - 计算机基础\n\n---\n\n\n\n## 枚举\n\n枚举可以说是算法中最最最最弱智的一种算法了,其基本原理就是根据题目意思将所有可能的情况都试一遍,如果达到题目要求就记录下来或者输出.没有达到题目要求就跳过.但是,枚举也是需要一些技巧的,否则你要把所有的情况都真的试一下后,会遭遇可怜的TLE.\n\n首先,如果遇到非正即反的枚举情况(即情况可以用0或1表示),可以尝试使用[bitset](#bitset)进行救命,因为bitset占用空间少,且只模拟0和1两种情况.\n\n对于某些特殊情况的枚举,可以考虑用前一层枚举的情况直接通过计算得出后面的枚举结果,比如说熄灯问题(这是一个我看过的MOOC的问题,现在不太好解释),这样可以大大减少枚举的时间复杂度.\n\n枚举的实现一般是通过循环实现的.至于怎么循环,怎么嵌套,我想我不必再过多解释**.但值得注意的是,循环变量一定要设置好!!!(尽量自己写循环结构,用vscode自动生成的可能会搞错)且一定要在此时记录循环变量的含义(最好注释下来).这样真的很有利于后面的判断和调试!**\n\n称硬币问题的枚举:(POJ1013)\n\n```c++\n#include <iostream>\n#include <stdio.h>\n#include <string.h>\n\nusing namespace std;\n\nchar eleft[3][7];   //the coin status of eleft\nchar eright[3][7];  //the coin status of eright\nchar eresult[3][7]; //the eresult of each try\n\nbool get_result(char coin, bool isLight)\n{\n    if (isLight)\n    {\n        for (int k = 0; k < 3; k++) //Judge 3 cases\n        {\n            if (eresult[k][0] == 'e') //this case is even\n            {\n                if (strchr(eleft[k], coin) != NULL || strchr(eright[k], coin) != NULL)\n                {\n                    return false;\n                }\n            }\n            if (eresult[k][0] == 'u') //this case is up\n            {\n                if (strchr(eright[k], coin) == NULL)\n                {\n                    return false;\n                }\n            }\n            if (eresult[k][0] == 'd') //this case is down\n            {\n                if (strchr(eleft[k], coin) == NULL)\n                {\n                    return false;\n                }\n            }\n        }\n    }\n    else\n    {\n        for (int k = 0; k < 3; k++) //Judge 3 cases\n        {\n            if (eresult[k][0] == 'e') //this case is even\n            {\n                if (strchr(eleft[k], coin) != NULL || strchr(eright[k], coin) != NULL)\n                {\n                    return false;\n                }\n            }\n            if (eresult[k][0] == 'u') //this case is up\n            {\n                if (strchr(eleft[k], coin) == NULL)\n                {\n                    return false;\n                }\n            }\n            if (eresult[k][0] == 'd') //this case is down\n            {\n                if (strchr(eright[k], coin) == NULL)\n                {\n                    return false;\n                }\n            }\n        }\n    }\n\n    return true;\n};\n\nint main()\n{\n    int case_number = 0;\n    cin >> case_number;                   //Get case number\n    for (int i = 0; i < case_number; i++) //Output the eresult of each case\n    {\n        for (int j = 0; j < 3; j++)\n        {\n            cin >> eleft[j] >> eright[j] >> eresult[j];\n        }\n\n        for (char j = 'A'; j <= 'L'; j++)\n        {\n            bool isLight = true; //The fake coin is light\n            if (get_result(j, isLight))\n                cout << j << \" is the counterfeit coin and it is light.\" << endl;\n            isLight = false;\n            if (get_result(j, isLight))\n                cout << j << \" is the counterfeit coin and it is heavy.\" << endl;\n        }\n    }\n\n    return 0;\n}\n```\n\n关于枚举,先写到这吧,后面如果遇到一些古怪的枚举方式,再补.\n\n## 模拟\n\n模拟,顾名思义,就是根据题目所给的实现方式和思想写代码,这种题目一般来说都伴随着大量的判断和循环,且隐含着一些算法思想.若是单纯的硬模拟可能会导致TLE.\n\n模拟题的数据一般而言会实现地十分古怪,所以你必须考虑一些特殊情况.所以写模拟题最烦人地地方就在于DEBUG!你怎么知道你是不是漏了情况!\n\n模拟题的写法比较灵活多样,并且需要很强的文字阅读能力来理解题意.而且模拟题容易转变为其他类型的算法题,所以也不好直接讨论.\n\n//举例几道题,凑合得了,模拟的笔记我没法写...\n\n## 贪心\n\n贪心算法就是在进行每一步操作时尽可能寻找最优解,此种算法可能需要依托一些数据结构(队列;优先队列<堆>)来实现.\n\n接下来看一道使用贪心算法的题目:\n\n此题使用了优先队列的思想.优先队列其实就是一种贪心,即:先取出优先级最大的元素.而贪心算法的原理就是先执行最优步骤,等到最优步骤执行完后再执行次优步骤.\n\n上代码:\n\n```c++\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nint main()\n{\n    int qty_apple;\n    cin>>qty_apple;\n    priority_queue<int, vector<int>, greater<int>> apples;\n    for (int i = 0; i < qty_apple; i++)\n    {\n        int temp_in;\n        cin >> temp_in;\n        apples.push(temp_in);\n    }\n    int sum = 0;\n    while (true)\n    {\n        int t_effort = 0;\n        t_effort += apples.top();\n        apples.pop();\n        t_effort += apples.top();\n        apples.pop();\n        sum += t_effort;\n        if (apples.empty())\n            break;\n        apples.push(t_effort);\n    }\n    cout << sum << endl;\n    return 0;\n}\n```\n\n\n\n## 递归\n\n递归就是函数自己调用自己.这样就能实现一些较为复杂且很难单纯用循环写出来的算法.\n\n递归的一个典型例子就是***汉诺塔问题***,这个问题不仅是一个对递归思想的很好解释,同时也有利于深刻了解递归的原理.\n\n接下来看汉诺塔问题\n\n汉诺塔 （ 又称河内塔 ） 问题是源于印度一个古老传说的益智玩具 。 古代有一个梵塔 ， 塔内有座 A 、 B 、 C ， A 座上有 64 个盘子 ， 盘子大小不等 ， 大的在下 ， 小的在上 。 有一个和尚想把盘子从 A 座移到 B 座 ， 但每次只能允许移动一个盘子 ， 并且在移动过程中 ， 3 个座上的盘始终保持大盘在下，小盘在上。在移动过程中可以利用 B 座.\n\n```c++\n#include <iostream>\nusing namespace std;\nvoid move(int n, char A, char B,char C);//声明函数(递归的调用)\nint main()\n{ \n\tint discCount;\n    cin>>discCount;\n    move(discCount,'A','B','C');\n\treturn 0;\n}\nvoid move(int n, char A, char B,char C)//自定义函数\n{\n\tif(n==0)//盘子为0的时候返回\n\t{\n\t\treturn;\n\t}\n\telse\n\t{\n\t\t//算法分析:要使得最底下最大的盘子能移到C,必须先把n-1个盘子移到B,于是有:\n        //我们不需要管下一个递归是怎么解决n-1个盘子移动问题的,我们只负责命令它执行:\n        move(n-1,A,C,B);//先把n-1个盘子从A移动到B,借助C\n        //(此时在递归程序里的调用依然是A移动到C,但盘子的序号变了)\n        //当作完成了n-1个盘子的移动,最后有:\n\t\tcout<<A<<\"-->\"<<C<<endl;//把最后一个盘子(相对最大的)从A移动到C\n\t\tmove(n-1,B,A,C);//最后把n-1个盘子从B移动到C,使用A作为中转.\n        //因为此时A上面已经没有比相对最大的盘子大的了\n\t\treturn;//移动完成,程序结束\n\t}\n}\n\n```\n\n\n\n## 深度优先搜索(DFS)\n\n深度优先搜索,即先想某一纵深进行搜索,由于主要是写给自己看的,所以就从简了,简而言之,其是隐式地运用了栈的思想实现的.\n\n先看一个八皇后的问题(洛谷P1219)\n\n------\n\n题目描述\n\n检查一个如下的6 x 6的跳棋棋盘，有六个棋子被放置在棋盘上，使得每行、每列有且只有一个，每条对角线(包括两条主对角线的所有平行线)上至多有一个棋子。\n\n![img](/img/60.png)\n\n上面的布局可以用序列2 4 6 1 3 5来描述，第i个数字表示在第i行的相应位置有一个棋子，如下：\n\n行号 1 2 3 4 5 6\n\n列号 2 4 6 1 3 5\n\n这只是跳棋放置的一个解。请编一个程序找出所有跳棋放置的解。并把它们以上面的序列方法输出。解按字典顺序排列。请输出前3个解。最后一行是解的总个数。\n\n输入格式\n\n一个数字N (6 <= N <= 13) 表示棋盘是N x N大小的。\n\n输出格式\n\n前三行为前三个解，每个解的两个数字之间用一个空格隔开。第四行只有一个数字，表示解的总数。\n\n------\n\n接下来请看代码\n\n```c++\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nint ans[14] = {0};\nint vline[14] = {0};\nint lcross[14] = {0};\nint rcross[114] = {0}; //分别对应列 左 右 对角线(对角线请注意加一个n，n=100)\nint sum = 0;\nvoid dfs(int width, int line)\n{\n    if (line > width) //达到结果就输出(深搜结束标识)\n    {\n        sum++;\n        if (sum <= 3)\n        {\n            for (int j = 1; j <= width; j++) //这里的i代表行号\n            {\n                cout << ans[j] << \" \";\n            }\n            cout << endl;\n        }\n        \n        return;\n    }\n    //正式算法\n    //占位\n    for (int i = 1; i <= width; i++) //排查未用然后使用\n    {\n        if (vline[i] != 1 && lcross[i + line] != 1 && rcross[i - line + 100] != 1)\n        {\n            //占用\n            ans[line] = i;\n            vline[i] = 1;\n            lcross[i + line] = 1;\n            rcross[i - line + 100] = 1;\n            dfs(width, line + 1);\n            //你应当特别注意这一步!这里是深搜向下扩展的重要步骤!!!\n            //回溯(在上面的程序结束后,意味着深搜已经完成并return,\n            //那么在return下面必须将程序的状态恢复到扩展下一层前的状态!!!\n            //注意这很重要,并且可能需要考虑如何做这样一件事)\n            vline[i] = 0;\n            lcross[i + line] = 0;\n            rcross[i - line + 100] = 0;\n        }\n    }\n};\n\nint main()\n{\n    int width = 0;\n    cin >> width;  //获取棋盘的宽度\n    dfs(width, 1); //从第1行开始\n    cout<<sum;\n\n    return 0;\n}\n```\n\n这只是一个深搜的例子,后面我会继续扩充一些其他的例子以及用法!\n\n## 广度优先搜索\n\n广度优先搜索使用了队列的思想.广度优先搜索总是先搜索步长最近的搜索结果,这样就可以求解一些类似于最短路径之类的问题.\n\n广度优先搜索的结果可以搜索到的结果保证步长最短.\n\n## 动态规划\n\n动态规划就是使用历史数据来避免重复计算,从而拆分求解一些复杂的问题.\n\n### 一维动态规划\n\n1.建立动态规划数组dp[]\n\n2.确定dp[i]的含义\n\n3.确定递推表达式\n\n4.找出初始值用于递推\n\n5.由是,可以求出dp[i]的值\n\n接下来看一道简单的动态规划题目:\n\n青蛙跳台阶问题:\n\n> 问题描述：一只青蛙一次可以跳上1级台阶，也可以跳上2级。求该青蛙跳上一个n级的台阶总共有多少种跳法。 \n\n1.建立dp[]\n\n2.确定dp[i] 的含义,这里的dp[i]的含义是第i个台阶青蛙要跳的步数.\n\n3.**找出关系式**:dp[i]=dp[i-2]+dp[i-1],由于青蛙可以从i-2级或i-1级跳上来,所以第i层的情况数就是i-2层的情况和i-1层相加.\n\n4.初始值:dp[0]=0,dp[1]=1,dp[2]=2,OK!\n\n5.编写程序运行:\n\n```c++\n#include <bits/stdc++.h>\nint main()\n{\n    int n;//the floor \n    std::cin >> n;\n    int dp[100] = {0};\n    dp[0] = 0;\n    dp[1] = 1;\n    dp[2] = 2;\n    for (int i = 3; i <= 100; i++)\n    {\n        dp[i] = dp[i - 2] + dp[i - 1];\n    }\n    std::cout << dp[n] << std::endl;\n    return 0;\n}\n```\n\n### 动态规划的背包问题\n\n**0-1背包问题的递推关系**\n\nf[j]=max(f[j],f[j-price[i]]+value[i])(考虑第i个产品的购买问题)\n\n​                ↑不改变背包       ↑改变背包,价值为钱减少后的背包里的价值(当作已算出)加上现有商品的价值\n\n最优方案就是比较这两种方案，哪个会更好些:\n\n题目:洛谷P1060\n\n上代码:\n\n```c++\n#include<iostream>\n#include<algorithm>\nusing namespace std;\nint w[30],v[30],f[50000];//w数组为重要度，v数组为money，f是用来dp的数组\nint n,m;//n是总物品个数，m是总钱数\nint main()\n{\n    cin>>m>>n;//输入\n    for(int i=1;i<=n;i++)\n    {\n        cin>>v[i]>>w[i];\n        w[i]*=v[i];//w数组在这里意义变为总收获（重要度*money）\n    }//将每件物品的价值算出来,保留每件物品的价格(消耗背包空间)\n    \n    //01背包\n    for(int i=1;i<=n;i++)//分别对n个物品单独分析,枚举放不放i号物品\n    {\n        for(int j=m;j>=v[i];j--)//注意从m开始,j>=v[i]的意思是:从大到小循环，\n                               //依次询问使用这么多钱可获得的最大重要度与价格的乘积，\n                              //循环到a[i]就行了,j代表的是使用j数量的钱的背包状况\n        {\n            if(j>=v[i])//剩的钱大于第i件产品的价格\n            {\n                f[j]=max(f[j],f[j-v[i]]+w[i]);//要不就不买,维持背包不变,\n                //若是决定购买,将花完这个钱的背包里的价值加上现在这件产品的价值\n            }\n        }\n    }\n    cout<<f[m]<<endl;//背包大小为m时最大值,注意这个m,m可泛化为金钱等\n    return 0;\n} \n```\n\n最长子序列和问题(HDU1003)\n\n```c++\n#include<iostream>\n\n\n\nusing namespace std;\n\nint main() \n{\n\t//获取情况数\n\tint case_number = 0;\n\tcin >> case_number;\n\tint number_of_sequence = 0;\n\tint sum = -1001;//输出的求和\n\tint temp_sum = 0;//临时求和\n\tint get_number = 0;//获得的数字\n\tint counter = 1;//序列长度\n\tint start_position;//起始位置\n\tint final_counter = 0;//最终序列长度\n\tint final_startpos = 0;//最终起始位置\n\tfor (int i = 0; i < case_number; i++)//每种情况对应的循环\n\t{\n\t\tcounter = 1;\n\t\tfinal_counter = 0;\n\t\tfinal_startpos = 0;\n\t\tsum = -1001;\n\t\tcin >> number_of_sequence;//获取数组数字数目\n\t\ttemp_sum = 0;\n\t\tstart_position = 1;\n\t\tfor (int j = 0; j < number_of_sequence; j++)//核心求和算法\n\t\t{\n\t\t\t\n\t\t\tcin >> get_number;\n\t\t\ttemp_sum += get_number;\n\t\t\t\n\t\t\tif (temp_sum> sum)\n\t\t\t{\n\t\t\t\tsum = temp_sum;\n\t\t\t\tfinal_counter = counter;\n\t\t\t\tfinal_startpos = start_position;\n\t\t\t}\n\t\t\tif (temp_sum <0)\n\t\t\t{\n\t\t\t\ttemp_sum = 0;\n\t\t\t\tcounter = 0;\n\t\t\t\tstart_position = j + 2;\n\t\t\t}\n\t\t\t\n\t\t\tcounter++;\n\t\t\n\t\t}\n\t\t\n\t\tcout << \"Case\" << \" \" << i+1 << \":\" << \"\\n\";\n\t\tcout << sum << \" \" << final_startpos << \" \" << final_startpos + final_counter - 1 ;\n\t\t//输出结束\n\t\tcout << \"\\n\";\n\t\t//空行\n\t\tif (i != (case_number - 1))\n\t\t{\n\t\t\tcout << \"\\n\";\n\t\t}\n\n\t}\n\n}\n```\n\n\n\n## 图论\n\n图论是一个很重要的把抽象问题转发为程序的思想.我们在此处会举一些例子来说明图论的应用.有关这个数据结构的解释可以在后面的[数据结构](#数据结构)章节找到\n\n图论的一些应用:\n\n//还没学,先放着.\n\n## 高精度算法\n\n高精度算法可用于求解大数运算,这是任何一种数据类型(包括longl ong)都无法做到的,接下来就先贴几个代码来解释,以后再来写详细的笔记.\n\n高精度加法(HDU1002)\n\n```c++\n#include <iostream>\n#include <cstdint>\n#include <string>\n#include <vector>\n\nusing namespace std;\n\nint main()\n{\n\t//Get case number\n\tint case_number = 0;\n\tcin >> case_number;\n\t//Get input numbers  of each case\n\t//开始输出结果\n\tfor (int i = 0; i < case_number; i++)\n\t{\n\n\t\tstring num_a;\n\t\tstring num_b;\n\t\tcin >> num_a;\n\t\tcin >> num_b;\n\t\t//Start caculate\n\t\t//Confirm length\n\t\tint length = 0;\n\t\tif (num_a.length() >= num_b.length())\n\t\t{\n\t\t\tlength = num_a.length() + 1;\n\t\t}\n\t\telse if (num_a.length() < num_b.length())\n\t\t{\n\t\t\tlength = num_b.length() + 1;\n\t\t}\n\t\t//Creat result\n\t\tvector<int> result(length);\n\t\tint nextline = 0; //进位\n\t\tint ifline = 0;\n\t\tint Tresult = 0; //每位结果\n\t\tint numberA = 0; //A的位\n\t\tint numberB = 0; //B的位\n\t\t//开始读数\n\t\tfor (int j = 0; j < length; j++)\n\t\t{\n\t\t\tnumberA = (num_a.length() - j - 1); //A读数的位\n\t\t\tnumberB = (num_b.length() - j - 1); //B读数的位\n\t\t\tint tempA = 0;\t\t\t\t\t\t//A临时读数\n\t\t\tint tempB = 0;\t\t\t\t\t\t//B临时读数\n\t\t\t//读A\n\t\t\tif (numberA >= 0)\n\t\t\t{\n\t\t\t\ttempA = num_a[numberA];\n\t\t\t\ttempA = tempA - '0';\n\t\t\t}\n\t\t\t//读B\n\t\t\tif (numberB >= 0)\n\t\t\t{\n\t\t\t\ttempB = num_b[numberB];\n\t\t\t\ttempB = tempB - '0';\n\t\t\t}\n\t\t\t//Input result\n\t\t\tint tempR = 0;\n\n\t\t\tif (j == 0)\n\t\t\t{\n\t\t\t\ttempR = tempA + tempB; //在不进位时结果\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\ttempR = tempA + tempB + nextline; //进位结果\n\t\t\t}\n\n\t\t\t//判断大于10\n\n\t\t\tif (j != (length - 1))\n\t\t\t{\n\t\t\t\tif (tempR >= 10)\n\t\t\t\t{\n\t\t\t\t\tifline = 1;\n\t\t\t\t\t//取模结果输出\n\t\t\t\t\ttempR = tempR % 10;\n\t\t\t\t}\n\t\t\t\telse if (tempR < 10)\n\t\t\t\t{\n\t\t\t\t\tifline = 0;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tint number = length - j - 1;\n\n\t\t\tTresult = tempR;\n\n\t\t\tresult[number] = Tresult;\n\t\t\tif (ifline == 1)\n\t\t\t{\n\t\t\t\tnextline = 1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tnextline = 0;\n\t\t\t}\n\t\t}\n\t\t//Output results\n\n\t\tcout << \"Case \" << i + 1 << \":\"\n\t\t\t << \"\\n\";\n\t\tcout << num_a << \" + \" << num_b << \" = \";\n\t\tint startout = 0;\n\n\t\tfor (int l = 1; l < length; l++) //输出一个数\n\t\t{\n\n\t\t\tif (result[0] != 0 && l == 1)\n\t\t\t{\n\t\t\t\tcout << result[0];\n\t\t\t\tstartout = 1;\n\t\t\t}\n\t\t\tif (result[l] != 0)\n\t\t\t{\n\t\t\t\tstartout = 1;\n\t\t\t}\n\t\t\telse if (l == (length - 1))\n\t\t\t{\n\t\t\t\tstartout = 1;\n\t\t\t}\n\n\t\t\tif (startout == 0)\n\t\t\t{\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tcout << result[l];\n\t\t}\n\t\t//输出结束\n\t\tcout << \"\\n\";\n\t\t//空行\n\t\tif (i != (case_number - 1))\n\t\t{\n\t\t\tcout << \"\\n\";\n\t\t}\n\n\t} //结束单个循环\n\treturn 0;\n}\n\n```\n\n这个算法嘛,写的其实很累赘,但是其中一些进位和控制输出体现了高精度算法所要求的强大的逻辑性\n\n高精度排序(洛谷P1781)\n\n```c++\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nchar president[20][101];\nint bits_number = 0;\n\nbool compare(int a, int b)\n{\n    return president[a][bits_number] > president[b][bits_number];\n};\n\nint main()\n{\n    int number = 0;\n    cin >> number;\n    for (int i = 0; i < number; i++) //Get the votes of president\n    {\n        cin >> president[i];\n    }\n    //ok,let's compare\n    queue<int> president_list; // the presidents left\n\n    int maxbit = 0; // the max votes bit president\n\n    for (int i = 0; i < number; i++) //get the bits of each president\n    {\n        int temp_bits = 0;\n        for (int j = 0; j < 100; j++) // get the bits\n        {\n            if (president[i][j] != 0)\n            {\n                temp_bits++;\n            }\n            else\n            {\n                break;\n            }\n        }\n        //this guy's bit has been recorded\n        if (temp_bits >= maxbit)\n        {\n            \n            president_list.push(i);\n            if (temp_bits > maxbit)\n            {\n                president_list = queue<int>();\n                president_list.push(i);\n            }\n            maxbit = temp_bits;\n        }\n    }\n    //WARNING: THE NUMBER OF PRESIDENT MUST BE PLUSED ONE!\n    //now,compare the president in queue!\n    vector<int> last_list;\n    while (!president_list.empty())\n    {\n        last_list.push_back(president_list.front());\n        president_list.pop();\n    }\n    for (int i = 0; i < maxbit; i++)\n    {\n        bits_number = i;\n        sort(last_list.begin(), last_list.end(), compare);\n        int erase_bit = president[last_list[0]][i];\n\n        for (auto it = last_list.begin(); it != last_list.end(); it++)\n        {\n            cout << \"\";\n            if (president[*it][i] < erase_bit)\n            {\n                last_list.erase(it);\n                it--;\n                cout << \"\";\n            }\n        }\n    }\n    cout << last_list[0] + 1 << endl;\n    for (int i = 0; i < maxbit; i++)\n    {\n        cout << president[last_list[0]][i];\n    }\n\n    return 0;\n}\n```\n\n当然,可以学一门Java/python来应付这个......\n\n这个我们后面可能会开Java/python的笔记.\n\n\n\n","slug":"2020-2-17-Algorithm","published":1,"updated":"2021-10-24T02:04:35.826Z","_id":"ckey85ujh0013ho8a5b7r4zlx","comments":1,"photos":[],"link":"","content":"<h2 id=\"枚举\"><a href=\"#枚举\" class=\"headerlink\" title=\"枚举\"></a>枚举</h2><p>枚举可以说是算法中最最最最弱智的一种算法了,其基本原理就是根据题目意思将所有可能的情况都试一遍,如果达到题目要求就记录下来或者输出.没有达到题目要求就跳过.但是,枚举也是需要一些技巧的,否则你要把所有的情况都真的试一下后,会遭遇可怜的TLE.</p>\n<p>首先,如果遇到非正即反的枚举情况(即情况可以用0或1表示),可以尝试使用<a href=\"#bitset\">bitset</a>进行救命,因为bitset占用空间少,且只模拟0和1两种情况.</p>\n<p>对于某些特殊情况的枚举,可以考虑用前一层枚举的情况直接通过计算得出后面的枚举结果,比如说熄灯问题(这是一个我看过的MOOC的问题,现在不太好解释),这样可以大大减少枚举的时间复杂度.</p>\n<p>枚举的实现一般是通过循环实现的.至于怎么循环,怎么嵌套,我想我不必再过多解释<strong>.但值得注意的是,循环变量一定要设置好!!!(尽量自己写循环结构,用vscode自动生成的可能会搞错)且一定要在此时记录循环变量的含义(最好注释下来).这样真的很有利于后面的判断和调试!</strong></p>\n<p>称硬币问题的枚举:(POJ1013)</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;iostream&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;string.h&gt;</span></span><br><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-built_in\">std</span>;<br><br><span class=\"hljs-keyword\">char</span> eleft[<span class=\"hljs-number\">3</span>][<span class=\"hljs-number\">7</span>];   <span class=\"hljs-comment\">//the coin status of eleft</span><br><span class=\"hljs-keyword\">char</span> eright[<span class=\"hljs-number\">3</span>][<span class=\"hljs-number\">7</span>];  <span class=\"hljs-comment\">//the coin status of eright</span><br><span class=\"hljs-keyword\">char</span> eresult[<span class=\"hljs-number\">3</span>][<span class=\"hljs-number\">7</span>]; <span class=\"hljs-comment\">//the eresult of each try</span><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">bool</span> <span class=\"hljs-title\">get_result</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">char</span> coin, <span class=\"hljs-keyword\">bool</span> isLight)</span><br></span>&#123;<br>    <span class=\"hljs-keyword\">if</span> (isLight)<br>    &#123;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> k = <span class=\"hljs-number\">0</span>; k &lt; <span class=\"hljs-number\">3</span>; k++) <span class=\"hljs-comment\">//Judge 3 cases</span><br>        &#123;<br>            <span class=\"hljs-keyword\">if</span> (eresult[k][<span class=\"hljs-number\">0</span>] == <span class=\"hljs-string\">'e'</span>) <span class=\"hljs-comment\">//this case is even</span><br>            &#123;<br>                <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">strchr</span>(eleft[k], coin) != <span class=\"hljs-literal\">NULL</span> || <span class=\"hljs-built_in\">strchr</span>(eright[k], coin) != <span class=\"hljs-literal\">NULL</span>)<br>                &#123;<br>                    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>                &#125;<br>            &#125;<br>            <span class=\"hljs-keyword\">if</span> (eresult[k][<span class=\"hljs-number\">0</span>] == <span class=\"hljs-string\">'u'</span>) <span class=\"hljs-comment\">//this case is up</span><br>            &#123;<br>                <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">strchr</span>(eright[k], coin) == <span class=\"hljs-literal\">NULL</span>)<br>                &#123;<br>                    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>                &#125;<br>            &#125;<br>            <span class=\"hljs-keyword\">if</span> (eresult[k][<span class=\"hljs-number\">0</span>] == <span class=\"hljs-string\">'d'</span>) <span class=\"hljs-comment\">//this case is down</span><br>            &#123;<br>                <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">strchr</span>(eleft[k], coin) == <span class=\"hljs-literal\">NULL</span>)<br>                &#123;<br>                    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class=\"hljs-keyword\">else</span><br>    &#123;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> k = <span class=\"hljs-number\">0</span>; k &lt; <span class=\"hljs-number\">3</span>; k++) <span class=\"hljs-comment\">//Judge 3 cases</span><br>        &#123;<br>            <span class=\"hljs-keyword\">if</span> (eresult[k][<span class=\"hljs-number\">0</span>] == <span class=\"hljs-string\">'e'</span>) <span class=\"hljs-comment\">//this case is even</span><br>            &#123;<br>                <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">strchr</span>(eleft[k], coin) != <span class=\"hljs-literal\">NULL</span> || <span class=\"hljs-built_in\">strchr</span>(eright[k], coin) != <span class=\"hljs-literal\">NULL</span>)<br>                &#123;<br>                    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>                &#125;<br>            &#125;<br>            <span class=\"hljs-keyword\">if</span> (eresult[k][<span class=\"hljs-number\">0</span>] == <span class=\"hljs-string\">'u'</span>) <span class=\"hljs-comment\">//this case is up</span><br>            &#123;<br>                <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">strchr</span>(eleft[k], coin) == <span class=\"hljs-literal\">NULL</span>)<br>                &#123;<br>                    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>                &#125;<br>            &#125;<br>            <span class=\"hljs-keyword\">if</span> (eresult[k][<span class=\"hljs-number\">0</span>] == <span class=\"hljs-string\">'d'</span>) <span class=\"hljs-comment\">//this case is down</span><br>            &#123;<br>                <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">strchr</span>(eright[k], coin) == <span class=\"hljs-literal\">NULL</span>)<br>                &#123;<br>                    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<br>&#125;;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span><br></span>&#123;<br>    <span class=\"hljs-keyword\">int</span> case_number = <span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-built_in\">cin</span> &gt;&gt; case_number;                   <span class=\"hljs-comment\">//Get case number</span><br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; case_number; i++) <span class=\"hljs-comment\">//Output the eresult of each case</span><br>    &#123;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> j = <span class=\"hljs-number\">0</span>; j &lt; <span class=\"hljs-number\">3</span>; j++)<br>        &#123;<br>            <span class=\"hljs-built_in\">cin</span> &gt;&gt; eleft[j] &gt;&gt; eright[j] &gt;&gt; eresult[j];<br>        &#125;<br><br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">char</span> j = <span class=\"hljs-string\">'A'</span>; j &lt;= <span class=\"hljs-string\">'L'</span>; j++)<br>        &#123;<br>            <span class=\"hljs-keyword\">bool</span> isLight = <span class=\"hljs-literal\">true</span>; <span class=\"hljs-comment\">//The fake coin is light</span><br>            <span class=\"hljs-keyword\">if</span> (get_result(j, isLight))<br>                <span class=\"hljs-built_in\">cout</span> &lt;&lt; j &lt;&lt; <span class=\"hljs-string\">\" is the counterfeit coin and it is light.\"</span> &lt;&lt; <span class=\"hljs-built_in\">endl</span>;<br>            isLight = <span class=\"hljs-literal\">false</span>;<br>            <span class=\"hljs-keyword\">if</span> (get_result(j, isLight))<br>                <span class=\"hljs-built_in\">cout</span> &lt;&lt; j &lt;&lt; <span class=\"hljs-string\">\" is the counterfeit coin and it is heavy.\"</span> &lt;&lt; <span class=\"hljs-built_in\">endl</span>;<br>        &#125;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>关于枚举,先写到这吧,后面如果遇到一些古怪的枚举方式,再补.</p>\n<h2 id=\"模拟\"><a href=\"#模拟\" class=\"headerlink\" title=\"模拟\"></a>模拟</h2><p>模拟,顾名思义,就是根据题目所给的实现方式和思想写代码,这种题目一般来说都伴随着大量的判断和循环,且隐含着一些算法思想.若是单纯的硬模拟可能会导致TLE.</p>\n<p>模拟题的数据一般而言会实现地十分古怪,所以你必须考虑一些特殊情况.所以写模拟题最烦人地地方就在于DEBUG!你怎么知道你是不是漏了情况!</p>\n<p>模拟题的写法比较灵活多样,并且需要很强的文字阅读能力来理解题意.而且模拟题容易转变为其他类型的算法题,所以也不好直接讨论.</p>\n<p>//举例几道题,凑合得了,模拟的笔记我没法写…</p>\n<h2 id=\"贪心\"><a href=\"#贪心\" class=\"headerlink\" title=\"贪心\"></a>贪心</h2><p>贪心算法就是在进行每一步操作时尽可能寻找最优解,此种算法可能需要依托一些数据结构(队列;优先队列&lt;堆&gt;)来实现.</p>\n<p>接下来看一道使用贪心算法的题目:</p>\n<p>此题使用了优先队列的思想.优先队列其实就是一种贪心,即:先取出优先级最大的元素.而贪心算法的原理就是先执行最优步骤,等到最优步骤执行完后再执行次优步骤.</p>\n<p>上代码:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;bits/stdc++.h&gt;</span></span><br><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-built_in\">std</span>;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span><br></span>&#123;<br>    <span class=\"hljs-keyword\">int</span> qty_apple;<br>    <span class=\"hljs-built_in\">cin</span>&gt;&gt;qty_apple;<br>    priority_queue&lt;<span class=\"hljs-keyword\">int</span>, <span class=\"hljs-built_in\">vector</span>&lt;<span class=\"hljs-keyword\">int</span>&gt;, greater&lt;<span class=\"hljs-keyword\">int</span>&gt;&gt; apples;<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; qty_apple; i++)<br>    &#123;<br>        <span class=\"hljs-keyword\">int</span> temp_in;<br>        <span class=\"hljs-built_in\">cin</span> &gt;&gt; temp_in;<br>        apples.push(temp_in);<br>    &#125;<br>    <span class=\"hljs-keyword\">int</span> sum = <span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-literal\">true</span>)<br>    &#123;<br>        <span class=\"hljs-keyword\">int</span> t_effort = <span class=\"hljs-number\">0</span>;<br>        t_effort += apples.top();<br>        apples.pop();<br>        t_effort += apples.top();<br>        apples.pop();<br>        sum += t_effort;<br>        <span class=\"hljs-keyword\">if</span> (apples.empty())<br>            <span class=\"hljs-keyword\">break</span>;<br>        apples.push(t_effort);<br>    &#125;<br>    <span class=\"hljs-built_in\">cout</span> &lt;&lt; sum &lt;&lt; <span class=\"hljs-built_in\">endl</span>;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h2 id=\"递归\"><a href=\"#递归\" class=\"headerlink\" title=\"递归\"></a>递归</h2><p>递归就是函数自己调用自己.这样就能实现一些较为复杂且很难单纯用循环写出来的算法.</p>\n<p>递归的一个典型例子就是<strong><em>汉诺塔问题</em></strong>,这个问题不仅是一个对递归思想的很好解释,同时也有利于深刻了解递归的原理.</p>\n<p>接下来看汉诺塔问题</p>\n<p>汉诺塔 （ 又称河内塔 ） 问题是源于印度一个古老传说的益智玩具 。 古代有一个梵塔 ， 塔内有座 A 、 B 、 C ， A 座上有 64 个盘子 ， 盘子大小不等 ， 大的在下 ， 小的在上 。 有一个和尚想把盘子从 A 座移到 B 座 ， 但每次只能允许移动一个盘子 ， 并且在移动过程中 ， 3 个座上的盘始终保持大盘在下，小盘在上。在移动过程中可以利用 B 座.</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;iostream&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-built_in\">std</span>;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">move</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> n, <span class=\"hljs-keyword\">char</span> A, <span class=\"hljs-keyword\">char</span> B,<span class=\"hljs-keyword\">char</span> C)</span></span>;<span class=\"hljs-comment\">//声明函数(递归的调用)</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span><br></span>&#123; <br>\t<span class=\"hljs-keyword\">int</span> discCount;<br>    <span class=\"hljs-built_in\">cin</span>&gt;&gt;discCount;<br>    <span class=\"hljs-built_in\">move</span>(discCount,<span class=\"hljs-string\">'A'</span>,<span class=\"hljs-string\">'B'</span>,<span class=\"hljs-string\">'C'</span>);<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">move</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> n, <span class=\"hljs-keyword\">char</span> A, <span class=\"hljs-keyword\">char</span> B,<span class=\"hljs-keyword\">char</span> C)</span><span class=\"hljs-comment\">//自定义函数</span><br></span>&#123;<br>\t<span class=\"hljs-keyword\">if</span>(n==<span class=\"hljs-number\">0</span>)<span class=\"hljs-comment\">//盘子为0的时候返回</span><br>\t&#123;<br>\t\t<span class=\"hljs-keyword\">return</span>;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">else</span><br>\t&#123;<br>\t\t<span class=\"hljs-comment\">//算法分析:要使得最底下最大的盘子能移到C,必须先把n-1个盘子移到B,于是有:</span><br>        <span class=\"hljs-comment\">//我们不需要管下一个递归是怎么解决n-1个盘子移动问题的,我们只负责命令它执行:</span><br>        <span class=\"hljs-built_in\">move</span>(n<span class=\"hljs-number\">-1</span>,A,C,B);<span class=\"hljs-comment\">//先把n-1个盘子从A移动到B,借助C</span><br>        <span class=\"hljs-comment\">//(此时在递归程序里的调用依然是A移动到C,但盘子的序号变了)</span><br>        <span class=\"hljs-comment\">//当作完成了n-1个盘子的移动,最后有:</span><br>\t\t<span class=\"hljs-built_in\">cout</span>&lt;&lt;A&lt;&lt;<span class=\"hljs-string\">\"--&gt;\"</span>&lt;&lt;C&lt;&lt;<span class=\"hljs-built_in\">endl</span>;<span class=\"hljs-comment\">//把最后一个盘子(相对最大的)从A移动到C</span><br>\t\t<span class=\"hljs-built_in\">move</span>(n<span class=\"hljs-number\">-1</span>,B,A,C);<span class=\"hljs-comment\">//最后把n-1个盘子从B移动到C,使用A作为中转.</span><br>        <span class=\"hljs-comment\">//因为此时A上面已经没有比相对最大的盘子大的了</span><br>\t\t<span class=\"hljs-keyword\">return</span>;<span class=\"hljs-comment\">//移动完成,程序结束</span><br>\t&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h2 id=\"深度优先搜索-DFS\"><a href=\"#深度优先搜索-DFS\" class=\"headerlink\" title=\"深度优先搜索(DFS)\"></a>深度优先搜索(DFS)</h2><p>深度优先搜索,即先想某一纵深进行搜索,由于主要是写给自己看的,所以就从简了,简而言之,其是隐式地运用了栈的思想实现的.</p>\n<p>先看一个八皇后的问题(洛谷P1219)</p>\n<hr>\n<p>题目描述</p>\n<p>检查一个如下的6 x 6的跳棋棋盘，有六个棋子被放置在棋盘上，使得每行、每列有且只有一个，每条对角线(包括两条主对角线的所有平行线)上至多有一个棋子。</p>\n<p><img src=\"/img/60.png\" alt=\"img\"></p>\n<p>上面的布局可以用序列2 4 6 1 3 5来描述，第i个数字表示在第i行的相应位置有一个棋子，如下：</p>\n<p>行号 1 2 3 4 5 6</p>\n<p>列号 2 4 6 1 3 5</p>\n<p>这只是跳棋放置的一个解。请编一个程序找出所有跳棋放置的解。并把它们以上面的序列方法输出。解按字典顺序排列。请输出前3个解。最后一行是解的总个数。</p>\n<p>输入格式</p>\n<p>一个数字N (6 &lt;= N &lt;= 13) 表示棋盘是N x N大小的。</p>\n<p>输出格式</p>\n<p>前三行为前三个解，每个解的两个数字之间用一个空格隔开。第四行只有一个数字，表示解的总数。</p>\n<hr>\n<p>接下来请看代码</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;bits/stdc++.h&gt;</span></span><br><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-built_in\">std</span>;<br><br><span class=\"hljs-keyword\">int</span> ans[<span class=\"hljs-number\">14</span>] = &#123;<span class=\"hljs-number\">0</span>&#125;;<br><span class=\"hljs-keyword\">int</span> vline[<span class=\"hljs-number\">14</span>] = &#123;<span class=\"hljs-number\">0</span>&#125;;<br><span class=\"hljs-keyword\">int</span> lcross[<span class=\"hljs-number\">14</span>] = &#123;<span class=\"hljs-number\">0</span>&#125;;<br><span class=\"hljs-keyword\">int</span> rcross[<span class=\"hljs-number\">114</span>] = &#123;<span class=\"hljs-number\">0</span>&#125;; <span class=\"hljs-comment\">//分别对应列 左 右 对角线(对角线请注意加一个n，n=100)</span><br><span class=\"hljs-keyword\">int</span> sum = <span class=\"hljs-number\">0</span>;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">dfs</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> <span class=\"hljs-built_in\">width</span>, <span class=\"hljs-keyword\">int</span> <span class=\"hljs-built_in\">line</span>)</span><br></span>&#123;<br>    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">line</span> &gt; <span class=\"hljs-built_in\">width</span>) <span class=\"hljs-comment\">//达到结果就输出(深搜结束标识)</span><br>    &#123;<br>        sum++;<br>        <span class=\"hljs-keyword\">if</span> (sum &lt;= <span class=\"hljs-number\">3</span>)<br>        &#123;<br>            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> j = <span class=\"hljs-number\">1</span>; j &lt;= <span class=\"hljs-built_in\">width</span>; j++) <span class=\"hljs-comment\">//这里的i代表行号</span><br>            &#123;<br>                <span class=\"hljs-built_in\">cout</span> &lt;&lt; ans[j] &lt;&lt; <span class=\"hljs-string\">\" \"</span>;<br>            &#125;<br>            <span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-built_in\">endl</span>;<br>        &#125;<br>        <br>        <span class=\"hljs-keyword\">return</span>;<br>    &#125;<br>    <span class=\"hljs-comment\">//正式算法</span><br>    <span class=\"hljs-comment\">//占位</span><br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">1</span>; i &lt;= <span class=\"hljs-built_in\">width</span>; i++) <span class=\"hljs-comment\">//排查未用然后使用</span><br>    &#123;<br>        <span class=\"hljs-keyword\">if</span> (vline[i] != <span class=\"hljs-number\">1</span> &amp;&amp; lcross[i + <span class=\"hljs-built_in\">line</span>] != <span class=\"hljs-number\">1</span> &amp;&amp; rcross[i - <span class=\"hljs-built_in\">line</span> + <span class=\"hljs-number\">100</span>] != <span class=\"hljs-number\">1</span>)<br>        &#123;<br>            <span class=\"hljs-comment\">//占用</span><br>            ans[<span class=\"hljs-built_in\">line</span>] = i;<br>            vline[i] = <span class=\"hljs-number\">1</span>;<br>            lcross[i + <span class=\"hljs-built_in\">line</span>] = <span class=\"hljs-number\">1</span>;<br>            rcross[i - <span class=\"hljs-built_in\">line</span> + <span class=\"hljs-number\">100</span>] = <span class=\"hljs-number\">1</span>;<br>            dfs(<span class=\"hljs-built_in\">width</span>, <span class=\"hljs-built_in\">line</span> + <span class=\"hljs-number\">1</span>);<br>            <span class=\"hljs-comment\">//你应当特别注意这一步!这里是深搜向下扩展的重要步骤!!!</span><br>            <span class=\"hljs-comment\">//回溯(在上面的程序结束后,意味着深搜已经完成并return,</span><br>            <span class=\"hljs-comment\">//那么在return下面必须将程序的状态恢复到扩展下一层前的状态!!!</span><br>            <span class=\"hljs-comment\">//注意这很重要,并且可能需要考虑如何做这样一件事)</span><br>            vline[i] = <span class=\"hljs-number\">0</span>;<br>            lcross[i + <span class=\"hljs-built_in\">line</span>] = <span class=\"hljs-number\">0</span>;<br>            rcross[i - <span class=\"hljs-built_in\">line</span> + <span class=\"hljs-number\">100</span>] = <span class=\"hljs-number\">0</span>;<br>        &#125;<br>    &#125;<br>&#125;;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span><br></span>&#123;<br>    <span class=\"hljs-keyword\">int</span> <span class=\"hljs-built_in\">width</span> = <span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-built_in\">cin</span> &gt;&gt; <span class=\"hljs-built_in\">width</span>;  <span class=\"hljs-comment\">//获取棋盘的宽度</span><br>    dfs(<span class=\"hljs-built_in\">width</span>, <span class=\"hljs-number\">1</span>); <span class=\"hljs-comment\">//从第1行开始</span><br>    <span class=\"hljs-built_in\">cout</span>&lt;&lt;sum;<br><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>这只是一个深搜的例子,后面我会继续扩充一些其他的例子以及用法!</p>\n<h2 id=\"广度优先搜索\"><a href=\"#广度优先搜索\" class=\"headerlink\" title=\"广度优先搜索\"></a>广度优先搜索</h2><p>广度优先搜索使用了队列的思想.广度优先搜索总是先搜索步长最近的搜索结果,这样就可以求解一些类似于最短路径之类的问题.</p>\n<p>广度优先搜索的结果可以搜索到的结果保证步长最短.</p>\n<h2 id=\"动态规划\"><a href=\"#动态规划\" class=\"headerlink\" title=\"动态规划\"></a>动态规划</h2><p>动态规划就是使用历史数据来避免重复计算,从而拆分求解一些复杂的问题.</p>\n<h3 id=\"一维动态规划\"><a href=\"#一维动态规划\" class=\"headerlink\" title=\"一维动态规划\"></a>一维动态规划</h3><p>1.建立动态规划数组dp[]</p>\n<p>2.确定dp[i]的含义</p>\n<p>3.确定递推表达式</p>\n<p>4.找出初始值用于递推</p>\n<p>5.由是,可以求出dp[i]的值</p>\n<p>接下来看一道简单的动态规划题目:</p>\n<p>青蛙跳台阶问题:</p>\n<blockquote>\n<p>问题描述：一只青蛙一次可以跳上1级台阶，也可以跳上2级。求该青蛙跳上一个n级的台阶总共有多少种跳法。 </p>\n</blockquote>\n<p>1.建立dp[]</p>\n<p>2.确定dp[i] 的含义,这里的dp[i]的含义是第i个台阶青蛙要跳的步数.</p>\n<p>3.<strong>找出关系式</strong>:dp[i]=dp[i-2]+dp[i-1],由于青蛙可以从i-2级或i-1级跳上来,所以第i层的情况数就是i-2层的情况和i-1层相加.</p>\n<p>4.初始值:dp[0]=0,dp[1]=1,dp[2]=2,OK!</p>\n<p>5.编写程序运行:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;bits/stdc++.h&gt;</span></span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span><br></span>&#123;<br>    <span class=\"hljs-keyword\">int</span> n;<span class=\"hljs-comment\">//the floor </span><br>    <span class=\"hljs-built_in\">std</span>::<span class=\"hljs-built_in\">cin</span> &gt;&gt; n;<br>    <span class=\"hljs-keyword\">int</span> dp[<span class=\"hljs-number\">100</span>] = &#123;<span class=\"hljs-number\">0</span>&#125;;<br>    dp[<span class=\"hljs-number\">0</span>] = <span class=\"hljs-number\">0</span>;<br>    dp[<span class=\"hljs-number\">1</span>] = <span class=\"hljs-number\">1</span>;<br>    dp[<span class=\"hljs-number\">2</span>] = <span class=\"hljs-number\">2</span>;<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">3</span>; i &lt;= <span class=\"hljs-number\">100</span>; i++)<br>    &#123;<br>        dp[i] = dp[i - <span class=\"hljs-number\">2</span>] + dp[i - <span class=\"hljs-number\">1</span>];<br>    &#125;<br>    <span class=\"hljs-built_in\">std</span>::<span class=\"hljs-built_in\">cout</span> &lt;&lt; dp[n] &lt;&lt; <span class=\"hljs-built_in\">std</span>::<span class=\"hljs-built_in\">endl</span>;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h3 id=\"动态规划的背包问题\"><a href=\"#动态规划的背包问题\" class=\"headerlink\" title=\"动态规划的背包问题\"></a>动态规划的背包问题</h3><p><strong>0-1背包问题的递推关系</strong></p>\n<p>f[j]=max(f[j],f[j-price[i]]+value[i])(考虑第i个产品的购买问题)</p>\n<p>​                ↑不改变背包       ↑改变背包,价值为钱减少后的背包里的价值(当作已算出)加上现有商品的价值</p>\n<p>最优方案就是比较这两种方案，哪个会更好些:</p>\n<p>题目:洛谷P1060</p>\n<p>上代码:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">&lt;iostream&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">&lt;algorithm&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-built_in\">std</span>;<br><span class=\"hljs-keyword\">int</span> w[<span class=\"hljs-number\">30</span>],v[<span class=\"hljs-number\">30</span>],f[<span class=\"hljs-number\">50000</span>];<span class=\"hljs-comment\">//w数组为重要度，v数组为money，f是用来dp的数组</span><br><span class=\"hljs-keyword\">int</span> n,m;<span class=\"hljs-comment\">//n是总物品个数，m是总钱数</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span><br></span>&#123;<br>    <span class=\"hljs-built_in\">cin</span>&gt;&gt;m&gt;&gt;n;<span class=\"hljs-comment\">//输入</span><br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">1</span>;i&lt;=n;i++)<br>    &#123;<br>        <span class=\"hljs-built_in\">cin</span>&gt;&gt;v[i]&gt;&gt;w[i];<br>        w[i]*=v[i];<span class=\"hljs-comment\">//w数组在这里意义变为总收获（重要度*money）</span><br>    &#125;<span class=\"hljs-comment\">//将每件物品的价值算出来,保留每件物品的价格(消耗背包空间)</span><br>    <br>    <span class=\"hljs-comment\">//01背包</span><br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">1</span>;i&lt;=n;i++)<span class=\"hljs-comment\">//分别对n个物品单独分析,枚举放不放i号物品</span><br>    &#123;<br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> j=m;j&gt;=v[i];j--)<span class=\"hljs-comment\">//注意从m开始,j&gt;=v[i]的意思是:从大到小循环，</span><br>                               <span class=\"hljs-comment\">//依次询问使用这么多钱可获得的最大重要度与价格的乘积，</span><br>                              <span class=\"hljs-comment\">//循环到a[i]就行了,j代表的是使用j数量的钱的背包状况</span><br>        &#123;<br>            <span class=\"hljs-keyword\">if</span>(j&gt;=v[i])<span class=\"hljs-comment\">//剩的钱大于第i件产品的价格</span><br>            &#123;<br>                f[j]=<span class=\"hljs-built_in\">max</span>(f[j],f[j-v[i]]+w[i]);<span class=\"hljs-comment\">//要不就不买,维持背包不变,</span><br>                <span class=\"hljs-comment\">//若是决定购买,将花完这个钱的背包里的价值加上现在这件产品的价值</span><br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class=\"hljs-built_in\">cout</span>&lt;&lt;f[m]&lt;&lt;<span class=\"hljs-built_in\">endl</span>;<span class=\"hljs-comment\">//背包大小为m时最大值,注意这个m,m可泛化为金钱等</span><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>最长子序列和问题(HDU1003)</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">&lt;iostream&gt;</span></span><br><br><br><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-built_in\">std</span>;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> <br></span>&#123;<br>\t<span class=\"hljs-comment\">//获取情况数</span><br>\t<span class=\"hljs-keyword\">int</span> case_number = <span class=\"hljs-number\">0</span>;<br>\t<span class=\"hljs-built_in\">cin</span> &gt;&gt; case_number;<br>\t<span class=\"hljs-keyword\">int</span> number_of_sequence = <span class=\"hljs-number\">0</span>;<br>\t<span class=\"hljs-keyword\">int</span> sum = <span class=\"hljs-number\">-1001</span>;<span class=\"hljs-comment\">//输出的求和</span><br>\t<span class=\"hljs-keyword\">int</span> temp_sum = <span class=\"hljs-number\">0</span>;<span class=\"hljs-comment\">//临时求和</span><br>\t<span class=\"hljs-keyword\">int</span> get_number = <span class=\"hljs-number\">0</span>;<span class=\"hljs-comment\">//获得的数字</span><br>\t<span class=\"hljs-keyword\">int</span> counter = <span class=\"hljs-number\">1</span>;<span class=\"hljs-comment\">//序列长度</span><br>\t<span class=\"hljs-keyword\">int</span> start_position;<span class=\"hljs-comment\">//起始位置</span><br>\t<span class=\"hljs-keyword\">int</span> final_counter = <span class=\"hljs-number\">0</span>;<span class=\"hljs-comment\">//最终序列长度</span><br>\t<span class=\"hljs-keyword\">int</span> final_startpos = <span class=\"hljs-number\">0</span>;<span class=\"hljs-comment\">//最终起始位置</span><br>\t<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; case_number; i++)<span class=\"hljs-comment\">//每种情况对应的循环</span><br>\t&#123;<br>\t\tcounter = <span class=\"hljs-number\">1</span>;<br>\t\tfinal_counter = <span class=\"hljs-number\">0</span>;<br>\t\tfinal_startpos = <span class=\"hljs-number\">0</span>;<br>\t\tsum = <span class=\"hljs-number\">-1001</span>;<br>\t\t<span class=\"hljs-built_in\">cin</span> &gt;&gt; number_of_sequence;<span class=\"hljs-comment\">//获取数组数字数目</span><br>\t\ttemp_sum = <span class=\"hljs-number\">0</span>;<br>\t\tstart_position = <span class=\"hljs-number\">1</span>;<br>\t\t<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> j = <span class=\"hljs-number\">0</span>; j &lt; number_of_sequence; j++)<span class=\"hljs-comment\">//核心求和算法</span><br>\t\t&#123;<br>\t\t\t<br>\t\t\t<span class=\"hljs-built_in\">cin</span> &gt;&gt; get_number;<br>\t\t\ttemp_sum += get_number;<br>\t\t\t<br>\t\t\t<span class=\"hljs-keyword\">if</span> (temp_sum&gt; sum)<br>\t\t\t&#123;<br>\t\t\t\tsum = temp_sum;<br>\t\t\t\tfinal_counter = counter;<br>\t\t\t\tfinal_startpos = start_position;<br>\t\t\t&#125;<br>\t\t\t<span class=\"hljs-keyword\">if</span> (temp_sum &lt;<span class=\"hljs-number\">0</span>)<br>\t\t\t&#123;<br>\t\t\t\ttemp_sum = <span class=\"hljs-number\">0</span>;<br>\t\t\t\tcounter = <span class=\"hljs-number\">0</span>;<br>\t\t\t\tstart_position = j + <span class=\"hljs-number\">2</span>;<br>\t\t\t&#125;<br>\t\t\t<br>\t\t\tcounter++;<br>\t\t<br>\t\t&#125;<br>\t\t<br>\t\t<span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">\"Case\"</span> &lt;&lt; <span class=\"hljs-string\">\" \"</span> &lt;&lt; i+<span class=\"hljs-number\">1</span> &lt;&lt; <span class=\"hljs-string\">\":\"</span> &lt;&lt; <span class=\"hljs-string\">\"\\n\"</span>;<br>\t\t<span class=\"hljs-built_in\">cout</span> &lt;&lt; sum &lt;&lt; <span class=\"hljs-string\">\" \"</span> &lt;&lt; final_startpos &lt;&lt; <span class=\"hljs-string\">\" \"</span> &lt;&lt; final_startpos + final_counter - <span class=\"hljs-number\">1</span> ;<br>\t\t<span class=\"hljs-comment\">//输出结束</span><br>\t\t<span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">\"\\n\"</span>;<br>\t\t<span class=\"hljs-comment\">//空行</span><br>\t\t<span class=\"hljs-keyword\">if</span> (i != (case_number - <span class=\"hljs-number\">1</span>))<br>\t\t&#123;<br>\t\t\t<span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">\"\\n\"</span>;<br>\t\t&#125;<br><br>\t&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>\n<h2 id=\"图论\"><a href=\"#图论\" class=\"headerlink\" title=\"图论\"></a>图论</h2><p>图论是一个很重要的把抽象问题转发为程序的思想.我们在此处会举一些例子来说明图论的应用.有关这个数据结构的解释可以在后面的<a href=\"#数据结构\">数据结构</a>章节找到</p>\n<p>图论的一些应用:</p>\n<p>//还没学,先放着.</p>\n<h2 id=\"高精度算法\"><a href=\"#高精度算法\" class=\"headerlink\" title=\"高精度算法\"></a>高精度算法</h2><p>高精度算法可用于求解大数运算,这是任何一种数据类型(包括longl ong)都无法做到的,接下来就先贴几个代码来解释,以后再来写详细的笔记.</p>\n<p>高精度加法(HDU1002)</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;iostream&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;cstdint&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;string&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;vector&gt;</span></span><br><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-built_in\">std</span>;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span><br></span>&#123;<br>\t<span class=\"hljs-comment\">//Get case number</span><br>\t<span class=\"hljs-keyword\">int</span> case_number = <span class=\"hljs-number\">0</span>;<br>\t<span class=\"hljs-built_in\">cin</span> &gt;&gt; case_number;<br>\t<span class=\"hljs-comment\">//Get input numbers  of each case</span><br>\t<span class=\"hljs-comment\">//开始输出结果</span><br>\t<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; case_number; i++)<br>\t&#123;<br><br>\t\t<span class=\"hljs-built_in\">string</span> num_a;<br>\t\t<span class=\"hljs-built_in\">string</span> num_b;<br>\t\t<span class=\"hljs-built_in\">cin</span> &gt;&gt; num_a;<br>\t\t<span class=\"hljs-built_in\">cin</span> &gt;&gt; num_b;<br>\t\t<span class=\"hljs-comment\">//Start caculate</span><br>\t\t<span class=\"hljs-comment\">//Confirm length</span><br>\t\t<span class=\"hljs-keyword\">int</span> length = <span class=\"hljs-number\">0</span>;<br>\t\t<span class=\"hljs-keyword\">if</span> (num_a.length() &gt;= num_b.length())<br>\t\t&#123;<br>\t\t\tlength = num_a.length() + <span class=\"hljs-number\">1</span>;<br>\t\t&#125;<br>\t\t<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (num_a.length() &lt; num_b.length())<br>\t\t&#123;<br>\t\t\tlength = num_b.length() + <span class=\"hljs-number\">1</span>;<br>\t\t&#125;<br>\t\t<span class=\"hljs-comment\">//Creat result</span><br>\t\t<span class=\"hljs-function\"><span class=\"hljs-built_in\">vector</span>&lt;<span class=\"hljs-keyword\">int</span>&gt; <span class=\"hljs-title\">result</span><span class=\"hljs-params\">(length)</span></span>;<br>\t\t<span class=\"hljs-keyword\">int</span> nextline = <span class=\"hljs-number\">0</span>; <span class=\"hljs-comment\">//进位</span><br>\t\t<span class=\"hljs-keyword\">int</span> ifline = <span class=\"hljs-number\">0</span>;<br>\t\t<span class=\"hljs-keyword\">int</span> Tresult = <span class=\"hljs-number\">0</span>; <span class=\"hljs-comment\">//每位结果</span><br>\t\t<span class=\"hljs-keyword\">int</span> numberA = <span class=\"hljs-number\">0</span>; <span class=\"hljs-comment\">//A的位</span><br>\t\t<span class=\"hljs-keyword\">int</span> numberB = <span class=\"hljs-number\">0</span>; <span class=\"hljs-comment\">//B的位</span><br>\t\t<span class=\"hljs-comment\">//开始读数</span><br>\t\t<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> j = <span class=\"hljs-number\">0</span>; j &lt; length; j++)<br>\t\t&#123;<br>\t\t\tnumberA = (num_a.length() - j - <span class=\"hljs-number\">1</span>); <span class=\"hljs-comment\">//A读数的位</span><br>\t\t\tnumberB = (num_b.length() - j - <span class=\"hljs-number\">1</span>); <span class=\"hljs-comment\">//B读数的位</span><br>\t\t\t<span class=\"hljs-keyword\">int</span> tempA = <span class=\"hljs-number\">0</span>;\t\t\t\t\t\t<span class=\"hljs-comment\">//A临时读数</span><br>\t\t\t<span class=\"hljs-keyword\">int</span> tempB = <span class=\"hljs-number\">0</span>;\t\t\t\t\t\t<span class=\"hljs-comment\">//B临时读数</span><br>\t\t\t<span class=\"hljs-comment\">//读A</span><br>\t\t\t<span class=\"hljs-keyword\">if</span> (numberA &gt;= <span class=\"hljs-number\">0</span>)<br>\t\t\t&#123;<br>\t\t\t\ttempA = num_a[numberA];<br>\t\t\t\ttempA = tempA - <span class=\"hljs-string\">'0'</span>;<br>\t\t\t&#125;<br>\t\t\t<span class=\"hljs-comment\">//读B</span><br>\t\t\t<span class=\"hljs-keyword\">if</span> (numberB &gt;= <span class=\"hljs-number\">0</span>)<br>\t\t\t&#123;<br>\t\t\t\ttempB = num_b[numberB];<br>\t\t\t\ttempB = tempB - <span class=\"hljs-string\">'0'</span>;<br>\t\t\t&#125;<br>\t\t\t<span class=\"hljs-comment\">//Input result</span><br>\t\t\t<span class=\"hljs-keyword\">int</span> tempR = <span class=\"hljs-number\">0</span>;<br><br>\t\t\t<span class=\"hljs-keyword\">if</span> (j == <span class=\"hljs-number\">0</span>)<br>\t\t\t&#123;<br>\t\t\t\ttempR = tempA + tempB; <span class=\"hljs-comment\">//在不进位时结果</span><br>\t\t\t&#125;<br>\t\t\t<span class=\"hljs-keyword\">else</span><br>\t\t\t&#123;<br>\t\t\t\ttempR = tempA + tempB + nextline; <span class=\"hljs-comment\">//进位结果</span><br>\t\t\t&#125;<br><br>\t\t\t<span class=\"hljs-comment\">//判断大于10</span><br><br>\t\t\t<span class=\"hljs-keyword\">if</span> (j != (length - <span class=\"hljs-number\">1</span>))<br>\t\t\t&#123;<br>\t\t\t\t<span class=\"hljs-keyword\">if</span> (tempR &gt;= <span class=\"hljs-number\">10</span>)<br>\t\t\t\t&#123;<br>\t\t\t\t\tifline = <span class=\"hljs-number\">1</span>;<br>\t\t\t\t\t<span class=\"hljs-comment\">//取模结果输出</span><br>\t\t\t\t\ttempR = tempR % <span class=\"hljs-number\">10</span>;<br>\t\t\t\t&#125;<br>\t\t\t\t<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (tempR &lt; <span class=\"hljs-number\">10</span>)<br>\t\t\t\t&#123;<br>\t\t\t\t\tifline = <span class=\"hljs-number\">0</span>;<br>\t\t\t\t&#125;<br>\t\t\t&#125;<br><br>\t\t\t<span class=\"hljs-keyword\">int</span> number = length - j - <span class=\"hljs-number\">1</span>;<br><br>\t\t\tTresult = tempR;<br><br>\t\t\tresult[number] = Tresult;<br>\t\t\t<span class=\"hljs-keyword\">if</span> (ifline == <span class=\"hljs-number\">1</span>)<br>\t\t\t&#123;<br>\t\t\t\tnextline = <span class=\"hljs-number\">1</span>;<br>\t\t\t&#125;<br>\t\t\t<span class=\"hljs-keyword\">else</span><br>\t\t\t&#123;<br>\t\t\t\tnextline = <span class=\"hljs-number\">0</span>;<br>\t\t\t&#125;<br>\t\t&#125;<br>\t\t<span class=\"hljs-comment\">//Output results</span><br><br>\t\t<span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">\"Case \"</span> &lt;&lt; i + <span class=\"hljs-number\">1</span> &lt;&lt; <span class=\"hljs-string\">\":\"</span><br>\t\t\t &lt;&lt; <span class=\"hljs-string\">\"\\n\"</span>;<br>\t\t<span class=\"hljs-built_in\">cout</span> &lt;&lt; num_a &lt;&lt; <span class=\"hljs-string\">\" + \"</span> &lt;&lt; num_b &lt;&lt; <span class=\"hljs-string\">\" = \"</span>;<br>\t\t<span class=\"hljs-keyword\">int</span> startout = <span class=\"hljs-number\">0</span>;<br><br>\t\t<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> l = <span class=\"hljs-number\">1</span>; l &lt; length; l++) <span class=\"hljs-comment\">//输出一个数</span><br>\t\t&#123;<br><br>\t\t\t<span class=\"hljs-keyword\">if</span> (result[<span class=\"hljs-number\">0</span>] != <span class=\"hljs-number\">0</span> &amp;&amp; l == <span class=\"hljs-number\">1</span>)<br>\t\t\t&#123;<br>\t\t\t\t<span class=\"hljs-built_in\">cout</span> &lt;&lt; result[<span class=\"hljs-number\">0</span>];<br>\t\t\t\tstartout = <span class=\"hljs-number\">1</span>;<br>\t\t\t&#125;<br>\t\t\t<span class=\"hljs-keyword\">if</span> (result[l] != <span class=\"hljs-number\">0</span>)<br>\t\t\t&#123;<br>\t\t\t\tstartout = <span class=\"hljs-number\">1</span>;<br>\t\t\t&#125;<br>\t\t\t<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (l == (length - <span class=\"hljs-number\">1</span>))<br>\t\t\t&#123;<br>\t\t\t\tstartout = <span class=\"hljs-number\">1</span>;<br>\t\t\t&#125;<br><br>\t\t\t<span class=\"hljs-keyword\">if</span> (startout == <span class=\"hljs-number\">0</span>)<br>\t\t\t&#123;<br>\t\t\t\t<span class=\"hljs-keyword\">continue</span>;<br>\t\t\t&#125;<br>\t\t\t<span class=\"hljs-built_in\">cout</span> &lt;&lt; result[l];<br>\t\t&#125;<br>\t\t<span class=\"hljs-comment\">//输出结束</span><br>\t\t<span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">\"\\n\"</span>;<br>\t\t<span class=\"hljs-comment\">//空行</span><br>\t\t<span class=\"hljs-keyword\">if</span> (i != (case_number - <span class=\"hljs-number\">1</span>))<br>\t\t&#123;<br>\t\t\t<span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">\"\\n\"</span>;<br>\t\t&#125;<br><br>\t&#125; <span class=\"hljs-comment\">//结束单个循环</span><br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>这个算法嘛,写的其实很累赘,但是其中一些进位和控制输出体现了高精度算法所要求的强大的逻辑性</p>\n<p>高精度排序(洛谷P1781)</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;bits/stdc++.h&gt;</span></span><br><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-built_in\">std</span>;<br><br><span class=\"hljs-keyword\">char</span> president[<span class=\"hljs-number\">20</span>][<span class=\"hljs-number\">101</span>];<br><span class=\"hljs-keyword\">int</span> bits_number = <span class=\"hljs-number\">0</span>;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">bool</span> <span class=\"hljs-title\">compare</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> a, <span class=\"hljs-keyword\">int</span> b)</span><br></span>&#123;<br>    <span class=\"hljs-keyword\">return</span> president[a][bits_number] &gt; president[b][bits_number];<br>&#125;;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span><br></span>&#123;<br>    <span class=\"hljs-keyword\">int</span> number = <span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-built_in\">cin</span> &gt;&gt; number;<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; number; i++) <span class=\"hljs-comment\">//Get the votes of president</span><br>    &#123;<br>        <span class=\"hljs-built_in\">cin</span> &gt;&gt; president[i];<br>    &#125;<br>    <span class=\"hljs-comment\">//ok,let's compare</span><br>    <span class=\"hljs-built_in\">queue</span>&lt;<span class=\"hljs-keyword\">int</span>&gt; president_list; <span class=\"hljs-comment\">// the presidents left</span><br><br>    <span class=\"hljs-keyword\">int</span> maxbit = <span class=\"hljs-number\">0</span>; <span class=\"hljs-comment\">// the max votes bit president</span><br><br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; number; i++) <span class=\"hljs-comment\">//get the bits of each president</span><br>    &#123;<br>        <span class=\"hljs-keyword\">int</span> temp_bits = <span class=\"hljs-number\">0</span>;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> j = <span class=\"hljs-number\">0</span>; j &lt; <span class=\"hljs-number\">100</span>; j++) <span class=\"hljs-comment\">// get the bits</span><br>        &#123;<br>            <span class=\"hljs-keyword\">if</span> (president[i][j] != <span class=\"hljs-number\">0</span>)<br>            &#123;<br>                temp_bits++;<br>            &#125;<br>            <span class=\"hljs-keyword\">else</span><br>            &#123;<br>                <span class=\"hljs-keyword\">break</span>;<br>            &#125;<br>        &#125;<br>        <span class=\"hljs-comment\">//this guy's bit has been recorded</span><br>        <span class=\"hljs-keyword\">if</span> (temp_bits &gt;= maxbit)<br>        &#123;<br>            <br>            president_list.push(i);<br>            <span class=\"hljs-keyword\">if</span> (temp_bits &gt; maxbit)<br>            &#123;<br>                president_list = <span class=\"hljs-built_in\">queue</span>&lt;<span class=\"hljs-keyword\">int</span>&gt;();<br>                president_list.push(i);<br>            &#125;<br>            maxbit = temp_bits;<br>        &#125;<br>    &#125;<br>    <span class=\"hljs-comment\">//WARNING: THE NUMBER OF PRESIDENT MUST BE PLUSED ONE!</span><br>    <span class=\"hljs-comment\">//now,compare the president in queue!</span><br>    <span class=\"hljs-built_in\">vector</span>&lt;<span class=\"hljs-keyword\">int</span>&gt; last_list;<br>    <span class=\"hljs-keyword\">while</span> (!president_list.empty())<br>    &#123;<br>        last_list.push_back(president_list.front());<br>        president_list.pop();<br>    &#125;<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; maxbit; i++)<br>    &#123;<br>        bits_number = i;<br>        sort(last_list.<span class=\"hljs-built_in\">begin</span>(), last_list.<span class=\"hljs-built_in\">end</span>(), compare);<br>        <span class=\"hljs-keyword\">int</span> erase_bit = president[last_list[<span class=\"hljs-number\">0</span>]][i];<br><br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">auto</span> it = last_list.<span class=\"hljs-built_in\">begin</span>(); it != last_list.<span class=\"hljs-built_in\">end</span>(); it++)<br>        &#123;<br>            <span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">\"\"</span>;<br>            <span class=\"hljs-keyword\">if</span> (president[*it][i] &lt; erase_bit)<br>            &#123;<br>                last_list.erase(it);<br>                it--;<br>                <span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">\"\"</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class=\"hljs-built_in\">cout</span> &lt;&lt; last_list[<span class=\"hljs-number\">0</span>] + <span class=\"hljs-number\">1</span> &lt;&lt; <span class=\"hljs-built_in\">endl</span>;<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; maxbit; i++)<br>    &#123;<br>        <span class=\"hljs-built_in\">cout</span> &lt;&lt; president[last_list[<span class=\"hljs-number\">0</span>]][i];<br>    &#125;<br><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>当然,可以学一门Java/python来应付这个……</p>\n<p>这个我们后面可能会开Java/python的笔记.</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"枚举\"><a href=\"#枚举\" class=\"headerlink\" title=\"枚举\"></a>枚举</h2><p>枚举可以说是算法中最最最最弱智的一种算法了,其基本原理就是根据题目意思将所有可能的情况都试一遍,如果达到题目要求就记录下来或者输出.没有达到题目要求就跳过.但是,枚举也是需要一些技巧的,否则你要把所有的情况都真的试一下后,会遭遇可怜的TLE.</p>\n<p>首先,如果遇到非正即反的枚举情况(即情况可以用0或1表示),可以尝试使用<a href=\"#bitset\">bitset</a>进行救命,因为bitset占用空间少,且只模拟0和1两种情况.</p>\n<p>对于某些特殊情况的枚举,可以考虑用前一层枚举的情况直接通过计算得出后面的枚举结果,比如说熄灯问题(这是一个我看过的MOOC的问题,现在不太好解释),这样可以大大减少枚举的时间复杂度.</p>\n<p>枚举的实现一般是通过循环实现的.至于怎么循环,怎么嵌套,我想我不必再过多解释<strong>.但值得注意的是,循环变量一定要设置好!!!(尽量自己写循环结构,用vscode自动生成的可能会搞错)且一定要在此时记录循环变量的含义(最好注释下来).这样真的很有利于后面的判断和调试!</strong></p>\n<p>称硬币问题的枚举:(POJ1013)</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;iostream&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;string.h&gt;</span></span><br><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-built_in\">std</span>;<br><br><span class=\"hljs-keyword\">char</span> eleft[<span class=\"hljs-number\">3</span>][<span class=\"hljs-number\">7</span>];   <span class=\"hljs-comment\">//the coin status of eleft</span><br><span class=\"hljs-keyword\">char</span> eright[<span class=\"hljs-number\">3</span>][<span class=\"hljs-number\">7</span>];  <span class=\"hljs-comment\">//the coin status of eright</span><br><span class=\"hljs-keyword\">char</span> eresult[<span class=\"hljs-number\">3</span>][<span class=\"hljs-number\">7</span>]; <span class=\"hljs-comment\">//the eresult of each try</span><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">bool</span> <span class=\"hljs-title\">get_result</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">char</span> coin, <span class=\"hljs-keyword\">bool</span> isLight)</span><br></span>&#123;<br>    <span class=\"hljs-keyword\">if</span> (isLight)<br>    &#123;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> k = <span class=\"hljs-number\">0</span>; k &lt; <span class=\"hljs-number\">3</span>; k++) <span class=\"hljs-comment\">//Judge 3 cases</span><br>        &#123;<br>            <span class=\"hljs-keyword\">if</span> (eresult[k][<span class=\"hljs-number\">0</span>] == <span class=\"hljs-string\">'e'</span>) <span class=\"hljs-comment\">//this case is even</span><br>            &#123;<br>                <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">strchr</span>(eleft[k], coin) != <span class=\"hljs-literal\">NULL</span> || <span class=\"hljs-built_in\">strchr</span>(eright[k], coin) != <span class=\"hljs-literal\">NULL</span>)<br>                &#123;<br>                    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>                &#125;<br>            &#125;<br>            <span class=\"hljs-keyword\">if</span> (eresult[k][<span class=\"hljs-number\">0</span>] == <span class=\"hljs-string\">'u'</span>) <span class=\"hljs-comment\">//this case is up</span><br>            &#123;<br>                <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">strchr</span>(eright[k], coin) == <span class=\"hljs-literal\">NULL</span>)<br>                &#123;<br>                    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>                &#125;<br>            &#125;<br>            <span class=\"hljs-keyword\">if</span> (eresult[k][<span class=\"hljs-number\">0</span>] == <span class=\"hljs-string\">'d'</span>) <span class=\"hljs-comment\">//this case is down</span><br>            &#123;<br>                <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">strchr</span>(eleft[k], coin) == <span class=\"hljs-literal\">NULL</span>)<br>                &#123;<br>                    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class=\"hljs-keyword\">else</span><br>    &#123;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> k = <span class=\"hljs-number\">0</span>; k &lt; <span class=\"hljs-number\">3</span>; k++) <span class=\"hljs-comment\">//Judge 3 cases</span><br>        &#123;<br>            <span class=\"hljs-keyword\">if</span> (eresult[k][<span class=\"hljs-number\">0</span>] == <span class=\"hljs-string\">'e'</span>) <span class=\"hljs-comment\">//this case is even</span><br>            &#123;<br>                <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">strchr</span>(eleft[k], coin) != <span class=\"hljs-literal\">NULL</span> || <span class=\"hljs-built_in\">strchr</span>(eright[k], coin) != <span class=\"hljs-literal\">NULL</span>)<br>                &#123;<br>                    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>                &#125;<br>            &#125;<br>            <span class=\"hljs-keyword\">if</span> (eresult[k][<span class=\"hljs-number\">0</span>] == <span class=\"hljs-string\">'u'</span>) <span class=\"hljs-comment\">//this case is up</span><br>            &#123;<br>                <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">strchr</span>(eleft[k], coin) == <span class=\"hljs-literal\">NULL</span>)<br>                &#123;<br>                    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>                &#125;<br>            &#125;<br>            <span class=\"hljs-keyword\">if</span> (eresult[k][<span class=\"hljs-number\">0</span>] == <span class=\"hljs-string\">'d'</span>) <span class=\"hljs-comment\">//this case is down</span><br>            &#123;<br>                <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">strchr</span>(eright[k], coin) == <span class=\"hljs-literal\">NULL</span>)<br>                &#123;<br>                    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<br>&#125;;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span><br></span>&#123;<br>    <span class=\"hljs-keyword\">int</span> case_number = <span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-built_in\">cin</span> &gt;&gt; case_number;                   <span class=\"hljs-comment\">//Get case number</span><br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; case_number; i++) <span class=\"hljs-comment\">//Output the eresult of each case</span><br>    &#123;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> j = <span class=\"hljs-number\">0</span>; j &lt; <span class=\"hljs-number\">3</span>; j++)<br>        &#123;<br>            <span class=\"hljs-built_in\">cin</span> &gt;&gt; eleft[j] &gt;&gt; eright[j] &gt;&gt; eresult[j];<br>        &#125;<br><br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">char</span> j = <span class=\"hljs-string\">'A'</span>; j &lt;= <span class=\"hljs-string\">'L'</span>; j++)<br>        &#123;<br>            <span class=\"hljs-keyword\">bool</span> isLight = <span class=\"hljs-literal\">true</span>; <span class=\"hljs-comment\">//The fake coin is light</span><br>            <span class=\"hljs-keyword\">if</span> (get_result(j, isLight))<br>                <span class=\"hljs-built_in\">cout</span> &lt;&lt; j &lt;&lt; <span class=\"hljs-string\">\" is the counterfeit coin and it is light.\"</span> &lt;&lt; <span class=\"hljs-built_in\">endl</span>;<br>            isLight = <span class=\"hljs-literal\">false</span>;<br>            <span class=\"hljs-keyword\">if</span> (get_result(j, isLight))<br>                <span class=\"hljs-built_in\">cout</span> &lt;&lt; j &lt;&lt; <span class=\"hljs-string\">\" is the counterfeit coin and it is heavy.\"</span> &lt;&lt; <span class=\"hljs-built_in\">endl</span>;<br>        &#125;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>关于枚举,先写到这吧,后面如果遇到一些古怪的枚举方式,再补.</p>\n<h2 id=\"模拟\"><a href=\"#模拟\" class=\"headerlink\" title=\"模拟\"></a>模拟</h2><p>模拟,顾名思义,就是根据题目所给的实现方式和思想写代码,这种题目一般来说都伴随着大量的判断和循环,且隐含着一些算法思想.若是单纯的硬模拟可能会导致TLE.</p>\n<p>模拟题的数据一般而言会实现地十分古怪,所以你必须考虑一些特殊情况.所以写模拟题最烦人地地方就在于DEBUG!你怎么知道你是不是漏了情况!</p>\n<p>模拟题的写法比较灵活多样,并且需要很强的文字阅读能力来理解题意.而且模拟题容易转变为其他类型的算法题,所以也不好直接讨论.</p>\n<p>//举例几道题,凑合得了,模拟的笔记我没法写…</p>\n<h2 id=\"贪心\"><a href=\"#贪心\" class=\"headerlink\" title=\"贪心\"></a>贪心</h2><p>贪心算法就是在进行每一步操作时尽可能寻找最优解,此种算法可能需要依托一些数据结构(队列;优先队列&lt;堆&gt;)来实现.</p>\n<p>接下来看一道使用贪心算法的题目:</p>\n<p>此题使用了优先队列的思想.优先队列其实就是一种贪心,即:先取出优先级最大的元素.而贪心算法的原理就是先执行最优步骤,等到最优步骤执行完后再执行次优步骤.</p>\n<p>上代码:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;bits/stdc++.h&gt;</span></span><br><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-built_in\">std</span>;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span><br></span>&#123;<br>    <span class=\"hljs-keyword\">int</span> qty_apple;<br>    <span class=\"hljs-built_in\">cin</span>&gt;&gt;qty_apple;<br>    priority_queue&lt;<span class=\"hljs-keyword\">int</span>, <span class=\"hljs-built_in\">vector</span>&lt;<span class=\"hljs-keyword\">int</span>&gt;, greater&lt;<span class=\"hljs-keyword\">int</span>&gt;&gt; apples;<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; qty_apple; i++)<br>    &#123;<br>        <span class=\"hljs-keyword\">int</span> temp_in;<br>        <span class=\"hljs-built_in\">cin</span> &gt;&gt; temp_in;<br>        apples.push(temp_in);<br>    &#125;<br>    <span class=\"hljs-keyword\">int</span> sum = <span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-literal\">true</span>)<br>    &#123;<br>        <span class=\"hljs-keyword\">int</span> t_effort = <span class=\"hljs-number\">0</span>;<br>        t_effort += apples.top();<br>        apples.pop();<br>        t_effort += apples.top();<br>        apples.pop();<br>        sum += t_effort;<br>        <span class=\"hljs-keyword\">if</span> (apples.empty())<br>            <span class=\"hljs-keyword\">break</span>;<br>        apples.push(t_effort);<br>    &#125;<br>    <span class=\"hljs-built_in\">cout</span> &lt;&lt; sum &lt;&lt; <span class=\"hljs-built_in\">endl</span>;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h2 id=\"递归\"><a href=\"#递归\" class=\"headerlink\" title=\"递归\"></a>递归</h2><p>递归就是函数自己调用自己.这样就能实现一些较为复杂且很难单纯用循环写出来的算法.</p>\n<p>递归的一个典型例子就是<strong><em>汉诺塔问题</em></strong>,这个问题不仅是一个对递归思想的很好解释,同时也有利于深刻了解递归的原理.</p>\n<p>接下来看汉诺塔问题</p>\n<p>汉诺塔 （ 又称河内塔 ） 问题是源于印度一个古老传说的益智玩具 。 古代有一个梵塔 ， 塔内有座 A 、 B 、 C ， A 座上有 64 个盘子 ， 盘子大小不等 ， 大的在下 ， 小的在上 。 有一个和尚想把盘子从 A 座移到 B 座 ， 但每次只能允许移动一个盘子 ， 并且在移动过程中 ， 3 个座上的盘始终保持大盘在下，小盘在上。在移动过程中可以利用 B 座.</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;iostream&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-built_in\">std</span>;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">move</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> n, <span class=\"hljs-keyword\">char</span> A, <span class=\"hljs-keyword\">char</span> B,<span class=\"hljs-keyword\">char</span> C)</span></span>;<span class=\"hljs-comment\">//声明函数(递归的调用)</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span><br></span>&#123; <br>\t<span class=\"hljs-keyword\">int</span> discCount;<br>    <span class=\"hljs-built_in\">cin</span>&gt;&gt;discCount;<br>    <span class=\"hljs-built_in\">move</span>(discCount,<span class=\"hljs-string\">'A'</span>,<span class=\"hljs-string\">'B'</span>,<span class=\"hljs-string\">'C'</span>);<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">move</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> n, <span class=\"hljs-keyword\">char</span> A, <span class=\"hljs-keyword\">char</span> B,<span class=\"hljs-keyword\">char</span> C)</span><span class=\"hljs-comment\">//自定义函数</span><br></span>&#123;<br>\t<span class=\"hljs-keyword\">if</span>(n==<span class=\"hljs-number\">0</span>)<span class=\"hljs-comment\">//盘子为0的时候返回</span><br>\t&#123;<br>\t\t<span class=\"hljs-keyword\">return</span>;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">else</span><br>\t&#123;<br>\t\t<span class=\"hljs-comment\">//算法分析:要使得最底下最大的盘子能移到C,必须先把n-1个盘子移到B,于是有:</span><br>        <span class=\"hljs-comment\">//我们不需要管下一个递归是怎么解决n-1个盘子移动问题的,我们只负责命令它执行:</span><br>        <span class=\"hljs-built_in\">move</span>(n<span class=\"hljs-number\">-1</span>,A,C,B);<span class=\"hljs-comment\">//先把n-1个盘子从A移动到B,借助C</span><br>        <span class=\"hljs-comment\">//(此时在递归程序里的调用依然是A移动到C,但盘子的序号变了)</span><br>        <span class=\"hljs-comment\">//当作完成了n-1个盘子的移动,最后有:</span><br>\t\t<span class=\"hljs-built_in\">cout</span>&lt;&lt;A&lt;&lt;<span class=\"hljs-string\">\"--&gt;\"</span>&lt;&lt;C&lt;&lt;<span class=\"hljs-built_in\">endl</span>;<span class=\"hljs-comment\">//把最后一个盘子(相对最大的)从A移动到C</span><br>\t\t<span class=\"hljs-built_in\">move</span>(n<span class=\"hljs-number\">-1</span>,B,A,C);<span class=\"hljs-comment\">//最后把n-1个盘子从B移动到C,使用A作为中转.</span><br>        <span class=\"hljs-comment\">//因为此时A上面已经没有比相对最大的盘子大的了</span><br>\t\t<span class=\"hljs-keyword\">return</span>;<span class=\"hljs-comment\">//移动完成,程序结束</span><br>\t&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h2 id=\"深度优先搜索-DFS\"><a href=\"#深度优先搜索-DFS\" class=\"headerlink\" title=\"深度优先搜索(DFS)\"></a>深度优先搜索(DFS)</h2><p>深度优先搜索,即先想某一纵深进行搜索,由于主要是写给自己看的,所以就从简了,简而言之,其是隐式地运用了栈的思想实现的.</p>\n<p>先看一个八皇后的问题(洛谷P1219)</p>\n<hr>\n<p>题目描述</p>\n<p>检查一个如下的6 x 6的跳棋棋盘，有六个棋子被放置在棋盘上，使得每行、每列有且只有一个，每条对角线(包括两条主对角线的所有平行线)上至多有一个棋子。</p>\n<p><img src=\"/img/60.png\" alt=\"img\"></p>\n<p>上面的布局可以用序列2 4 6 1 3 5来描述，第i个数字表示在第i行的相应位置有一个棋子，如下：</p>\n<p>行号 1 2 3 4 5 6</p>\n<p>列号 2 4 6 1 3 5</p>\n<p>这只是跳棋放置的一个解。请编一个程序找出所有跳棋放置的解。并把它们以上面的序列方法输出。解按字典顺序排列。请输出前3个解。最后一行是解的总个数。</p>\n<p>输入格式</p>\n<p>一个数字N (6 &lt;= N &lt;= 13) 表示棋盘是N x N大小的。</p>\n<p>输出格式</p>\n<p>前三行为前三个解，每个解的两个数字之间用一个空格隔开。第四行只有一个数字，表示解的总数。</p>\n<hr>\n<p>接下来请看代码</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;bits/stdc++.h&gt;</span></span><br><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-built_in\">std</span>;<br><br><span class=\"hljs-keyword\">int</span> ans[<span class=\"hljs-number\">14</span>] = &#123;<span class=\"hljs-number\">0</span>&#125;;<br><span class=\"hljs-keyword\">int</span> vline[<span class=\"hljs-number\">14</span>] = &#123;<span class=\"hljs-number\">0</span>&#125;;<br><span class=\"hljs-keyword\">int</span> lcross[<span class=\"hljs-number\">14</span>] = &#123;<span class=\"hljs-number\">0</span>&#125;;<br><span class=\"hljs-keyword\">int</span> rcross[<span class=\"hljs-number\">114</span>] = &#123;<span class=\"hljs-number\">0</span>&#125;; <span class=\"hljs-comment\">//分别对应列 左 右 对角线(对角线请注意加一个n，n=100)</span><br><span class=\"hljs-keyword\">int</span> sum = <span class=\"hljs-number\">0</span>;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">dfs</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> <span class=\"hljs-built_in\">width</span>, <span class=\"hljs-keyword\">int</span> <span class=\"hljs-built_in\">line</span>)</span><br></span>&#123;<br>    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">line</span> &gt; <span class=\"hljs-built_in\">width</span>) <span class=\"hljs-comment\">//达到结果就输出(深搜结束标识)</span><br>    &#123;<br>        sum++;<br>        <span class=\"hljs-keyword\">if</span> (sum &lt;= <span class=\"hljs-number\">3</span>)<br>        &#123;<br>            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> j = <span class=\"hljs-number\">1</span>; j &lt;= <span class=\"hljs-built_in\">width</span>; j++) <span class=\"hljs-comment\">//这里的i代表行号</span><br>            &#123;<br>                <span class=\"hljs-built_in\">cout</span> &lt;&lt; ans[j] &lt;&lt; <span class=\"hljs-string\">\" \"</span>;<br>            &#125;<br>            <span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-built_in\">endl</span>;<br>        &#125;<br>        <br>        <span class=\"hljs-keyword\">return</span>;<br>    &#125;<br>    <span class=\"hljs-comment\">//正式算法</span><br>    <span class=\"hljs-comment\">//占位</span><br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">1</span>; i &lt;= <span class=\"hljs-built_in\">width</span>; i++) <span class=\"hljs-comment\">//排查未用然后使用</span><br>    &#123;<br>        <span class=\"hljs-keyword\">if</span> (vline[i] != <span class=\"hljs-number\">1</span> &amp;&amp; lcross[i + <span class=\"hljs-built_in\">line</span>] != <span class=\"hljs-number\">1</span> &amp;&amp; rcross[i - <span class=\"hljs-built_in\">line</span> + <span class=\"hljs-number\">100</span>] != <span class=\"hljs-number\">1</span>)<br>        &#123;<br>            <span class=\"hljs-comment\">//占用</span><br>            ans[<span class=\"hljs-built_in\">line</span>] = i;<br>            vline[i] = <span class=\"hljs-number\">1</span>;<br>            lcross[i + <span class=\"hljs-built_in\">line</span>] = <span class=\"hljs-number\">1</span>;<br>            rcross[i - <span class=\"hljs-built_in\">line</span> + <span class=\"hljs-number\">100</span>] = <span class=\"hljs-number\">1</span>;<br>            dfs(<span class=\"hljs-built_in\">width</span>, <span class=\"hljs-built_in\">line</span> + <span class=\"hljs-number\">1</span>);<br>            <span class=\"hljs-comment\">//你应当特别注意这一步!这里是深搜向下扩展的重要步骤!!!</span><br>            <span class=\"hljs-comment\">//回溯(在上面的程序结束后,意味着深搜已经完成并return,</span><br>            <span class=\"hljs-comment\">//那么在return下面必须将程序的状态恢复到扩展下一层前的状态!!!</span><br>            <span class=\"hljs-comment\">//注意这很重要,并且可能需要考虑如何做这样一件事)</span><br>            vline[i] = <span class=\"hljs-number\">0</span>;<br>            lcross[i + <span class=\"hljs-built_in\">line</span>] = <span class=\"hljs-number\">0</span>;<br>            rcross[i - <span class=\"hljs-built_in\">line</span> + <span class=\"hljs-number\">100</span>] = <span class=\"hljs-number\">0</span>;<br>        &#125;<br>    &#125;<br>&#125;;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span><br></span>&#123;<br>    <span class=\"hljs-keyword\">int</span> <span class=\"hljs-built_in\">width</span> = <span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-built_in\">cin</span> &gt;&gt; <span class=\"hljs-built_in\">width</span>;  <span class=\"hljs-comment\">//获取棋盘的宽度</span><br>    dfs(<span class=\"hljs-built_in\">width</span>, <span class=\"hljs-number\">1</span>); <span class=\"hljs-comment\">//从第1行开始</span><br>    <span class=\"hljs-built_in\">cout</span>&lt;&lt;sum;<br><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>这只是一个深搜的例子,后面我会继续扩充一些其他的例子以及用法!</p>\n<h2 id=\"广度优先搜索\"><a href=\"#广度优先搜索\" class=\"headerlink\" title=\"广度优先搜索\"></a>广度优先搜索</h2><p>广度优先搜索使用了队列的思想.广度优先搜索总是先搜索步长最近的搜索结果,这样就可以求解一些类似于最短路径之类的问题.</p>\n<p>广度优先搜索的结果可以搜索到的结果保证步长最短.</p>\n<h2 id=\"动态规划\"><a href=\"#动态规划\" class=\"headerlink\" title=\"动态规划\"></a>动态规划</h2><p>动态规划就是使用历史数据来避免重复计算,从而拆分求解一些复杂的问题.</p>\n<h3 id=\"一维动态规划\"><a href=\"#一维动态规划\" class=\"headerlink\" title=\"一维动态规划\"></a>一维动态规划</h3><p>1.建立动态规划数组dp[]</p>\n<p>2.确定dp[i]的含义</p>\n<p>3.确定递推表达式</p>\n<p>4.找出初始值用于递推</p>\n<p>5.由是,可以求出dp[i]的值</p>\n<p>接下来看一道简单的动态规划题目:</p>\n<p>青蛙跳台阶问题:</p>\n<blockquote>\n<p>问题描述：一只青蛙一次可以跳上1级台阶，也可以跳上2级。求该青蛙跳上一个n级的台阶总共有多少种跳法。 </p>\n</blockquote>\n<p>1.建立dp[]</p>\n<p>2.确定dp[i] 的含义,这里的dp[i]的含义是第i个台阶青蛙要跳的步数.</p>\n<p>3.<strong>找出关系式</strong>:dp[i]=dp[i-2]+dp[i-1],由于青蛙可以从i-2级或i-1级跳上来,所以第i层的情况数就是i-2层的情况和i-1层相加.</p>\n<p>4.初始值:dp[0]=0,dp[1]=1,dp[2]=2,OK!</p>\n<p>5.编写程序运行:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;bits/stdc++.h&gt;</span></span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span><br></span>&#123;<br>    <span class=\"hljs-keyword\">int</span> n;<span class=\"hljs-comment\">//the floor </span><br>    <span class=\"hljs-built_in\">std</span>::<span class=\"hljs-built_in\">cin</span> &gt;&gt; n;<br>    <span class=\"hljs-keyword\">int</span> dp[<span class=\"hljs-number\">100</span>] = &#123;<span class=\"hljs-number\">0</span>&#125;;<br>    dp[<span class=\"hljs-number\">0</span>] = <span class=\"hljs-number\">0</span>;<br>    dp[<span class=\"hljs-number\">1</span>] = <span class=\"hljs-number\">1</span>;<br>    dp[<span class=\"hljs-number\">2</span>] = <span class=\"hljs-number\">2</span>;<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">3</span>; i &lt;= <span class=\"hljs-number\">100</span>; i++)<br>    &#123;<br>        dp[i] = dp[i - <span class=\"hljs-number\">2</span>] + dp[i - <span class=\"hljs-number\">1</span>];<br>    &#125;<br>    <span class=\"hljs-built_in\">std</span>::<span class=\"hljs-built_in\">cout</span> &lt;&lt; dp[n] &lt;&lt; <span class=\"hljs-built_in\">std</span>::<span class=\"hljs-built_in\">endl</span>;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h3 id=\"动态规划的背包问题\"><a href=\"#动态规划的背包问题\" class=\"headerlink\" title=\"动态规划的背包问题\"></a>动态规划的背包问题</h3><p><strong>0-1背包问题的递推关系</strong></p>\n<p>f[j]=max(f[j],f[j-price[i]]+value[i])(考虑第i个产品的购买问题)</p>\n<p>​                ↑不改变背包       ↑改变背包,价值为钱减少后的背包里的价值(当作已算出)加上现有商品的价值</p>\n<p>最优方案就是比较这两种方案，哪个会更好些:</p>\n<p>题目:洛谷P1060</p>\n<p>上代码:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">&lt;iostream&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">&lt;algorithm&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-built_in\">std</span>;<br><span class=\"hljs-keyword\">int</span> w[<span class=\"hljs-number\">30</span>],v[<span class=\"hljs-number\">30</span>],f[<span class=\"hljs-number\">50000</span>];<span class=\"hljs-comment\">//w数组为重要度，v数组为money，f是用来dp的数组</span><br><span class=\"hljs-keyword\">int</span> n,m;<span class=\"hljs-comment\">//n是总物品个数，m是总钱数</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span><br></span>&#123;<br>    <span class=\"hljs-built_in\">cin</span>&gt;&gt;m&gt;&gt;n;<span class=\"hljs-comment\">//输入</span><br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">1</span>;i&lt;=n;i++)<br>    &#123;<br>        <span class=\"hljs-built_in\">cin</span>&gt;&gt;v[i]&gt;&gt;w[i];<br>        w[i]*=v[i];<span class=\"hljs-comment\">//w数组在这里意义变为总收获（重要度*money）</span><br>    &#125;<span class=\"hljs-comment\">//将每件物品的价值算出来,保留每件物品的价格(消耗背包空间)</span><br>    <br>    <span class=\"hljs-comment\">//01背包</span><br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">1</span>;i&lt;=n;i++)<span class=\"hljs-comment\">//分别对n个物品单独分析,枚举放不放i号物品</span><br>    &#123;<br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> j=m;j&gt;=v[i];j--)<span class=\"hljs-comment\">//注意从m开始,j&gt;=v[i]的意思是:从大到小循环，</span><br>                               <span class=\"hljs-comment\">//依次询问使用这么多钱可获得的最大重要度与价格的乘积，</span><br>                              <span class=\"hljs-comment\">//循环到a[i]就行了,j代表的是使用j数量的钱的背包状况</span><br>        &#123;<br>            <span class=\"hljs-keyword\">if</span>(j&gt;=v[i])<span class=\"hljs-comment\">//剩的钱大于第i件产品的价格</span><br>            &#123;<br>                f[j]=<span class=\"hljs-built_in\">max</span>(f[j],f[j-v[i]]+w[i]);<span class=\"hljs-comment\">//要不就不买,维持背包不变,</span><br>                <span class=\"hljs-comment\">//若是决定购买,将花完这个钱的背包里的价值加上现在这件产品的价值</span><br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class=\"hljs-built_in\">cout</span>&lt;&lt;f[m]&lt;&lt;<span class=\"hljs-built_in\">endl</span>;<span class=\"hljs-comment\">//背包大小为m时最大值,注意这个m,m可泛化为金钱等</span><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>最长子序列和问题(HDU1003)</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">&lt;iostream&gt;</span></span><br><br><br><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-built_in\">std</span>;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> <br></span>&#123;<br>\t<span class=\"hljs-comment\">//获取情况数</span><br>\t<span class=\"hljs-keyword\">int</span> case_number = <span class=\"hljs-number\">0</span>;<br>\t<span class=\"hljs-built_in\">cin</span> &gt;&gt; case_number;<br>\t<span class=\"hljs-keyword\">int</span> number_of_sequence = <span class=\"hljs-number\">0</span>;<br>\t<span class=\"hljs-keyword\">int</span> sum = <span class=\"hljs-number\">-1001</span>;<span class=\"hljs-comment\">//输出的求和</span><br>\t<span class=\"hljs-keyword\">int</span> temp_sum = <span class=\"hljs-number\">0</span>;<span class=\"hljs-comment\">//临时求和</span><br>\t<span class=\"hljs-keyword\">int</span> get_number = <span class=\"hljs-number\">0</span>;<span class=\"hljs-comment\">//获得的数字</span><br>\t<span class=\"hljs-keyword\">int</span> counter = <span class=\"hljs-number\">1</span>;<span class=\"hljs-comment\">//序列长度</span><br>\t<span class=\"hljs-keyword\">int</span> start_position;<span class=\"hljs-comment\">//起始位置</span><br>\t<span class=\"hljs-keyword\">int</span> final_counter = <span class=\"hljs-number\">0</span>;<span class=\"hljs-comment\">//最终序列长度</span><br>\t<span class=\"hljs-keyword\">int</span> final_startpos = <span class=\"hljs-number\">0</span>;<span class=\"hljs-comment\">//最终起始位置</span><br>\t<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; case_number; i++)<span class=\"hljs-comment\">//每种情况对应的循环</span><br>\t&#123;<br>\t\tcounter = <span class=\"hljs-number\">1</span>;<br>\t\tfinal_counter = <span class=\"hljs-number\">0</span>;<br>\t\tfinal_startpos = <span class=\"hljs-number\">0</span>;<br>\t\tsum = <span class=\"hljs-number\">-1001</span>;<br>\t\t<span class=\"hljs-built_in\">cin</span> &gt;&gt; number_of_sequence;<span class=\"hljs-comment\">//获取数组数字数目</span><br>\t\ttemp_sum = <span class=\"hljs-number\">0</span>;<br>\t\tstart_position = <span class=\"hljs-number\">1</span>;<br>\t\t<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> j = <span class=\"hljs-number\">0</span>; j &lt; number_of_sequence; j++)<span class=\"hljs-comment\">//核心求和算法</span><br>\t\t&#123;<br>\t\t\t<br>\t\t\t<span class=\"hljs-built_in\">cin</span> &gt;&gt; get_number;<br>\t\t\ttemp_sum += get_number;<br>\t\t\t<br>\t\t\t<span class=\"hljs-keyword\">if</span> (temp_sum&gt; sum)<br>\t\t\t&#123;<br>\t\t\t\tsum = temp_sum;<br>\t\t\t\tfinal_counter = counter;<br>\t\t\t\tfinal_startpos = start_position;<br>\t\t\t&#125;<br>\t\t\t<span class=\"hljs-keyword\">if</span> (temp_sum &lt;<span class=\"hljs-number\">0</span>)<br>\t\t\t&#123;<br>\t\t\t\ttemp_sum = <span class=\"hljs-number\">0</span>;<br>\t\t\t\tcounter = <span class=\"hljs-number\">0</span>;<br>\t\t\t\tstart_position = j + <span class=\"hljs-number\">2</span>;<br>\t\t\t&#125;<br>\t\t\t<br>\t\t\tcounter++;<br>\t\t<br>\t\t&#125;<br>\t\t<br>\t\t<span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">\"Case\"</span> &lt;&lt; <span class=\"hljs-string\">\" \"</span> &lt;&lt; i+<span class=\"hljs-number\">1</span> &lt;&lt; <span class=\"hljs-string\">\":\"</span> &lt;&lt; <span class=\"hljs-string\">\"\\n\"</span>;<br>\t\t<span class=\"hljs-built_in\">cout</span> &lt;&lt; sum &lt;&lt; <span class=\"hljs-string\">\" \"</span> &lt;&lt; final_startpos &lt;&lt; <span class=\"hljs-string\">\" \"</span> &lt;&lt; final_startpos + final_counter - <span class=\"hljs-number\">1</span> ;<br>\t\t<span class=\"hljs-comment\">//输出结束</span><br>\t\t<span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">\"\\n\"</span>;<br>\t\t<span class=\"hljs-comment\">//空行</span><br>\t\t<span class=\"hljs-keyword\">if</span> (i != (case_number - <span class=\"hljs-number\">1</span>))<br>\t\t&#123;<br>\t\t\t<span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">\"\\n\"</span>;<br>\t\t&#125;<br><br>\t&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>\n<h2 id=\"图论\"><a href=\"#图论\" class=\"headerlink\" title=\"图论\"></a>图论</h2><p>图论是一个很重要的把抽象问题转发为程序的思想.我们在此处会举一些例子来说明图论的应用.有关这个数据结构的解释可以在后面的<a href=\"#数据结构\">数据结构</a>章节找到</p>\n<p>图论的一些应用:</p>\n<p>//还没学,先放着.</p>\n<h2 id=\"高精度算法\"><a href=\"#高精度算法\" class=\"headerlink\" title=\"高精度算法\"></a>高精度算法</h2><p>高精度算法可用于求解大数运算,这是任何一种数据类型(包括longl ong)都无法做到的,接下来就先贴几个代码来解释,以后再来写详细的笔记.</p>\n<p>高精度加法(HDU1002)</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;iostream&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;cstdint&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;string&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;vector&gt;</span></span><br><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-built_in\">std</span>;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span><br></span>&#123;<br>\t<span class=\"hljs-comment\">//Get case number</span><br>\t<span class=\"hljs-keyword\">int</span> case_number = <span class=\"hljs-number\">0</span>;<br>\t<span class=\"hljs-built_in\">cin</span> &gt;&gt; case_number;<br>\t<span class=\"hljs-comment\">//Get input numbers  of each case</span><br>\t<span class=\"hljs-comment\">//开始输出结果</span><br>\t<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; case_number; i++)<br>\t&#123;<br><br>\t\t<span class=\"hljs-built_in\">string</span> num_a;<br>\t\t<span class=\"hljs-built_in\">string</span> num_b;<br>\t\t<span class=\"hljs-built_in\">cin</span> &gt;&gt; num_a;<br>\t\t<span class=\"hljs-built_in\">cin</span> &gt;&gt; num_b;<br>\t\t<span class=\"hljs-comment\">//Start caculate</span><br>\t\t<span class=\"hljs-comment\">//Confirm length</span><br>\t\t<span class=\"hljs-keyword\">int</span> length = <span class=\"hljs-number\">0</span>;<br>\t\t<span class=\"hljs-keyword\">if</span> (num_a.length() &gt;= num_b.length())<br>\t\t&#123;<br>\t\t\tlength = num_a.length() + <span class=\"hljs-number\">1</span>;<br>\t\t&#125;<br>\t\t<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (num_a.length() &lt; num_b.length())<br>\t\t&#123;<br>\t\t\tlength = num_b.length() + <span class=\"hljs-number\">1</span>;<br>\t\t&#125;<br>\t\t<span class=\"hljs-comment\">//Creat result</span><br>\t\t<span class=\"hljs-function\"><span class=\"hljs-built_in\">vector</span>&lt;<span class=\"hljs-keyword\">int</span>&gt; <span class=\"hljs-title\">result</span><span class=\"hljs-params\">(length)</span></span>;<br>\t\t<span class=\"hljs-keyword\">int</span> nextline = <span class=\"hljs-number\">0</span>; <span class=\"hljs-comment\">//进位</span><br>\t\t<span class=\"hljs-keyword\">int</span> ifline = <span class=\"hljs-number\">0</span>;<br>\t\t<span class=\"hljs-keyword\">int</span> Tresult = <span class=\"hljs-number\">0</span>; <span class=\"hljs-comment\">//每位结果</span><br>\t\t<span class=\"hljs-keyword\">int</span> numberA = <span class=\"hljs-number\">0</span>; <span class=\"hljs-comment\">//A的位</span><br>\t\t<span class=\"hljs-keyword\">int</span> numberB = <span class=\"hljs-number\">0</span>; <span class=\"hljs-comment\">//B的位</span><br>\t\t<span class=\"hljs-comment\">//开始读数</span><br>\t\t<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> j = <span class=\"hljs-number\">0</span>; j &lt; length; j++)<br>\t\t&#123;<br>\t\t\tnumberA = (num_a.length() - j - <span class=\"hljs-number\">1</span>); <span class=\"hljs-comment\">//A读数的位</span><br>\t\t\tnumberB = (num_b.length() - j - <span class=\"hljs-number\">1</span>); <span class=\"hljs-comment\">//B读数的位</span><br>\t\t\t<span class=\"hljs-keyword\">int</span> tempA = <span class=\"hljs-number\">0</span>;\t\t\t\t\t\t<span class=\"hljs-comment\">//A临时读数</span><br>\t\t\t<span class=\"hljs-keyword\">int</span> tempB = <span class=\"hljs-number\">0</span>;\t\t\t\t\t\t<span class=\"hljs-comment\">//B临时读数</span><br>\t\t\t<span class=\"hljs-comment\">//读A</span><br>\t\t\t<span class=\"hljs-keyword\">if</span> (numberA &gt;= <span class=\"hljs-number\">0</span>)<br>\t\t\t&#123;<br>\t\t\t\ttempA = num_a[numberA];<br>\t\t\t\ttempA = tempA - <span class=\"hljs-string\">'0'</span>;<br>\t\t\t&#125;<br>\t\t\t<span class=\"hljs-comment\">//读B</span><br>\t\t\t<span class=\"hljs-keyword\">if</span> (numberB &gt;= <span class=\"hljs-number\">0</span>)<br>\t\t\t&#123;<br>\t\t\t\ttempB = num_b[numberB];<br>\t\t\t\ttempB = tempB - <span class=\"hljs-string\">'0'</span>;<br>\t\t\t&#125;<br>\t\t\t<span class=\"hljs-comment\">//Input result</span><br>\t\t\t<span class=\"hljs-keyword\">int</span> tempR = <span class=\"hljs-number\">0</span>;<br><br>\t\t\t<span class=\"hljs-keyword\">if</span> (j == <span class=\"hljs-number\">0</span>)<br>\t\t\t&#123;<br>\t\t\t\ttempR = tempA + tempB; <span class=\"hljs-comment\">//在不进位时结果</span><br>\t\t\t&#125;<br>\t\t\t<span class=\"hljs-keyword\">else</span><br>\t\t\t&#123;<br>\t\t\t\ttempR = tempA + tempB + nextline; <span class=\"hljs-comment\">//进位结果</span><br>\t\t\t&#125;<br><br>\t\t\t<span class=\"hljs-comment\">//判断大于10</span><br><br>\t\t\t<span class=\"hljs-keyword\">if</span> (j != (length - <span class=\"hljs-number\">1</span>))<br>\t\t\t&#123;<br>\t\t\t\t<span class=\"hljs-keyword\">if</span> (tempR &gt;= <span class=\"hljs-number\">10</span>)<br>\t\t\t\t&#123;<br>\t\t\t\t\tifline = <span class=\"hljs-number\">1</span>;<br>\t\t\t\t\t<span class=\"hljs-comment\">//取模结果输出</span><br>\t\t\t\t\ttempR = tempR % <span class=\"hljs-number\">10</span>;<br>\t\t\t\t&#125;<br>\t\t\t\t<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (tempR &lt; <span class=\"hljs-number\">10</span>)<br>\t\t\t\t&#123;<br>\t\t\t\t\tifline = <span class=\"hljs-number\">0</span>;<br>\t\t\t\t&#125;<br>\t\t\t&#125;<br><br>\t\t\t<span class=\"hljs-keyword\">int</span> number = length - j - <span class=\"hljs-number\">1</span>;<br><br>\t\t\tTresult = tempR;<br><br>\t\t\tresult[number] = Tresult;<br>\t\t\t<span class=\"hljs-keyword\">if</span> (ifline == <span class=\"hljs-number\">1</span>)<br>\t\t\t&#123;<br>\t\t\t\tnextline = <span class=\"hljs-number\">1</span>;<br>\t\t\t&#125;<br>\t\t\t<span class=\"hljs-keyword\">else</span><br>\t\t\t&#123;<br>\t\t\t\tnextline = <span class=\"hljs-number\">0</span>;<br>\t\t\t&#125;<br>\t\t&#125;<br>\t\t<span class=\"hljs-comment\">//Output results</span><br><br>\t\t<span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">\"Case \"</span> &lt;&lt; i + <span class=\"hljs-number\">1</span> &lt;&lt; <span class=\"hljs-string\">\":\"</span><br>\t\t\t &lt;&lt; <span class=\"hljs-string\">\"\\n\"</span>;<br>\t\t<span class=\"hljs-built_in\">cout</span> &lt;&lt; num_a &lt;&lt; <span class=\"hljs-string\">\" + \"</span> &lt;&lt; num_b &lt;&lt; <span class=\"hljs-string\">\" = \"</span>;<br>\t\t<span class=\"hljs-keyword\">int</span> startout = <span class=\"hljs-number\">0</span>;<br><br>\t\t<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> l = <span class=\"hljs-number\">1</span>; l &lt; length; l++) <span class=\"hljs-comment\">//输出一个数</span><br>\t\t&#123;<br><br>\t\t\t<span class=\"hljs-keyword\">if</span> (result[<span class=\"hljs-number\">0</span>] != <span class=\"hljs-number\">0</span> &amp;&amp; l == <span class=\"hljs-number\">1</span>)<br>\t\t\t&#123;<br>\t\t\t\t<span class=\"hljs-built_in\">cout</span> &lt;&lt; result[<span class=\"hljs-number\">0</span>];<br>\t\t\t\tstartout = <span class=\"hljs-number\">1</span>;<br>\t\t\t&#125;<br>\t\t\t<span class=\"hljs-keyword\">if</span> (result[l] != <span class=\"hljs-number\">0</span>)<br>\t\t\t&#123;<br>\t\t\t\tstartout = <span class=\"hljs-number\">1</span>;<br>\t\t\t&#125;<br>\t\t\t<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (l == (length - <span class=\"hljs-number\">1</span>))<br>\t\t\t&#123;<br>\t\t\t\tstartout = <span class=\"hljs-number\">1</span>;<br>\t\t\t&#125;<br><br>\t\t\t<span class=\"hljs-keyword\">if</span> (startout == <span class=\"hljs-number\">0</span>)<br>\t\t\t&#123;<br>\t\t\t\t<span class=\"hljs-keyword\">continue</span>;<br>\t\t\t&#125;<br>\t\t\t<span class=\"hljs-built_in\">cout</span> &lt;&lt; result[l];<br>\t\t&#125;<br>\t\t<span class=\"hljs-comment\">//输出结束</span><br>\t\t<span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">\"\\n\"</span>;<br>\t\t<span class=\"hljs-comment\">//空行</span><br>\t\t<span class=\"hljs-keyword\">if</span> (i != (case_number - <span class=\"hljs-number\">1</span>))<br>\t\t&#123;<br>\t\t\t<span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">\"\\n\"</span>;<br>\t\t&#125;<br><br>\t&#125; <span class=\"hljs-comment\">//结束单个循环</span><br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>这个算法嘛,写的其实很累赘,但是其中一些进位和控制输出体现了高精度算法所要求的强大的逻辑性</p>\n<p>高精度排序(洛谷P1781)</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;bits/stdc++.h&gt;</span></span><br><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-built_in\">std</span>;<br><br><span class=\"hljs-keyword\">char</span> president[<span class=\"hljs-number\">20</span>][<span class=\"hljs-number\">101</span>];<br><span class=\"hljs-keyword\">int</span> bits_number = <span class=\"hljs-number\">0</span>;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">bool</span> <span class=\"hljs-title\">compare</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> a, <span class=\"hljs-keyword\">int</span> b)</span><br></span>&#123;<br>    <span class=\"hljs-keyword\">return</span> president[a][bits_number] &gt; president[b][bits_number];<br>&#125;;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span><br></span>&#123;<br>    <span class=\"hljs-keyword\">int</span> number = <span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-built_in\">cin</span> &gt;&gt; number;<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; number; i++) <span class=\"hljs-comment\">//Get the votes of president</span><br>    &#123;<br>        <span class=\"hljs-built_in\">cin</span> &gt;&gt; president[i];<br>    &#125;<br>    <span class=\"hljs-comment\">//ok,let's compare</span><br>    <span class=\"hljs-built_in\">queue</span>&lt;<span class=\"hljs-keyword\">int</span>&gt; president_list; <span class=\"hljs-comment\">// the presidents left</span><br><br>    <span class=\"hljs-keyword\">int</span> maxbit = <span class=\"hljs-number\">0</span>; <span class=\"hljs-comment\">// the max votes bit president</span><br><br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; number; i++) <span class=\"hljs-comment\">//get the bits of each president</span><br>    &#123;<br>        <span class=\"hljs-keyword\">int</span> temp_bits = <span class=\"hljs-number\">0</span>;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> j = <span class=\"hljs-number\">0</span>; j &lt; <span class=\"hljs-number\">100</span>; j++) <span class=\"hljs-comment\">// get the bits</span><br>        &#123;<br>            <span class=\"hljs-keyword\">if</span> (president[i][j] != <span class=\"hljs-number\">0</span>)<br>            &#123;<br>                temp_bits++;<br>            &#125;<br>            <span class=\"hljs-keyword\">else</span><br>            &#123;<br>                <span class=\"hljs-keyword\">break</span>;<br>            &#125;<br>        &#125;<br>        <span class=\"hljs-comment\">//this guy's bit has been recorded</span><br>        <span class=\"hljs-keyword\">if</span> (temp_bits &gt;= maxbit)<br>        &#123;<br>            <br>            president_list.push(i);<br>            <span class=\"hljs-keyword\">if</span> (temp_bits &gt; maxbit)<br>            &#123;<br>                president_list = <span class=\"hljs-built_in\">queue</span>&lt;<span class=\"hljs-keyword\">int</span>&gt;();<br>                president_list.push(i);<br>            &#125;<br>            maxbit = temp_bits;<br>        &#125;<br>    &#125;<br>    <span class=\"hljs-comment\">//WARNING: THE NUMBER OF PRESIDENT MUST BE PLUSED ONE!</span><br>    <span class=\"hljs-comment\">//now,compare the president in queue!</span><br>    <span class=\"hljs-built_in\">vector</span>&lt;<span class=\"hljs-keyword\">int</span>&gt; last_list;<br>    <span class=\"hljs-keyword\">while</span> (!president_list.empty())<br>    &#123;<br>        last_list.push_back(president_list.front());<br>        president_list.pop();<br>    &#125;<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; maxbit; i++)<br>    &#123;<br>        bits_number = i;<br>        sort(last_list.<span class=\"hljs-built_in\">begin</span>(), last_list.<span class=\"hljs-built_in\">end</span>(), compare);<br>        <span class=\"hljs-keyword\">int</span> erase_bit = president[last_list[<span class=\"hljs-number\">0</span>]][i];<br><br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">auto</span> it = last_list.<span class=\"hljs-built_in\">begin</span>(); it != last_list.<span class=\"hljs-built_in\">end</span>(); it++)<br>        &#123;<br>            <span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">\"\"</span>;<br>            <span class=\"hljs-keyword\">if</span> (president[*it][i] &lt; erase_bit)<br>            &#123;<br>                last_list.erase(it);<br>                it--;<br>                <span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">\"\"</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class=\"hljs-built_in\">cout</span> &lt;&lt; last_list[<span class=\"hljs-number\">0</span>] + <span class=\"hljs-number\">1</span> &lt;&lt; <span class=\"hljs-built_in\">endl</span>;<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; maxbit; i++)<br>    &#123;<br>        <span class=\"hljs-built_in\">cout</span> &lt;&lt; president[last_list[<span class=\"hljs-number\">0</span>]][i];<br>    &#125;<br><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>当然,可以学一门Java/python来应付这个……</p>\n<p>这个我们后面可能会开Java/python的笔记.</p>\n"},{"title":"About","date":"2019-08-20T13:59:02.000Z","_content":"\n# About Me\n\n## Studying at:\n\nAHU-Computer Science\n\n\n\n## Hobby:\n\nPhotographing(Just know a little)  \n\nPS   (Design and edit photos)\n\nWeb Developing\n\nPlay Hi-fi Devices (exit because the lack of money)\n\n\n\n## Contact me:\n\nQQ 2511134465 \n\nMail: fu_tianchen@outlook.com\n\n\n\n**Please read carefully: This guy has a bit social phobia, please contact him actively. (Or he won't contact you )**\n\nThanks for reading.\n\n\n\n# 个人简介\n\n## 在读:\n\n安徽大学-计算机专业\n\n\n\n## 个人爱好:\n\n摄影(也就是三脚猫功夫)  \n\nPS   (主要做轻度修图以及平面设计)\n\n网站开发\n\n摆弄音乐设备(由于没钱已退坑)\n\n\n\n## 联系方式:\n\nQQ 2511134465 \n\nMail: fu_tianchen@outlook.com\n\n\n\n**请详细阅读:此人患有轻度社交恐惧症,你不去联系他他是几乎不可能主动联系你的.**\n\n**感谢你阅读我的介绍.**\n\n","source":"_posts/About.md","raw":"---\ntitle: About\ndate: 2019-08-20 21:59:02\n\n---\n\n# About Me\n\n## Studying at:\n\nAHU-Computer Science\n\n\n\n## Hobby:\n\nPhotographing(Just know a little)  \n\nPS   (Design and edit photos)\n\nWeb Developing\n\nPlay Hi-fi Devices (exit because the lack of money)\n\n\n\n## Contact me:\n\nQQ 2511134465 \n\nMail: fu_tianchen@outlook.com\n\n\n\n**Please read carefully: This guy has a bit social phobia, please contact him actively. (Or he won't contact you )**\n\nThanks for reading.\n\n\n\n# 个人简介\n\n## 在读:\n\n安徽大学-计算机专业\n\n\n\n## 个人爱好:\n\n摄影(也就是三脚猫功夫)  \n\nPS   (主要做轻度修图以及平面设计)\n\n网站开发\n\n摆弄音乐设备(由于没钱已退坑)\n\n\n\n## 联系方式:\n\nQQ 2511134465 \n\nMail: fu_tianchen@outlook.com\n\n\n\n**请详细阅读:此人患有轻度社交恐惧症,你不去联系他他是几乎不可能主动联系你的.**\n\n**感谢你阅读我的介绍.**\n\n","slug":"About","published":1,"updated":"2021-10-24T02:04:35.845Z","_id":"ckey85ujh0015ho8a7ve6hadc","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"About-Me\"><a href=\"#About-Me\" class=\"headerlink\" title=\"About Me\"></a>About Me</h1><h2 id=\"Studying-at\"><a href=\"#Studying-at\" class=\"headerlink\" title=\"Studying at:\"></a>Studying at:</h2><p>AHU-Computer Science</p>\n<h2 id=\"Hobby\"><a href=\"#Hobby\" class=\"headerlink\" title=\"Hobby:\"></a>Hobby:</h2><p>Photographing(Just know a little)  </p>\n<p>PS   (Design and edit photos)</p>\n<p>Web Developing</p>\n<p>Play Hi-fi Devices (exit because the lack of money)</p>\n<h2 id=\"Contact-me\"><a href=\"#Contact-me\" class=\"headerlink\" title=\"Contact me:\"></a>Contact me:</h2><p>QQ 2511134465 </p>\n<p>Mail: fu_tianchen@outlook.com</p>\n<p><strong>Please read carefully: This guy has a bit social phobia, please contact him actively. (Or he won’t contact you )</strong></p>\n<p>Thanks for reading.</p>\n<h1 id=\"个人简介\"><a href=\"#个人简介\" class=\"headerlink\" title=\"个人简介\"></a>个人简介</h1><h2 id=\"在读\"><a href=\"#在读\" class=\"headerlink\" title=\"在读:\"></a>在读:</h2><p>安徽大学-计算机专业</p>\n<h2 id=\"个人爱好\"><a href=\"#个人爱好\" class=\"headerlink\" title=\"个人爱好:\"></a>个人爱好:</h2><p>摄影(也就是三脚猫功夫)  </p>\n<p>PS   (主要做轻度修图以及平面设计)</p>\n<p>网站开发</p>\n<p>摆弄音乐设备(由于没钱已退坑)</p>\n<h2 id=\"联系方式\"><a href=\"#联系方式\" class=\"headerlink\" title=\"联系方式:\"></a>联系方式:</h2><p>QQ 2511134465 </p>\n<p>Mail: fu_tianchen@outlook.com</p>\n<p><strong>请详细阅读:此人患有轻度社交恐惧症,你不去联系他他是几乎不可能主动联系你的.</strong></p>\n<p><strong>感谢你阅读我的介绍.</strong></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"About-Me\"><a href=\"#About-Me\" class=\"headerlink\" title=\"About Me\"></a>About Me</h1><h2 id=\"Studying-at\"><a href=\"#Studying-at\" class=\"headerlink\" title=\"Studying at:\"></a>Studying at:</h2><p>AHU-Computer Science</p>\n<h2 id=\"Hobby\"><a href=\"#Hobby\" class=\"headerlink\" title=\"Hobby:\"></a>Hobby:</h2><p>Photographing(Just know a little)  </p>\n<p>PS   (Design and edit photos)</p>\n<p>Web Developing</p>\n<p>Play Hi-fi Devices (exit because the lack of money)</p>\n<h2 id=\"Contact-me\"><a href=\"#Contact-me\" class=\"headerlink\" title=\"Contact me:\"></a>Contact me:</h2><p>QQ 2511134465 </p>\n<p>Mail: fu_tianchen@outlook.com</p>\n<p><strong>Please read carefully: This guy has a bit social phobia, please contact him actively. (Or he won’t contact you )</strong></p>\n<p>Thanks for reading.</p>\n<h1 id=\"个人简介\"><a href=\"#个人简介\" class=\"headerlink\" title=\"个人简介\"></a>个人简介</h1><h2 id=\"在读\"><a href=\"#在读\" class=\"headerlink\" title=\"在读:\"></a>在读:</h2><p>安徽大学-计算机专业</p>\n<h2 id=\"个人爱好\"><a href=\"#个人爱好\" class=\"headerlink\" title=\"个人爱好:\"></a>个人爱好:</h2><p>摄影(也就是三脚猫功夫)  </p>\n<p>PS   (主要做轻度修图以及平面设计)</p>\n<p>网站开发</p>\n<p>摆弄音乐设备(由于没钱已退坑)</p>\n<h2 id=\"联系方式\"><a href=\"#联系方式\" class=\"headerlink\" title=\"联系方式:\"></a>联系方式:</h2><p>QQ 2511134465 </p>\n<p>Mail: fu_tianchen@outlook.com</p>\n<p><strong>请详细阅读:此人患有轻度社交恐惧症,你不去联系他他是几乎不可能主动联系你的.</strong></p>\n<p><strong>感谢你阅读我的介绍.</strong></p>\n"},{"layout":"post","title":"如何成为Web工程师","intro":"","date":"2020-02-24T06:00:00.000Z","author":"Makinohara","catalog":true,"_content":"\n# 职位需求\n\n## 阿里巴巴\n\n### 科技创新中心-前端专家-上海\n\n#### 岗位描述：\n\n1.持续关注Web技术的发展，掌握新技术的核心点，从中挑选适合公司业务发展的新技术；\n2.围绕公司业务进行前端框架和工具的设计和维护；\n3.技术攻坚，指导和帮助团队成员在业务中成长。\n\n#### 岗位要求：\n\n1.三年以上前端开发经验，对前端领域一个或多个方向有深入研究，是该方向的专家；\n2.熟悉主流前端框架（如React、Vue、Angular等）的原理及演化过程，有一定的前端框架设计经验；\n3.熟悉W3C/WHATWG规范，了解规范设计的思考，以及研发过程中的最佳实践；\n4.具备良好的沟通、规划和项目推动能力，以及独立解决技术难题的能力。\n\n### 蚂蚁金服-高级前端工程师/专家-蚂蚁保险\n\n#### 岗位描述：\n\n1. 与产品经理、设计师、开发同学紧密合作，打造极致体验的互联网保险产品；\n2. 参与多种平台的应用开发，包括Web及Mobile等产品，负责前端交互的实现；\n3. 能充分理解项目需求和设计需求，具有一定研发精神，能解决各种未知问题；\n4. 与团队成员分享经验和新技术，帮助团队成长，学习研究新的技术，并能迅速转化到潜在项目中。\n\n#### 岗位要求：\n\n1. 熟练掌握移动端H5开发、熟悉主流移动浏览器的技术特点；\n\n2. 熟练运用JavaScript语言与HTML5、CSS3等技术, 熟悉移动端Web绘图相关高级特性, 如canvas,webGL, CSS3动画效果等；\n\n3. 熟悉模块化、前端编译和构建工具，熟练运用主流的移动端JS库和开发框架，并深入理解其设计原理，例如：Webpack、ReactJS、Vue等；\n\n4. **熟悉 NodeJS Web 应用开发，了解koa、express的核心设计思想和原理；**\n\n5. 个性乐观开朗，逻辑性强，善于和各种背景的人合作；\n\n6. 对技术有强烈的进取心，具有良好的沟通能力和团队合作精神、优秀的分析问题和解决问题的能力；\n\n7. **有小程序、ReactNative开发经验者优先；**\n\n8. 有开源项目经验和长期维护技术博客经验者优先；\n\n9. **有全栈开发、具有服务端开发经验优先。**\n\n### 口碑-H5前端开发-上海、杭州\n\n#### 岗位描述：\n\n1、负责面向商家、对内运营体系等的各种企业级泛中台产品应用的前端架构设计和研发工作；\n2、参与本地生活前端技术体系建设，包括组件开发、工程化效能建设、多端架构设计、Node全栈、质量监控和保障体系建设等；\n3、深入理解业务和产品，不断提升产品的用户体验，技术驱动业务的发展；\n4、关注相关前沿技术研究，通过新技术服务团队和业务；\n\n#### 岗位要求：\n\n1、前端HTML/CSS/JavaScript等基础技术扎实，数据结构、网络等基础知识掌握牢固，熟悉浏览器原理机制；\n2、精通至少一种主流前端框架，如React/Vue/Angular等，能深入理解其设计原理，并对其他类似框架有所了解，有库或框架设计者优先；\n3、理解前端工程化，熟练使用相关工具，如Npm/Yarn/Webpack/Rollup等，有对前端工程化有自己的实践者优先；\n4、熟悉Node相关知识，有Koa/Egg/Express等的实践经验，若有其他后端语言如Java/PHP/Python/Golang等的开发经验优先；\n5、熟悉iOS/Android等客户端相关知识，具备ReactNative/Weex/Flutter能力和经验者优先；\n6、对前端技术有强烈的热情和进取心，具有良好的沟通能力、团队合作精神，优秀的分析问题和解决问题的能力；\n\n## 腾讯\n\n### 30628-腾讯广告Web前端开发工程师\n\n#### 工作职责\n\n负责腾讯广告业务的web前端的开发工作； 负责微信广告业务的web前端系统分析、优化与架构工作。\n\n#### 工作要求\n\n1.本科及以上学历，计算机相关专业； 2年以上前端开发经验，有完整的前端项目经验；\n2.熟悉JavaScript、HTML、CSS和HTTP协议等Web开发所需技能和知识点；\n3.熟悉各种前端框架（React、Vue）并有相关使用经验；\n4.良好的学习能力、沟通能力、团队协作能力、及分析问题解决问题能力，责任心强。\n5.熟悉golang/php等后台语言，有互联网广告相关业务开发经验者优先。\n\n### 25927-web前端开发工程师（上海）\n\n#### 工作职责\n\n负责先游海外版web前端开发；\n负责前端架构设计及性能调优工作。\n\n#### 工作要求\n\n本科及以上学历，计算机相关专业，3年以上成功产品web开发经验；\n精通js、h5、css等基本前端开发技术；\n熟练掌握主流js框架(vue/react)及web前端打包工具webpack等；\n熟练掌握Linux/unix 操作；\n熟悉后台语言者优先，如node/php；\n有良好的团队合作能力，技术视野开阔，对业界最新的前端技术和实现有浓厚的兴趣及深入的见解。\n\n### S2-高级web前端开发工程师\n\n#### 工作职责\n\n主要负责财经领域前端技术框架的统一规划及后续发展，推动前端后分离开发模式。\n1.负责财经IT整体前端架构设计与开发；\n2.负责前端开发流程的规范，工具、组件等建设；\n3.负责新技术的预研、落地，及前端技能内部培训；\n\n#### 工作要求\n\n1.本科及以上学历，计算机相关专业，5 年以上 Web 前端开发经验；\n2.熟悉 HTTP 基本原理，能熟练运用 HTML、CSS、JavaScript 构建高性能的 Web 应用程序；\n3.熟悉原生 JavaScript，熟悉 jQuery，至少掌握一种主流的前端框架，对vue或者react有丰富的开发经验，具备一定的框架设计能力；\n4.有使用 grunt、gulp、webpack 等工具进行前端工程化经验；\n5.有nodejs开发经验，对前后端分离模式有深入理解并有实际项目经验；\n6.工作积极主动，乐于分享，具有良好的逻辑思维及语言表达能沟通力和团队协作精神。\n\n## 字节跳动\n\n### 前端工程师\n\n上海社招\n\n#### 职位描述\n\n1、负责产品的前端开发工作； \n2、参与前端工程体系建设，建设工具、抽象框架、提炼组件； \n3、与团队配合完成整体项目规划、设计与开发。\n\n#### 职位要求\n\n1、熟练掌握JavaScript、CSS、HTML、DOM、动画、协议、安全、网络、性能优化等前端技术； \n2、对主流前端框架（ React、Vue、Angular ）至少一种有深入应用并深入理解其设计原理； \n3、熟悉MVC，MVVM，Flux，Redux等相关工程知识； \n4、熟悉W3C，ECMAScript，CommonJS，ES6等相关技术标准；\n5、熟练掌握 Grunt、Gulp、Webpack、FIS 其中任意一项构建工具的使用和配置； \n6、能对具体的产品进行性能优化，实现极致的页面加载、执行和渲染时间； \n7、注重产品质量，具有良好的代码风格、接口设计与程序架构； \n8、关注业界发展，对最新的前端技术有浓厚的兴趣及独特的见解，关注前端前沿技术研究，通过新技术服务团队和业务。\n\n### 前端架构师\n\n#### 职位描述\n\n1、负责沟通和协同类效率工具 PC客户端、Web端相关产品的架构、设计、优化； \n2、负责基础库、框架和关键模块的开发和改进； \n3、指导团队其他成员的设计和Coding，保证工程质量； \n4、优化前端团队的开发方式和流程、规范，提高团队效率。\n\n#### 职位要求\n\n1、大学本科及以上学历，4年以上前端开发经验，能理解目前流行的框架(react/redux/mobx)的设计思路并能进行源码分析； \n2、基本功扎实，精通HTML5，CSS3，ES6，ES7，熟悉 ECMAScript 语言规范；\n3、有丰富的前端工程方面的经验； \n4、注重代码质量，设计经验丰富，能够产出高质量的设计和代码；\n5、自我驱动能力、自我学习能力强，对前端前沿领域有比较高的热情和关注度，执行力好，良好的沟通协作能力，注重效率，能够深刻影响其他人；\n6、有知名开源项目者优先和客户端架构经验者优先。\n\n### 前端开发工程师 — 大数据\n\n#### 职位描述\n\n1、参与字节跳动大数据基础设施以及相关可视化产品的建设，为今日头条、抖音、火山、西瓜等旗下产品提供稳定高质量的数据服务； \n2、持续的性能优化和架构升级，不断提升团队效率和产品的用户体验； \n3、结合业务和数据场景，提出专业合理的可视化方案建议，并推动可视化技术产生更多的业务价值； \n4、提供全栈场景，不设边界。\n\n#### 职位要求\n\n1、对技术充满好奇心，乐于学习，愿意分享，具备良好的服务意识，责任心，团队沟通和协作能力、发现并解决问题的能力； \n2、有扎实的前端技术和计算机基础，包括但不限于 HTML / CSS / JavaScript / DOM / Http / 数据结构等； \n3、精通至少一门 MVVM 框架，如 AngularJS/Vue/React，使用 React 开发过大型项目或者复杂单页面应用者优先； \n4、熟练掌握 SVG / Canvas / WebGL 等前端绘图技术及标准，至少使用过一个数据可视化类库，包括但不限于 D3 / G2 / Three.js / ECharts / Highcharts，有一定计算机图形学基础的优先； \n5、掌握至少一门服务端编程语言，并有实战经验。熟悉 NodeJS / Python 者优先；\n6、有过大数据产品（Hadoop / Hive / Spark 等）相关开发经验者优先；\n7、有移动端开发经验并且有实际性能优化案例者优先； \n8、有自己的技术产品、开源作品或活跃的开源社区贡献者优先。\n\n\n\n# 总结：职位需求与自身能力\n\n| 需求：按重要程度排列                                         | 完成情况         | 侧重企业       |\n| ------------------------------------------------------------ | ---------------- | -------------- |\n| HTML CSS JS Web基础                                          | 5%               | 所有           |\n| 熟练掌握Linux/unix 操作；                                    | 5%               | 所有           |\n| 主流前端框架（如React、Vue、Angular等）                      | 0%               | 所有           |\n| 数据结构与算法；计算机网络等专业课                           | 7%               | 所有           |\n| 熟悉后台语言者优先，如node/php；                             | 1%               | 腾讯、字节跳动 |\n| 有后台/全栈开发经验                                          | 3%               | 阿里巴巴       |\n| 有自己的技术产品、开源作品或活跃的开源社区贡献者优先。       | 目前影响力：有限 | 字节跳动       |\n| 有小程序、ReactNative开发经验者优先；                        | 0%               | 阿里巴巴       |\n| 有使用 grunt、gulp、webpack 等工具进行前端工程化经验；       | 0%               | 腾讯、字节跳动 |\n| 熟悉golang/php等后台语言                                     | 0%               | 腾讯           |\n| 掌握至少一门服务端编程语言，并有实战经验。熟悉 NodeJS / Python 者优先； | 0%               | 字节跳动       |\n| 熟悉MVC，MVVM，Flux，Redux等相关工程知识                     | 0%               | 字节跳动       |\n\n\n\n# 设计师如何学习前端技术（转载自：黄玄的知乎回答）\n\n> *作者：黄玄*\n> *链接：https://www.zhihu.com/question/21921588/answer/69680480*\n> *来源：知乎*\n> *著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。*\n\n**背景篇**\n\n在这个时代学习新东西，一定要善于使用 Bing/Google 等搜索引擎…网络上的资源非常丰富，自学能力也尤为重要，尤其是对于学习技术！\n\n**入门篇（HTML/CSS）**\n\n说起设计师希望学前端的初衷，大概还是因为各种华丽的网页特效/交互太过吸引人，这种感觉大概就是：“Hey，我的设计可以做成网页访问了呢！”\n好在，“展示”对于前端技术来说反而是最简单的部分。所以，放下你对“编程”两个字的恐惧，**从“称不上是编程语言”的 HTML/CSS 开始，先做点有成就感的东西出来吧！**\n\n对于设计师来说，最有成就感的一定是“可以看到的东西”，而 HTML/CSS 正是用来干这个的，HTML 就是一堆非常简单的标签，而 CSS 无非就是把你画画的流程用**英语**按一定的格式写出来而已：\n\n```text\n<p> p is paragraph! </p>\n\n<style>\np { color: red;}\n</style>\n```\n\n是不是非常容易，就跟读英语一样！\n接下来，你就需要开始自学啦，比如常用 HTML 标签的意思，各种 CSS 的属性，还有 CSS 的盒模型、优先级、选择器……放心，它们都很容易；能玩得转 PS/AI/Flash/Axure/AE/Sketch 的设计师们，学这个洒洒水啦\n\n推荐几个资源：\n\n- [w3school 在线教程](https://link.zhihu.com/?target=http%3A//www.w3school.com.cn/) (中文，一个很 Low 但是又很好的入门学习网站）\n- [Learn to code](https://link.zhihu.com/?target=http%3A//www.codecademy.com/) (Codecademy，如果你英文 OK，**强烈建议**你使用它进行交互式的学习！里面从 HTML/CSS 到搭建网站的课程都有，免费，生动直观）\n\n**这个阶段的练习主要是“临摹”：用代码画出你想画的网站，越多越好。**\n\n对于书，我**非常不推荐**上来就去看各种厚厚的入门/指南书，没必要！这一个阶段应该快速上手，培养兴趣，培养成就感。先做出可以看的东西再说，掌握常用的 HTML/CSS 就够用了\n\n如果完成的好，这个阶段过后你大概就可以写出一些简单又好看的“静态网页”了，比如这个作品集/简历：[Portfolio - 黄玄的博客](https://link.zhihu.com/?target=http%3A//huangxuan.me/portfolio/) （好久没更新了…丢人现眼）\n\n**入门篇（JavaScript/jQuery）**\n\n想要在网页上实现一些交互效果，比如轮播图、点击按钮后播放动画？那你就必须要开始学习 JavaScript 了！JavaScript 是一门完整、强大并且非常热门的编程语言，你在浏览器里看到的所有交互或者高级功能都是由它在背后支撑的！\n\n举个小栗子：\n\n```text\nalert(\"Hello World!\")\n```\n\n就这一行，就可以在浏览器里弹出 Hello World 啦！\n\n在了解一些基础的 JavaScript 概念（变量、函数、基本类型）后，我们可以直接去学习 jQuery，你不用知道它具体是什么（它是一个 JavaScript 代码库），你只要知道它可以显著地降低你编写交互的难度就好了：\n\n```text\n$('.className').click(function(){\n    alert(\"Hello jQuery\")\n})\n```\n\n通过 jQuery，我们可以继续使用在 CSS 中学到的“选择器”\n\n对于没有编程基础的人来说，想要完全掌握它们两并不容易。作为设计师，很多时候我们可以先不必深究它们的原理，而是尝试直接应用它！这样成就感会来得很快，并且你可以通过实际应用更加理解 JavaScript 是用来做什么的。\n\n我仍然推荐你使用 [w3school 在线教程](https://link.zhihu.com/?target=http%3A//www.w3school.com.cn/)  与 [http://www.codecademy.com/](https://link.zhihu.com/?target=http%3A//www.codecademy.com/)  进行学习。另外，你可以看一看诸如《[锋利的jQuery (豆瓣)](https://link.zhihu.com/?target=http%3A//book.douban.com/subject/10792216/)》 这一类非常实用的书籍，可以让你很快上手做出一些简单的效果来！\n\n如果学习得顺利，你还可以尝试使用各种丰富的  jQuery 插件，你会发现写出支持用户交互的网站也没有那么困难～很多看上去很复杂的功能（比如轮播图、灯箱、下拉菜单），搜一搜然后看看文档（教程）、改改示例代码就好了。\n\n比如说，配合 [Huxpro/jquery.HSlider · GitHub](https://link.zhihu.com/?target=https%3A//github.com/Huxpro/jquery.HSlider) 这样的轮播图插件，你可以很轻松的写出 [HSlider | Demo](https://link.zhihu.com/?target=http%3A//huangxuan.me/jquery.HSlider/) 这样的网页相册或者 [HSlider | Weather](https://link.zhihu.com/?target=http%3A//huangxuan.me/jquery.HSlider/demo-weather-app/) 这样的手机端 App 原型～\n\n最后，我想推荐下 [Bootstrap · The world's most popular mobile-first and respons](https://link.zhihu.com/?target=http%3A//getbootstrap.com/) ，这是世界上最知名的前端 UI 框架之一，提供了大量 CSS 样式与 jQuery 插件。它非常容易学习并且中英文教程都非常健全，你并不需要理解它背后的工作原理就能很好的使用它，让你快速达到“可以建站的水平”。有余力的话，你不但可以学习如何使用它，还可以学习它背后的设计思想。\n\n**转职方向一：前端重构 （Web Rebuild）**\n\n业内通常把专精 HTML/CSS 的前端从业人员称为重构，而对于注重视觉效果的设计师来说，在掌握基本的 HTML/CSS 后，就可以朝着这个方向发展了。\n\n**到了这个阶段，你不但要知道怎么写页面，还要知道它们都是为什么，并且知道怎么做更好。这对你理解 Web 世界非常有帮助，并且能帮助你做出更“系统化”的设计。**\n\nCSS 的学问很多，你需要开始理解文档流、浮动流等各种定位的方式与原理，理解 CSS 的继承复用思想、理解浏览器的差异、兼容、优雅降级……这里强烈推荐一本书：《[精通CSS（第2版） (豆瓣)](https://link.zhihu.com/?target=http%3A//book.douban.com/subject/4736167/)》，虽然前端技术突飞猛进，但这本书的思想永远不会过时。\n\nHTML 方面，要开始注重语义化、可访问性与结构的合理，你要开始学习“结构与样式的分离”，这里有一本神书将这种分离做到了极致：《[CSS禅意花园 (豆瓣)](https://link.zhihu.com/?target=http%3A//book.douban.com/subject/2052176/)》\n\n另外，各种炫酷屌的 CSS 3 属性你一定会喜欢：你可以用媒体查询做响应式网页设计，你可以用 transiton 和 animation 做补间动画与关键帧动画，用 transform 做缩放、旋转、3D变换，还有圆角、渐变、阴影、弹性盒！样样都是设计师的神器！\n\n如果你还掌握了 **入门篇（JavaScript/jQuery）**的知识，那么**恭喜你！你已经可以做出很多有趣的网页了！**很多 minisite 或者微信上的“H5” 小广告，这个程度的你已经可以轻松完成了！\n\n配合上你的设计功力，你可以开始尝试创作一些好玩的东西，比如这种富含交互和动画的网站 [绅宝 SENOVA](https://link.zhihu.com/?target=http%3A//huangxuan.me/senova/) ，它仍然是基于 [Huxpro/jquery.HSlider · GitHub](https://link.zhihu.com/?target=https%3A//github.com/Huxpro/jquery.HSlider)  实现的！或者给自己做个小小的个人网站试试\n\n**转职方向二：前端工程师（Front-end Engineer）**\n\n如果你觉得上述的这些都还满足不了你，你渴望做出更多了不起的交互，甚至你已经喜欢上了编程，想要转行做工程师，或者成为一名全栈设计师，那么你可以朝着这个方向继续发展！\n\n这个阶段的最大难度，是你必须**学会像一名软件工程师一样思考**。你需要踏踏实实学习编程语言，深入理解作用域、对象、类、封装、继承、面向对象编程、事件侦听、事件冒泡等一大堆编程概念，你还需要了解浏览器，学习 DOM、BOM、CSSOM 的 API，你甚至还需要学习一些网络原理，包括域名、URL、DNS、HTTP 请求都是什么…\n\n你可能会被这一大堆名词吓到。确实，想要搞定他们并不容易。但是，你要相信只要你肯花功夫它们也没有那么难，而更重要的是，如果你能拿下他们，你所收获的并不只是这些而已，而是真正跨过了一道大坎 —— **你的世界将因此打开， 你看待世界的方式将因此改变**\n\n对于这个阶段，你可以继续在  [http://www.codecademy.com/](https://link.zhihu.com/?target=http%3A//www.codecademy.com/)   上学习，但是 w3school 已经不够用了，遇到不会的语法，我推荐你查阅 [Mozilla 开发者网络](https://link.zhihu.com/?target=https%3A//developer.mozilla.org/zh-CN/)，这是少数中英文都有的非常专业且友好的网站。\n\n同时，你可能需要看一些书本来帮助你学习 JavaScript ：\n\n-  《[JavaScript高级程序设计（第3版） (豆瓣)](https://link.zhihu.com/?target=http%3A//book.douban.com/subject/10546125/) 》或 《[JavaScript权威指南 (豆瓣)](https://link.zhihu.com/?target=http%3A//book.douban.com/subject/2228378/)》，大而全的书只需要一本就够了\n- 如果上面这本你觉得太难，你可以先看 《[JavaScript DOM编程艺术 （第2版） (豆瓣)](https://link.zhihu.com/?target=http%3A//book.douban.com/subject/6038371/)》来过渡一下，这本书比较容易，它会教给你 “优雅降级、渐进增强”的优秀思想\n\n如果你能顺利得渡过了这个阶段，我想你已经能做出很多令你自豪的网站了！试着向身边的工程师朋友询问如何购买域名、配置简单的静态服务器，或者搜搜“Github Pages”，然后把你的作品挂在网络上让大家欣赏吧！\n\n你还可以试着用 JavaScript 写写小游戏，这不但能锻炼你的编程水平还非常有趣～比如这是我刚学 JS 不久后 hack 一晚的产物 —— 用 DOM 实现的打飞机：[Hux - Aircraft](https://link.zhihu.com/?target=http%3A//huangxuan.me/aircraft) （不支持手机）\n\n**入行篇**\n\n如果你能完成上述所有的学习，你已经是一名非常出色的前端学徒了！对于只是想要丰富技能的设计师或者产品经理来说，接下来的内容可能会让你感到不适 ;( \n但如果你铁了心想要真正入行进入大公司从事专职前端开发的工作，那么你可以接着往下看：\n\n近几年的前端技术发展迅猛，前端工程师早已不是切切图写写页面做点特效就完事的职位，你需要具备相当完善的工程师素质与计算机知识，成为一名真正的工程师。\n\n**你需要非常了解 JavaScript 这门语言**，包括 闭包、IIFE、this、prototype 及一些底层实现（ES、VO、AO）、熟悉常用的设计模式与 JavaScript 范式（比如实现类与私有属性）。另外，新的 ES6 已经问世，包括 class, module, arrow function 等等\n\n**你需要非常了解前端常用的网络及后端知识**，包括 Ajax、JSON、HTTP 请求、GET/POST 差异、RESTful、URL hash/query、webSocket、常用的跨域方式（JSONP/CORS、HTTP 强缓存/协商缓存，以及如何利用 CDN 、静态网站/动态网站区别、服务器端渲染/前端渲染区别等等\n\n**你需要学习使用进阶的 CSS**，包括熟悉 CSS 3，使用 Scss/Less 等编译到 CSS 的语言，使用 autoprefixer 等 PostCSS 工具，了解 CSS 在 Scope/Namespace 上的缺陷，你还可以学习 CSS Modules、CSS in JS 这些有趣的新玩意\n\n**你需要非常了解前端的模块化规范**，可能在你学习到这里的时候，Require.js/AMD 已经再见了，但是 CommonJS 与 ES6 Modules 你必须要了解。（你可以观看我的分享《[JavaScript Modularization Seven Day](https://link.zhihu.com/?target=http%3A//huangxuan.me/js-module-7day/%23/)》 来学习 JS 模块化的历史）\n\n**你需要熟悉 Git 与 Shell 的使用**，包括基于 git 的版本管理、分支管理与团队协作，包括简单的 Linux/Unix 命令、你要知道大部分程序员的工作可以通过 shell 更快更酷的完成，并且很多“软件”只能通过 shell 来使用。你还可以把你的代码放到 github 上与人分享，并且学习 github 上其他优秀的开源代码\n\n**你需要熟悉并且习惯使用 Node**，包括了解 npm、使用 Grunt/Gulp/Browserify/Webpack 优化你的工作流、对你的代码进行打包、混淆、压缩、发布，你还可以使用 Express/Koa 配合 MongoDB/Redis 涉足到后端领域，或者尝试用 Node 做后端渲染优化你的首屏体验\n\n**你需要了解各种 HTML 5 的新 API**，包括 video、audio，包括 Canvas，webGL、File API、App Cache、localStorage、IndexedDB、Drag & Drop、更高级的 DOM API、Fetch API 等等\n\n**你需要学习 JavaScript 的单线程与异步编程方法**，因为它们非常非常常用、包括 setTimeout/setInterval，回调与回调地狱、事件与event loop、还有 Promise 甚至 Async/Await\n\n**你需要非常了解浏览器**，包括主流浏览器的名称、内核与差异、包括私有属性与 -webkit- 等厂商前缀，你需要学习如何使用 Chrome DevTool，你需要了解浏览器渲染的 reflow/repaint 来避免 Jank 并进行有针对性的性能优化\n\n**你需要专门学习 Mobile Web**，因为移动互联网是趋势。包括 viewport、CSS pixel、 touch 事件、iOS/Android 浏览器的差异与兼容、移动端的性能优化、300ms delay 等等…你还需要知道 Hybrid 是什么，包括 Cordova/Phonegap，更复杂的比如和 iOS/Android 通信的机制，比如 URI Scheme 或者 JS Bridge\n\n**你需要学习一些****非常火热的前端框架/库**，他们不但能帮助你更快的进行开发、更重要的是他们背后所蕴含的思想。包括 Backbone、Angular、Vue、React、Polymer 等等、了解它们背后的双向数据绑定、单向数据流、MVC/MVVM/Flux 思想、Web Component 与组件化等等\n\n**你需要学习如何构建 web 单页应用**，这是 web 的未来，包括利用 history API 或者 hash 实现路由，包括基于 Ajax + 模版引擎或者其他技术的前端渲染、包括组织较为复杂的软件设计等等\n\n**我还建议你学习更多的计算机知识**，它们能对你的代码能起到潜移默化的作用，包括简单的计算机体系结构、更广泛的编程知识（面向对象/函数式等）、栈、堆、数组、队列、哈希表、树、图等数据结构、时间复杂度与空间复杂度以及简单的算法等等\n\n**你需要了解业内的大神并阅读它们的博客/知乎/微博**，比如  \n\n[@尤雨溪](http://www.zhihu.com/people/cfdec6226ece879d2571fbc274372e9f)[@贺师俊](http://www.zhihu.com/people/3ec3b166992a5a90a1083945d2490d38)[@张云龙](http://www.zhihu.com/people/3212f9044005e9306aab1b61e74e7ae6)[@徐飞](http://www.zhihu.com/people/c5198d4e9c0145aee04dd53cc6590edd)[@张克军](http://www.zhihu.com/people/20fdd386a6e59d178b8fe14e2863cb40)[@玉伯](http://www.zhihu.com/people/c11336b8607d86bc9090bed90757a34c)[@拔赤](http://www.zhihu.com/people/64458d15a75902cd0425732b7b757705)[@寸志](http://www.zhihu.com/people/0d9b98af12015c94cff646a6fc0773b5)[@题叶](http://www.zhihu.com/people/790dccce26904cdcd11b0fad3bac37b7)[@郭达峰](http://www.zhihu.com/people/85de6407f2219137df29b4249b91cfd5) 等等等等，很多思想和新东西只有从他们身上才能学到。我还推荐你多参加技术交流会，多认识一些可以一起学习的小伙伴，你们可以互相交流并且一起成长\n\n**你需要具备很强的自学能力、对技术有热情并且不断跟进**。因为 JavaScript/前端的社区非常非常活跃，有太多的新东西需要你自己来发现与学习：比如 Universal JavaScript、Isomorphic JavaScript、前端测试、HTML5 页游、WebRTC、WebSocket、CSS 4、SVG、HTTP/2、ES 7、React Native、Babel、TypeScript、Electron 等等等等…\n\n虽然一下扯得有点多，但这些确实就是你未来将会遇到的。你并不需要全部掌握它们，但是却多多益善；你也可以专精在某几个方面，这已经足以让你成为非常专业的前端工程师。\n\n\n\n最后，英语英语英语，无论是学习还是工作，这都是一个决定天花板的重要技能。\n\n以上。","source":"_posts/2020-2-24-HowToWeb.md","raw":"---\nlayout:     post\ntitle:      \"如何成为Web工程师\"\nintro:      \"\"\ndate:       2020-2-24 14:00:00\nauthor:     \"Makinohara\"\ncatalog: true\ntags:\n    - 生活感想\n    - 工程开发\n---\n\n# 职位需求\n\n## 阿里巴巴\n\n### 科技创新中心-前端专家-上海\n\n#### 岗位描述：\n\n1.持续关注Web技术的发展，掌握新技术的核心点，从中挑选适合公司业务发展的新技术；\n2.围绕公司业务进行前端框架和工具的设计和维护；\n3.技术攻坚，指导和帮助团队成员在业务中成长。\n\n#### 岗位要求：\n\n1.三年以上前端开发经验，对前端领域一个或多个方向有深入研究，是该方向的专家；\n2.熟悉主流前端框架（如React、Vue、Angular等）的原理及演化过程，有一定的前端框架设计经验；\n3.熟悉W3C/WHATWG规范，了解规范设计的思考，以及研发过程中的最佳实践；\n4.具备良好的沟通、规划和项目推动能力，以及独立解决技术难题的能力。\n\n### 蚂蚁金服-高级前端工程师/专家-蚂蚁保险\n\n#### 岗位描述：\n\n1. 与产品经理、设计师、开发同学紧密合作，打造极致体验的互联网保险产品；\n2. 参与多种平台的应用开发，包括Web及Mobile等产品，负责前端交互的实现；\n3. 能充分理解项目需求和设计需求，具有一定研发精神，能解决各种未知问题；\n4. 与团队成员分享经验和新技术，帮助团队成长，学习研究新的技术，并能迅速转化到潜在项目中。\n\n#### 岗位要求：\n\n1. 熟练掌握移动端H5开发、熟悉主流移动浏览器的技术特点；\n\n2. 熟练运用JavaScript语言与HTML5、CSS3等技术, 熟悉移动端Web绘图相关高级特性, 如canvas,webGL, CSS3动画效果等；\n\n3. 熟悉模块化、前端编译和构建工具，熟练运用主流的移动端JS库和开发框架，并深入理解其设计原理，例如：Webpack、ReactJS、Vue等；\n\n4. **熟悉 NodeJS Web 应用开发，了解koa、express的核心设计思想和原理；**\n\n5. 个性乐观开朗，逻辑性强，善于和各种背景的人合作；\n\n6. 对技术有强烈的进取心，具有良好的沟通能力和团队合作精神、优秀的分析问题和解决问题的能力；\n\n7. **有小程序、ReactNative开发经验者优先；**\n\n8. 有开源项目经验和长期维护技术博客经验者优先；\n\n9. **有全栈开发、具有服务端开发经验优先。**\n\n### 口碑-H5前端开发-上海、杭州\n\n#### 岗位描述：\n\n1、负责面向商家、对内运营体系等的各种企业级泛中台产品应用的前端架构设计和研发工作；\n2、参与本地生活前端技术体系建设，包括组件开发、工程化效能建设、多端架构设计、Node全栈、质量监控和保障体系建设等；\n3、深入理解业务和产品，不断提升产品的用户体验，技术驱动业务的发展；\n4、关注相关前沿技术研究，通过新技术服务团队和业务；\n\n#### 岗位要求：\n\n1、前端HTML/CSS/JavaScript等基础技术扎实，数据结构、网络等基础知识掌握牢固，熟悉浏览器原理机制；\n2、精通至少一种主流前端框架，如React/Vue/Angular等，能深入理解其设计原理，并对其他类似框架有所了解，有库或框架设计者优先；\n3、理解前端工程化，熟练使用相关工具，如Npm/Yarn/Webpack/Rollup等，有对前端工程化有自己的实践者优先；\n4、熟悉Node相关知识，有Koa/Egg/Express等的实践经验，若有其他后端语言如Java/PHP/Python/Golang等的开发经验优先；\n5、熟悉iOS/Android等客户端相关知识，具备ReactNative/Weex/Flutter能力和经验者优先；\n6、对前端技术有强烈的热情和进取心，具有良好的沟通能力、团队合作精神，优秀的分析问题和解决问题的能力；\n\n## 腾讯\n\n### 30628-腾讯广告Web前端开发工程师\n\n#### 工作职责\n\n负责腾讯广告业务的web前端的开发工作； 负责微信广告业务的web前端系统分析、优化与架构工作。\n\n#### 工作要求\n\n1.本科及以上学历，计算机相关专业； 2年以上前端开发经验，有完整的前端项目经验；\n2.熟悉JavaScript、HTML、CSS和HTTP协议等Web开发所需技能和知识点；\n3.熟悉各种前端框架（React、Vue）并有相关使用经验；\n4.良好的学习能力、沟通能力、团队协作能力、及分析问题解决问题能力，责任心强。\n5.熟悉golang/php等后台语言，有互联网广告相关业务开发经验者优先。\n\n### 25927-web前端开发工程师（上海）\n\n#### 工作职责\n\n负责先游海外版web前端开发；\n负责前端架构设计及性能调优工作。\n\n#### 工作要求\n\n本科及以上学历，计算机相关专业，3年以上成功产品web开发经验；\n精通js、h5、css等基本前端开发技术；\n熟练掌握主流js框架(vue/react)及web前端打包工具webpack等；\n熟练掌握Linux/unix 操作；\n熟悉后台语言者优先，如node/php；\n有良好的团队合作能力，技术视野开阔，对业界最新的前端技术和实现有浓厚的兴趣及深入的见解。\n\n### S2-高级web前端开发工程师\n\n#### 工作职责\n\n主要负责财经领域前端技术框架的统一规划及后续发展，推动前端后分离开发模式。\n1.负责财经IT整体前端架构设计与开发；\n2.负责前端开发流程的规范，工具、组件等建设；\n3.负责新技术的预研、落地，及前端技能内部培训；\n\n#### 工作要求\n\n1.本科及以上学历，计算机相关专业，5 年以上 Web 前端开发经验；\n2.熟悉 HTTP 基本原理，能熟练运用 HTML、CSS、JavaScript 构建高性能的 Web 应用程序；\n3.熟悉原生 JavaScript，熟悉 jQuery，至少掌握一种主流的前端框架，对vue或者react有丰富的开发经验，具备一定的框架设计能力；\n4.有使用 grunt、gulp、webpack 等工具进行前端工程化经验；\n5.有nodejs开发经验，对前后端分离模式有深入理解并有实际项目经验；\n6.工作积极主动，乐于分享，具有良好的逻辑思维及语言表达能沟通力和团队协作精神。\n\n## 字节跳动\n\n### 前端工程师\n\n上海社招\n\n#### 职位描述\n\n1、负责产品的前端开发工作； \n2、参与前端工程体系建设，建设工具、抽象框架、提炼组件； \n3、与团队配合完成整体项目规划、设计与开发。\n\n#### 职位要求\n\n1、熟练掌握JavaScript、CSS、HTML、DOM、动画、协议、安全、网络、性能优化等前端技术； \n2、对主流前端框架（ React、Vue、Angular ）至少一种有深入应用并深入理解其设计原理； \n3、熟悉MVC，MVVM，Flux，Redux等相关工程知识； \n4、熟悉W3C，ECMAScript，CommonJS，ES6等相关技术标准；\n5、熟练掌握 Grunt、Gulp、Webpack、FIS 其中任意一项构建工具的使用和配置； \n6、能对具体的产品进行性能优化，实现极致的页面加载、执行和渲染时间； \n7、注重产品质量，具有良好的代码风格、接口设计与程序架构； \n8、关注业界发展，对最新的前端技术有浓厚的兴趣及独特的见解，关注前端前沿技术研究，通过新技术服务团队和业务。\n\n### 前端架构师\n\n#### 职位描述\n\n1、负责沟通和协同类效率工具 PC客户端、Web端相关产品的架构、设计、优化； \n2、负责基础库、框架和关键模块的开发和改进； \n3、指导团队其他成员的设计和Coding，保证工程质量； \n4、优化前端团队的开发方式和流程、规范，提高团队效率。\n\n#### 职位要求\n\n1、大学本科及以上学历，4年以上前端开发经验，能理解目前流行的框架(react/redux/mobx)的设计思路并能进行源码分析； \n2、基本功扎实，精通HTML5，CSS3，ES6，ES7，熟悉 ECMAScript 语言规范；\n3、有丰富的前端工程方面的经验； \n4、注重代码质量，设计经验丰富，能够产出高质量的设计和代码；\n5、自我驱动能力、自我学习能力强，对前端前沿领域有比较高的热情和关注度，执行力好，良好的沟通协作能力，注重效率，能够深刻影响其他人；\n6、有知名开源项目者优先和客户端架构经验者优先。\n\n### 前端开发工程师 — 大数据\n\n#### 职位描述\n\n1、参与字节跳动大数据基础设施以及相关可视化产品的建设，为今日头条、抖音、火山、西瓜等旗下产品提供稳定高质量的数据服务； \n2、持续的性能优化和架构升级，不断提升团队效率和产品的用户体验； \n3、结合业务和数据场景，提出专业合理的可视化方案建议，并推动可视化技术产生更多的业务价值； \n4、提供全栈场景，不设边界。\n\n#### 职位要求\n\n1、对技术充满好奇心，乐于学习，愿意分享，具备良好的服务意识，责任心，团队沟通和协作能力、发现并解决问题的能力； \n2、有扎实的前端技术和计算机基础，包括但不限于 HTML / CSS / JavaScript / DOM / Http / 数据结构等； \n3、精通至少一门 MVVM 框架，如 AngularJS/Vue/React，使用 React 开发过大型项目或者复杂单页面应用者优先； \n4、熟练掌握 SVG / Canvas / WebGL 等前端绘图技术及标准，至少使用过一个数据可视化类库，包括但不限于 D3 / G2 / Three.js / ECharts / Highcharts，有一定计算机图形学基础的优先； \n5、掌握至少一门服务端编程语言，并有实战经验。熟悉 NodeJS / Python 者优先；\n6、有过大数据产品（Hadoop / Hive / Spark 等）相关开发经验者优先；\n7、有移动端开发经验并且有实际性能优化案例者优先； \n8、有自己的技术产品、开源作品或活跃的开源社区贡献者优先。\n\n\n\n# 总结：职位需求与自身能力\n\n| 需求：按重要程度排列                                         | 完成情况         | 侧重企业       |\n| ------------------------------------------------------------ | ---------------- | -------------- |\n| HTML CSS JS Web基础                                          | 5%               | 所有           |\n| 熟练掌握Linux/unix 操作；                                    | 5%               | 所有           |\n| 主流前端框架（如React、Vue、Angular等）                      | 0%               | 所有           |\n| 数据结构与算法；计算机网络等专业课                           | 7%               | 所有           |\n| 熟悉后台语言者优先，如node/php；                             | 1%               | 腾讯、字节跳动 |\n| 有后台/全栈开发经验                                          | 3%               | 阿里巴巴       |\n| 有自己的技术产品、开源作品或活跃的开源社区贡献者优先。       | 目前影响力：有限 | 字节跳动       |\n| 有小程序、ReactNative开发经验者优先；                        | 0%               | 阿里巴巴       |\n| 有使用 grunt、gulp、webpack 等工具进行前端工程化经验；       | 0%               | 腾讯、字节跳动 |\n| 熟悉golang/php等后台语言                                     | 0%               | 腾讯           |\n| 掌握至少一门服务端编程语言，并有实战经验。熟悉 NodeJS / Python 者优先； | 0%               | 字节跳动       |\n| 熟悉MVC，MVVM，Flux，Redux等相关工程知识                     | 0%               | 字节跳动       |\n\n\n\n# 设计师如何学习前端技术（转载自：黄玄的知乎回答）\n\n> *作者：黄玄*\n> *链接：https://www.zhihu.com/question/21921588/answer/69680480*\n> *来源：知乎*\n> *著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。*\n\n**背景篇**\n\n在这个时代学习新东西，一定要善于使用 Bing/Google 等搜索引擎…网络上的资源非常丰富，自学能力也尤为重要，尤其是对于学习技术！\n\n**入门篇（HTML/CSS）**\n\n说起设计师希望学前端的初衷，大概还是因为各种华丽的网页特效/交互太过吸引人，这种感觉大概就是：“Hey，我的设计可以做成网页访问了呢！”\n好在，“展示”对于前端技术来说反而是最简单的部分。所以，放下你对“编程”两个字的恐惧，**从“称不上是编程语言”的 HTML/CSS 开始，先做点有成就感的东西出来吧！**\n\n对于设计师来说，最有成就感的一定是“可以看到的东西”，而 HTML/CSS 正是用来干这个的，HTML 就是一堆非常简单的标签，而 CSS 无非就是把你画画的流程用**英语**按一定的格式写出来而已：\n\n```text\n<p> p is paragraph! </p>\n\n<style>\np { color: red;}\n</style>\n```\n\n是不是非常容易，就跟读英语一样！\n接下来，你就需要开始自学啦，比如常用 HTML 标签的意思，各种 CSS 的属性，还有 CSS 的盒模型、优先级、选择器……放心，它们都很容易；能玩得转 PS/AI/Flash/Axure/AE/Sketch 的设计师们，学这个洒洒水啦\n\n推荐几个资源：\n\n- [w3school 在线教程](https://link.zhihu.com/?target=http%3A//www.w3school.com.cn/) (中文，一个很 Low 但是又很好的入门学习网站）\n- [Learn to code](https://link.zhihu.com/?target=http%3A//www.codecademy.com/) (Codecademy，如果你英文 OK，**强烈建议**你使用它进行交互式的学习！里面从 HTML/CSS 到搭建网站的课程都有，免费，生动直观）\n\n**这个阶段的练习主要是“临摹”：用代码画出你想画的网站，越多越好。**\n\n对于书，我**非常不推荐**上来就去看各种厚厚的入门/指南书，没必要！这一个阶段应该快速上手，培养兴趣，培养成就感。先做出可以看的东西再说，掌握常用的 HTML/CSS 就够用了\n\n如果完成的好，这个阶段过后你大概就可以写出一些简单又好看的“静态网页”了，比如这个作品集/简历：[Portfolio - 黄玄的博客](https://link.zhihu.com/?target=http%3A//huangxuan.me/portfolio/) （好久没更新了…丢人现眼）\n\n**入门篇（JavaScript/jQuery）**\n\n想要在网页上实现一些交互效果，比如轮播图、点击按钮后播放动画？那你就必须要开始学习 JavaScript 了！JavaScript 是一门完整、强大并且非常热门的编程语言，你在浏览器里看到的所有交互或者高级功能都是由它在背后支撑的！\n\n举个小栗子：\n\n```text\nalert(\"Hello World!\")\n```\n\n就这一行，就可以在浏览器里弹出 Hello World 啦！\n\n在了解一些基础的 JavaScript 概念（变量、函数、基本类型）后，我们可以直接去学习 jQuery，你不用知道它具体是什么（它是一个 JavaScript 代码库），你只要知道它可以显著地降低你编写交互的难度就好了：\n\n```text\n$('.className').click(function(){\n    alert(\"Hello jQuery\")\n})\n```\n\n通过 jQuery，我们可以继续使用在 CSS 中学到的“选择器”\n\n对于没有编程基础的人来说，想要完全掌握它们两并不容易。作为设计师，很多时候我们可以先不必深究它们的原理，而是尝试直接应用它！这样成就感会来得很快，并且你可以通过实际应用更加理解 JavaScript 是用来做什么的。\n\n我仍然推荐你使用 [w3school 在线教程](https://link.zhihu.com/?target=http%3A//www.w3school.com.cn/)  与 [http://www.codecademy.com/](https://link.zhihu.com/?target=http%3A//www.codecademy.com/)  进行学习。另外，你可以看一看诸如《[锋利的jQuery (豆瓣)](https://link.zhihu.com/?target=http%3A//book.douban.com/subject/10792216/)》 这一类非常实用的书籍，可以让你很快上手做出一些简单的效果来！\n\n如果学习得顺利，你还可以尝试使用各种丰富的  jQuery 插件，你会发现写出支持用户交互的网站也没有那么困难～很多看上去很复杂的功能（比如轮播图、灯箱、下拉菜单），搜一搜然后看看文档（教程）、改改示例代码就好了。\n\n比如说，配合 [Huxpro/jquery.HSlider · GitHub](https://link.zhihu.com/?target=https%3A//github.com/Huxpro/jquery.HSlider) 这样的轮播图插件，你可以很轻松的写出 [HSlider | Demo](https://link.zhihu.com/?target=http%3A//huangxuan.me/jquery.HSlider/) 这样的网页相册或者 [HSlider | Weather](https://link.zhihu.com/?target=http%3A//huangxuan.me/jquery.HSlider/demo-weather-app/) 这样的手机端 App 原型～\n\n最后，我想推荐下 [Bootstrap · The world's most popular mobile-first and respons](https://link.zhihu.com/?target=http%3A//getbootstrap.com/) ，这是世界上最知名的前端 UI 框架之一，提供了大量 CSS 样式与 jQuery 插件。它非常容易学习并且中英文教程都非常健全，你并不需要理解它背后的工作原理就能很好的使用它，让你快速达到“可以建站的水平”。有余力的话，你不但可以学习如何使用它，还可以学习它背后的设计思想。\n\n**转职方向一：前端重构 （Web Rebuild）**\n\n业内通常把专精 HTML/CSS 的前端从业人员称为重构，而对于注重视觉效果的设计师来说，在掌握基本的 HTML/CSS 后，就可以朝着这个方向发展了。\n\n**到了这个阶段，你不但要知道怎么写页面，还要知道它们都是为什么，并且知道怎么做更好。这对你理解 Web 世界非常有帮助，并且能帮助你做出更“系统化”的设计。**\n\nCSS 的学问很多，你需要开始理解文档流、浮动流等各种定位的方式与原理，理解 CSS 的继承复用思想、理解浏览器的差异、兼容、优雅降级……这里强烈推荐一本书：《[精通CSS（第2版） (豆瓣)](https://link.zhihu.com/?target=http%3A//book.douban.com/subject/4736167/)》，虽然前端技术突飞猛进，但这本书的思想永远不会过时。\n\nHTML 方面，要开始注重语义化、可访问性与结构的合理，你要开始学习“结构与样式的分离”，这里有一本神书将这种分离做到了极致：《[CSS禅意花园 (豆瓣)](https://link.zhihu.com/?target=http%3A//book.douban.com/subject/2052176/)》\n\n另外，各种炫酷屌的 CSS 3 属性你一定会喜欢：你可以用媒体查询做响应式网页设计，你可以用 transiton 和 animation 做补间动画与关键帧动画，用 transform 做缩放、旋转、3D变换，还有圆角、渐变、阴影、弹性盒！样样都是设计师的神器！\n\n如果你还掌握了 **入门篇（JavaScript/jQuery）**的知识，那么**恭喜你！你已经可以做出很多有趣的网页了！**很多 minisite 或者微信上的“H5” 小广告，这个程度的你已经可以轻松完成了！\n\n配合上你的设计功力，你可以开始尝试创作一些好玩的东西，比如这种富含交互和动画的网站 [绅宝 SENOVA](https://link.zhihu.com/?target=http%3A//huangxuan.me/senova/) ，它仍然是基于 [Huxpro/jquery.HSlider · GitHub](https://link.zhihu.com/?target=https%3A//github.com/Huxpro/jquery.HSlider)  实现的！或者给自己做个小小的个人网站试试\n\n**转职方向二：前端工程师（Front-end Engineer）**\n\n如果你觉得上述的这些都还满足不了你，你渴望做出更多了不起的交互，甚至你已经喜欢上了编程，想要转行做工程师，或者成为一名全栈设计师，那么你可以朝着这个方向继续发展！\n\n这个阶段的最大难度，是你必须**学会像一名软件工程师一样思考**。你需要踏踏实实学习编程语言，深入理解作用域、对象、类、封装、继承、面向对象编程、事件侦听、事件冒泡等一大堆编程概念，你还需要了解浏览器，学习 DOM、BOM、CSSOM 的 API，你甚至还需要学习一些网络原理，包括域名、URL、DNS、HTTP 请求都是什么…\n\n你可能会被这一大堆名词吓到。确实，想要搞定他们并不容易。但是，你要相信只要你肯花功夫它们也没有那么难，而更重要的是，如果你能拿下他们，你所收获的并不只是这些而已，而是真正跨过了一道大坎 —— **你的世界将因此打开， 你看待世界的方式将因此改变**\n\n对于这个阶段，你可以继续在  [http://www.codecademy.com/](https://link.zhihu.com/?target=http%3A//www.codecademy.com/)   上学习，但是 w3school 已经不够用了，遇到不会的语法，我推荐你查阅 [Mozilla 开发者网络](https://link.zhihu.com/?target=https%3A//developer.mozilla.org/zh-CN/)，这是少数中英文都有的非常专业且友好的网站。\n\n同时，你可能需要看一些书本来帮助你学习 JavaScript ：\n\n-  《[JavaScript高级程序设计（第3版） (豆瓣)](https://link.zhihu.com/?target=http%3A//book.douban.com/subject/10546125/) 》或 《[JavaScript权威指南 (豆瓣)](https://link.zhihu.com/?target=http%3A//book.douban.com/subject/2228378/)》，大而全的书只需要一本就够了\n- 如果上面这本你觉得太难，你可以先看 《[JavaScript DOM编程艺术 （第2版） (豆瓣)](https://link.zhihu.com/?target=http%3A//book.douban.com/subject/6038371/)》来过渡一下，这本书比较容易，它会教给你 “优雅降级、渐进增强”的优秀思想\n\n如果你能顺利得渡过了这个阶段，我想你已经能做出很多令你自豪的网站了！试着向身边的工程师朋友询问如何购买域名、配置简单的静态服务器，或者搜搜“Github Pages”，然后把你的作品挂在网络上让大家欣赏吧！\n\n你还可以试着用 JavaScript 写写小游戏，这不但能锻炼你的编程水平还非常有趣～比如这是我刚学 JS 不久后 hack 一晚的产物 —— 用 DOM 实现的打飞机：[Hux - Aircraft](https://link.zhihu.com/?target=http%3A//huangxuan.me/aircraft) （不支持手机）\n\n**入行篇**\n\n如果你能完成上述所有的学习，你已经是一名非常出色的前端学徒了！对于只是想要丰富技能的设计师或者产品经理来说，接下来的内容可能会让你感到不适 ;( \n但如果你铁了心想要真正入行进入大公司从事专职前端开发的工作，那么你可以接着往下看：\n\n近几年的前端技术发展迅猛，前端工程师早已不是切切图写写页面做点特效就完事的职位，你需要具备相当完善的工程师素质与计算机知识，成为一名真正的工程师。\n\n**你需要非常了解 JavaScript 这门语言**，包括 闭包、IIFE、this、prototype 及一些底层实现（ES、VO、AO）、熟悉常用的设计模式与 JavaScript 范式（比如实现类与私有属性）。另外，新的 ES6 已经问世，包括 class, module, arrow function 等等\n\n**你需要非常了解前端常用的网络及后端知识**，包括 Ajax、JSON、HTTP 请求、GET/POST 差异、RESTful、URL hash/query、webSocket、常用的跨域方式（JSONP/CORS、HTTP 强缓存/协商缓存，以及如何利用 CDN 、静态网站/动态网站区别、服务器端渲染/前端渲染区别等等\n\n**你需要学习使用进阶的 CSS**，包括熟悉 CSS 3，使用 Scss/Less 等编译到 CSS 的语言，使用 autoprefixer 等 PostCSS 工具，了解 CSS 在 Scope/Namespace 上的缺陷，你还可以学习 CSS Modules、CSS in JS 这些有趣的新玩意\n\n**你需要非常了解前端的模块化规范**，可能在你学习到这里的时候，Require.js/AMD 已经再见了，但是 CommonJS 与 ES6 Modules 你必须要了解。（你可以观看我的分享《[JavaScript Modularization Seven Day](https://link.zhihu.com/?target=http%3A//huangxuan.me/js-module-7day/%23/)》 来学习 JS 模块化的历史）\n\n**你需要熟悉 Git 与 Shell 的使用**，包括基于 git 的版本管理、分支管理与团队协作，包括简单的 Linux/Unix 命令、你要知道大部分程序员的工作可以通过 shell 更快更酷的完成，并且很多“软件”只能通过 shell 来使用。你还可以把你的代码放到 github 上与人分享，并且学习 github 上其他优秀的开源代码\n\n**你需要熟悉并且习惯使用 Node**，包括了解 npm、使用 Grunt/Gulp/Browserify/Webpack 优化你的工作流、对你的代码进行打包、混淆、压缩、发布，你还可以使用 Express/Koa 配合 MongoDB/Redis 涉足到后端领域，或者尝试用 Node 做后端渲染优化你的首屏体验\n\n**你需要了解各种 HTML 5 的新 API**，包括 video、audio，包括 Canvas，webGL、File API、App Cache、localStorage、IndexedDB、Drag & Drop、更高级的 DOM API、Fetch API 等等\n\n**你需要学习 JavaScript 的单线程与异步编程方法**，因为它们非常非常常用、包括 setTimeout/setInterval，回调与回调地狱、事件与event loop、还有 Promise 甚至 Async/Await\n\n**你需要非常了解浏览器**，包括主流浏览器的名称、内核与差异、包括私有属性与 -webkit- 等厂商前缀，你需要学习如何使用 Chrome DevTool，你需要了解浏览器渲染的 reflow/repaint 来避免 Jank 并进行有针对性的性能优化\n\n**你需要专门学习 Mobile Web**，因为移动互联网是趋势。包括 viewport、CSS pixel、 touch 事件、iOS/Android 浏览器的差异与兼容、移动端的性能优化、300ms delay 等等…你还需要知道 Hybrid 是什么，包括 Cordova/Phonegap，更复杂的比如和 iOS/Android 通信的机制，比如 URI Scheme 或者 JS Bridge\n\n**你需要学习一些****非常火热的前端框架/库**，他们不但能帮助你更快的进行开发、更重要的是他们背后所蕴含的思想。包括 Backbone、Angular、Vue、React、Polymer 等等、了解它们背后的双向数据绑定、单向数据流、MVC/MVVM/Flux 思想、Web Component 与组件化等等\n\n**你需要学习如何构建 web 单页应用**，这是 web 的未来，包括利用 history API 或者 hash 实现路由，包括基于 Ajax + 模版引擎或者其他技术的前端渲染、包括组织较为复杂的软件设计等等\n\n**我还建议你学习更多的计算机知识**，它们能对你的代码能起到潜移默化的作用，包括简单的计算机体系结构、更广泛的编程知识（面向对象/函数式等）、栈、堆、数组、队列、哈希表、树、图等数据结构、时间复杂度与空间复杂度以及简单的算法等等\n\n**你需要了解业内的大神并阅读它们的博客/知乎/微博**，比如  \n\n[@尤雨溪](http://www.zhihu.com/people/cfdec6226ece879d2571fbc274372e9f)[@贺师俊](http://www.zhihu.com/people/3ec3b166992a5a90a1083945d2490d38)[@张云龙](http://www.zhihu.com/people/3212f9044005e9306aab1b61e74e7ae6)[@徐飞](http://www.zhihu.com/people/c5198d4e9c0145aee04dd53cc6590edd)[@张克军](http://www.zhihu.com/people/20fdd386a6e59d178b8fe14e2863cb40)[@玉伯](http://www.zhihu.com/people/c11336b8607d86bc9090bed90757a34c)[@拔赤](http://www.zhihu.com/people/64458d15a75902cd0425732b7b757705)[@寸志](http://www.zhihu.com/people/0d9b98af12015c94cff646a6fc0773b5)[@题叶](http://www.zhihu.com/people/790dccce26904cdcd11b0fad3bac37b7)[@郭达峰](http://www.zhihu.com/people/85de6407f2219137df29b4249b91cfd5) 等等等等，很多思想和新东西只有从他们身上才能学到。我还推荐你多参加技术交流会，多认识一些可以一起学习的小伙伴，你们可以互相交流并且一起成长\n\n**你需要具备很强的自学能力、对技术有热情并且不断跟进**。因为 JavaScript/前端的社区非常非常活跃，有太多的新东西需要你自己来发现与学习：比如 Universal JavaScript、Isomorphic JavaScript、前端测试、HTML5 页游、WebRTC、WebSocket、CSS 4、SVG、HTTP/2、ES 7、React Native、Babel、TypeScript、Electron 等等等等…\n\n虽然一下扯得有点多，但这些确实就是你未来将会遇到的。你并不需要全部掌握它们，但是却多多益善；你也可以专精在某几个方面，这已经足以让你成为非常专业的前端工程师。\n\n\n\n最后，英语英语英语，无论是学习还是工作，这都是一个决定天花板的重要技能。\n\n以上。","slug":"2020-2-24-HowToWeb","published":1,"updated":"2021-10-24T02:04:35.830Z","_id":"ckey85uji0017ho8abdhbdilv","comments":1,"photos":[],"link":"","content":"<h1 id=\"职位需求\"><a href=\"#职位需求\" class=\"headerlink\" title=\"职位需求\"></a>职位需求</h1><h2 id=\"阿里巴巴\"><a href=\"#阿里巴巴\" class=\"headerlink\" title=\"阿里巴巴\"></a>阿里巴巴</h2><h3 id=\"科技创新中心-前端专家-上海\"><a href=\"#科技创新中心-前端专家-上海\" class=\"headerlink\" title=\"科技创新中心-前端专家-上海\"></a>科技创新中心-前端专家-上海</h3><h4 id=\"岗位描述：\"><a href=\"#岗位描述：\" class=\"headerlink\" title=\"岗位描述：\"></a>岗位描述：</h4><p>1.持续关注Web技术的发展，掌握新技术的核心点，从中挑选适合公司业务发展的新技术；<br>2.围绕公司业务进行前端框架和工具的设计和维护；<br>3.技术攻坚，指导和帮助团队成员在业务中成长。</p>\n<h4 id=\"岗位要求：\"><a href=\"#岗位要求：\" class=\"headerlink\" title=\"岗位要求：\"></a>岗位要求：</h4><p>1.三年以上前端开发经验，对前端领域一个或多个方向有深入研究，是该方向的专家；<br>2.熟悉主流前端框架（如React、Vue、Angular等）的原理及演化过程，有一定的前端框架设计经验；<br>3.熟悉W3C/WHATWG规范，了解规范设计的思考，以及研发过程中的最佳实践；<br>4.具备良好的沟通、规划和项目推动能力，以及独立解决技术难题的能力。</p>\n<h3 id=\"蚂蚁金服-高级前端工程师-专家-蚂蚁保险\"><a href=\"#蚂蚁金服-高级前端工程师-专家-蚂蚁保险\" class=\"headerlink\" title=\"蚂蚁金服-高级前端工程师/专家-蚂蚁保险\"></a>蚂蚁金服-高级前端工程师/专家-蚂蚁保险</h3><h4 id=\"岗位描述：-1\"><a href=\"#岗位描述：-1\" class=\"headerlink\" title=\"岗位描述：\"></a>岗位描述：</h4><ol>\n<li>与产品经理、设计师、开发同学紧密合作，打造极致体验的互联网保险产品；</li>\n<li>参与多种平台的应用开发，包括Web及Mobile等产品，负责前端交互的实现；</li>\n<li>能充分理解项目需求和设计需求，具有一定研发精神，能解决各种未知问题；</li>\n<li>与团队成员分享经验和新技术，帮助团队成长，学习研究新的技术，并能迅速转化到潜在项目中。</li>\n</ol>\n<h4 id=\"岗位要求：-1\"><a href=\"#岗位要求：-1\" class=\"headerlink\" title=\"岗位要求：\"></a>岗位要求：</h4><ol>\n<li><p>熟练掌握移动端H5开发、熟悉主流移动浏览器的技术特点；</p>\n</li>\n<li><p>熟练运用JavaScript语言与HTML5、CSS3等技术, 熟悉移动端Web绘图相关高级特性, 如canvas,webGL, CSS3动画效果等；</p>\n</li>\n<li><p>熟悉模块化、前端编译和构建工具，熟练运用主流的移动端JS库和开发框架，并深入理解其设计原理，例如：Webpack、ReactJS、Vue等；</p>\n</li>\n<li><p><strong>熟悉 NodeJS Web 应用开发，了解koa、express的核心设计思想和原理；</strong></p>\n</li>\n<li><p>个性乐观开朗，逻辑性强，善于和各种背景的人合作；</p>\n</li>\n<li><p>对技术有强烈的进取心，具有良好的沟通能力和团队合作精神、优秀的分析问题和解决问题的能力；</p>\n</li>\n<li><p><strong>有小程序、ReactNative开发经验者优先；</strong></p>\n</li>\n<li><p>有开源项目经验和长期维护技术博客经验者优先；</p>\n</li>\n<li><p><strong>有全栈开发、具有服务端开发经验优先。</strong></p>\n</li>\n</ol>\n<h3 id=\"口碑-H5前端开发-上海、杭州\"><a href=\"#口碑-H5前端开发-上海、杭州\" class=\"headerlink\" title=\"口碑-H5前端开发-上海、杭州\"></a>口碑-H5前端开发-上海、杭州</h3><h4 id=\"岗位描述：-2\"><a href=\"#岗位描述：-2\" class=\"headerlink\" title=\"岗位描述：\"></a>岗位描述：</h4><p>1、负责面向商家、对内运营体系等的各种企业级泛中台产品应用的前端架构设计和研发工作；<br>2、参与本地生活前端技术体系建设，包括组件开发、工程化效能建设、多端架构设计、Node全栈、质量监控和保障体系建设等；<br>3、深入理解业务和产品，不断提升产品的用户体验，技术驱动业务的发展；<br>4、关注相关前沿技术研究，通过新技术服务团队和业务；</p>\n<h4 id=\"岗位要求：-2\"><a href=\"#岗位要求：-2\" class=\"headerlink\" title=\"岗位要求：\"></a>岗位要求：</h4><p>1、前端HTML/CSS/JavaScript等基础技术扎实，数据结构、网络等基础知识掌握牢固，熟悉浏览器原理机制；<br>2、精通至少一种主流前端框架，如React/Vue/Angular等，能深入理解其设计原理，并对其他类似框架有所了解，有库或框架设计者优先；<br>3、理解前端工程化，熟练使用相关工具，如Npm/Yarn/Webpack/Rollup等，有对前端工程化有自己的实践者优先；<br>4、熟悉Node相关知识，有Koa/Egg/Express等的实践经验，若有其他后端语言如Java/PHP/Python/Golang等的开发经验优先；<br>5、熟悉iOS/Android等客户端相关知识，具备ReactNative/Weex/Flutter能力和经验者优先；<br>6、对前端技术有强烈的热情和进取心，具有良好的沟通能力、团队合作精神，优秀的分析问题和解决问题的能力；</p>\n<h2 id=\"腾讯\"><a href=\"#腾讯\" class=\"headerlink\" title=\"腾讯\"></a>腾讯</h2><h3 id=\"30628-腾讯广告Web前端开发工程师\"><a href=\"#30628-腾讯广告Web前端开发工程师\" class=\"headerlink\" title=\"30628-腾讯广告Web前端开发工程师\"></a>30628-腾讯广告Web前端开发工程师</h3><h4 id=\"工作职责\"><a href=\"#工作职责\" class=\"headerlink\" title=\"工作职责\"></a>工作职责</h4><p>负责腾讯广告业务的web前端的开发工作； 负责微信广告业务的web前端系统分析、优化与架构工作。</p>\n<h4 id=\"工作要求\"><a href=\"#工作要求\" class=\"headerlink\" title=\"工作要求\"></a>工作要求</h4><p>1.本科及以上学历，计算机相关专业； 2年以上前端开发经验，有完整的前端项目经验；<br>2.熟悉JavaScript、HTML、CSS和HTTP协议等Web开发所需技能和知识点；<br>3.熟悉各种前端框架（React、Vue）并有相关使用经验；<br>4.良好的学习能力、沟通能力、团队协作能力、及分析问题解决问题能力，责任心强。<br>5.熟悉golang/php等后台语言，有互联网广告相关业务开发经验者优先。</p>\n<h3 id=\"25927-web前端开发工程师（上海）\"><a href=\"#25927-web前端开发工程师（上海）\" class=\"headerlink\" title=\"25927-web前端开发工程师（上海）\"></a>25927-web前端开发工程师（上海）</h3><h4 id=\"工作职责-1\"><a href=\"#工作职责-1\" class=\"headerlink\" title=\"工作职责\"></a>工作职责</h4><p>负责先游海外版web前端开发；<br>负责前端架构设计及性能调优工作。</p>\n<h4 id=\"工作要求-1\"><a href=\"#工作要求-1\" class=\"headerlink\" title=\"工作要求\"></a>工作要求</h4><p>本科及以上学历，计算机相关专业，3年以上成功产品web开发经验；<br>精通js、h5、css等基本前端开发技术；<br>熟练掌握主流js框架(vue/react)及web前端打包工具webpack等；<br>熟练掌握Linux/unix 操作；<br>熟悉后台语言者优先，如node/php；<br>有良好的团队合作能力，技术视野开阔，对业界最新的前端技术和实现有浓厚的兴趣及深入的见解。</p>\n<h3 id=\"S2-高级web前端开发工程师\"><a href=\"#S2-高级web前端开发工程师\" class=\"headerlink\" title=\"S2-高级web前端开发工程师\"></a>S2-高级web前端开发工程师</h3><h4 id=\"工作职责-2\"><a href=\"#工作职责-2\" class=\"headerlink\" title=\"工作职责\"></a>工作职责</h4><p>主要负责财经领域前端技术框架的统一规划及后续发展，推动前端后分离开发模式。<br>1.负责财经IT整体前端架构设计与开发；<br>2.负责前端开发流程的规范，工具、组件等建设；<br>3.负责新技术的预研、落地，及前端技能内部培训；</p>\n<h4 id=\"工作要求-2\"><a href=\"#工作要求-2\" class=\"headerlink\" title=\"工作要求\"></a>工作要求</h4><p>1.本科及以上学历，计算机相关专业，5 年以上 Web 前端开发经验；<br>2.熟悉 HTTP 基本原理，能熟练运用 HTML、CSS、JavaScript 构建高性能的 Web 应用程序；<br>3.熟悉原生 JavaScript，熟悉 jQuery，至少掌握一种主流的前端框架，对vue或者react有丰富的开发经验，具备一定的框架设计能力；<br>4.有使用 grunt、gulp、webpack 等工具进行前端工程化经验；<br>5.有nodejs开发经验，对前后端分离模式有深入理解并有实际项目经验；<br>6.工作积极主动，乐于分享，具有良好的逻辑思维及语言表达能沟通力和团队协作精神。</p>\n<h2 id=\"字节跳动\"><a href=\"#字节跳动\" class=\"headerlink\" title=\"字节跳动\"></a>字节跳动</h2><h3 id=\"前端工程师\"><a href=\"#前端工程师\" class=\"headerlink\" title=\"前端工程师\"></a>前端工程师</h3><p>上海社招</p>\n<h4 id=\"职位描述\"><a href=\"#职位描述\" class=\"headerlink\" title=\"职位描述\"></a>职位描述</h4><p>1、负责产品的前端开发工作；<br>2、参与前端工程体系建设，建设工具、抽象框架、提炼组件；<br>3、与团队配合完成整体项目规划、设计与开发。</p>\n<h4 id=\"职位要求\"><a href=\"#职位要求\" class=\"headerlink\" title=\"职位要求\"></a>职位要求</h4><p>1、熟练掌握JavaScript、CSS、HTML、DOM、动画、协议、安全、网络、性能优化等前端技术；<br>2、对主流前端框架（ React、Vue、Angular ）至少一种有深入应用并深入理解其设计原理；<br>3、熟悉MVC，MVVM，Flux，Redux等相关工程知识；<br>4、熟悉W3C，ECMAScript，CommonJS，ES6等相关技术标准；<br>5、熟练掌握 Grunt、Gulp、Webpack、FIS 其中任意一项构建工具的使用和配置；<br>6、能对具体的产品进行性能优化，实现极致的页面加载、执行和渲染时间；<br>7、注重产品质量，具有良好的代码风格、接口设计与程序架构；<br>8、关注业界发展，对最新的前端技术有浓厚的兴趣及独特的见解，关注前端前沿技术研究，通过新技术服务团队和业务。</p>\n<h3 id=\"前端架构师\"><a href=\"#前端架构师\" class=\"headerlink\" title=\"前端架构师\"></a>前端架构师</h3><h4 id=\"职位描述-1\"><a href=\"#职位描述-1\" class=\"headerlink\" title=\"职位描述\"></a>职位描述</h4><p>1、负责沟通和协同类效率工具 PC客户端、Web端相关产品的架构、设计、优化；<br>2、负责基础库、框架和关键模块的开发和改进；<br>3、指导团队其他成员的设计和Coding，保证工程质量；<br>4、优化前端团队的开发方式和流程、规范，提高团队效率。</p>\n<h4 id=\"职位要求-1\"><a href=\"#职位要求-1\" class=\"headerlink\" title=\"职位要求\"></a>职位要求</h4><p>1、大学本科及以上学历，4年以上前端开发经验，能理解目前流行的框架(react/redux/mobx)的设计思路并能进行源码分析；<br>2、基本功扎实，精通HTML5，CSS3，ES6，ES7，熟悉 ECMAScript 语言规范；<br>3、有丰富的前端工程方面的经验；<br>4、注重代码质量，设计经验丰富，能够产出高质量的设计和代码；<br>5、自我驱动能力、自我学习能力强，对前端前沿领域有比较高的热情和关注度，执行力好，良好的沟通协作能力，注重效率，能够深刻影响其他人；<br>6、有知名开源项目者优先和客户端架构经验者优先。</p>\n<h3 id=\"前端开发工程师-—-大数据\"><a href=\"#前端开发工程师-—-大数据\" class=\"headerlink\" title=\"前端开发工程师 — 大数据\"></a>前端开发工程师 — 大数据</h3><h4 id=\"职位描述-2\"><a href=\"#职位描述-2\" class=\"headerlink\" title=\"职位描述\"></a>职位描述</h4><p>1、参与字节跳动大数据基础设施以及相关可视化产品的建设，为今日头条、抖音、火山、西瓜等旗下产品提供稳定高质量的数据服务；<br>2、持续的性能优化和架构升级，不断提升团队效率和产品的用户体验；<br>3、结合业务和数据场景，提出专业合理的可视化方案建议，并推动可视化技术产生更多的业务价值；<br>4、提供全栈场景，不设边界。</p>\n<h4 id=\"职位要求-2\"><a href=\"#职位要求-2\" class=\"headerlink\" title=\"职位要求\"></a>职位要求</h4><p>1、对技术充满好奇心，乐于学习，愿意分享，具备良好的服务意识，责任心，团队沟通和协作能力、发现并解决问题的能力；<br>2、有扎实的前端技术和计算机基础，包括但不限于 HTML / CSS / JavaScript / DOM / Http / 数据结构等；<br>3、精通至少一门 MVVM 框架，如 AngularJS/Vue/React，使用 React 开发过大型项目或者复杂单页面应用者优先；<br>4、熟练掌握 SVG / Canvas / WebGL 等前端绘图技术及标准，至少使用过一个数据可视化类库，包括但不限于 D3 / G2 / Three.js / ECharts / Highcharts，有一定计算机图形学基础的优先；<br>5、掌握至少一门服务端编程语言，并有实战经验。熟悉 NodeJS / Python 者优先；<br>6、有过大数据产品（Hadoop / Hive / Spark 等）相关开发经验者优先；<br>7、有移动端开发经验并且有实际性能优化案例者优先；<br>8、有自己的技术产品、开源作品或活跃的开源社区贡献者优先。</p>\n<h1 id=\"总结：职位需求与自身能力\"><a href=\"#总结：职位需求与自身能力\" class=\"headerlink\" title=\"总结：职位需求与自身能力\"></a>总结：职位需求与自身能力</h1><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>需求：按重要程度排列</th>\n<th>完成情况</th>\n<th>侧重企业</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>HTML CSS JS Web基础</td>\n<td>5%</td>\n<td>所有</td>\n</tr>\n<tr>\n<td>熟练掌握Linux/unix 操作；</td>\n<td>5%</td>\n<td>所有</td>\n</tr>\n<tr>\n<td>主流前端框架（如React、Vue、Angular等）</td>\n<td>0%</td>\n<td>所有</td>\n</tr>\n<tr>\n<td>数据结构与算法；计算机网络等专业课</td>\n<td>7%</td>\n<td>所有</td>\n</tr>\n<tr>\n<td>熟悉后台语言者优先，如node/php；</td>\n<td>1%</td>\n<td>腾讯、字节跳动</td>\n</tr>\n<tr>\n<td>有后台/全栈开发经验</td>\n<td>3%</td>\n<td>阿里巴巴</td>\n</tr>\n<tr>\n<td>有自己的技术产品、开源作品或活跃的开源社区贡献者优先。</td>\n<td>目前影响力：有限</td>\n<td>字节跳动</td>\n</tr>\n<tr>\n<td>有小程序、ReactNative开发经验者优先；</td>\n<td>0%</td>\n<td>阿里巴巴</td>\n</tr>\n<tr>\n<td>有使用 grunt、gulp、webpack 等工具进行前端工程化经验；</td>\n<td>0%</td>\n<td>腾讯、字节跳动</td>\n</tr>\n<tr>\n<td>熟悉golang/php等后台语言</td>\n<td>0%</td>\n<td>腾讯</td>\n</tr>\n<tr>\n<td>掌握至少一门服务端编程语言，并有实战经验。熟悉 NodeJS / Python 者优先；</td>\n<td>0%</td>\n<td>字节跳动</td>\n</tr>\n<tr>\n<td>熟悉MVC，MVVM，Flux，Redux等相关工程知识</td>\n<td>0%</td>\n<td>字节跳动</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h1 id=\"设计师如何学习前端技术（转载自：黄玄的知乎回答）\"><a href=\"#设计师如何学习前端技术（转载自：黄玄的知乎回答）\" class=\"headerlink\" title=\"设计师如何学习前端技术（转载自：黄玄的知乎回答）\"></a>设计师如何学习前端技术（转载自：黄玄的知乎回答）</h1><blockquote>\n<p><em>作者：黄玄</em><br><em>链接：<a href=\"https://www.zhihu.com/question/21921588/answer/69680480\" target=\"_blank\" rel=\"noopener\">https://www.zhihu.com/question/21921588/answer/69680480</a></em><br><em>来源：知乎</em><br><em>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</em></p>\n</blockquote>\n<p><strong>背景篇</strong></p>\n<p>在这个时代学习新东西，一定要善于使用 Bing/Google 等搜索引擎…网络上的资源非常丰富，自学能力也尤为重要，尤其是对于学习技术！</p>\n<p><strong>入门篇（HTML/CSS）</strong></p>\n<p>说起设计师希望学前端的初衷，大概还是因为各种华丽的网页特效/交互太过吸引人，这种感觉大概就是：“Hey，我的设计可以做成网页访问了呢！”<br>好在，“展示”对于前端技术来说反而是最简单的部分。所以，放下你对“编程”两个字的恐惧，<strong>从“称不上是编程语言”的 HTML/CSS 开始，先做点有成就感的东西出来吧！</strong></p>\n<p>对于设计师来说，最有成就感的一定是“可以看到的东西”，而 HTML/CSS 正是用来干这个的，HTML 就是一堆非常简单的标签，而 CSS 无非就是把你画画的流程用<strong>英语</strong>按一定的格式写出来而已：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs text\">&lt;p&gt; p is paragraph! &lt;&#x2F;p&gt;<br><br>&lt;style&gt;<br>p &#123; color: red;&#125;<br>&lt;&#x2F;style&gt;<br></code></pre></td></tr></table></figure>\n<p>是不是非常容易，就跟读英语一样！<br>接下来，你就需要开始自学啦，比如常用 HTML 标签的意思，各种 CSS 的属性，还有 CSS 的盒模型、优先级、选择器……放心，它们都很容易；能玩得转 PS/AI/Flash/Axure/AE/Sketch 的设计师们，学这个洒洒水啦</p>\n<p>推荐几个资源：</p>\n<ul>\n<li><a href=\"https://link.zhihu.com/?target=http%3A//www.w3school.com.cn/\">w3school 在线教程</a> (中文，一个很 Low 但是又很好的入门学习网站）</li>\n<li><a href=\"https://link.zhihu.com/?target=http%3A//www.codecademy.com/\">Learn to code</a> (Codecademy，如果你英文 OK，<strong>强烈建议</strong>你使用它进行交互式的学习！里面从 HTML/CSS 到搭建网站的课程都有，免费，生动直观）</li>\n</ul>\n<p><strong>这个阶段的练习主要是“临摹”：用代码画出你想画的网站，越多越好。</strong></p>\n<p>对于书，我<strong>非常不推荐</strong>上来就去看各种厚厚的入门/指南书，没必要！这一个阶段应该快速上手，培养兴趣，培养成就感。先做出可以看的东西再说，掌握常用的 HTML/CSS 就够用了</p>\n<p>如果完成的好，这个阶段过后你大概就可以写出一些简单又好看的“静态网页”了，比如这个作品集/简历：<a href=\"https://link.zhihu.com/?target=http%3A//huangxuan.me/portfolio/\">Portfolio - 黄玄的博客</a> （好久没更新了…丢人现眼）</p>\n<p><strong>入门篇（JavaScript/jQuery）</strong></p>\n<p>想要在网页上实现一些交互效果，比如轮播图、点击按钮后播放动画？那你就必须要开始学习 JavaScript 了！JavaScript 是一门完整、强大并且非常热门的编程语言，你在浏览器里看到的所有交互或者高级功能都是由它在背后支撑的！</p>\n<p>举个小栗子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs text\">alert(&quot;Hello World!&quot;)<br></code></pre></td></tr></table></figure>\n<p>就这一行，就可以在浏览器里弹出 Hello World 啦！</p>\n<p>在了解一些基础的 JavaScript 概念（变量、函数、基本类型）后，我们可以直接去学习 jQuery，你不用知道它具体是什么（它是一个 JavaScript 代码库），你只要知道它可以显著地降低你编写交互的难度就好了：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs text\">$(&#39;.className&#39;).click(function()&#123;<br>    alert(&quot;Hello jQuery&quot;)<br>&#125;)<br></code></pre></td></tr></table></figure>\n<p>通过 jQuery，我们可以继续使用在 CSS 中学到的“选择器”</p>\n<p>对于没有编程基础的人来说，想要完全掌握它们两并不容易。作为设计师，很多时候我们可以先不必深究它们的原理，而是尝试直接应用它！这样成就感会来得很快，并且你可以通过实际应用更加理解 JavaScript 是用来做什么的。</p>\n<p>我仍然推荐你使用 <a href=\"https://link.zhihu.com/?target=http%3A//www.w3school.com.cn/\">w3school 在线教程</a>  与 <a href=\"https://link.zhihu.com/?target=http%3A//www.codecademy.com/\">http://www.codecademy.com/</a>  进行学习。另外，你可以看一看诸如《<a href=\"https://link.zhihu.com/?target=http%3A//book.douban.com/subject/10792216/\">锋利的jQuery (豆瓣)</a>》 这一类非常实用的书籍，可以让你很快上手做出一些简单的效果来！</p>\n<p>如果学习得顺利，你还可以尝试使用各种丰富的  jQuery 插件，你会发现写出支持用户交互的网站也没有那么困难～很多看上去很复杂的功能（比如轮播图、灯箱、下拉菜单），搜一搜然后看看文档（教程）、改改示例代码就好了。</p>\n<p>比如说，配合 <a href=\"https://link.zhihu.com/?target=https%3A//github.com/Huxpro/jquery.HSlider\">Huxpro/jquery.HSlider · GitHub</a> 这样的轮播图插件，你可以很轻松的写出 <a href=\"https://link.zhihu.com/?target=http%3A//huangxuan.me/jquery.HSlider/\">HSlider | Demo</a> 这样的网页相册或者 <a href=\"https://link.zhihu.com/?target=http%3A//huangxuan.me/jquery.HSlider/demo-weather-app/\">HSlider | Weather</a> 这样的手机端 App 原型～</p>\n<p>最后，我想推荐下 <a href=\"https://link.zhihu.com/?target=http%3A//getbootstrap.com/\">Bootstrap · The world’s most popular mobile-first and respons</a> ，这是世界上最知名的前端 UI 框架之一，提供了大量 CSS 样式与 jQuery 插件。它非常容易学习并且中英文教程都非常健全，你并不需要理解它背后的工作原理就能很好的使用它，让你快速达到“可以建站的水平”。有余力的话，你不但可以学习如何使用它，还可以学习它背后的设计思想。</p>\n<p><strong>转职方向一：前端重构 （Web Rebuild）</strong></p>\n<p>业内通常把专精 HTML/CSS 的前端从业人员称为重构，而对于注重视觉效果的设计师来说，在掌握基本的 HTML/CSS 后，就可以朝着这个方向发展了。</p>\n<p><strong>到了这个阶段，你不但要知道怎么写页面，还要知道它们都是为什么，并且知道怎么做更好。这对你理解 Web 世界非常有帮助，并且能帮助你做出更“系统化”的设计。</strong></p>\n<p>CSS 的学问很多，你需要开始理解文档流、浮动流等各种定位的方式与原理，理解 CSS 的继承复用思想、理解浏览器的差异、兼容、优雅降级……这里强烈推荐一本书：《<a href=\"https://link.zhihu.com/?target=http%3A//book.douban.com/subject/4736167/\">精通CSS（第2版） (豆瓣)</a>》，虽然前端技术突飞猛进，但这本书的思想永远不会过时。</p>\n<p>HTML 方面，要开始注重语义化、可访问性与结构的合理，你要开始学习“结构与样式的分离”，这里有一本神书将这种分离做到了极致：《<a href=\"https://link.zhihu.com/?target=http%3A//book.douban.com/subject/2052176/\">CSS禅意花园 (豆瓣)</a>》</p>\n<p>另外，各种炫酷屌的 CSS 3 属性你一定会喜欢：你可以用媒体查询做响应式网页设计，你可以用 transiton 和 animation 做补间动画与关键帧动画，用 transform 做缩放、旋转、3D变换，还有圆角、渐变、阴影、弹性盒！样样都是设计师的神器！</p>\n<p>如果你还掌握了 <strong>入门篇（JavaScript/jQuery）</strong>的知识，那么<strong>恭喜你！你已经可以做出很多有趣的网页了！</strong>很多 minisite 或者微信上的“H5” 小广告，这个程度的你已经可以轻松完成了！</p>\n<p>配合上你的设计功力，你可以开始尝试创作一些好玩的东西，比如这种富含交互和动画的网站 <a href=\"https://link.zhihu.com/?target=http%3A//huangxuan.me/senova/\">绅宝 SENOVA</a> ，它仍然是基于 <a href=\"https://link.zhihu.com/?target=https%3A//github.com/Huxpro/jquery.HSlider\">Huxpro/jquery.HSlider · GitHub</a>  实现的！或者给自己做个小小的个人网站试试</p>\n<p><strong>转职方向二：前端工程师（Front-end Engineer）</strong></p>\n<p>如果你觉得上述的这些都还满足不了你，你渴望做出更多了不起的交互，甚至你已经喜欢上了编程，想要转行做工程师，或者成为一名全栈设计师，那么你可以朝着这个方向继续发展！</p>\n<p>这个阶段的最大难度，是你必须<strong>学会像一名软件工程师一样思考</strong>。你需要踏踏实实学习编程语言，深入理解作用域、对象、类、封装、继承、面向对象编程、事件侦听、事件冒泡等一大堆编程概念，你还需要了解浏览器，学习 DOM、BOM、CSSOM 的 API，你甚至还需要学习一些网络原理，包括域名、URL、DNS、HTTP 请求都是什么…</p>\n<p>你可能会被这一大堆名词吓到。确实，想要搞定他们并不容易。但是，你要相信只要你肯花功夫它们也没有那么难，而更重要的是，如果你能拿下他们，你所收获的并不只是这些而已，而是真正跨过了一道大坎 —— <strong>你的世界将因此打开， 你看待世界的方式将因此改变</strong></p>\n<p>对于这个阶段，你可以继续在  <a href=\"https://link.zhihu.com/?target=http%3A//www.codecademy.com/\">http://www.codecademy.com/</a>   上学习，但是 w3school 已经不够用了，遇到不会的语法，我推荐你查阅 <a href=\"https://link.zhihu.com/?target=https%3A//developer.mozilla.org/zh-CN/\">Mozilla 开发者网络</a>，这是少数中英文都有的非常专业且友好的网站。</p>\n<p>同时，你可能需要看一些书本来帮助你学习 JavaScript ：</p>\n<ul>\n<li>《<a href=\"https://link.zhihu.com/?target=http%3A//book.douban.com/subject/10546125/\">JavaScript高级程序设计（第3版） (豆瓣)</a> 》或 《<a href=\"https://link.zhihu.com/?target=http%3A//book.douban.com/subject/2228378/\">JavaScript权威指南 (豆瓣)</a>》，大而全的书只需要一本就够了</li>\n<li>如果上面这本你觉得太难，你可以先看 《<a href=\"https://link.zhihu.com/?target=http%3A//book.douban.com/subject/6038371/\">JavaScript DOM编程艺术 （第2版） (豆瓣)</a>》来过渡一下，这本书比较容易，它会教给你 “优雅降级、渐进增强”的优秀思想</li>\n</ul>\n<p>如果你能顺利得渡过了这个阶段，我想你已经能做出很多令你自豪的网站了！试着向身边的工程师朋友询问如何购买域名、配置简单的静态服务器，或者搜搜“Github Pages”，然后把你的作品挂在网络上让大家欣赏吧！</p>\n<p>你还可以试着用 JavaScript 写写小游戏，这不但能锻炼你的编程水平还非常有趣～比如这是我刚学 JS 不久后 hack 一晚的产物 —— 用 DOM 实现的打飞机：<a href=\"https://link.zhihu.com/?target=http%3A//huangxuan.me/aircraft\">Hux - Aircraft</a> （不支持手机）</p>\n<p><strong>入行篇</strong></p>\n<p>如果你能完成上述所有的学习，你已经是一名非常出色的前端学徒了！对于只是想要丰富技能的设计师或者产品经理来说，接下来的内容可能会让你感到不适 ;(<br>但如果你铁了心想要真正入行进入大公司从事专职前端开发的工作，那么你可以接着往下看：</p>\n<p>近几年的前端技术发展迅猛，前端工程师早已不是切切图写写页面做点特效就完事的职位，你需要具备相当完善的工程师素质与计算机知识，成为一名真正的工程师。</p>\n<p><strong>你需要非常了解 JavaScript 这门语言</strong>，包括 闭包、IIFE、this、prototype 及一些底层实现（ES、VO、AO）、熟悉常用的设计模式与 JavaScript 范式（比如实现类与私有属性）。另外，新的 ES6 已经问世，包括 class, module, arrow function 等等</p>\n<p><strong>你需要非常了解前端常用的网络及后端知识</strong>，包括 Ajax、JSON、HTTP 请求、GET/POST 差异、RESTful、URL hash/query、webSocket、常用的跨域方式（JSONP/CORS、HTTP 强缓存/协商缓存，以及如何利用 CDN 、静态网站/动态网站区别、服务器端渲染/前端渲染区别等等</p>\n<p><strong>你需要学习使用进阶的 CSS</strong>，包括熟悉 CSS 3，使用 Scss/Less 等编译到 CSS 的语言，使用 autoprefixer 等 PostCSS 工具，了解 CSS 在 Scope/Namespace 上的缺陷，你还可以学习 CSS Modules、CSS in JS 这些有趣的新玩意</p>\n<p><strong>你需要非常了解前端的模块化规范</strong>，可能在你学习到这里的时候，Require.js/AMD 已经再见了，但是 CommonJS 与 ES6 Modules 你必须要了解。（你可以观看我的分享《<a href=\"https://link.zhihu.com/?target=http%3A//huangxuan.me/js-module-7day/%23/\">JavaScript Modularization Seven Day</a>》 来学习 JS 模块化的历史）</p>\n<p><strong>你需要熟悉 Git 与 Shell 的使用</strong>，包括基于 git 的版本管理、分支管理与团队协作，包括简单的 Linux/Unix 命令、你要知道大部分程序员的工作可以通过 shell 更快更酷的完成，并且很多“软件”只能通过 shell 来使用。你还可以把你的代码放到 github 上与人分享，并且学习 github 上其他优秀的开源代码</p>\n<p><strong>你需要熟悉并且习惯使用 Node</strong>，包括了解 npm、使用 Grunt/Gulp/Browserify/Webpack 优化你的工作流、对你的代码进行打包、混淆、压缩、发布，你还可以使用 Express/Koa 配合 MongoDB/Redis 涉足到后端领域，或者尝试用 Node 做后端渲染优化你的首屏体验</p>\n<p><strong>你需要了解各种 HTML 5 的新 API</strong>，包括 video、audio，包括 Canvas，webGL、File API、App Cache、localStorage、IndexedDB、Drag &amp; Drop、更高级的 DOM API、Fetch API 等等</p>\n<p><strong>你需要学习 JavaScript 的单线程与异步编程方法</strong>，因为它们非常非常常用、包括 setTimeout/setInterval，回调与回调地狱、事件与event loop、还有 Promise 甚至 Async/Await</p>\n<p><strong>你需要非常了解浏览器</strong>，包括主流浏览器的名称、内核与差异、包括私有属性与 -webkit- 等厂商前缀，你需要学习如何使用 Chrome DevTool，你需要了解浏览器渲染的 reflow/repaint 来避免 Jank 并进行有针对性的性能优化</p>\n<p><strong>你需要专门学习 Mobile Web</strong>，因为移动互联网是趋势。包括 viewport、CSS pixel、 touch 事件、iOS/Android 浏览器的差异与兼容、移动端的性能优化、300ms delay 等等…你还需要知道 Hybrid 是什么，包括 Cordova/Phonegap，更复杂的比如和 iOS/Android 通信的机制，比如 URI Scheme 或者 JS Bridge</p>\n<p><strong>你需要学习一些**</strong>非常火热的前端框架/库**，他们不但能帮助你更快的进行开发、更重要的是他们背后所蕴含的思想。包括 Backbone、Angular、Vue、React、Polymer 等等、了解它们背后的双向数据绑定、单向数据流、MVC/MVVM/Flux 思想、Web Component 与组件化等等</p>\n<p><strong>你需要学习如何构建 web 单页应用</strong>，这是 web 的未来，包括利用 history API 或者 hash 实现路由，包括基于 Ajax + 模版引擎或者其他技术的前端渲染、包括组织较为复杂的软件设计等等</p>\n<p><strong>我还建议你学习更多的计算机知识</strong>，它们能对你的代码能起到潜移默化的作用，包括简单的计算机体系结构、更广泛的编程知识（面向对象/函数式等）、栈、堆、数组、队列、哈希表、树、图等数据结构、时间复杂度与空间复杂度以及简单的算法等等</p>\n<p><strong>你需要了解业内的大神并阅读它们的博客/知乎/微博</strong>，比如  </p>\n<p><a href=\"http://www.zhihu.com/people/cfdec6226ece879d2571fbc274372e9f\" target=\"_blank\" rel=\"noopener\">@尤雨溪</a><a href=\"http://www.zhihu.com/people/3ec3b166992a5a90a1083945d2490d38\" target=\"_blank\" rel=\"noopener\">@贺师俊</a><a href=\"http://www.zhihu.com/people/3212f9044005e9306aab1b61e74e7ae6\" target=\"_blank\" rel=\"noopener\">@张云龙</a><a href=\"http://www.zhihu.com/people/c5198d4e9c0145aee04dd53cc6590edd\" target=\"_blank\" rel=\"noopener\">@徐飞</a><a href=\"http://www.zhihu.com/people/20fdd386a6e59d178b8fe14e2863cb40\" target=\"_blank\" rel=\"noopener\">@张克军</a><a href=\"http://www.zhihu.com/people/c11336b8607d86bc9090bed90757a34c\" target=\"_blank\" rel=\"noopener\">@玉伯</a><a href=\"http://www.zhihu.com/people/64458d15a75902cd0425732b7b757705\" target=\"_blank\" rel=\"noopener\">@拔赤</a><a href=\"http://www.zhihu.com/people/0d9b98af12015c94cff646a6fc0773b5\" target=\"_blank\" rel=\"noopener\">@寸志</a><a href=\"http://www.zhihu.com/people/790dccce26904cdcd11b0fad3bac37b7\" target=\"_blank\" rel=\"noopener\">@题叶</a><a href=\"http://www.zhihu.com/people/85de6407f2219137df29b4249b91cfd5\" target=\"_blank\" rel=\"noopener\">@郭达峰</a> 等等等等，很多思想和新东西只有从他们身上才能学到。我还推荐你多参加技术交流会，多认识一些可以一起学习的小伙伴，你们可以互相交流并且一起成长</p>\n<p><strong>你需要具备很强的自学能力、对技术有热情并且不断跟进</strong>。因为 JavaScript/前端的社区非常非常活跃，有太多的新东西需要你自己来发现与学习：比如 Universal JavaScript、Isomorphic JavaScript、前端测试、HTML5 页游、WebRTC、WebSocket、CSS 4、SVG、HTTP/2、ES 7、React Native、Babel、TypeScript、Electron 等等等等…</p>\n<p>虽然一下扯得有点多，但这些确实就是你未来将会遇到的。你并不需要全部掌握它们，但是却多多益善；你也可以专精在某几个方面，这已经足以让你成为非常专业的前端工程师。</p>\n<p>最后，英语英语英语，无论是学习还是工作，这都是一个决定天花板的重要技能。</p>\n<p>以上。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"职位需求\"><a href=\"#职位需求\" class=\"headerlink\" title=\"职位需求\"></a>职位需求</h1><h2 id=\"阿里巴巴\"><a href=\"#阿里巴巴\" class=\"headerlink\" title=\"阿里巴巴\"></a>阿里巴巴</h2><h3 id=\"科技创新中心-前端专家-上海\"><a href=\"#科技创新中心-前端专家-上海\" class=\"headerlink\" title=\"科技创新中心-前端专家-上海\"></a>科技创新中心-前端专家-上海</h3><h4 id=\"岗位描述：\"><a href=\"#岗位描述：\" class=\"headerlink\" title=\"岗位描述：\"></a>岗位描述：</h4><p>1.持续关注Web技术的发展，掌握新技术的核心点，从中挑选适合公司业务发展的新技术；<br>2.围绕公司业务进行前端框架和工具的设计和维护；<br>3.技术攻坚，指导和帮助团队成员在业务中成长。</p>\n<h4 id=\"岗位要求：\"><a href=\"#岗位要求：\" class=\"headerlink\" title=\"岗位要求：\"></a>岗位要求：</h4><p>1.三年以上前端开发经验，对前端领域一个或多个方向有深入研究，是该方向的专家；<br>2.熟悉主流前端框架（如React、Vue、Angular等）的原理及演化过程，有一定的前端框架设计经验；<br>3.熟悉W3C/WHATWG规范，了解规范设计的思考，以及研发过程中的最佳实践；<br>4.具备良好的沟通、规划和项目推动能力，以及独立解决技术难题的能力。</p>\n<h3 id=\"蚂蚁金服-高级前端工程师-专家-蚂蚁保险\"><a href=\"#蚂蚁金服-高级前端工程师-专家-蚂蚁保险\" class=\"headerlink\" title=\"蚂蚁金服-高级前端工程师/专家-蚂蚁保险\"></a>蚂蚁金服-高级前端工程师/专家-蚂蚁保险</h3><h4 id=\"岗位描述：-1\"><a href=\"#岗位描述：-1\" class=\"headerlink\" title=\"岗位描述：\"></a>岗位描述：</h4><ol>\n<li>与产品经理、设计师、开发同学紧密合作，打造极致体验的互联网保险产品；</li>\n<li>参与多种平台的应用开发，包括Web及Mobile等产品，负责前端交互的实现；</li>\n<li>能充分理解项目需求和设计需求，具有一定研发精神，能解决各种未知问题；</li>\n<li>与团队成员分享经验和新技术，帮助团队成长，学习研究新的技术，并能迅速转化到潜在项目中。</li>\n</ol>\n<h4 id=\"岗位要求：-1\"><a href=\"#岗位要求：-1\" class=\"headerlink\" title=\"岗位要求：\"></a>岗位要求：</h4><ol>\n<li><p>熟练掌握移动端H5开发、熟悉主流移动浏览器的技术特点；</p>\n</li>\n<li><p>熟练运用JavaScript语言与HTML5、CSS3等技术, 熟悉移动端Web绘图相关高级特性, 如canvas,webGL, CSS3动画效果等；</p>\n</li>\n<li><p>熟悉模块化、前端编译和构建工具，熟练运用主流的移动端JS库和开发框架，并深入理解其设计原理，例如：Webpack、ReactJS、Vue等；</p>\n</li>\n<li><p><strong>熟悉 NodeJS Web 应用开发，了解koa、express的核心设计思想和原理；</strong></p>\n</li>\n<li><p>个性乐观开朗，逻辑性强，善于和各种背景的人合作；</p>\n</li>\n<li><p>对技术有强烈的进取心，具有良好的沟通能力和团队合作精神、优秀的分析问题和解决问题的能力；</p>\n</li>\n<li><p><strong>有小程序、ReactNative开发经验者优先；</strong></p>\n</li>\n<li><p>有开源项目经验和长期维护技术博客经验者优先；</p>\n</li>\n<li><p><strong>有全栈开发、具有服务端开发经验优先。</strong></p>\n</li>\n</ol>\n<h3 id=\"口碑-H5前端开发-上海、杭州\"><a href=\"#口碑-H5前端开发-上海、杭州\" class=\"headerlink\" title=\"口碑-H5前端开发-上海、杭州\"></a>口碑-H5前端开发-上海、杭州</h3><h4 id=\"岗位描述：-2\"><a href=\"#岗位描述：-2\" class=\"headerlink\" title=\"岗位描述：\"></a>岗位描述：</h4><p>1、负责面向商家、对内运营体系等的各种企业级泛中台产品应用的前端架构设计和研发工作；<br>2、参与本地生活前端技术体系建设，包括组件开发、工程化效能建设、多端架构设计、Node全栈、质量监控和保障体系建设等；<br>3、深入理解业务和产品，不断提升产品的用户体验，技术驱动业务的发展；<br>4、关注相关前沿技术研究，通过新技术服务团队和业务；</p>\n<h4 id=\"岗位要求：-2\"><a href=\"#岗位要求：-2\" class=\"headerlink\" title=\"岗位要求：\"></a>岗位要求：</h4><p>1、前端HTML/CSS/JavaScript等基础技术扎实，数据结构、网络等基础知识掌握牢固，熟悉浏览器原理机制；<br>2、精通至少一种主流前端框架，如React/Vue/Angular等，能深入理解其设计原理，并对其他类似框架有所了解，有库或框架设计者优先；<br>3、理解前端工程化，熟练使用相关工具，如Npm/Yarn/Webpack/Rollup等，有对前端工程化有自己的实践者优先；<br>4、熟悉Node相关知识，有Koa/Egg/Express等的实践经验，若有其他后端语言如Java/PHP/Python/Golang等的开发经验优先；<br>5、熟悉iOS/Android等客户端相关知识，具备ReactNative/Weex/Flutter能力和经验者优先；<br>6、对前端技术有强烈的热情和进取心，具有良好的沟通能力、团队合作精神，优秀的分析问题和解决问题的能力；</p>\n<h2 id=\"腾讯\"><a href=\"#腾讯\" class=\"headerlink\" title=\"腾讯\"></a>腾讯</h2><h3 id=\"30628-腾讯广告Web前端开发工程师\"><a href=\"#30628-腾讯广告Web前端开发工程师\" class=\"headerlink\" title=\"30628-腾讯广告Web前端开发工程师\"></a>30628-腾讯广告Web前端开发工程师</h3><h4 id=\"工作职责\"><a href=\"#工作职责\" class=\"headerlink\" title=\"工作职责\"></a>工作职责</h4><p>负责腾讯广告业务的web前端的开发工作； 负责微信广告业务的web前端系统分析、优化与架构工作。</p>\n<h4 id=\"工作要求\"><a href=\"#工作要求\" class=\"headerlink\" title=\"工作要求\"></a>工作要求</h4><p>1.本科及以上学历，计算机相关专业； 2年以上前端开发经验，有完整的前端项目经验；<br>2.熟悉JavaScript、HTML、CSS和HTTP协议等Web开发所需技能和知识点；<br>3.熟悉各种前端框架（React、Vue）并有相关使用经验；<br>4.良好的学习能力、沟通能力、团队协作能力、及分析问题解决问题能力，责任心强。<br>5.熟悉golang/php等后台语言，有互联网广告相关业务开发经验者优先。</p>\n<h3 id=\"25927-web前端开发工程师（上海）\"><a href=\"#25927-web前端开发工程师（上海）\" class=\"headerlink\" title=\"25927-web前端开发工程师（上海）\"></a>25927-web前端开发工程师（上海）</h3><h4 id=\"工作职责-1\"><a href=\"#工作职责-1\" class=\"headerlink\" title=\"工作职责\"></a>工作职责</h4><p>负责先游海外版web前端开发；<br>负责前端架构设计及性能调优工作。</p>\n<h4 id=\"工作要求-1\"><a href=\"#工作要求-1\" class=\"headerlink\" title=\"工作要求\"></a>工作要求</h4><p>本科及以上学历，计算机相关专业，3年以上成功产品web开发经验；<br>精通js、h5、css等基本前端开发技术；<br>熟练掌握主流js框架(vue/react)及web前端打包工具webpack等；<br>熟练掌握Linux/unix 操作；<br>熟悉后台语言者优先，如node/php；<br>有良好的团队合作能力，技术视野开阔，对业界最新的前端技术和实现有浓厚的兴趣及深入的见解。</p>\n<h3 id=\"S2-高级web前端开发工程师\"><a href=\"#S2-高级web前端开发工程师\" class=\"headerlink\" title=\"S2-高级web前端开发工程师\"></a>S2-高级web前端开发工程师</h3><h4 id=\"工作职责-2\"><a href=\"#工作职责-2\" class=\"headerlink\" title=\"工作职责\"></a>工作职责</h4><p>主要负责财经领域前端技术框架的统一规划及后续发展，推动前端后分离开发模式。<br>1.负责财经IT整体前端架构设计与开发；<br>2.负责前端开发流程的规范，工具、组件等建设；<br>3.负责新技术的预研、落地，及前端技能内部培训；</p>\n<h4 id=\"工作要求-2\"><a href=\"#工作要求-2\" class=\"headerlink\" title=\"工作要求\"></a>工作要求</h4><p>1.本科及以上学历，计算机相关专业，5 年以上 Web 前端开发经验；<br>2.熟悉 HTTP 基本原理，能熟练运用 HTML、CSS、JavaScript 构建高性能的 Web 应用程序；<br>3.熟悉原生 JavaScript，熟悉 jQuery，至少掌握一种主流的前端框架，对vue或者react有丰富的开发经验，具备一定的框架设计能力；<br>4.有使用 grunt、gulp、webpack 等工具进行前端工程化经验；<br>5.有nodejs开发经验，对前后端分离模式有深入理解并有实际项目经验；<br>6.工作积极主动，乐于分享，具有良好的逻辑思维及语言表达能沟通力和团队协作精神。</p>\n<h2 id=\"字节跳动\"><a href=\"#字节跳动\" class=\"headerlink\" title=\"字节跳动\"></a>字节跳动</h2><h3 id=\"前端工程师\"><a href=\"#前端工程师\" class=\"headerlink\" title=\"前端工程师\"></a>前端工程师</h3><p>上海社招</p>\n<h4 id=\"职位描述\"><a href=\"#职位描述\" class=\"headerlink\" title=\"职位描述\"></a>职位描述</h4><p>1、负责产品的前端开发工作；<br>2、参与前端工程体系建设，建设工具、抽象框架、提炼组件；<br>3、与团队配合完成整体项目规划、设计与开发。</p>\n<h4 id=\"职位要求\"><a href=\"#职位要求\" class=\"headerlink\" title=\"职位要求\"></a>职位要求</h4><p>1、熟练掌握JavaScript、CSS、HTML、DOM、动画、协议、安全、网络、性能优化等前端技术；<br>2、对主流前端框架（ React、Vue、Angular ）至少一种有深入应用并深入理解其设计原理；<br>3、熟悉MVC，MVVM，Flux，Redux等相关工程知识；<br>4、熟悉W3C，ECMAScript，CommonJS，ES6等相关技术标准；<br>5、熟练掌握 Grunt、Gulp、Webpack、FIS 其中任意一项构建工具的使用和配置；<br>6、能对具体的产品进行性能优化，实现极致的页面加载、执行和渲染时间；<br>7、注重产品质量，具有良好的代码风格、接口设计与程序架构；<br>8、关注业界发展，对最新的前端技术有浓厚的兴趣及独特的见解，关注前端前沿技术研究，通过新技术服务团队和业务。</p>\n<h3 id=\"前端架构师\"><a href=\"#前端架构师\" class=\"headerlink\" title=\"前端架构师\"></a>前端架构师</h3><h4 id=\"职位描述-1\"><a href=\"#职位描述-1\" class=\"headerlink\" title=\"职位描述\"></a>职位描述</h4><p>1、负责沟通和协同类效率工具 PC客户端、Web端相关产品的架构、设计、优化；<br>2、负责基础库、框架和关键模块的开发和改进；<br>3、指导团队其他成员的设计和Coding，保证工程质量；<br>4、优化前端团队的开发方式和流程、规范，提高团队效率。</p>\n<h4 id=\"职位要求-1\"><a href=\"#职位要求-1\" class=\"headerlink\" title=\"职位要求\"></a>职位要求</h4><p>1、大学本科及以上学历，4年以上前端开发经验，能理解目前流行的框架(react/redux/mobx)的设计思路并能进行源码分析；<br>2、基本功扎实，精通HTML5，CSS3，ES6，ES7，熟悉 ECMAScript 语言规范；<br>3、有丰富的前端工程方面的经验；<br>4、注重代码质量，设计经验丰富，能够产出高质量的设计和代码；<br>5、自我驱动能力、自我学习能力强，对前端前沿领域有比较高的热情和关注度，执行力好，良好的沟通协作能力，注重效率，能够深刻影响其他人；<br>6、有知名开源项目者优先和客户端架构经验者优先。</p>\n<h3 id=\"前端开发工程师-—-大数据\"><a href=\"#前端开发工程师-—-大数据\" class=\"headerlink\" title=\"前端开发工程师 — 大数据\"></a>前端开发工程师 — 大数据</h3><h4 id=\"职位描述-2\"><a href=\"#职位描述-2\" class=\"headerlink\" title=\"职位描述\"></a>职位描述</h4><p>1、参与字节跳动大数据基础设施以及相关可视化产品的建设，为今日头条、抖音、火山、西瓜等旗下产品提供稳定高质量的数据服务；<br>2、持续的性能优化和架构升级，不断提升团队效率和产品的用户体验；<br>3、结合业务和数据场景，提出专业合理的可视化方案建议，并推动可视化技术产生更多的业务价值；<br>4、提供全栈场景，不设边界。</p>\n<h4 id=\"职位要求-2\"><a href=\"#职位要求-2\" class=\"headerlink\" title=\"职位要求\"></a>职位要求</h4><p>1、对技术充满好奇心，乐于学习，愿意分享，具备良好的服务意识，责任心，团队沟通和协作能力、发现并解决问题的能力；<br>2、有扎实的前端技术和计算机基础，包括但不限于 HTML / CSS / JavaScript / DOM / Http / 数据结构等；<br>3、精通至少一门 MVVM 框架，如 AngularJS/Vue/React，使用 React 开发过大型项目或者复杂单页面应用者优先；<br>4、熟练掌握 SVG / Canvas / WebGL 等前端绘图技术及标准，至少使用过一个数据可视化类库，包括但不限于 D3 / G2 / Three.js / ECharts / Highcharts，有一定计算机图形学基础的优先；<br>5、掌握至少一门服务端编程语言，并有实战经验。熟悉 NodeJS / Python 者优先；<br>6、有过大数据产品（Hadoop / Hive / Spark 等）相关开发经验者优先；<br>7、有移动端开发经验并且有实际性能优化案例者优先；<br>8、有自己的技术产品、开源作品或活跃的开源社区贡献者优先。</p>\n<h1 id=\"总结：职位需求与自身能力\"><a href=\"#总结：职位需求与自身能力\" class=\"headerlink\" title=\"总结：职位需求与自身能力\"></a>总结：职位需求与自身能力</h1><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>需求：按重要程度排列</th>\n<th>完成情况</th>\n<th>侧重企业</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>HTML CSS JS Web基础</td>\n<td>5%</td>\n<td>所有</td>\n</tr>\n<tr>\n<td>熟练掌握Linux/unix 操作；</td>\n<td>5%</td>\n<td>所有</td>\n</tr>\n<tr>\n<td>主流前端框架（如React、Vue、Angular等）</td>\n<td>0%</td>\n<td>所有</td>\n</tr>\n<tr>\n<td>数据结构与算法；计算机网络等专业课</td>\n<td>7%</td>\n<td>所有</td>\n</tr>\n<tr>\n<td>熟悉后台语言者优先，如node/php；</td>\n<td>1%</td>\n<td>腾讯、字节跳动</td>\n</tr>\n<tr>\n<td>有后台/全栈开发经验</td>\n<td>3%</td>\n<td>阿里巴巴</td>\n</tr>\n<tr>\n<td>有自己的技术产品、开源作品或活跃的开源社区贡献者优先。</td>\n<td>目前影响力：有限</td>\n<td>字节跳动</td>\n</tr>\n<tr>\n<td>有小程序、ReactNative开发经验者优先；</td>\n<td>0%</td>\n<td>阿里巴巴</td>\n</tr>\n<tr>\n<td>有使用 grunt、gulp、webpack 等工具进行前端工程化经验；</td>\n<td>0%</td>\n<td>腾讯、字节跳动</td>\n</tr>\n<tr>\n<td>熟悉golang/php等后台语言</td>\n<td>0%</td>\n<td>腾讯</td>\n</tr>\n<tr>\n<td>掌握至少一门服务端编程语言，并有实战经验。熟悉 NodeJS / Python 者优先；</td>\n<td>0%</td>\n<td>字节跳动</td>\n</tr>\n<tr>\n<td>熟悉MVC，MVVM，Flux，Redux等相关工程知识</td>\n<td>0%</td>\n<td>字节跳动</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h1 id=\"设计师如何学习前端技术（转载自：黄玄的知乎回答）\"><a href=\"#设计师如何学习前端技术（转载自：黄玄的知乎回答）\" class=\"headerlink\" title=\"设计师如何学习前端技术（转载自：黄玄的知乎回答）\"></a>设计师如何学习前端技术（转载自：黄玄的知乎回答）</h1><blockquote>\n<p><em>作者：黄玄</em><br><em>链接：<a href=\"https://www.zhihu.com/question/21921588/answer/69680480\" target=\"_blank\" rel=\"noopener\">https://www.zhihu.com/question/21921588/answer/69680480</a></em><br><em>来源：知乎</em><br><em>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</em></p>\n</blockquote>\n<p><strong>背景篇</strong></p>\n<p>在这个时代学习新东西，一定要善于使用 Bing/Google 等搜索引擎…网络上的资源非常丰富，自学能力也尤为重要，尤其是对于学习技术！</p>\n<p><strong>入门篇（HTML/CSS）</strong></p>\n<p>说起设计师希望学前端的初衷，大概还是因为各种华丽的网页特效/交互太过吸引人，这种感觉大概就是：“Hey，我的设计可以做成网页访问了呢！”<br>好在，“展示”对于前端技术来说反而是最简单的部分。所以，放下你对“编程”两个字的恐惧，<strong>从“称不上是编程语言”的 HTML/CSS 开始，先做点有成就感的东西出来吧！</strong></p>\n<p>对于设计师来说，最有成就感的一定是“可以看到的东西”，而 HTML/CSS 正是用来干这个的，HTML 就是一堆非常简单的标签，而 CSS 无非就是把你画画的流程用<strong>英语</strong>按一定的格式写出来而已：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs text\">&lt;p&gt; p is paragraph! &lt;&#x2F;p&gt;<br><br>&lt;style&gt;<br>p &#123; color: red;&#125;<br>&lt;&#x2F;style&gt;<br></code></pre></td></tr></table></figure>\n<p>是不是非常容易，就跟读英语一样！<br>接下来，你就需要开始自学啦，比如常用 HTML 标签的意思，各种 CSS 的属性，还有 CSS 的盒模型、优先级、选择器……放心，它们都很容易；能玩得转 PS/AI/Flash/Axure/AE/Sketch 的设计师们，学这个洒洒水啦</p>\n<p>推荐几个资源：</p>\n<ul>\n<li><a href=\"https://link.zhihu.com/?target=http%3A//www.w3school.com.cn/\">w3school 在线教程</a> (中文，一个很 Low 但是又很好的入门学习网站）</li>\n<li><a href=\"https://link.zhihu.com/?target=http%3A//www.codecademy.com/\">Learn to code</a> (Codecademy，如果你英文 OK，<strong>强烈建议</strong>你使用它进行交互式的学习！里面从 HTML/CSS 到搭建网站的课程都有，免费，生动直观）</li>\n</ul>\n<p><strong>这个阶段的练习主要是“临摹”：用代码画出你想画的网站，越多越好。</strong></p>\n<p>对于书，我<strong>非常不推荐</strong>上来就去看各种厚厚的入门/指南书，没必要！这一个阶段应该快速上手，培养兴趣，培养成就感。先做出可以看的东西再说，掌握常用的 HTML/CSS 就够用了</p>\n<p>如果完成的好，这个阶段过后你大概就可以写出一些简单又好看的“静态网页”了，比如这个作品集/简历：<a href=\"https://link.zhihu.com/?target=http%3A//huangxuan.me/portfolio/\">Portfolio - 黄玄的博客</a> （好久没更新了…丢人现眼）</p>\n<p><strong>入门篇（JavaScript/jQuery）</strong></p>\n<p>想要在网页上实现一些交互效果，比如轮播图、点击按钮后播放动画？那你就必须要开始学习 JavaScript 了！JavaScript 是一门完整、强大并且非常热门的编程语言，你在浏览器里看到的所有交互或者高级功能都是由它在背后支撑的！</p>\n<p>举个小栗子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs text\">alert(&quot;Hello World!&quot;)<br></code></pre></td></tr></table></figure>\n<p>就这一行，就可以在浏览器里弹出 Hello World 啦！</p>\n<p>在了解一些基础的 JavaScript 概念（变量、函数、基本类型）后，我们可以直接去学习 jQuery，你不用知道它具体是什么（它是一个 JavaScript 代码库），你只要知道它可以显著地降低你编写交互的难度就好了：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs text\">$(&#39;.className&#39;).click(function()&#123;<br>    alert(&quot;Hello jQuery&quot;)<br>&#125;)<br></code></pre></td></tr></table></figure>\n<p>通过 jQuery，我们可以继续使用在 CSS 中学到的“选择器”</p>\n<p>对于没有编程基础的人来说，想要完全掌握它们两并不容易。作为设计师，很多时候我们可以先不必深究它们的原理，而是尝试直接应用它！这样成就感会来得很快，并且你可以通过实际应用更加理解 JavaScript 是用来做什么的。</p>\n<p>我仍然推荐你使用 <a href=\"https://link.zhihu.com/?target=http%3A//www.w3school.com.cn/\">w3school 在线教程</a>  与 <a href=\"https://link.zhihu.com/?target=http%3A//www.codecademy.com/\">http://www.codecademy.com/</a>  进行学习。另外，你可以看一看诸如《<a href=\"https://link.zhihu.com/?target=http%3A//book.douban.com/subject/10792216/\">锋利的jQuery (豆瓣)</a>》 这一类非常实用的书籍，可以让你很快上手做出一些简单的效果来！</p>\n<p>如果学习得顺利，你还可以尝试使用各种丰富的  jQuery 插件，你会发现写出支持用户交互的网站也没有那么困难～很多看上去很复杂的功能（比如轮播图、灯箱、下拉菜单），搜一搜然后看看文档（教程）、改改示例代码就好了。</p>\n<p>比如说，配合 <a href=\"https://link.zhihu.com/?target=https%3A//github.com/Huxpro/jquery.HSlider\">Huxpro/jquery.HSlider · GitHub</a> 这样的轮播图插件，你可以很轻松的写出 <a href=\"https://link.zhihu.com/?target=http%3A//huangxuan.me/jquery.HSlider/\">HSlider | Demo</a> 这样的网页相册或者 <a href=\"https://link.zhihu.com/?target=http%3A//huangxuan.me/jquery.HSlider/demo-weather-app/\">HSlider | Weather</a> 这样的手机端 App 原型～</p>\n<p>最后，我想推荐下 <a href=\"https://link.zhihu.com/?target=http%3A//getbootstrap.com/\">Bootstrap · The world’s most popular mobile-first and respons</a> ，这是世界上最知名的前端 UI 框架之一，提供了大量 CSS 样式与 jQuery 插件。它非常容易学习并且中英文教程都非常健全，你并不需要理解它背后的工作原理就能很好的使用它，让你快速达到“可以建站的水平”。有余力的话，你不但可以学习如何使用它，还可以学习它背后的设计思想。</p>\n<p><strong>转职方向一：前端重构 （Web Rebuild）</strong></p>\n<p>业内通常把专精 HTML/CSS 的前端从业人员称为重构，而对于注重视觉效果的设计师来说，在掌握基本的 HTML/CSS 后，就可以朝着这个方向发展了。</p>\n<p><strong>到了这个阶段，你不但要知道怎么写页面，还要知道它们都是为什么，并且知道怎么做更好。这对你理解 Web 世界非常有帮助，并且能帮助你做出更“系统化”的设计。</strong></p>\n<p>CSS 的学问很多，你需要开始理解文档流、浮动流等各种定位的方式与原理，理解 CSS 的继承复用思想、理解浏览器的差异、兼容、优雅降级……这里强烈推荐一本书：《<a href=\"https://link.zhihu.com/?target=http%3A//book.douban.com/subject/4736167/\">精通CSS（第2版） (豆瓣)</a>》，虽然前端技术突飞猛进，但这本书的思想永远不会过时。</p>\n<p>HTML 方面，要开始注重语义化、可访问性与结构的合理，你要开始学习“结构与样式的分离”，这里有一本神书将这种分离做到了极致：《<a href=\"https://link.zhihu.com/?target=http%3A//book.douban.com/subject/2052176/\">CSS禅意花园 (豆瓣)</a>》</p>\n<p>另外，各种炫酷屌的 CSS 3 属性你一定会喜欢：你可以用媒体查询做响应式网页设计，你可以用 transiton 和 animation 做补间动画与关键帧动画，用 transform 做缩放、旋转、3D变换，还有圆角、渐变、阴影、弹性盒！样样都是设计师的神器！</p>\n<p>如果你还掌握了 <strong>入门篇（JavaScript/jQuery）</strong>的知识，那么<strong>恭喜你！你已经可以做出很多有趣的网页了！</strong>很多 minisite 或者微信上的“H5” 小广告，这个程度的你已经可以轻松完成了！</p>\n<p>配合上你的设计功力，你可以开始尝试创作一些好玩的东西，比如这种富含交互和动画的网站 <a href=\"https://link.zhihu.com/?target=http%3A//huangxuan.me/senova/\">绅宝 SENOVA</a> ，它仍然是基于 <a href=\"https://link.zhihu.com/?target=https%3A//github.com/Huxpro/jquery.HSlider\">Huxpro/jquery.HSlider · GitHub</a>  实现的！或者给自己做个小小的个人网站试试</p>\n<p><strong>转职方向二：前端工程师（Front-end Engineer）</strong></p>\n<p>如果你觉得上述的这些都还满足不了你，你渴望做出更多了不起的交互，甚至你已经喜欢上了编程，想要转行做工程师，或者成为一名全栈设计师，那么你可以朝着这个方向继续发展！</p>\n<p>这个阶段的最大难度，是你必须<strong>学会像一名软件工程师一样思考</strong>。你需要踏踏实实学习编程语言，深入理解作用域、对象、类、封装、继承、面向对象编程、事件侦听、事件冒泡等一大堆编程概念，你还需要了解浏览器，学习 DOM、BOM、CSSOM 的 API，你甚至还需要学习一些网络原理，包括域名、URL、DNS、HTTP 请求都是什么…</p>\n<p>你可能会被这一大堆名词吓到。确实，想要搞定他们并不容易。但是，你要相信只要你肯花功夫它们也没有那么难，而更重要的是，如果你能拿下他们，你所收获的并不只是这些而已，而是真正跨过了一道大坎 —— <strong>你的世界将因此打开， 你看待世界的方式将因此改变</strong></p>\n<p>对于这个阶段，你可以继续在  <a href=\"https://link.zhihu.com/?target=http%3A//www.codecademy.com/\">http://www.codecademy.com/</a>   上学习，但是 w3school 已经不够用了，遇到不会的语法，我推荐你查阅 <a href=\"https://link.zhihu.com/?target=https%3A//developer.mozilla.org/zh-CN/\">Mozilla 开发者网络</a>，这是少数中英文都有的非常专业且友好的网站。</p>\n<p>同时，你可能需要看一些书本来帮助你学习 JavaScript ：</p>\n<ul>\n<li>《<a href=\"https://link.zhihu.com/?target=http%3A//book.douban.com/subject/10546125/\">JavaScript高级程序设计（第3版） (豆瓣)</a> 》或 《<a href=\"https://link.zhihu.com/?target=http%3A//book.douban.com/subject/2228378/\">JavaScript权威指南 (豆瓣)</a>》，大而全的书只需要一本就够了</li>\n<li>如果上面这本你觉得太难，你可以先看 《<a href=\"https://link.zhihu.com/?target=http%3A//book.douban.com/subject/6038371/\">JavaScript DOM编程艺术 （第2版） (豆瓣)</a>》来过渡一下，这本书比较容易，它会教给你 “优雅降级、渐进增强”的优秀思想</li>\n</ul>\n<p>如果你能顺利得渡过了这个阶段，我想你已经能做出很多令你自豪的网站了！试着向身边的工程师朋友询问如何购买域名、配置简单的静态服务器，或者搜搜“Github Pages”，然后把你的作品挂在网络上让大家欣赏吧！</p>\n<p>你还可以试着用 JavaScript 写写小游戏，这不但能锻炼你的编程水平还非常有趣～比如这是我刚学 JS 不久后 hack 一晚的产物 —— 用 DOM 实现的打飞机：<a href=\"https://link.zhihu.com/?target=http%3A//huangxuan.me/aircraft\">Hux - Aircraft</a> （不支持手机）</p>\n<p><strong>入行篇</strong></p>\n<p>如果你能完成上述所有的学习，你已经是一名非常出色的前端学徒了！对于只是想要丰富技能的设计师或者产品经理来说，接下来的内容可能会让你感到不适 ;(<br>但如果你铁了心想要真正入行进入大公司从事专职前端开发的工作，那么你可以接着往下看：</p>\n<p>近几年的前端技术发展迅猛，前端工程师早已不是切切图写写页面做点特效就完事的职位，你需要具备相当完善的工程师素质与计算机知识，成为一名真正的工程师。</p>\n<p><strong>你需要非常了解 JavaScript 这门语言</strong>，包括 闭包、IIFE、this、prototype 及一些底层实现（ES、VO、AO）、熟悉常用的设计模式与 JavaScript 范式（比如实现类与私有属性）。另外，新的 ES6 已经问世，包括 class, module, arrow function 等等</p>\n<p><strong>你需要非常了解前端常用的网络及后端知识</strong>，包括 Ajax、JSON、HTTP 请求、GET/POST 差异、RESTful、URL hash/query、webSocket、常用的跨域方式（JSONP/CORS、HTTP 强缓存/协商缓存，以及如何利用 CDN 、静态网站/动态网站区别、服务器端渲染/前端渲染区别等等</p>\n<p><strong>你需要学习使用进阶的 CSS</strong>，包括熟悉 CSS 3，使用 Scss/Less 等编译到 CSS 的语言，使用 autoprefixer 等 PostCSS 工具，了解 CSS 在 Scope/Namespace 上的缺陷，你还可以学习 CSS Modules、CSS in JS 这些有趣的新玩意</p>\n<p><strong>你需要非常了解前端的模块化规范</strong>，可能在你学习到这里的时候，Require.js/AMD 已经再见了，但是 CommonJS 与 ES6 Modules 你必须要了解。（你可以观看我的分享《<a href=\"https://link.zhihu.com/?target=http%3A//huangxuan.me/js-module-7day/%23/\">JavaScript Modularization Seven Day</a>》 来学习 JS 模块化的历史）</p>\n<p><strong>你需要熟悉 Git 与 Shell 的使用</strong>，包括基于 git 的版本管理、分支管理与团队协作，包括简单的 Linux/Unix 命令、你要知道大部分程序员的工作可以通过 shell 更快更酷的完成，并且很多“软件”只能通过 shell 来使用。你还可以把你的代码放到 github 上与人分享，并且学习 github 上其他优秀的开源代码</p>\n<p><strong>你需要熟悉并且习惯使用 Node</strong>，包括了解 npm、使用 Grunt/Gulp/Browserify/Webpack 优化你的工作流、对你的代码进行打包、混淆、压缩、发布，你还可以使用 Express/Koa 配合 MongoDB/Redis 涉足到后端领域，或者尝试用 Node 做后端渲染优化你的首屏体验</p>\n<p><strong>你需要了解各种 HTML 5 的新 API</strong>，包括 video、audio，包括 Canvas，webGL、File API、App Cache、localStorage、IndexedDB、Drag &amp; Drop、更高级的 DOM API、Fetch API 等等</p>\n<p><strong>你需要学习 JavaScript 的单线程与异步编程方法</strong>，因为它们非常非常常用、包括 setTimeout/setInterval，回调与回调地狱、事件与event loop、还有 Promise 甚至 Async/Await</p>\n<p><strong>你需要非常了解浏览器</strong>，包括主流浏览器的名称、内核与差异、包括私有属性与 -webkit- 等厂商前缀，你需要学习如何使用 Chrome DevTool，你需要了解浏览器渲染的 reflow/repaint 来避免 Jank 并进行有针对性的性能优化</p>\n<p><strong>你需要专门学习 Mobile Web</strong>，因为移动互联网是趋势。包括 viewport、CSS pixel、 touch 事件、iOS/Android 浏览器的差异与兼容、移动端的性能优化、300ms delay 等等…你还需要知道 Hybrid 是什么，包括 Cordova/Phonegap，更复杂的比如和 iOS/Android 通信的机制，比如 URI Scheme 或者 JS Bridge</p>\n<p><strong>你需要学习一些**</strong>非常火热的前端框架/库**，他们不但能帮助你更快的进行开发、更重要的是他们背后所蕴含的思想。包括 Backbone、Angular、Vue、React、Polymer 等等、了解它们背后的双向数据绑定、单向数据流、MVC/MVVM/Flux 思想、Web Component 与组件化等等</p>\n<p><strong>你需要学习如何构建 web 单页应用</strong>，这是 web 的未来，包括利用 history API 或者 hash 实现路由，包括基于 Ajax + 模版引擎或者其他技术的前端渲染、包括组织较为复杂的软件设计等等</p>\n<p><strong>我还建议你学习更多的计算机知识</strong>，它们能对你的代码能起到潜移默化的作用，包括简单的计算机体系结构、更广泛的编程知识（面向对象/函数式等）、栈、堆、数组、队列、哈希表、树、图等数据结构、时间复杂度与空间复杂度以及简单的算法等等</p>\n<p><strong>你需要了解业内的大神并阅读它们的博客/知乎/微博</strong>，比如  </p>\n<p><a href=\"http://www.zhihu.com/people/cfdec6226ece879d2571fbc274372e9f\" target=\"_blank\" rel=\"noopener\">@尤雨溪</a><a href=\"http://www.zhihu.com/people/3ec3b166992a5a90a1083945d2490d38\" target=\"_blank\" rel=\"noopener\">@贺师俊</a><a href=\"http://www.zhihu.com/people/3212f9044005e9306aab1b61e74e7ae6\" target=\"_blank\" rel=\"noopener\">@张云龙</a><a href=\"http://www.zhihu.com/people/c5198d4e9c0145aee04dd53cc6590edd\" target=\"_blank\" rel=\"noopener\">@徐飞</a><a href=\"http://www.zhihu.com/people/20fdd386a6e59d178b8fe14e2863cb40\" target=\"_blank\" rel=\"noopener\">@张克军</a><a href=\"http://www.zhihu.com/people/c11336b8607d86bc9090bed90757a34c\" target=\"_blank\" rel=\"noopener\">@玉伯</a><a href=\"http://www.zhihu.com/people/64458d15a75902cd0425732b7b757705\" target=\"_blank\" rel=\"noopener\">@拔赤</a><a href=\"http://www.zhihu.com/people/0d9b98af12015c94cff646a6fc0773b5\" target=\"_blank\" rel=\"noopener\">@寸志</a><a href=\"http://www.zhihu.com/people/790dccce26904cdcd11b0fad3bac37b7\" target=\"_blank\" rel=\"noopener\">@题叶</a><a href=\"http://www.zhihu.com/people/85de6407f2219137df29b4249b91cfd5\" target=\"_blank\" rel=\"noopener\">@郭达峰</a> 等等等等，很多思想和新东西只有从他们身上才能学到。我还推荐你多参加技术交流会，多认识一些可以一起学习的小伙伴，你们可以互相交流并且一起成长</p>\n<p><strong>你需要具备很强的自学能力、对技术有热情并且不断跟进</strong>。因为 JavaScript/前端的社区非常非常活跃，有太多的新东西需要你自己来发现与学习：比如 Universal JavaScript、Isomorphic JavaScript、前端测试、HTML5 页游、WebRTC、WebSocket、CSS 4、SVG、HTTP/2、ES 7、React Native、Babel、TypeScript、Electron 等等等等…</p>\n<p>虽然一下扯得有点多，但这些确实就是你未来将会遇到的。你并不需要全部掌握它们，但是却多多益善；你也可以专精在某几个方面，这已经足以让你成为非常专业的前端工程师。</p>\n<p>最后，英语英语英语，无论是学习还是工作，这都是一个决定天花板的重要技能。</p>\n<p>以上。</p>\n"},{"layout":"post","title":"论手机是如何改变我们的思维方式的","intro":"","date":"2020-04-15T15:00:00.000Z","author":"Makinohara","catalog":true,"_content":"\n在现代社会，手机已经成为了一种可以被看作为“生活必需品”的存在了。我们需要手机来与这个世界保持联结，需要手机来实现许多日常交互，比如支付、通勤、随时随地的娱乐等。手机的这种发展，正在改变我们的思维方式。\n\n有关手机的好处我认为是不胜枚举的，它使得我们的生活更加便捷，或是说便捷地达到了难以想象近乎科幻的程度。但今天我讨论的不是这个问题，我讨论的是手机正在潜移默化地转变我们的生活方式。\n\n首先，手机是一种良好的信息载体，触控的操作形式相较于电脑而言，更加使人有一种想要“刷”的欲望。无论是向上拉以获取新内容，还是向下拉以获取以前的信息，相较于电脑网页广泛使用的翻页，手机都更易使人产生“想看下去”的欲望。现代应用程序的设计理念也基本就是若此，为了延长用户的停留时间无所不用其极，用尽浑身解数来吸引用户进入程序，然后开始刷个不停，消磨时间。\n\n其次，手机的便携性极其优秀。其不若电脑一般笨重，也不若电脑一般对使用环境较为苛刻，哪里都能用。由是，人们在任何时候都可以通过手机获取信息或是获得快乐，而这正是手机改变我们思维方式的途径。\n\n手机使人开始变得开始缺乏耐心，开始恐惧与人断开联络，开始容易沉迷于瞬时的快乐中，无法自拔。有人把手机带来的快乐形容为“看一分钟就可以获得一分钟的快乐”，而这种快乐的刺激就容易使人成瘾，无法停下刷手机的过程。相较于传统的娱乐形式，比如影视作品、文学作品，手机所带来的娱乐更倾向于那种“无穷无尽”性。文学作品终有完结的时刻，影视作品也有明确的时间限制，看完就结束。但类似于知乎、微博、B站、抖音等娱乐就有这种”无穷无尽“的感觉，仿佛可以永远刷下去，而实际上就是可以永远刷下去。人的时间总是有限的，而互联网上的新信息总是无限地涌出，一个人就算一天刷24小时手机，也是赶不上信息更新的速度的。\n\n于是，手机就开始使我们的思维变得碎片化，无规律化。一部拥有完整世界观的影视作品或文学作品，其结构总是统一的，协调的，否则其也算不上是什么好作品。由是，此类作品能够更全面、完整、结构化地向读者或观看者传递观点，并通过各种表现形式来加深印象，从而使读者更加有可能完全理解作者的意图。\n\n而碎片化的信息就不一样，其没有作用。对，就是没有作用。如果想要了解现在世界上正在发生什么，我觉得还是那种定期出版的刊物更加靠谱一点（当然，兼听则明，偏信则暗，还是要从各种角度了解这个世界，国内外的期刊和专题网站都不能全信）。碎片化的信息更易通过一种大量轰炸的方式使得人容易变得跟风从众，让人放弃自己的思考，转而全盘接受那些被“大多数人接受”的观点。而这是极其有害的。互联网总是情绪化的，其体现出的是一种“集体的情绪”，一旦这种情绪激化，其就不容易被改变，就会变成一种势不可挡的浪潮，无视所有可能违背这种情绪的“不同意见”，在大多数人转移开注意力前永远推进下去。此时这种浪潮正确与否，就不重要了。\n\n不得不说，手机的存在加速了这种浪潮的推进。因为我们可以无时无刻不离开手机，所以发生了什么事我们也可以很快得知并传播出去，信息扩散的速度也开始变得难以想象，人们也开始习惯了在不验证真假的情况下传播信息。虽说国家号召我们“不传谣”并出台法律来尽可能压制这种情况，但我看大多数人并没有付出应有的代价。毕竟，法不责众，一旦一种思潮成为主流，想要抓人就变得极为困难了。\n\n以上就是手机给我们思维方式所带来的改变，这篇文章的逻辑还不够紧凑，所以想要理解其中心观点可能很困难，我就总结于此好了：1.不易于接受结构化知识；2.使人更容易从众跟风，放弃独立思考；3.使人更容易放弃复杂的思考而只是单纯的接受。","source":"_posts/2020-3-24-Reduce.md","raw":"---\nlayout:     post\ntitle:      \"论手机是如何改变我们的思维方式的\"\nintro:      \"\"\ndate:       2020-4-15 23:00:00\nauthor:     \"Makinohara\"\ncatalog: true\ntags:\n    - 生活感想\n---\n\n在现代社会，手机已经成为了一种可以被看作为“生活必需品”的存在了。我们需要手机来与这个世界保持联结，需要手机来实现许多日常交互，比如支付、通勤、随时随地的娱乐等。手机的这种发展，正在改变我们的思维方式。\n\n有关手机的好处我认为是不胜枚举的，它使得我们的生活更加便捷，或是说便捷地达到了难以想象近乎科幻的程度。但今天我讨论的不是这个问题，我讨论的是手机正在潜移默化地转变我们的生活方式。\n\n首先，手机是一种良好的信息载体，触控的操作形式相较于电脑而言，更加使人有一种想要“刷”的欲望。无论是向上拉以获取新内容，还是向下拉以获取以前的信息，相较于电脑网页广泛使用的翻页，手机都更易使人产生“想看下去”的欲望。现代应用程序的设计理念也基本就是若此，为了延长用户的停留时间无所不用其极，用尽浑身解数来吸引用户进入程序，然后开始刷个不停，消磨时间。\n\n其次，手机的便携性极其优秀。其不若电脑一般笨重，也不若电脑一般对使用环境较为苛刻，哪里都能用。由是，人们在任何时候都可以通过手机获取信息或是获得快乐，而这正是手机改变我们思维方式的途径。\n\n手机使人开始变得开始缺乏耐心，开始恐惧与人断开联络，开始容易沉迷于瞬时的快乐中，无法自拔。有人把手机带来的快乐形容为“看一分钟就可以获得一分钟的快乐”，而这种快乐的刺激就容易使人成瘾，无法停下刷手机的过程。相较于传统的娱乐形式，比如影视作品、文学作品，手机所带来的娱乐更倾向于那种“无穷无尽”性。文学作品终有完结的时刻，影视作品也有明确的时间限制，看完就结束。但类似于知乎、微博、B站、抖音等娱乐就有这种”无穷无尽“的感觉，仿佛可以永远刷下去，而实际上就是可以永远刷下去。人的时间总是有限的，而互联网上的新信息总是无限地涌出，一个人就算一天刷24小时手机，也是赶不上信息更新的速度的。\n\n于是，手机就开始使我们的思维变得碎片化，无规律化。一部拥有完整世界观的影视作品或文学作品，其结构总是统一的，协调的，否则其也算不上是什么好作品。由是，此类作品能够更全面、完整、结构化地向读者或观看者传递观点，并通过各种表现形式来加深印象，从而使读者更加有可能完全理解作者的意图。\n\n而碎片化的信息就不一样，其没有作用。对，就是没有作用。如果想要了解现在世界上正在发生什么，我觉得还是那种定期出版的刊物更加靠谱一点（当然，兼听则明，偏信则暗，还是要从各种角度了解这个世界，国内外的期刊和专题网站都不能全信）。碎片化的信息更易通过一种大量轰炸的方式使得人容易变得跟风从众，让人放弃自己的思考，转而全盘接受那些被“大多数人接受”的观点。而这是极其有害的。互联网总是情绪化的，其体现出的是一种“集体的情绪”，一旦这种情绪激化，其就不容易被改变，就会变成一种势不可挡的浪潮，无视所有可能违背这种情绪的“不同意见”，在大多数人转移开注意力前永远推进下去。此时这种浪潮正确与否，就不重要了。\n\n不得不说，手机的存在加速了这种浪潮的推进。因为我们可以无时无刻不离开手机，所以发生了什么事我们也可以很快得知并传播出去，信息扩散的速度也开始变得难以想象，人们也开始习惯了在不验证真假的情况下传播信息。虽说国家号召我们“不传谣”并出台法律来尽可能压制这种情况，但我看大多数人并没有付出应有的代价。毕竟，法不责众，一旦一种思潮成为主流，想要抓人就变得极为困难了。\n\n以上就是手机给我们思维方式所带来的改变，这篇文章的逻辑还不够紧凑，所以想要理解其中心观点可能很困难，我就总结于此好了：1.不易于接受结构化知识；2.使人更容易从众跟风，放弃独立思考；3.使人更容易放弃复杂的思考而只是单纯的接受。","slug":"2020-3-24-Reduce","published":1,"updated":"2021-10-24T02:04:35.830Z","comments":1,"photos":[],"link":"","_id":"ckv4pvoul000024pe4jq8dv12","content":"<p>在现代社会，手机已经成为了一种可以被看作为“生活必需品”的存在了。我们需要手机来与这个世界保持联结，需要手机来实现许多日常交互，比如支付、通勤、随时随地的娱乐等。手机的这种发展，正在改变我们的思维方式。</p>\n<p>有关手机的好处我认为是不胜枚举的，它使得我们的生活更加便捷，或是说便捷地达到了难以想象近乎科幻的程度。但今天我讨论的不是这个问题，我讨论的是手机正在潜移默化地转变我们的生活方式。</p>\n<p>首先，手机是一种良好的信息载体，触控的操作形式相较于电脑而言，更加使人有一种想要“刷”的欲望。无论是向上拉以获取新内容，还是向下拉以获取以前的信息，相较于电脑网页广泛使用的翻页，手机都更易使人产生“想看下去”的欲望。现代应用程序的设计理念也基本就是若此，为了延长用户的停留时间无所不用其极，用尽浑身解数来吸引用户进入程序，然后开始刷个不停，消磨时间。</p>\n<p>其次，手机的便携性极其优秀。其不若电脑一般笨重，也不若电脑一般对使用环境较为苛刻，哪里都能用。由是，人们在任何时候都可以通过手机获取信息或是获得快乐，而这正是手机改变我们思维方式的途径。</p>\n<p>手机使人开始变得开始缺乏耐心，开始恐惧与人断开联络，开始容易沉迷于瞬时的快乐中，无法自拔。有人把手机带来的快乐形容为“看一分钟就可以获得一分钟的快乐”，而这种快乐的刺激就容易使人成瘾，无法停下刷手机的过程。相较于传统的娱乐形式，比如影视作品、文学作品，手机所带来的娱乐更倾向于那种“无穷无尽”性。文学作品终有完结的时刻，影视作品也有明确的时间限制，看完就结束。但类似于知乎、微博、B站、抖音等娱乐就有这种”无穷无尽“的感觉，仿佛可以永远刷下去，而实际上就是可以永远刷下去。人的时间总是有限的，而互联网上的新信息总是无限地涌出，一个人就算一天刷24小时手机，也是赶不上信息更新的速度的。</p>\n<p>于是，手机就开始使我们的思维变得碎片化，无规律化。一部拥有完整世界观的影视作品或文学作品，其结构总是统一的，协调的，否则其也算不上是什么好作品。由是，此类作品能够更全面、完整、结构化地向读者或观看者传递观点，并通过各种表现形式来加深印象，从而使读者更加有可能完全理解作者的意图。</p>\n<p>而碎片化的信息就不一样，其没有作用。对，就是没有作用。如果想要了解现在世界上正在发生什么，我觉得还是那种定期出版的刊物更加靠谱一点（当然，兼听则明，偏信则暗，还是要从各种角度了解这个世界，国内外的期刊和专题网站都不能全信）。碎片化的信息更易通过一种大量轰炸的方式使得人容易变得跟风从众，让人放弃自己的思考，转而全盘接受那些被“大多数人接受”的观点。而这是极其有害的。互联网总是情绪化的，其体现出的是一种“集体的情绪”，一旦这种情绪激化，其就不容易被改变，就会变成一种势不可挡的浪潮，无视所有可能违背这种情绪的“不同意见”，在大多数人转移开注意力前永远推进下去。此时这种浪潮正确与否，就不重要了。</p>\n<p>不得不说，手机的存在加速了这种浪潮的推进。因为我们可以无时无刻不离开手机，所以发生了什么事我们也可以很快得知并传播出去，信息扩散的速度也开始变得难以想象，人们也开始习惯了在不验证真假的情况下传播信息。虽说国家号召我们“不传谣”并出台法律来尽可能压制这种情况，但我看大多数人并没有付出应有的代价。毕竟，法不责众，一旦一种思潮成为主流，想要抓人就变得极为困难了。</p>\n<p>以上就是手机给我们思维方式所带来的改变，这篇文章的逻辑还不够紧凑，所以想要理解其中心观点可能很困难，我就总结于此好了：1.不易于接受结构化知识；2.使人更容易从众跟风，放弃独立思考；3.使人更容易放弃复杂的思考而只是单纯的接受。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>在现代社会，手机已经成为了一种可以被看作为“生活必需品”的存在了。我们需要手机来与这个世界保持联结，需要手机来实现许多日常交互，比如支付、通勤、随时随地的娱乐等。手机的这种发展，正在改变我们的思维方式。</p>\n<p>有关手机的好处我认为是不胜枚举的，它使得我们的生活更加便捷，或是说便捷地达到了难以想象近乎科幻的程度。但今天我讨论的不是这个问题，我讨论的是手机正在潜移默化地转变我们的生活方式。</p>\n<p>首先，手机是一种良好的信息载体，触控的操作形式相较于电脑而言，更加使人有一种想要“刷”的欲望。无论是向上拉以获取新内容，还是向下拉以获取以前的信息，相较于电脑网页广泛使用的翻页，手机都更易使人产生“想看下去”的欲望。现代应用程序的设计理念也基本就是若此，为了延长用户的停留时间无所不用其极，用尽浑身解数来吸引用户进入程序，然后开始刷个不停，消磨时间。</p>\n<p>其次，手机的便携性极其优秀。其不若电脑一般笨重，也不若电脑一般对使用环境较为苛刻，哪里都能用。由是，人们在任何时候都可以通过手机获取信息或是获得快乐，而这正是手机改变我们思维方式的途径。</p>\n<p>手机使人开始变得开始缺乏耐心，开始恐惧与人断开联络，开始容易沉迷于瞬时的快乐中，无法自拔。有人把手机带来的快乐形容为“看一分钟就可以获得一分钟的快乐”，而这种快乐的刺激就容易使人成瘾，无法停下刷手机的过程。相较于传统的娱乐形式，比如影视作品、文学作品，手机所带来的娱乐更倾向于那种“无穷无尽”性。文学作品终有完结的时刻，影视作品也有明确的时间限制，看完就结束。但类似于知乎、微博、B站、抖音等娱乐就有这种”无穷无尽“的感觉，仿佛可以永远刷下去，而实际上就是可以永远刷下去。人的时间总是有限的，而互联网上的新信息总是无限地涌出，一个人就算一天刷24小时手机，也是赶不上信息更新的速度的。</p>\n<p>于是，手机就开始使我们的思维变得碎片化，无规律化。一部拥有完整世界观的影视作品或文学作品，其结构总是统一的，协调的，否则其也算不上是什么好作品。由是，此类作品能够更全面、完整、结构化地向读者或观看者传递观点，并通过各种表现形式来加深印象，从而使读者更加有可能完全理解作者的意图。</p>\n<p>而碎片化的信息就不一样，其没有作用。对，就是没有作用。如果想要了解现在世界上正在发生什么，我觉得还是那种定期出版的刊物更加靠谱一点（当然，兼听则明，偏信则暗，还是要从各种角度了解这个世界，国内外的期刊和专题网站都不能全信）。碎片化的信息更易通过一种大量轰炸的方式使得人容易变得跟风从众，让人放弃自己的思考，转而全盘接受那些被“大多数人接受”的观点。而这是极其有害的。互联网总是情绪化的，其体现出的是一种“集体的情绪”，一旦这种情绪激化，其就不容易被改变，就会变成一种势不可挡的浪潮，无视所有可能违背这种情绪的“不同意见”，在大多数人转移开注意力前永远推进下去。此时这种浪潮正确与否，就不重要了。</p>\n<p>不得不说，手机的存在加速了这种浪潮的推进。因为我们可以无时无刻不离开手机，所以发生了什么事我们也可以很快得知并传播出去，信息扩散的速度也开始变得难以想象，人们也开始习惯了在不验证真假的情况下传播信息。虽说国家号召我们“不传谣”并出台法律来尽可能压制这种情况，但我看大多数人并没有付出应有的代价。毕竟，法不责众，一旦一种思潮成为主流，想要抓人就变得极为困难了。</p>\n<p>以上就是手机给我们思维方式所带来的改变，这篇文章的逻辑还不够紧凑，所以想要理解其中心观点可能很困难，我就总结于此好了：1.不易于接受结构化知识；2.使人更容易从众跟风，放弃独立思考；3.使人更容易放弃复杂的思考而只是单纯的接受。</p>\n"},{"layout":"post","title":"大学贰年自省录","intro":"","date":"2021-06-30T04:00:01.000Z","author":"Makinohara","catalog":true,"_content":"\n还记得我在刚刚进入大学校园时，是怀揣着一种“要成就一番事业”的理想的。如今两年过去，这理想几经考验，曾经几度堕落，几度重提，然后因为各种事情被遗忘，直到近日才重新恢复其原本的光芒。\n\n那时候，我踌躇满志，带着高中时期打下的，较为超前的计算机基础来到这所学校。由于计算机专业是我较为感兴趣的专业，同时我高中时期乃至初中时期就对其有了一定的研究，所以在那时我可以说是抢占了先机。我在C语言的学习上顺风顺水，我在计算机应用与维护上掌握着大量经验，并帮助接触计算机不久的同学们处理系统故障，解答问题。那时候，我的自信心开始空前的膨胀。毕竟从起跑线就领先他人不少，我又有什么理由不成为“最优秀的一批”呢？我开始描绘起宏伟而远大的蓝图：保研、出国、进入外企......好像一切艰难险阻，对于我来说都太过于渺小，很轻易就可以越过，如果我不知道半年后就将面临第一轮危机的话。\n\n那时候，由于一个契机，我得知了计算机算法竞赛（ACM）实验室的存在。这是一个在计算机专业极具影响力，参加的比赛也极具含金量的实验室。在那个实验室里的人，无论是在代码水平方面和成绩方面，都可以算上是计算机专业的翘楚。我的目光便很轻易的被吸引过去。在进入新生交流群后，我简要观察了一下其他新生的情况，发现除了部分高中时期参加过信息学竞赛（2个）的成员以外，并没有太多代码水平超越我的同级生。而每年，该实验室的录取名额有8个，这就意味着我几乎可以毫无阻力地进入这个实验室。当然，我也没有为此掉以轻心，在选拔赛开始前的几个月（9-11月）勤恳地学习着算法知识，等待着进入实验室。那个时候的我没想到，这次选拔赛成为了我“成功”道路上的第一朵乌云。\n\n另一朵乌云来自于数学。从初中时期开始，我的数学水平一直都是所有学科中最薄弱的一环。高考时，我几乎放弃了导数、最难的概率与统计压轴题（因为我们都没想到概率与统计会作为压轴题存在）。在进入大学后，我为了防止数学再次成为我成绩上的最大漏洞，便给予其巨大的投入。我准备了考研的教材，按照考研的标准来训练自己的数学，以便在期末考试获得良好的分数。但出人意料的是，我在期中考试遭遇了巨大的失败。而原因总的来说可以归结为一句话：数学思维的极大程度的缺失。因为我没有什么数学思维，对代数不敏感，所以题型哪怕稍作改变，我便茫然失措。我在抽象概念方面的了解没有问题，我在公式的掌握上也没有问题，问题就在于我缺乏应变能力，只要算式稍作变动，便无法应对。由于这种情况的存在，我进一步加大了刷题的力度，期望在期末考试力挽狂澜。\n\n在2019年年末，危机降临了。首先是算法竞赛。在选拔赛上，虽然我获得了19级第三，但是由于有6名18级的成员排名在我之上，所以我没能通过选拔。另一方面，这套题几乎没有考察算法，其大部分内容聚焦于考察数学知识上（有一道题其实非常简单，但是由于考察了概率论，所以我无从下手，而18级的几乎全做出来了），导致我学习的大部分算法知识没法使我占据优势。虽然待到明年，我也是大二了，再加入这个实验室应该不成问题，但是我还是决定快速撤出这个方向，转向工程应用。我认为一年间无法参与集体训练是极大的浪费，与其再等一年，还不如早日转向，避免浪费时间。\n\n而另一个危机，则彻底改变了我接下来相当长一段时间的走向。由于数学期末考试再次失利，我的绩点及排名一落千丈。而由于数学占据着非常大比例的学分（6分），所以在绩点方面无力回天，我只好放弃保研这一条道路。\n\n接下来便是寒假，我计划在寒假时期休养生息，按照计划转变研究方向到工程开发，并在接下来的一个学期中去找到一个愿意带我做项目的教授，从而正式开始在工程应用方面的研究。在寒假期间，我学习了网页开发，并做出了这个博客界面。这算得上是一个巨大的进展，但我没意识到，这竟然成为了这两年间最后一个重大进展。\n\n紧接着便是疫情的到来。我在与自己的颓废中战斗，经历了略占优势（通过限制手机使用与规划睡眠时间保证学习计划）、反复拉锯（由于失去意志力导致了无心上课）到最终彻底失败（放弃了听课，走向堕落）。由于在疫情期间积攒了不好的影响，在接下来的一个学期里，我的学习欲意愿极大幅度地下降了。在期末考试到来时，我在九死一生中挣扎，在及格线上低空飞过，在补考中勉强过关。虽然逃脱了挂科，但在这一年间，我可谓是毫无进步。这停滞的一年，令人唏嘘，但也令人无奈。\n\n紧接着就是这学期了。在这学期开始时，我已经恢复了一部分学习意愿，并恢复了大部分专业课的作业自给率。我开始重新拾起我应该做的事，并学习了Maven的使用（虽然进步不大，但好歹不至于完全停滞）。我开始意识到先前一年的失败，但又很快明白，我必须要经历这一阶段，才能得到反思与教训。我在先前一段时间的失败，很大程度上是因为自省的缺失造成的。因为我将大量的闲暇时间投入到了做无聊的事情上（刷社交软件、玩游戏），导致了我失去了在高中时期每天都会做的自省。当然，刷社交软件、玩游戏并没有什么不好，但是它们挤占了我自省的时间，这就是最大的问题。在最近一段时间，由于我对社交软件和游戏的依赖程度大幅度降低了，所以我有了大量时间用于自省。在重新翻阅我高中时期的“自省录”后，我发现了我失去了大量的优良传统：求实、保持独立性、保持耐心......直至现在，这些“优良传统”的大部分还没能得到恢复，我想我可能得花费大量时间，才能重新拾起这些“优良传统”了。\n\n有人说，大学是一个令人堕落的过程。大多数的高中毕业生在进入大学时踌躇满志，而在离开大学时只留下后悔与落寞。很显然，我也难逃这一“社会现象”的制约，但至少我现在意识到了究竟是什么导致我走向堕落。正是因为物质生活的极大丰富，再加上外界的压力大幅度降低，使得我放松了对自己的要求，疏于自我管理，尤其是精神上的自我管理。在这样的情况下，人很难不走向堕落。管理好自己的精神是一件很困难的事，在很多时候，它需要一定的人文素养做支撑。其实在高中时期我就发现这样一个现象：那些接受了良好的人文社科教育的人，他们的行为方式相较于没有接受过的（比如我），就有非常大的差异。无论是待人接物，还是对待成功与失败的态度，还是安排学习计划的能力，他们都能以一种更理智的方式来行动。正是因为如此，我才应该“补课”，补充这一方面的知识。对于一个要走上社会的人而言，这些知识太重要了。与其在社会上吃亏来获得教训，还不如早点从历史书上获得教训，免得自己吃真亏。\n\n如此如此，便是我大学两年间一切失败教训的总结。我当然不希望以后的人重蹈覆辙，但是我却很悲观的预测：大多数人还是会像我一样经历一个失败的过程。原因很简单，像这样的文章，我在高中时期看了不知道多少，所以我在进入大学时写下大量的行为守则来避免这些事情的发生，但它们还是不可避免地发生了，也许这就是大多数大学生难以避免的命运吧！","source":"_posts/2021-6-30-ZX.markdown","raw":"---\nlayout:     post\ntitle:      \"大学贰年自省录\"\nintro:   \"\"\ndate:       2021-6-30 12:00:01\nauthor:     \"Makinohara\"\ncatalog: true\ntags:\n    - 生活感想\n    \n---\n\n还记得我在刚刚进入大学校园时，是怀揣着一种“要成就一番事业”的理想的。如今两年过去，这理想几经考验，曾经几度堕落，几度重提，然后因为各种事情被遗忘，直到近日才重新恢复其原本的光芒。\n\n那时候，我踌躇满志，带着高中时期打下的，较为超前的计算机基础来到这所学校。由于计算机专业是我较为感兴趣的专业，同时我高中时期乃至初中时期就对其有了一定的研究，所以在那时我可以说是抢占了先机。我在C语言的学习上顺风顺水，我在计算机应用与维护上掌握着大量经验，并帮助接触计算机不久的同学们处理系统故障，解答问题。那时候，我的自信心开始空前的膨胀。毕竟从起跑线就领先他人不少，我又有什么理由不成为“最优秀的一批”呢？我开始描绘起宏伟而远大的蓝图：保研、出国、进入外企......好像一切艰难险阻，对于我来说都太过于渺小，很轻易就可以越过，如果我不知道半年后就将面临第一轮危机的话。\n\n那时候，由于一个契机，我得知了计算机算法竞赛（ACM）实验室的存在。这是一个在计算机专业极具影响力，参加的比赛也极具含金量的实验室。在那个实验室里的人，无论是在代码水平方面和成绩方面，都可以算上是计算机专业的翘楚。我的目光便很轻易的被吸引过去。在进入新生交流群后，我简要观察了一下其他新生的情况，发现除了部分高中时期参加过信息学竞赛（2个）的成员以外，并没有太多代码水平超越我的同级生。而每年，该实验室的录取名额有8个，这就意味着我几乎可以毫无阻力地进入这个实验室。当然，我也没有为此掉以轻心，在选拔赛开始前的几个月（9-11月）勤恳地学习着算法知识，等待着进入实验室。那个时候的我没想到，这次选拔赛成为了我“成功”道路上的第一朵乌云。\n\n另一朵乌云来自于数学。从初中时期开始，我的数学水平一直都是所有学科中最薄弱的一环。高考时，我几乎放弃了导数、最难的概率与统计压轴题（因为我们都没想到概率与统计会作为压轴题存在）。在进入大学后，我为了防止数学再次成为我成绩上的最大漏洞，便给予其巨大的投入。我准备了考研的教材，按照考研的标准来训练自己的数学，以便在期末考试获得良好的分数。但出人意料的是，我在期中考试遭遇了巨大的失败。而原因总的来说可以归结为一句话：数学思维的极大程度的缺失。因为我没有什么数学思维，对代数不敏感，所以题型哪怕稍作改变，我便茫然失措。我在抽象概念方面的了解没有问题，我在公式的掌握上也没有问题，问题就在于我缺乏应变能力，只要算式稍作变动，便无法应对。由于这种情况的存在，我进一步加大了刷题的力度，期望在期末考试力挽狂澜。\n\n在2019年年末，危机降临了。首先是算法竞赛。在选拔赛上，虽然我获得了19级第三，但是由于有6名18级的成员排名在我之上，所以我没能通过选拔。另一方面，这套题几乎没有考察算法，其大部分内容聚焦于考察数学知识上（有一道题其实非常简单，但是由于考察了概率论，所以我无从下手，而18级的几乎全做出来了），导致我学习的大部分算法知识没法使我占据优势。虽然待到明年，我也是大二了，再加入这个实验室应该不成问题，但是我还是决定快速撤出这个方向，转向工程应用。我认为一年间无法参与集体训练是极大的浪费，与其再等一年，还不如早日转向，避免浪费时间。\n\n而另一个危机，则彻底改变了我接下来相当长一段时间的走向。由于数学期末考试再次失利，我的绩点及排名一落千丈。而由于数学占据着非常大比例的学分（6分），所以在绩点方面无力回天，我只好放弃保研这一条道路。\n\n接下来便是寒假，我计划在寒假时期休养生息，按照计划转变研究方向到工程开发，并在接下来的一个学期中去找到一个愿意带我做项目的教授，从而正式开始在工程应用方面的研究。在寒假期间，我学习了网页开发，并做出了这个博客界面。这算得上是一个巨大的进展，但我没意识到，这竟然成为了这两年间最后一个重大进展。\n\n紧接着便是疫情的到来。我在与自己的颓废中战斗，经历了略占优势（通过限制手机使用与规划睡眠时间保证学习计划）、反复拉锯（由于失去意志力导致了无心上课）到最终彻底失败（放弃了听课，走向堕落）。由于在疫情期间积攒了不好的影响，在接下来的一个学期里，我的学习欲意愿极大幅度地下降了。在期末考试到来时，我在九死一生中挣扎，在及格线上低空飞过，在补考中勉强过关。虽然逃脱了挂科，但在这一年间，我可谓是毫无进步。这停滞的一年，令人唏嘘，但也令人无奈。\n\n紧接着就是这学期了。在这学期开始时，我已经恢复了一部分学习意愿，并恢复了大部分专业课的作业自给率。我开始重新拾起我应该做的事，并学习了Maven的使用（虽然进步不大，但好歹不至于完全停滞）。我开始意识到先前一年的失败，但又很快明白，我必须要经历这一阶段，才能得到反思与教训。我在先前一段时间的失败，很大程度上是因为自省的缺失造成的。因为我将大量的闲暇时间投入到了做无聊的事情上（刷社交软件、玩游戏），导致了我失去了在高中时期每天都会做的自省。当然，刷社交软件、玩游戏并没有什么不好，但是它们挤占了我自省的时间，这就是最大的问题。在最近一段时间，由于我对社交软件和游戏的依赖程度大幅度降低了，所以我有了大量时间用于自省。在重新翻阅我高中时期的“自省录”后，我发现了我失去了大量的优良传统：求实、保持独立性、保持耐心......直至现在，这些“优良传统”的大部分还没能得到恢复，我想我可能得花费大量时间，才能重新拾起这些“优良传统”了。\n\n有人说，大学是一个令人堕落的过程。大多数的高中毕业生在进入大学时踌躇满志，而在离开大学时只留下后悔与落寞。很显然，我也难逃这一“社会现象”的制约，但至少我现在意识到了究竟是什么导致我走向堕落。正是因为物质生活的极大丰富，再加上外界的压力大幅度降低，使得我放松了对自己的要求，疏于自我管理，尤其是精神上的自我管理。在这样的情况下，人很难不走向堕落。管理好自己的精神是一件很困难的事，在很多时候，它需要一定的人文素养做支撑。其实在高中时期我就发现这样一个现象：那些接受了良好的人文社科教育的人，他们的行为方式相较于没有接受过的（比如我），就有非常大的差异。无论是待人接物，还是对待成功与失败的态度，还是安排学习计划的能力，他们都能以一种更理智的方式来行动。正是因为如此，我才应该“补课”，补充这一方面的知识。对于一个要走上社会的人而言，这些知识太重要了。与其在社会上吃亏来获得教训，还不如早点从历史书上获得教训，免得自己吃真亏。\n\n如此如此，便是我大学两年间一切失败教训的总结。我当然不希望以后的人重蹈覆辙，但是我却很悲观的预测：大多数人还是会像我一样经历一个失败的过程。原因很简单，像这样的文章，我在高中时期看了不知道多少，所以我在进入大学时写下大量的行为守则来避免这些事情的发生，但它们还是不可避免地发生了，也许这就是大多数大学生难以避免的命运吧！","slug":"2021-6-30-ZX","published":1,"updated":"2021-10-24T02:04:35.830Z","comments":1,"photos":[],"link":"","_id":"ckv4pvous000124pe69o2hj0m","content":"<p>还记得我在刚刚进入大学校园时，是怀揣着一种“要成就一番事业”的理想的。如今两年过去，这理想几经考验，曾经几度堕落，几度重提，然后因为各种事情被遗忘，直到近日才重新恢复其原本的光芒。</p>\n<p>那时候，我踌躇满志，带着高中时期打下的，较为超前的计算机基础来到这所学校。由于计算机专业是我较为感兴趣的专业，同时我高中时期乃至初中时期就对其有了一定的研究，所以在那时我可以说是抢占了先机。我在C语言的学习上顺风顺水，我在计算机应用与维护上掌握着大量经验，并帮助接触计算机不久的同学们处理系统故障，解答问题。那时候，我的自信心开始空前的膨胀。毕竟从起跑线就领先他人不少，我又有什么理由不成为“最优秀的一批”呢？我开始描绘起宏伟而远大的蓝图：保研、出国、进入外企……好像一切艰难险阻，对于我来说都太过于渺小，很轻易就可以越过，如果我不知道半年后就将面临第一轮危机的话。</p>\n<p>那时候，由于一个契机，我得知了计算机算法竞赛（ACM）实验室的存在。这是一个在计算机专业极具影响力，参加的比赛也极具含金量的实验室。在那个实验室里的人，无论是在代码水平方面和成绩方面，都可以算上是计算机专业的翘楚。我的目光便很轻易的被吸引过去。在进入新生交流群后，我简要观察了一下其他新生的情况，发现除了部分高中时期参加过信息学竞赛（2个）的成员以外，并没有太多代码水平超越我的同级生。而每年，该实验室的录取名额有8个，这就意味着我几乎可以毫无阻力地进入这个实验室。当然，我也没有为此掉以轻心，在选拔赛开始前的几个月（9-11月）勤恳地学习着算法知识，等待着进入实验室。那个时候的我没想到，这次选拔赛成为了我“成功”道路上的第一朵乌云。</p>\n<p>另一朵乌云来自于数学。从初中时期开始，我的数学水平一直都是所有学科中最薄弱的一环。高考时，我几乎放弃了导数、最难的概率与统计压轴题（因为我们都没想到概率与统计会作为压轴题存在）。在进入大学后，我为了防止数学再次成为我成绩上的最大漏洞，便给予其巨大的投入。我准备了考研的教材，按照考研的标准来训练自己的数学，以便在期末考试获得良好的分数。但出人意料的是，我在期中考试遭遇了巨大的失败。而原因总的来说可以归结为一句话：数学思维的极大程度的缺失。因为我没有什么数学思维，对代数不敏感，所以题型哪怕稍作改变，我便茫然失措。我在抽象概念方面的了解没有问题，我在公式的掌握上也没有问题，问题就在于我缺乏应变能力，只要算式稍作变动，便无法应对。由于这种情况的存在，我进一步加大了刷题的力度，期望在期末考试力挽狂澜。</p>\n<p>在2019年年末，危机降临了。首先是算法竞赛。在选拔赛上，虽然我获得了19级第三，但是由于有6名18级的成员排名在我之上，所以我没能通过选拔。另一方面，这套题几乎没有考察算法，其大部分内容聚焦于考察数学知识上（有一道题其实非常简单，但是由于考察了概率论，所以我无从下手，而18级的几乎全做出来了），导致我学习的大部分算法知识没法使我占据优势。虽然待到明年，我也是大二了，再加入这个实验室应该不成问题，但是我还是决定快速撤出这个方向，转向工程应用。我认为一年间无法参与集体训练是极大的浪费，与其再等一年，还不如早日转向，避免浪费时间。</p>\n<p>而另一个危机，则彻底改变了我接下来相当长一段时间的走向。由于数学期末考试再次失利，我的绩点及排名一落千丈。而由于数学占据着非常大比例的学分（6分），所以在绩点方面无力回天，我只好放弃保研这一条道路。</p>\n<p>接下来便是寒假，我计划在寒假时期休养生息，按照计划转变研究方向到工程开发，并在接下来的一个学期中去找到一个愿意带我做项目的教授，从而正式开始在工程应用方面的研究。在寒假期间，我学习了网页开发，并做出了这个博客界面。这算得上是一个巨大的进展，但我没意识到，这竟然成为了这两年间最后一个重大进展。</p>\n<p>紧接着便是疫情的到来。我在与自己的颓废中战斗，经历了略占优势（通过限制手机使用与规划睡眠时间保证学习计划）、反复拉锯（由于失去意志力导致了无心上课）到最终彻底失败（放弃了听课，走向堕落）。由于在疫情期间积攒了不好的影响，在接下来的一个学期里，我的学习欲意愿极大幅度地下降了。在期末考试到来时，我在九死一生中挣扎，在及格线上低空飞过，在补考中勉强过关。虽然逃脱了挂科，但在这一年间，我可谓是毫无进步。这停滞的一年，令人唏嘘，但也令人无奈。</p>\n<p>紧接着就是这学期了。在这学期开始时，我已经恢复了一部分学习意愿，并恢复了大部分专业课的作业自给率。我开始重新拾起我应该做的事，并学习了Maven的使用（虽然进步不大，但好歹不至于完全停滞）。我开始意识到先前一年的失败，但又很快明白，我必须要经历这一阶段，才能得到反思与教训。我在先前一段时间的失败，很大程度上是因为自省的缺失造成的。因为我将大量的闲暇时间投入到了做无聊的事情上（刷社交软件、玩游戏），导致了我失去了在高中时期每天都会做的自省。当然，刷社交软件、玩游戏并没有什么不好，但是它们挤占了我自省的时间，这就是最大的问题。在最近一段时间，由于我对社交软件和游戏的依赖程度大幅度降低了，所以我有了大量时间用于自省。在重新翻阅我高中时期的“自省录”后，我发现了我失去了大量的优良传统：求实、保持独立性、保持耐心……直至现在，这些“优良传统”的大部分还没能得到恢复，我想我可能得花费大量时间，才能重新拾起这些“优良传统”了。</p>\n<p>有人说，大学是一个令人堕落的过程。大多数的高中毕业生在进入大学时踌躇满志，而在离开大学时只留下后悔与落寞。很显然，我也难逃这一“社会现象”的制约，但至少我现在意识到了究竟是什么导致我走向堕落。正是因为物质生活的极大丰富，再加上外界的压力大幅度降低，使得我放松了对自己的要求，疏于自我管理，尤其是精神上的自我管理。在这样的情况下，人很难不走向堕落。管理好自己的精神是一件很困难的事，在很多时候，它需要一定的人文素养做支撑。其实在高中时期我就发现这样一个现象：那些接受了良好的人文社科教育的人，他们的行为方式相较于没有接受过的（比如我），就有非常大的差异。无论是待人接物，还是对待成功与失败的态度，还是安排学习计划的能力，他们都能以一种更理智的方式来行动。正是因为如此，我才应该“补课”，补充这一方面的知识。对于一个要走上社会的人而言，这些知识太重要了。与其在社会上吃亏来获得教训，还不如早点从历史书上获得教训，免得自己吃真亏。</p>\n<p>如此如此，便是我大学两年间一切失败教训的总结。我当然不希望以后的人重蹈覆辙，但是我却很悲观的预测：大多数人还是会像我一样经历一个失败的过程。原因很简单，像这样的文章，我在高中时期看了不知道多少，所以我在进入大学时写下大量的行为守则来避免这些事情的发生，但它们还是不可避免地发生了，也许这就是大多数大学生难以避免的命运吧！</p>\n","site":{"data":{}},"excerpt":"","more":"<p>还记得我在刚刚进入大学校园时，是怀揣着一种“要成就一番事业”的理想的。如今两年过去，这理想几经考验，曾经几度堕落，几度重提，然后因为各种事情被遗忘，直到近日才重新恢复其原本的光芒。</p>\n<p>那时候，我踌躇满志，带着高中时期打下的，较为超前的计算机基础来到这所学校。由于计算机专业是我较为感兴趣的专业，同时我高中时期乃至初中时期就对其有了一定的研究，所以在那时我可以说是抢占了先机。我在C语言的学习上顺风顺水，我在计算机应用与维护上掌握着大量经验，并帮助接触计算机不久的同学们处理系统故障，解答问题。那时候，我的自信心开始空前的膨胀。毕竟从起跑线就领先他人不少，我又有什么理由不成为“最优秀的一批”呢？我开始描绘起宏伟而远大的蓝图：保研、出国、进入外企……好像一切艰难险阻，对于我来说都太过于渺小，很轻易就可以越过，如果我不知道半年后就将面临第一轮危机的话。</p>\n<p>那时候，由于一个契机，我得知了计算机算法竞赛（ACM）实验室的存在。这是一个在计算机专业极具影响力，参加的比赛也极具含金量的实验室。在那个实验室里的人，无论是在代码水平方面和成绩方面，都可以算上是计算机专业的翘楚。我的目光便很轻易的被吸引过去。在进入新生交流群后，我简要观察了一下其他新生的情况，发现除了部分高中时期参加过信息学竞赛（2个）的成员以外，并没有太多代码水平超越我的同级生。而每年，该实验室的录取名额有8个，这就意味着我几乎可以毫无阻力地进入这个实验室。当然，我也没有为此掉以轻心，在选拔赛开始前的几个月（9-11月）勤恳地学习着算法知识，等待着进入实验室。那个时候的我没想到，这次选拔赛成为了我“成功”道路上的第一朵乌云。</p>\n<p>另一朵乌云来自于数学。从初中时期开始，我的数学水平一直都是所有学科中最薄弱的一环。高考时，我几乎放弃了导数、最难的概率与统计压轴题（因为我们都没想到概率与统计会作为压轴题存在）。在进入大学后，我为了防止数学再次成为我成绩上的最大漏洞，便给予其巨大的投入。我准备了考研的教材，按照考研的标准来训练自己的数学，以便在期末考试获得良好的分数。但出人意料的是，我在期中考试遭遇了巨大的失败。而原因总的来说可以归结为一句话：数学思维的极大程度的缺失。因为我没有什么数学思维，对代数不敏感，所以题型哪怕稍作改变，我便茫然失措。我在抽象概念方面的了解没有问题，我在公式的掌握上也没有问题，问题就在于我缺乏应变能力，只要算式稍作变动，便无法应对。由于这种情况的存在，我进一步加大了刷题的力度，期望在期末考试力挽狂澜。</p>\n<p>在2019年年末，危机降临了。首先是算法竞赛。在选拔赛上，虽然我获得了19级第三，但是由于有6名18级的成员排名在我之上，所以我没能通过选拔。另一方面，这套题几乎没有考察算法，其大部分内容聚焦于考察数学知识上（有一道题其实非常简单，但是由于考察了概率论，所以我无从下手，而18级的几乎全做出来了），导致我学习的大部分算法知识没法使我占据优势。虽然待到明年，我也是大二了，再加入这个实验室应该不成问题，但是我还是决定快速撤出这个方向，转向工程应用。我认为一年间无法参与集体训练是极大的浪费，与其再等一年，还不如早日转向，避免浪费时间。</p>\n<p>而另一个危机，则彻底改变了我接下来相当长一段时间的走向。由于数学期末考试再次失利，我的绩点及排名一落千丈。而由于数学占据着非常大比例的学分（6分），所以在绩点方面无力回天，我只好放弃保研这一条道路。</p>\n<p>接下来便是寒假，我计划在寒假时期休养生息，按照计划转变研究方向到工程开发，并在接下来的一个学期中去找到一个愿意带我做项目的教授，从而正式开始在工程应用方面的研究。在寒假期间，我学习了网页开发，并做出了这个博客界面。这算得上是一个巨大的进展，但我没意识到，这竟然成为了这两年间最后一个重大进展。</p>\n<p>紧接着便是疫情的到来。我在与自己的颓废中战斗，经历了略占优势（通过限制手机使用与规划睡眠时间保证学习计划）、反复拉锯（由于失去意志力导致了无心上课）到最终彻底失败（放弃了听课，走向堕落）。由于在疫情期间积攒了不好的影响，在接下来的一个学期里，我的学习欲意愿极大幅度地下降了。在期末考试到来时，我在九死一生中挣扎，在及格线上低空飞过，在补考中勉强过关。虽然逃脱了挂科，但在这一年间，我可谓是毫无进步。这停滞的一年，令人唏嘘，但也令人无奈。</p>\n<p>紧接着就是这学期了。在这学期开始时，我已经恢复了一部分学习意愿，并恢复了大部分专业课的作业自给率。我开始重新拾起我应该做的事，并学习了Maven的使用（虽然进步不大，但好歹不至于完全停滞）。我开始意识到先前一年的失败，但又很快明白，我必须要经历这一阶段，才能得到反思与教训。我在先前一段时间的失败，很大程度上是因为自省的缺失造成的。因为我将大量的闲暇时间投入到了做无聊的事情上（刷社交软件、玩游戏），导致了我失去了在高中时期每天都会做的自省。当然，刷社交软件、玩游戏并没有什么不好，但是它们挤占了我自省的时间，这就是最大的问题。在最近一段时间，由于我对社交软件和游戏的依赖程度大幅度降低了，所以我有了大量时间用于自省。在重新翻阅我高中时期的“自省录”后，我发现了我失去了大量的优良传统：求实、保持独立性、保持耐心……直至现在，这些“优良传统”的大部分还没能得到恢复，我想我可能得花费大量时间，才能重新拾起这些“优良传统”了。</p>\n<p>有人说，大学是一个令人堕落的过程。大多数的高中毕业生在进入大学时踌躇满志，而在离开大学时只留下后悔与落寞。很显然，我也难逃这一“社会现象”的制约，但至少我现在意识到了究竟是什么导致我走向堕落。正是因为物质生活的极大丰富，再加上外界的压力大幅度降低，使得我放松了对自己的要求，疏于自我管理，尤其是精神上的自我管理。在这样的情况下，人很难不走向堕落。管理好自己的精神是一件很困难的事，在很多时候，它需要一定的人文素养做支撑。其实在高中时期我就发现这样一个现象：那些接受了良好的人文社科教育的人，他们的行为方式相较于没有接受过的（比如我），就有非常大的差异。无论是待人接物，还是对待成功与失败的态度，还是安排学习计划的能力，他们都能以一种更理智的方式来行动。正是因为如此，我才应该“补课”，补充这一方面的知识。对于一个要走上社会的人而言，这些知识太重要了。与其在社会上吃亏来获得教训，还不如早点从历史书上获得教训，免得自己吃真亏。</p>\n<p>如此如此，便是我大学两年间一切失败教训的总结。我当然不希望以后的人重蹈覆辙，但是我却很悲观的预测：大多数人还是会像我一样经历一个失败的过程。原因很简单，像这样的文章，我在高中时期看了不知道多少，所以我在进入大学时写下大量的行为守则来避免这些事情的发生，但它们还是不可避免地发生了，也许这就是大多数大学生难以避免的命运吧！</p>\n"},{"layout":"post","title":"Maven","intro":"","date":"2021-03-20T04:00:00.000Z","author":"Makinohara","catalog":true,"_content":"\n\n\n\n\n# Maven基础内容\n\n## Maven构建\n\n清理、编译、测试、报告、打包、安装、（部署）\n\n编译命令：`mvn compile`\n\n换源 阿里源：\n\n```\n<mirror>\n        <id>nexus-aliyun</id>\n        <mirrorOf>central</mirrorOf>\n        <name>Nexus aliyun</name>\n        <url>http://maven.aliyun.com/nexus/content/groups/public</url>\n    </mirror>\n```\n\n仓库使用：\n\n本地仓库->私服->镜像->中央仓库\n\n常用命令：\n\n```\nmvn clean 清理\nmvn compile 编译主程序\n\tresources的文件会拷贝到target/classes/ 下\nmvn test-compile 编译测试程序\nmvn test 测试\nmvn package 打包主程序\nmvn install 安装主程序\nmvn deploy 部署主程序\n```\n\n\n\n## 项目对象模型pom\n\n```\nmodelVersion Maven模型版本\n坐标：\ngroupId 组织名称\nartifactId 项目名称\nversion 项目版本号 -SNAPSHOT不稳定版本\npackging 项目打包类型\ndependencies 依赖\nproperties 属性\nbuild 构建（一般涉及jdk版本等）\n```\n\n## Maven相关概念：\n\n生命周期：maven构建项目的过程：清理、编译、测试、报告、打包、安装、（部署）\n\nmaven命令：maven可以使用命令完成生命周期执行\n\nmaven插件：maven执行时完成功能的工具\n\n## 单元测试jUnit\n\n测试的类中的方法，方法是测试的基本单位（单元）。\n\nmaven可以借助单元测试测试类中方法。\n\n### 使用步骤\n\n1、加入Junit依赖\n\n```\n<dependency>\n<groupId>junit</groupId>\n<artifactId>junit</artifactId>\n<version>4.11</version>\n<scope>test</scope>\n</dependency>\n```\n\n2、创建测试类、测试程序（可以加入注解@Test）\n\n3、测试方法的限制：public；**没有返回值**；加@Test注解\n\n测试程序范例：\n\n```\npackage com.icsii.mavenlearn;\n\nimport org.junit.Assert;\nimport org.junit.Test;\n\npublic class TestDemo {\n    int add(int n1,int n2){\n        return n1+n2;\n    }\n    @Test //要在测试方法之前加上@Test\n    public void testAdd(){\n        TestDemo test = new TestDemo();\n        int res = test.add(10,20);\n        Assert.assertEquals(30,res);//期望值，实际值，相等正确，不等抛出异常\n    }\n}\n\n```\n\n## 打包\n\n将项目相关的资源和类等打包为压缩文件，存放才target内\n\n打包时不会包含测试文件\n\n## 安装\n\nmvn install 将项目打包后安装到仓库中\n\n## 部署\n\nmvn deploy 部署到远程私服仓库\n\n## 配置插件\n\n用于配置插件的一些设置\n\n```\n<build>\n        <plugins>\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-compiler-plugin</artifactId>\n                <version>3.8.1</version>\n                <configuration>\n                    <!-- 配置代码编译与运行的jdk版本-->\n                    <source>1.8</source>\n                    <target>1.8</target>\n                </configuration>\n            </plugin>\n        </plugins>\n    </build>\n```\n\n## 依赖、依赖范围\n\n```\n<dependency>\n<groupId>junit</groupId>\n<artifactId>junit</artifactId>\n<version>4.11</version>\n<!-- 依赖范围，指的是该依赖在项目中起作用的阶段 -->\n<!--test/compile/provided(提供者使用，打包后不依赖)/-->\n<scope>test</scope>\n</dependency>\n```\n\n## 属性设置、资源插件\n\n```\n<properties>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n        <maven.compiler.encoding>UTF-8</maven.compiler.encoding>\n        <java.version>16</java.version>\n        <!--jdk版本-->\n        <maven.compiler.source>16</maven.compiler.source>\n        <maven.compiler.target>16</maven.compiler.target>\n        <!--全局变量的使用-->\n        <spring.version>5.2.5</spring.version>\n        <!--使用：${spring.version}-->\n</properties>\n```\n\n```\n    <build>\n        <resources>\n            <resource>\n                <!--在以下目录中包含的文件种类，在编译时保留-->\n                <directory>src/main/java</directory>\n                <includes>\n                    <include>**/*.properties</include>\n                    <include>**/*.xml</include>\n                </includes>\n            </resource>\n        </resources>\n    </build>\n```\n\n","source":"_posts/2021-3-23-Maven.markdown","raw":"---\nlayout:     post\ntitle:      \"Maven\"\nintro:   \"\"\ndate:       2021-3-20 12:00:00\nauthor:     \"Makinohara\"\ncatalog: true\ntags:\n    - 工程开发\n  \n---\n\n\n\n\n\n# Maven基础内容\n\n## Maven构建\n\n清理、编译、测试、报告、打包、安装、（部署）\n\n编译命令：`mvn compile`\n\n换源 阿里源：\n\n```\n<mirror>\n        <id>nexus-aliyun</id>\n        <mirrorOf>central</mirrorOf>\n        <name>Nexus aliyun</name>\n        <url>http://maven.aliyun.com/nexus/content/groups/public</url>\n    </mirror>\n```\n\n仓库使用：\n\n本地仓库->私服->镜像->中央仓库\n\n常用命令：\n\n```\nmvn clean 清理\nmvn compile 编译主程序\n\tresources的文件会拷贝到target/classes/ 下\nmvn test-compile 编译测试程序\nmvn test 测试\nmvn package 打包主程序\nmvn install 安装主程序\nmvn deploy 部署主程序\n```\n\n\n\n## 项目对象模型pom\n\n```\nmodelVersion Maven模型版本\n坐标：\ngroupId 组织名称\nartifactId 项目名称\nversion 项目版本号 -SNAPSHOT不稳定版本\npackging 项目打包类型\ndependencies 依赖\nproperties 属性\nbuild 构建（一般涉及jdk版本等）\n```\n\n## Maven相关概念：\n\n生命周期：maven构建项目的过程：清理、编译、测试、报告、打包、安装、（部署）\n\nmaven命令：maven可以使用命令完成生命周期执行\n\nmaven插件：maven执行时完成功能的工具\n\n## 单元测试jUnit\n\n测试的类中的方法，方法是测试的基本单位（单元）。\n\nmaven可以借助单元测试测试类中方法。\n\n### 使用步骤\n\n1、加入Junit依赖\n\n```\n<dependency>\n<groupId>junit</groupId>\n<artifactId>junit</artifactId>\n<version>4.11</version>\n<scope>test</scope>\n</dependency>\n```\n\n2、创建测试类、测试程序（可以加入注解@Test）\n\n3、测试方法的限制：public；**没有返回值**；加@Test注解\n\n测试程序范例：\n\n```\npackage com.icsii.mavenlearn;\n\nimport org.junit.Assert;\nimport org.junit.Test;\n\npublic class TestDemo {\n    int add(int n1,int n2){\n        return n1+n2;\n    }\n    @Test //要在测试方法之前加上@Test\n    public void testAdd(){\n        TestDemo test = new TestDemo();\n        int res = test.add(10,20);\n        Assert.assertEquals(30,res);//期望值，实际值，相等正确，不等抛出异常\n    }\n}\n\n```\n\n## 打包\n\n将项目相关的资源和类等打包为压缩文件，存放才target内\n\n打包时不会包含测试文件\n\n## 安装\n\nmvn install 将项目打包后安装到仓库中\n\n## 部署\n\nmvn deploy 部署到远程私服仓库\n\n## 配置插件\n\n用于配置插件的一些设置\n\n```\n<build>\n        <plugins>\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-compiler-plugin</artifactId>\n                <version>3.8.1</version>\n                <configuration>\n                    <!-- 配置代码编译与运行的jdk版本-->\n                    <source>1.8</source>\n                    <target>1.8</target>\n                </configuration>\n            </plugin>\n        </plugins>\n    </build>\n```\n\n## 依赖、依赖范围\n\n```\n<dependency>\n<groupId>junit</groupId>\n<artifactId>junit</artifactId>\n<version>4.11</version>\n<!-- 依赖范围，指的是该依赖在项目中起作用的阶段 -->\n<!--test/compile/provided(提供者使用，打包后不依赖)/-->\n<scope>test</scope>\n</dependency>\n```\n\n## 属性设置、资源插件\n\n```\n<properties>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n        <maven.compiler.encoding>UTF-8</maven.compiler.encoding>\n        <java.version>16</java.version>\n        <!--jdk版本-->\n        <maven.compiler.source>16</maven.compiler.source>\n        <maven.compiler.target>16</maven.compiler.target>\n        <!--全局变量的使用-->\n        <spring.version>5.2.5</spring.version>\n        <!--使用：${spring.version}-->\n</properties>\n```\n\n```\n    <build>\n        <resources>\n            <resource>\n                <!--在以下目录中包含的文件种类，在编译时保留-->\n                <directory>src/main/java</directory>\n                <includes>\n                    <include>**/*.properties</include>\n                    <include>**/*.xml</include>\n                </includes>\n            </resource>\n        </resources>\n    </build>\n```\n\n","slug":"2021-3-23-Maven","published":1,"updated":"2021-10-24T02:04:35.830Z","comments":1,"photos":[],"link":"","_id":"ckv4pvov2000324pe8r5w38bk","content":"<h1 id=\"Maven基础内容\"><a href=\"#Maven基础内容\" class=\"headerlink\" title=\"Maven基础内容\"></a>Maven基础内容</h1><h2 id=\"Maven构建\"><a href=\"#Maven构建\" class=\"headerlink\" title=\"Maven构建\"></a>Maven构建</h2><p>清理、编译、测试、报告、打包、安装、（部署）</p>\n<p>编译命令：<code>mvn compile</code></p>\n<p>换源 阿里源：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">mirror</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">id</span>&gt;</span>nexus-aliyun<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">id</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">mirrorOf</span>&gt;</span>central<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">mirrorOf</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">name</span>&gt;</span>Nexus aliyun<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">name</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">url</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">mirror</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<p>仓库使用：</p>\n<p>本地仓库-&gt;私服-&gt;镜像-&gt;中央仓库</p>\n<p>常用命令：</p>\n<figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs armasm\"><span class=\"hljs-keyword\">mvn </span>clean 清理<br><span class=\"hljs-keyword\">mvn </span>compile 编译主程序<br>\tresources的文件会拷贝到target/classes/ 下<br><span class=\"hljs-keyword\">mvn </span>test-compile 编译测试程序<br><span class=\"hljs-keyword\">mvn </span>test 测试<br><span class=\"hljs-keyword\">mvn </span>package 打包主程序<br><span class=\"hljs-keyword\">mvn </span>install 安装主程序<br><span class=\"hljs-keyword\">mvn </span>deploy 部署主程序<br></code></pre></td></tr></table></figure>\n<h2 id=\"项目对象模型pom\"><a href=\"#项目对象模型pom\" class=\"headerlink\" title=\"项目对象模型pom\"></a>项目对象模型pom</h2><figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs properties\"><span class=\"hljs-attr\">modelVersion</span> <span class=\"hljs-string\">Maven模型版本</span><br><span class=\"hljs-attr\">坐标：</span><br><span class=\"hljs-attr\">groupId</span> <span class=\"hljs-string\">组织名称</span><br><span class=\"hljs-attr\">artifactId</span> <span class=\"hljs-string\">项目名称</span><br><span class=\"hljs-attr\">version</span> <span class=\"hljs-string\">项目版本号 -SNAPSHOT不稳定版本</span><br><span class=\"hljs-attr\">packging</span> <span class=\"hljs-string\">项目打包类型</span><br><span class=\"hljs-attr\">dependencies</span> <span class=\"hljs-string\">依赖</span><br><span class=\"hljs-attr\">properties</span> <span class=\"hljs-string\">属性</span><br><span class=\"hljs-attr\">build</span> <span class=\"hljs-string\">构建（一般涉及jdk版本等）</span><br></code></pre></td></tr></table></figure>\n<h2 id=\"Maven相关概念：\"><a href=\"#Maven相关概念：\" class=\"headerlink\" title=\"Maven相关概念：\"></a>Maven相关概念：</h2><p>生命周期：maven构建项目的过程：清理、编译、测试、报告、打包、安装、（部署）</p>\n<p>maven命令：maven可以使用命令完成生命周期执行</p>\n<p>maven插件：maven执行时完成功能的工具</p>\n<h2 id=\"单元测试jUnit\"><a href=\"#单元测试jUnit\" class=\"headerlink\" title=\"单元测试jUnit\"></a>单元测试jUnit</h2><p>测试的类中的方法，方法是测试的基本单位（单元）。</p>\n<p>maven可以借助单元测试测试类中方法。</p>\n<h3 id=\"使用步骤\"><a href=\"#使用步骤\" class=\"headerlink\" title=\"使用步骤\"></a>使用步骤</h3><p>1、加入Junit依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>junit<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>junit<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>4.11<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">scope</span>&gt;</span>test<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">scope</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<p>2、创建测试类、测试程序（可以加入注解@Test）</p>\n<p>3、测试方法的限制：public；<strong>没有返回值</strong>；加@Test注解</p>\n<p>测试程序范例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.icsii.mavenlearn;<br><br><span class=\"hljs-keyword\">import</span> org.junit.Assert;<br><span class=\"hljs-keyword\">import</span> org.junit.Test;<br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">TestDemo</span> </span>&#123;<br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">add</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> n1,<span class=\"hljs-keyword\">int</span> n2)</span></span>&#123;<br>        <span class=\"hljs-keyword\">return</span> n1+n2;<br>    &#125;<br>    <span class=\"hljs-meta\">@Test</span> <span class=\"hljs-comment\">//要在测试方法之前加上@Test</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">testAdd</span><span class=\"hljs-params\">()</span></span>&#123;<br>        TestDemo test = <span class=\"hljs-keyword\">new</span> TestDemo();<br>        <span class=\"hljs-keyword\">int</span> res = test.add(<span class=\"hljs-number\">10</span>,<span class=\"hljs-number\">20</span>);<br>        Assert.assertEquals(<span class=\"hljs-number\">30</span>,res);<span class=\"hljs-comment\">//期望值，实际值，相等正确，不等抛出异常</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h2 id=\"打包\"><a href=\"#打包\" class=\"headerlink\" title=\"打包\"></a>打包</h2><p>将项目相关的资源和类等打包为压缩文件，存放才target内</p>\n<p>打包时不会包含测试文件</p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p>mvn install 将项目打包后安装到仓库中</p>\n<h2 id=\"部署\"><a href=\"#部署\" class=\"headerlink\" title=\"部署\"></a>部署</h2><p>mvn deploy 部署到远程私服仓库</p>\n<h2 id=\"配置插件\"><a href=\"#配置插件\" class=\"headerlink\" title=\"配置插件\"></a>配置插件</h2><p>用于配置插件的一些设置</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">build</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">plugins</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">plugin</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.apache.maven.plugins<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>maven-compiler-plugin<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>3.8.1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">configuration</span>&gt;</span><br>                    <span class=\"hljs-comment\">&lt;!-- 配置代码编译与运行的jdk版本--&gt;</span><br>                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">source</span>&gt;</span>1.8<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">source</span>&gt;</span><br>                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">target</span>&gt;</span>1.8<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">target</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">configuration</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">plugin</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">plugins</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">build</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<h2 id=\"依赖、依赖范围\"><a href=\"#依赖、依赖范围\" class=\"headerlink\" title=\"依赖、依赖范围\"></a>依赖、依赖范围</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>junit<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>junit<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>4.11<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span><br><span class=\"hljs-comment\">&lt;!-- 依赖范围，指的是该依赖在项目中起作用的阶段 --&gt;</span><br><span class=\"hljs-comment\">&lt;!--test/compile/provided(提供者使用，打包后不依赖)/--&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">scope</span>&gt;</span>test<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">scope</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<h2 id=\"属性设置、资源插件\"><a href=\"#属性设置、资源插件\" class=\"headerlink\" title=\"属性设置、资源插件\"></a>属性设置、资源插件</h2><figure class=\"highlight dust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dust\"><span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">properties</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">project.build.sourceEncoding</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">maven.compiler.encoding</span>&gt;</span>UTF-8<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">maven.compiler.encoding</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">java.version</span>&gt;</span>16<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">java.version</span>&gt;</span><br>        <span class=\"hljs-comment\">&lt;!--jdk版本--&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">maven.compiler.source</span>&gt;</span>16<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">maven.compiler.source</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">maven.compiler.target</span>&gt;</span>16<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">maven.compiler.target</span>&gt;</span><br>        <span class=\"hljs-comment\">&lt;!--全局变量的使用--&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">spring.version</span>&gt;</span>5.2.5<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">spring.version</span>&gt;</span><br>        <span class=\"hljs-comment\">&lt;!--使用：$</span></span><span class=\"hljs-template-variable\">&#123;spring.version&#125;</span><span class=\"xml\"><span class=\"hljs-comment\">--&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">properties</span>&gt;</span></span><br></code></pre></td></tr></table></figure>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">build</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">resources</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">resource</span>&gt;</span><br>            <span class=\"hljs-comment\">&lt;!--在以下目录中包含的文件种类，在编译时保留--&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">directory</span>&gt;</span>src/main/java<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">directory</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">includes</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">include</span>&gt;</span>**/*.properties<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">include</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">include</span>&gt;</span>**/*.xml<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">include</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">includes</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">resource</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">resources</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">build</span>&gt;</span><br></code></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Maven基础内容\"><a href=\"#Maven基础内容\" class=\"headerlink\" title=\"Maven基础内容\"></a>Maven基础内容</h1><h2 id=\"Maven构建\"><a href=\"#Maven构建\" class=\"headerlink\" title=\"Maven构建\"></a>Maven构建</h2><p>清理、编译、测试、报告、打包、安装、（部署）</p>\n<p>编译命令：<code>mvn compile</code></p>\n<p>换源 阿里源：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">mirror</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">id</span>&gt;</span>nexus-aliyun<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">id</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">mirrorOf</span>&gt;</span>central<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">mirrorOf</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">name</span>&gt;</span>Nexus aliyun<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">name</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">url</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">mirror</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<p>仓库使用：</p>\n<p>本地仓库-&gt;私服-&gt;镜像-&gt;中央仓库</p>\n<p>常用命令：</p>\n<figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs armasm\"><span class=\"hljs-keyword\">mvn </span>clean 清理<br><span class=\"hljs-keyword\">mvn </span>compile 编译主程序<br>\tresources的文件会拷贝到target/classes/ 下<br><span class=\"hljs-keyword\">mvn </span>test-compile 编译测试程序<br><span class=\"hljs-keyword\">mvn </span>test 测试<br><span class=\"hljs-keyword\">mvn </span>package 打包主程序<br><span class=\"hljs-keyword\">mvn </span>install 安装主程序<br><span class=\"hljs-keyword\">mvn </span>deploy 部署主程序<br></code></pre></td></tr></table></figure>\n<h2 id=\"项目对象模型pom\"><a href=\"#项目对象模型pom\" class=\"headerlink\" title=\"项目对象模型pom\"></a>项目对象模型pom</h2><figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs properties\"><span class=\"hljs-attr\">modelVersion</span> <span class=\"hljs-string\">Maven模型版本</span><br><span class=\"hljs-attr\">坐标：</span><br><span class=\"hljs-attr\">groupId</span> <span class=\"hljs-string\">组织名称</span><br><span class=\"hljs-attr\">artifactId</span> <span class=\"hljs-string\">项目名称</span><br><span class=\"hljs-attr\">version</span> <span class=\"hljs-string\">项目版本号 -SNAPSHOT不稳定版本</span><br><span class=\"hljs-attr\">packging</span> <span class=\"hljs-string\">项目打包类型</span><br><span class=\"hljs-attr\">dependencies</span> <span class=\"hljs-string\">依赖</span><br><span class=\"hljs-attr\">properties</span> <span class=\"hljs-string\">属性</span><br><span class=\"hljs-attr\">build</span> <span class=\"hljs-string\">构建（一般涉及jdk版本等）</span><br></code></pre></td></tr></table></figure>\n<h2 id=\"Maven相关概念：\"><a href=\"#Maven相关概念：\" class=\"headerlink\" title=\"Maven相关概念：\"></a>Maven相关概念：</h2><p>生命周期：maven构建项目的过程：清理、编译、测试、报告、打包、安装、（部署）</p>\n<p>maven命令：maven可以使用命令完成生命周期执行</p>\n<p>maven插件：maven执行时完成功能的工具</p>\n<h2 id=\"单元测试jUnit\"><a href=\"#单元测试jUnit\" class=\"headerlink\" title=\"单元测试jUnit\"></a>单元测试jUnit</h2><p>测试的类中的方法，方法是测试的基本单位（单元）。</p>\n<p>maven可以借助单元测试测试类中方法。</p>\n<h3 id=\"使用步骤\"><a href=\"#使用步骤\" class=\"headerlink\" title=\"使用步骤\"></a>使用步骤</h3><p>1、加入Junit依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>junit<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>junit<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>4.11<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">scope</span>&gt;</span>test<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">scope</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<p>2、创建测试类、测试程序（可以加入注解@Test）</p>\n<p>3、测试方法的限制：public；<strong>没有返回值</strong>；加@Test注解</p>\n<p>测试程序范例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.icsii.mavenlearn;<br><br><span class=\"hljs-keyword\">import</span> org.junit.Assert;<br><span class=\"hljs-keyword\">import</span> org.junit.Test;<br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">TestDemo</span> </span>&#123;<br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">add</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> n1,<span class=\"hljs-keyword\">int</span> n2)</span></span>&#123;<br>        <span class=\"hljs-keyword\">return</span> n1+n2;<br>    &#125;<br>    <span class=\"hljs-meta\">@Test</span> <span class=\"hljs-comment\">//要在测试方法之前加上@Test</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">testAdd</span><span class=\"hljs-params\">()</span></span>&#123;<br>        TestDemo test = <span class=\"hljs-keyword\">new</span> TestDemo();<br>        <span class=\"hljs-keyword\">int</span> res = test.add(<span class=\"hljs-number\">10</span>,<span class=\"hljs-number\">20</span>);<br>        Assert.assertEquals(<span class=\"hljs-number\">30</span>,res);<span class=\"hljs-comment\">//期望值，实际值，相等正确，不等抛出异常</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h2 id=\"打包\"><a href=\"#打包\" class=\"headerlink\" title=\"打包\"></a>打包</h2><p>将项目相关的资源和类等打包为压缩文件，存放才target内</p>\n<p>打包时不会包含测试文件</p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p>mvn install 将项目打包后安装到仓库中</p>\n<h2 id=\"部署\"><a href=\"#部署\" class=\"headerlink\" title=\"部署\"></a>部署</h2><p>mvn deploy 部署到远程私服仓库</p>\n<h2 id=\"配置插件\"><a href=\"#配置插件\" class=\"headerlink\" title=\"配置插件\"></a>配置插件</h2><p>用于配置插件的一些设置</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">build</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">plugins</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">plugin</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.apache.maven.plugins<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>maven-compiler-plugin<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>3.8.1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">configuration</span>&gt;</span><br>                    <span class=\"hljs-comment\">&lt;!-- 配置代码编译与运行的jdk版本--&gt;</span><br>                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">source</span>&gt;</span>1.8<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">source</span>&gt;</span><br>                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">target</span>&gt;</span>1.8<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">target</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">configuration</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">plugin</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">plugins</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">build</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<h2 id=\"依赖、依赖范围\"><a href=\"#依赖、依赖范围\" class=\"headerlink\" title=\"依赖、依赖范围\"></a>依赖、依赖范围</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>junit<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>junit<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>4.11<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span><br><span class=\"hljs-comment\">&lt;!-- 依赖范围，指的是该依赖在项目中起作用的阶段 --&gt;</span><br><span class=\"hljs-comment\">&lt;!--test/compile/provided(提供者使用，打包后不依赖)/--&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">scope</span>&gt;</span>test<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">scope</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<h2 id=\"属性设置、资源插件\"><a href=\"#属性设置、资源插件\" class=\"headerlink\" title=\"属性设置、资源插件\"></a>属性设置、资源插件</h2><figure class=\"highlight dust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dust\"><span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">properties</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">project.build.sourceEncoding</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">maven.compiler.encoding</span>&gt;</span>UTF-8<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">maven.compiler.encoding</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">java.version</span>&gt;</span>16<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">java.version</span>&gt;</span><br>        <span class=\"hljs-comment\">&lt;!--jdk版本--&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">maven.compiler.source</span>&gt;</span>16<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">maven.compiler.source</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">maven.compiler.target</span>&gt;</span>16<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">maven.compiler.target</span>&gt;</span><br>        <span class=\"hljs-comment\">&lt;!--全局变量的使用--&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">spring.version</span>&gt;</span>5.2.5<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">spring.version</span>&gt;</span><br>        <span class=\"hljs-comment\">&lt;!--使用：$</span></span><span class=\"hljs-template-variable\">&#123;spring.version&#125;</span><span class=\"xml\"><span class=\"hljs-comment\">--&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">properties</span>&gt;</span></span><br></code></pre></td></tr></table></figure>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">build</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">resources</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">resource</span>&gt;</span><br>            <span class=\"hljs-comment\">&lt;!--在以下目录中包含的文件种类，在编译时保留--&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">directory</span>&gt;</span>src/main/java<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">directory</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">includes</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">include</span>&gt;</span>**/*.properties<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">include</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">include</span>&gt;</span>**/*.xml<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">include</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">includes</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">resource</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">resources</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">build</span>&gt;</span><br></code></pre></td></tr></table></figure>\n"},{"layout":"post","title":"计算机视觉——入门","intro":"","date":"2021-06-16T04:00:01.000Z","author":"Makinohara","catalog":true,"_content":"\n现在开始准备计算机视觉的入门内容，我们计划通过网络上的教程来基本学习 OpenCV 的使用，接下来再进行理论课（计算机视觉）的学习，然后学习深度学习（机器学习）、计算机视觉与深度学习的融合。\n\n# OpenCV篇\n\n## 基本操作\n\n引入图片：\n\n```python\nimport cv2\nimport numpy as np\nfrom matplotlib import pyplot as plt\n\nimg = cv2.imread('watch.png',cv2.IMREAD_GRAYSCALE)#该方式为灰度引入，而颜色引入为IMREAD_COLOR，保留alpha通道则为IMREAD_UNCHANGED，分别对应着数字0（灰度）,1（颜色）,-1（不变）\ncv2.imshow('image',img)\ncv2.waitKey(0)\ncv2.destroyAllWindows()\n```\n\n引入摄像头作为视频源：\n\n```python\nimport numpy as np\nimport cv2\n\ncap = cv2.VideoCapture(2)\n\nwhile (True):\n    ret, frame = cap.read()  # ret代表是否有返回值，frame则是得到的帧\n    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)  # 转换为灰度，没有转换前的就是frame\n\n    #（可选）录制到视频并输出:\n    #fourcc = cv2.VideoWriter_fourcc(*'XVID')\n    #out = cv2.VideoWriter('output.avi', fourcc, 20.0, (640, 480))\n\n    # 分别显示灰度输出和彩色输出：\n    cv2.imshow('gray', gray)\n    cv2.imshow('frame', frame)\n\n    #（可选）输出视频文件：\n    #out.write(frame)\n\n    if cv2.waitKey(1) & 0xFF == ord('q'):\n        break\n\ncap.release()\ncv2.destroyAllWindows()\n```\n\n### 绘制操作\n\n```python\nimport numpy as np\nimport cv2\n\nimg = cv2.imread('D1_res/watch.png',cv2.IMREAD_COLOR)\n\n\n#基本的绘制操作\ncv2.line(img,(0,0),(150,150),(255,255,255),2)#线\ncv2.rectangle(img,(50,50),(150,150),(0,0,255),2)#矩形\ncv2.circle(img,(100,100), 100, (0,255,0), 2)#圆\n\n\n#自由绘制\npts = np.array([[0,0],[50,50],[100,150],[200,150]], np.int32)#坐标集\n#pts = pts.reshape((-1,1,2))  可能会用到的操作\ncv2.polylines(img, [pts], True, (0,255,255), 3)#绘制对象，坐标集，是否首尾相连，颜色，粗细\n\n\n\nfont = cv2.FONT_HERSHEY_SIMPLEX\ncv2.putText(img,'TestText',(50,50), font, 1, (200,255,155), 2, cv2.LINE_AA)\n\n\n\ncv2.imshow('image',img)\ncv2.waitKey(0)\ncv2.destroyAllWindows()\n```\n\n","source":"_posts/2021-6-16-CV.markdown","raw":"---\nlayout:     post\ntitle:      \"计算机视觉——入门\"\nintro:   \"\"\ndate:       2021-6-16 12:00:01\nauthor:     \"Makinohara\"\ncatalog: true\ntags:\n    - 科研应用\n    \n---\n\n现在开始准备计算机视觉的入门内容，我们计划通过网络上的教程来基本学习 OpenCV 的使用，接下来再进行理论课（计算机视觉）的学习，然后学习深度学习（机器学习）、计算机视觉与深度学习的融合。\n\n# OpenCV篇\n\n## 基本操作\n\n引入图片：\n\n```python\nimport cv2\nimport numpy as np\nfrom matplotlib import pyplot as plt\n\nimg = cv2.imread('watch.png',cv2.IMREAD_GRAYSCALE)#该方式为灰度引入，而颜色引入为IMREAD_COLOR，保留alpha通道则为IMREAD_UNCHANGED，分别对应着数字0（灰度）,1（颜色）,-1（不变）\ncv2.imshow('image',img)\ncv2.waitKey(0)\ncv2.destroyAllWindows()\n```\n\n引入摄像头作为视频源：\n\n```python\nimport numpy as np\nimport cv2\n\ncap = cv2.VideoCapture(2)\n\nwhile (True):\n    ret, frame = cap.read()  # ret代表是否有返回值，frame则是得到的帧\n    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)  # 转换为灰度，没有转换前的就是frame\n\n    #（可选）录制到视频并输出:\n    #fourcc = cv2.VideoWriter_fourcc(*'XVID')\n    #out = cv2.VideoWriter('output.avi', fourcc, 20.0, (640, 480))\n\n    # 分别显示灰度输出和彩色输出：\n    cv2.imshow('gray', gray)\n    cv2.imshow('frame', frame)\n\n    #（可选）输出视频文件：\n    #out.write(frame)\n\n    if cv2.waitKey(1) & 0xFF == ord('q'):\n        break\n\ncap.release()\ncv2.destroyAllWindows()\n```\n\n### 绘制操作\n\n```python\nimport numpy as np\nimport cv2\n\nimg = cv2.imread('D1_res/watch.png',cv2.IMREAD_COLOR)\n\n\n#基本的绘制操作\ncv2.line(img,(0,0),(150,150),(255,255,255),2)#线\ncv2.rectangle(img,(50,50),(150,150),(0,0,255),2)#矩形\ncv2.circle(img,(100,100), 100, (0,255,0), 2)#圆\n\n\n#自由绘制\npts = np.array([[0,0],[50,50],[100,150],[200,150]], np.int32)#坐标集\n#pts = pts.reshape((-1,1,2))  可能会用到的操作\ncv2.polylines(img, [pts], True, (0,255,255), 3)#绘制对象，坐标集，是否首尾相连，颜色，粗细\n\n\n\nfont = cv2.FONT_HERSHEY_SIMPLEX\ncv2.putText(img,'TestText',(50,50), font, 1, (200,255,155), 2, cv2.LINE_AA)\n\n\n\ncv2.imshow('image',img)\ncv2.waitKey(0)\ncv2.destroyAllWindows()\n```\n\n","slug":"2021-6-16-CV","published":1,"updated":"2021-10-24T02:04:35.830Z","comments":1,"photos":[],"link":"","_id":"ckv4pvov4000424peby1l6xl1","content":"<p>现在开始准备计算机视觉的入门内容，我们计划通过网络上的教程来基本学习 OpenCV 的使用，接下来再进行理论课（计算机视觉）的学习，然后学习深度学习（机器学习）、计算机视觉与深度学习的融合。</p>\n<h1 id=\"OpenCV篇\"><a href=\"#OpenCV篇\" class=\"headerlink\" title=\"OpenCV篇\"></a>OpenCV篇</h1><h2 id=\"基本操作\"><a href=\"#基本操作\" class=\"headerlink\" title=\"基本操作\"></a>基本操作</h2><p>引入图片：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> cv2<br><span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np<br><span class=\"hljs-keyword\">from</span> matplotlib <span class=\"hljs-keyword\">import</span> pyplot <span class=\"hljs-keyword\">as</span> plt<br><br>img = cv2.imread(<span class=\"hljs-string\">'watch.png'</span>,cv2.IMREAD_GRAYSCALE)<span class=\"hljs-comment\">#该方式为灰度引入，而颜色引入为IMREAD_COLOR，保留alpha通道则为IMREAD_UNCHANGED，分别对应着数字0（灰度）,1（颜色）,-1（不变）</span><br>cv2.imshow(<span class=\"hljs-string\">'image'</span>,img)<br>cv2.waitKey(<span class=\"hljs-number\">0</span>)<br>cv2.destroyAllWindows()<br></code></pre></td></tr></table></figure>\n<p>引入摄像头作为视频源：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np<br><span class=\"hljs-keyword\">import</span> cv2<br><br>cap = cv2.VideoCapture(<span class=\"hljs-number\">2</span>)<br><br><span class=\"hljs-keyword\">while</span> (<span class=\"hljs-literal\">True</span>):<br>    ret, frame = cap.read()  <span class=\"hljs-comment\"># ret代表是否有返回值，frame则是得到的帧</span><br>    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)  <span class=\"hljs-comment\"># 转换为灰度，没有转换前的就是frame</span><br><br>    <span class=\"hljs-comment\">#（可选）录制到视频并输出:</span><br>    <span class=\"hljs-comment\">#fourcc = cv2.VideoWriter_fourcc(*'XVID')</span><br>    <span class=\"hljs-comment\">#out = cv2.VideoWriter('output.avi', fourcc, 20.0, (640, 480))</span><br><br>    <span class=\"hljs-comment\"># 分别显示灰度输出和彩色输出：</span><br>    cv2.imshow(<span class=\"hljs-string\">'gray'</span>, gray)<br>    cv2.imshow(<span class=\"hljs-string\">'frame'</span>, frame)<br><br>    <span class=\"hljs-comment\">#（可选）输出视频文件：</span><br>    <span class=\"hljs-comment\">#out.write(frame)</span><br><br>    <span class=\"hljs-keyword\">if</span> cv2.waitKey(<span class=\"hljs-number\">1</span>) &amp; <span class=\"hljs-number\">0xFF</span> == ord(<span class=\"hljs-string\">'q'</span>):<br>        <span class=\"hljs-keyword\">break</span><br><br>cap.release()<br>cv2.destroyAllWindows()<br></code></pre></td></tr></table></figure>\n<h3 id=\"绘制操作\"><a href=\"#绘制操作\" class=\"headerlink\" title=\"绘制操作\"></a>绘制操作</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np<br><span class=\"hljs-keyword\">import</span> cv2<br><br>img = cv2.imread(<span class=\"hljs-string\">'D1_res/watch.png'</span>,cv2.IMREAD_COLOR)<br><br><br><span class=\"hljs-comment\">#基本的绘制操作</span><br>cv2.line(img,(<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>),(<span class=\"hljs-number\">150</span>,<span class=\"hljs-number\">150</span>),(<span class=\"hljs-number\">255</span>,<span class=\"hljs-number\">255</span>,<span class=\"hljs-number\">255</span>),<span class=\"hljs-number\">2</span>)<span class=\"hljs-comment\">#线</span><br>cv2.rectangle(img,(<span class=\"hljs-number\">50</span>,<span class=\"hljs-number\">50</span>),(<span class=\"hljs-number\">150</span>,<span class=\"hljs-number\">150</span>),(<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">255</span>),<span class=\"hljs-number\">2</span>)<span class=\"hljs-comment\">#矩形</span><br>cv2.circle(img,(<span class=\"hljs-number\">100</span>,<span class=\"hljs-number\">100</span>), <span class=\"hljs-number\">100</span>, (<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">255</span>,<span class=\"hljs-number\">0</span>), <span class=\"hljs-number\">2</span>)<span class=\"hljs-comment\">#圆</span><br><br><br><span class=\"hljs-comment\">#自由绘制</span><br>pts = np.array([[<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>],[<span class=\"hljs-number\">50</span>,<span class=\"hljs-number\">50</span>],[<span class=\"hljs-number\">100</span>,<span class=\"hljs-number\">150</span>],[<span class=\"hljs-number\">200</span>,<span class=\"hljs-number\">150</span>]], np.int32)<span class=\"hljs-comment\">#坐标集</span><br><span class=\"hljs-comment\">#pts = pts.reshape((-1,1,2))  可能会用到的操作</span><br>cv2.polylines(img, [pts], <span class=\"hljs-literal\">True</span>, (<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">255</span>,<span class=\"hljs-number\">255</span>), <span class=\"hljs-number\">3</span>)<span class=\"hljs-comment\">#绘制对象，坐标集，是否首尾相连，颜色，粗细</span><br><br><br><br>font = cv2.FONT_HERSHEY_SIMPLEX<br>cv2.putText(img,<span class=\"hljs-string\">'TestText'</span>,(<span class=\"hljs-number\">50</span>,<span class=\"hljs-number\">50</span>), font, <span class=\"hljs-number\">1</span>, (<span class=\"hljs-number\">200</span>,<span class=\"hljs-number\">255</span>,<span class=\"hljs-number\">155</span>), <span class=\"hljs-number\">2</span>, cv2.LINE_AA)<br><br><br><br>cv2.imshow(<span class=\"hljs-string\">'image'</span>,img)<br>cv2.waitKey(<span class=\"hljs-number\">0</span>)<br>cv2.destroyAllWindows()<br></code></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>现在开始准备计算机视觉的入门内容，我们计划通过网络上的教程来基本学习 OpenCV 的使用，接下来再进行理论课（计算机视觉）的学习，然后学习深度学习（机器学习）、计算机视觉与深度学习的融合。</p>\n<h1 id=\"OpenCV篇\"><a href=\"#OpenCV篇\" class=\"headerlink\" title=\"OpenCV篇\"></a>OpenCV篇</h1><h2 id=\"基本操作\"><a href=\"#基本操作\" class=\"headerlink\" title=\"基本操作\"></a>基本操作</h2><p>引入图片：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> cv2<br><span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np<br><span class=\"hljs-keyword\">from</span> matplotlib <span class=\"hljs-keyword\">import</span> pyplot <span class=\"hljs-keyword\">as</span> plt<br><br>img = cv2.imread(<span class=\"hljs-string\">'watch.png'</span>,cv2.IMREAD_GRAYSCALE)<span class=\"hljs-comment\">#该方式为灰度引入，而颜色引入为IMREAD_COLOR，保留alpha通道则为IMREAD_UNCHANGED，分别对应着数字0（灰度）,1（颜色）,-1（不变）</span><br>cv2.imshow(<span class=\"hljs-string\">'image'</span>,img)<br>cv2.waitKey(<span class=\"hljs-number\">0</span>)<br>cv2.destroyAllWindows()<br></code></pre></td></tr></table></figure>\n<p>引入摄像头作为视频源：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np<br><span class=\"hljs-keyword\">import</span> cv2<br><br>cap = cv2.VideoCapture(<span class=\"hljs-number\">2</span>)<br><br><span class=\"hljs-keyword\">while</span> (<span class=\"hljs-literal\">True</span>):<br>    ret, frame = cap.read()  <span class=\"hljs-comment\"># ret代表是否有返回值，frame则是得到的帧</span><br>    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)  <span class=\"hljs-comment\"># 转换为灰度，没有转换前的就是frame</span><br><br>    <span class=\"hljs-comment\">#（可选）录制到视频并输出:</span><br>    <span class=\"hljs-comment\">#fourcc = cv2.VideoWriter_fourcc(*'XVID')</span><br>    <span class=\"hljs-comment\">#out = cv2.VideoWriter('output.avi', fourcc, 20.0, (640, 480))</span><br><br>    <span class=\"hljs-comment\"># 分别显示灰度输出和彩色输出：</span><br>    cv2.imshow(<span class=\"hljs-string\">'gray'</span>, gray)<br>    cv2.imshow(<span class=\"hljs-string\">'frame'</span>, frame)<br><br>    <span class=\"hljs-comment\">#（可选）输出视频文件：</span><br>    <span class=\"hljs-comment\">#out.write(frame)</span><br><br>    <span class=\"hljs-keyword\">if</span> cv2.waitKey(<span class=\"hljs-number\">1</span>) &amp; <span class=\"hljs-number\">0xFF</span> == ord(<span class=\"hljs-string\">'q'</span>):<br>        <span class=\"hljs-keyword\">break</span><br><br>cap.release()<br>cv2.destroyAllWindows()<br></code></pre></td></tr></table></figure>\n<h3 id=\"绘制操作\"><a href=\"#绘制操作\" class=\"headerlink\" title=\"绘制操作\"></a>绘制操作</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np<br><span class=\"hljs-keyword\">import</span> cv2<br><br>img = cv2.imread(<span class=\"hljs-string\">'D1_res/watch.png'</span>,cv2.IMREAD_COLOR)<br><br><br><span class=\"hljs-comment\">#基本的绘制操作</span><br>cv2.line(img,(<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>),(<span class=\"hljs-number\">150</span>,<span class=\"hljs-number\">150</span>),(<span class=\"hljs-number\">255</span>,<span class=\"hljs-number\">255</span>,<span class=\"hljs-number\">255</span>),<span class=\"hljs-number\">2</span>)<span class=\"hljs-comment\">#线</span><br>cv2.rectangle(img,(<span class=\"hljs-number\">50</span>,<span class=\"hljs-number\">50</span>),(<span class=\"hljs-number\">150</span>,<span class=\"hljs-number\">150</span>),(<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">255</span>),<span class=\"hljs-number\">2</span>)<span class=\"hljs-comment\">#矩形</span><br>cv2.circle(img,(<span class=\"hljs-number\">100</span>,<span class=\"hljs-number\">100</span>), <span class=\"hljs-number\">100</span>, (<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">255</span>,<span class=\"hljs-number\">0</span>), <span class=\"hljs-number\">2</span>)<span class=\"hljs-comment\">#圆</span><br><br><br><span class=\"hljs-comment\">#自由绘制</span><br>pts = np.array([[<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>],[<span class=\"hljs-number\">50</span>,<span class=\"hljs-number\">50</span>],[<span class=\"hljs-number\">100</span>,<span class=\"hljs-number\">150</span>],[<span class=\"hljs-number\">200</span>,<span class=\"hljs-number\">150</span>]], np.int32)<span class=\"hljs-comment\">#坐标集</span><br><span class=\"hljs-comment\">#pts = pts.reshape((-1,1,2))  可能会用到的操作</span><br>cv2.polylines(img, [pts], <span class=\"hljs-literal\">True</span>, (<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">255</span>,<span class=\"hljs-number\">255</span>), <span class=\"hljs-number\">3</span>)<span class=\"hljs-comment\">#绘制对象，坐标集，是否首尾相连，颜色，粗细</span><br><br><br><br>font = cv2.FONT_HERSHEY_SIMPLEX<br>cv2.putText(img,<span class=\"hljs-string\">'TestText'</span>,(<span class=\"hljs-number\">50</span>,<span class=\"hljs-number\">50</span>), font, <span class=\"hljs-number\">1</span>, (<span class=\"hljs-number\">200</span>,<span class=\"hljs-number\">255</span>,<span class=\"hljs-number\">155</span>), <span class=\"hljs-number\">2</span>, cv2.LINE_AA)<br><br><br><br>cv2.imshow(<span class=\"hljs-string\">'image'</span>,img)<br>cv2.waitKey(<span class=\"hljs-number\">0</span>)<br>cv2.destroyAllWindows()<br></code></pre></td></tr></table></figure>\n"},{"layout":"post","title":"记一次前端项目的踩坑与开发经验","intro":"","date":"2021-10-24T04:00:01.000Z","author":"Makinohara","catalog":true,"_content":"\n最近的一个月左右，我开始尝试做我的第一个真正具有实用价值的前端项目—— WebGAL 。在这个项目中，我使用了 React 作为我的前端框架。但是项目初期，我却没有使用 create-react-app 生成一个 React 项目，而是选择了静态引入 React 和 ReactDOM 作为一个静态网页的代码，然后再在一个单文件里写主要的业务代码，所有的存储管理、渲染、交互处理都在一个文件里进行。后来，随着开发的进度，我的文件已经达到了1000多行，并且有朝着2000行奔去的架势。所以，将模块拆分、重构，几乎是必然的了。\n\n在一开始的重构中，我只是粗暴地将业务代码按函数的功能分开了，但是却仍然用静态引入的方式在HTML中按照顺序分别引入了。这很显然是不合理的，因为这四舍五入等于没重构，顶多算是拆了下文件。后来当我试图如法炮制，创建了一个 React 项目并将其放入后，却出现了浩如烟海的 bug 。很显然，之前我飞全局变量的那一套不管用了。\n\n为了能够让各个模块都能良好地访问页面中的全局变量，我重新分出了一个类，用来管理存储与全局变量。这样一来，其他的模块只需要访问这个类的函数，就可以得到它们所需要的全局变量。然后，这个类再将其与 LocalStorage 同步。\n\n然后就是关于渲染的统一控制。在重构后的版本中，所有的渲染都通过一个专门用来控制渲染的类 ViewControl 来实现。这样一来，就可以降低业务代码与渲染视图之间的耦合度，让各个模块各司其职，同时也保证了代码的简洁。\n\n重构这个项目是一个漫长且痛苦的过程，因为我先前写的架构实在是过于混乱不堪了。不同模块之间、不同函数之间，充斥着随便的全局变量读写与杂乱无章的相互调用。实际上，在现在的版本中，许多问题并没有得到完全改善，所以在接下来的工作中，还需要继续优化以改善现有项目的结构状况。\n\n","source":"_posts/2021-10-24-WG_3.markdown","raw":"---\nlayout:     post\ntitle:      记一次前端项目的踩坑与开发经验\nintro:   \"\"\ndate:       2021-10-24 12:00:01\nauthor:     \"Makinohara\"\ncatalog: true\ntags:\n    - 工程开发\n    \n---\n\n最近的一个月左右，我开始尝试做我的第一个真正具有实用价值的前端项目—— WebGAL 。在这个项目中，我使用了 React 作为我的前端框架。但是项目初期，我却没有使用 create-react-app 生成一个 React 项目，而是选择了静态引入 React 和 ReactDOM 作为一个静态网页的代码，然后再在一个单文件里写主要的业务代码，所有的存储管理、渲染、交互处理都在一个文件里进行。后来，随着开发的进度，我的文件已经达到了1000多行，并且有朝着2000行奔去的架势。所以，将模块拆分、重构，几乎是必然的了。\n\n在一开始的重构中，我只是粗暴地将业务代码按函数的功能分开了，但是却仍然用静态引入的方式在HTML中按照顺序分别引入了。这很显然是不合理的，因为这四舍五入等于没重构，顶多算是拆了下文件。后来当我试图如法炮制，创建了一个 React 项目并将其放入后，却出现了浩如烟海的 bug 。很显然，之前我飞全局变量的那一套不管用了。\n\n为了能够让各个模块都能良好地访问页面中的全局变量，我重新分出了一个类，用来管理存储与全局变量。这样一来，其他的模块只需要访问这个类的函数，就可以得到它们所需要的全局变量。然后，这个类再将其与 LocalStorage 同步。\n\n然后就是关于渲染的统一控制。在重构后的版本中，所有的渲染都通过一个专门用来控制渲染的类 ViewControl 来实现。这样一来，就可以降低业务代码与渲染视图之间的耦合度，让各个模块各司其职，同时也保证了代码的简洁。\n\n重构这个项目是一个漫长且痛苦的过程，因为我先前写的架构实在是过于混乱不堪了。不同模块之间、不同函数之间，充斥着随便的全局变量读写与杂乱无章的相互调用。实际上，在现在的版本中，许多问题并没有得到完全改善，所以在接下来的工作中，还需要继续优化以改善现有项目的结构状况。\n\n","slug":"2021-10-24-WG_3","published":1,"updated":"2021-10-24T02:39:42.181Z","comments":1,"photos":[],"link":"","_id":"ckv4pvovw000c24pe90vkcadp","content":"<p>最近的一个月左右，我开始尝试做我的第一个真正具有实用价值的前端项目—— WebGAL 。在这个项目中，我使用了 React 作为我的前端框架。但是项目初期，我却没有使用 create-react-app 生成一个 React 项目，而是选择了静态引入 React 和 ReactDOM 作为一个静态网页的代码，然后再在一个单文件里写主要的业务代码，所有的存储管理、渲染、交互处理都在一个文件里进行。后来，随着开发的进度，我的文件已经达到了1000多行，并且有朝着2000行奔去的架势。所以，将模块拆分、重构，几乎是必然的了。</p>\n<p>在一开始的重构中，我只是粗暴地将业务代码按函数的功能分开了，但是却仍然用静态引入的方式在HTML中按照顺序分别引入了。这很显然是不合理的，因为这四舍五入等于没重构，顶多算是拆了下文件。后来当我试图如法炮制，创建了一个 React 项目并将其放入后，却出现了浩如烟海的 bug 。很显然，之前我飞全局变量的那一套不管用了。</p>\n<p>为了能够让各个模块都能良好地访问页面中的全局变量，我重新分出了一个类，用来管理存储与全局变量。这样一来，其他的模块只需要访问这个类的函数，就可以得到它们所需要的全局变量。然后，这个类再将其与 LocalStorage 同步。</p>\n<p>然后就是关于渲染的统一控制。在重构后的版本中，所有的渲染都通过一个专门用来控制渲染的类 ViewControl 来实现。这样一来，就可以降低业务代码与渲染视图之间的耦合度，让各个模块各司其职，同时也保证了代码的简洁。</p>\n<p>重构这个项目是一个漫长且痛苦的过程，因为我先前写的架构实在是过于混乱不堪了。不同模块之间、不同函数之间，充斥着随便的全局变量读写与杂乱无章的相互调用。实际上，在现在的版本中，许多问题并没有得到完全改善，所以在接下来的工作中，还需要继续优化以改善现有项目的结构状况。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>最近的一个月左右，我开始尝试做我的第一个真正具有实用价值的前端项目—— WebGAL 。在这个项目中，我使用了 React 作为我的前端框架。但是项目初期，我却没有使用 create-react-app 生成一个 React 项目，而是选择了静态引入 React 和 ReactDOM 作为一个静态网页的代码，然后再在一个单文件里写主要的业务代码，所有的存储管理、渲染、交互处理都在一个文件里进行。后来，随着开发的进度，我的文件已经达到了1000多行，并且有朝着2000行奔去的架势。所以，将模块拆分、重构，几乎是必然的了。</p>\n<p>在一开始的重构中，我只是粗暴地将业务代码按函数的功能分开了，但是却仍然用静态引入的方式在HTML中按照顺序分别引入了。这很显然是不合理的，因为这四舍五入等于没重构，顶多算是拆了下文件。后来当我试图如法炮制，创建了一个 React 项目并将其放入后，却出现了浩如烟海的 bug 。很显然，之前我飞全局变量的那一套不管用了。</p>\n<p>为了能够让各个模块都能良好地访问页面中的全局变量，我重新分出了一个类，用来管理存储与全局变量。这样一来，其他的模块只需要访问这个类的函数，就可以得到它们所需要的全局变量。然后，这个类再将其与 LocalStorage 同步。</p>\n<p>然后就是关于渲染的统一控制。在重构后的版本中，所有的渲染都通过一个专门用来控制渲染的类 ViewControl 来实现。这样一来，就可以降低业务代码与渲染视图之间的耦合度，让各个模块各司其职，同时也保证了代码的简洁。</p>\n<p>重构这个项目是一个漫长且痛苦的过程，因为我先前写的架构实在是过于混乱不堪了。不同模块之间、不同函数之间，充斥着随便的全局变量读写与杂乱无章的相互调用。实际上，在现在的版本中，许多问题并没有得到完全改善，所以在接下来的工作中，还需要继续优化以改善现有项目的结构状况。</p>\n"},{"layout":"post","title":"计算机组成复习","intro":"","date":"2021-07-09T13:00:01.000Z","author":"Makinohara","catalog":true,"_content":"\n# 计算机技术指标\n\n## CPU执行时间：\n\n$$Te = m/F$$\n\n$$Te = m*T$$\n\nm：CPU时钟周期数；T：时钟周期；F：频率\n\n## CPI 每条指令平均时钟周期数：\n\n$$CPI = m/IC$$\n\n$$CPI = \\sum\\limits_{i=1}^N (CPI_i*IC_i)/IC$$\n\nIC：指令条数(总的)\n\n## MIPS每秒百万条指令数：\n\n$$MIPS = IC/(Te*10^6)$$\n\n$$MIPS = F/(CPI*10^6)$$\n\n# 存储系统\n\n## 半导体容量扩展：\n\n1.线选法\n\n用一根地址线选择一块芯片\n\n2.全译码法\n\n将全部地址线译码，地位直接用于片内寻址，高位用译码器译码后进行片选。（地址唯一、连续、没有地址重叠）\n\n3.部分译码法：\n\n将高位地址的部分地址线用于译码，部分不参与译码（所以可能会产生地址重叠，比如最高位为1和为0选择同一芯片，所以地址就重叠了）。\n\n### 拓展方式：\n\n1.位拓展方式\n\n拓展每个字的位数\n\n将芯片的地址线、片选信号和读写控制并联（视为一个芯片），然后将数据线分别连到各个芯片。\n\n2.字拓展方式\n\n拓展字数\n\n将芯片的地址线、数据线和读写控制并联，然后将片选信号连到各个芯片。\n\n3.字位拓展方式\n\n同时拓展字数和位数\n\n将所有芯片的读写控制线连到一起\n\n将同一区域（位扩展）的芯片片选信号连到一起，不同区域的片选信号分开\n\n将同一区域中不同芯片的数据线分别连接到应有的位置上\n\n## Cache：\n\n读：\n\nCPU发出读请求后，先由Cache控制器判断请求的字是否在Cache中，若命中，则对Cache读，否则从主存读所需字送CPU，并把该字所在块送Cache，如果Cache已满，则调用替换算法。\n\n写：\n\n1、写直达：\n\n在写数据时既写入主存又写入Cache。\n\n2、写回法：\n\n在写入数据时先写入Cache，直到该块被替换时才写入主存。每个块需要设置一个“修改位”来判断是否要将这个块存回主存原来位置。\n\n### Cache主存地址映像与变换\n\n1.全相连映像：\n\n将主存中的块映射到Cache中的任意一块，使用相联存储器按内容寻址。\n\n```\n主存:   主存块号+块内地址\n          ↓      ↓\n查不到  ←相连比较   ↓\n         ↓       ↓\n        查到      ↓\n         ↓       ↓\nCache: Cache块号+块内地址\n```\n\n2.直接映像：\n\n将主存映射到Cache中的一个固定块位置\n\n$$i = j mod C $$\n\n$$i = j mod 2^c$$\n\ni:Cache块号；j:主存块号 C:块数 c：Cache位数\n\n```\n主存：主存字块标记(t位)+Cache字块地址(c位)+块内地址(b位)\nCache：块号(c位)+块内地址(b位)\n其中，在主存通过Cache字块地址找到对应到Cache中哪一块后，\n再通过标记表的t位标记是否和主存字块t位标记相等判断是否命中。\n```\n\n3.组相连映像：\n\n先把Cache分为Q组，每组R块\n\n$$k = j\\ mod\\ Q$$\n\nk:Cache组号；j:主存块号\n\n块号为j的主存块影响到Cache中的块号为：\n\n$$i = k*2^r+h$$\n\n$$2^r$$:组内块号。r= 1, 每组2块；h:组内偏移，这个值是随机的，由于主存的一块会映射到Cache某组的任意一块。\n\nr=0:每组1块，此时直接映像；r=c:每组$$2^c$$块，也就是只分一组，此时组内块号就是块号（Cache块号与主存块号），此时为全相连映像。\n\n```\n主存:主存字块标记(t+r)+组号(c-r)+块内地址(b)\n         ↓         ↓            ↓ \n      相联比较↘     ↓            ↓\n         ←←←←←←←←←←←            ↓             \n         ↓       ↘              ↓ \nCache:组号(c-r)+组内块号(r)+块内地址(b)\n\n备注：r越大，组越少，r=c，全是主存字块标记，此时全相连;\nr=0，组号为c，此时组号等同于块号(每组只有一块)，而主存的t位标记仍然通过标记表的t位比较是否相等，相等则命中。\n```\n\n```\n在此种模式中，每组有一个相连比较表（只有一组就只有一个，即全相连），\n首先先得出是哪一组的相连比较表，用主存标记t位相连比较，如相等，则得出组内块号，命中，如不相等，失效。\n\n主要思想：分组进行组内的全相连，c=0就是只分一组，也就是正统的全相连。\n```\n\n# 指令系统\n\n1、指令根据操作码数目分为零地址、一地址、二地址、三地址指令等。\n\n## 指令系统设计\n\n固定长编码：所有操作码的长度都是相等的。\n\nHuffman编码：根据指令的出现概率编码，概率大的长，概率小的短。\n\n编码过程：按出现概率自左向右排序，然后抽出概率最低的两个形成一个树，根节点是两者之和。然后重复，直到根节点概率为1。\n\n指令由Huffman树确定，左边的子节点为0，右边为1，以此类推。\n\n### 扩展编码：\n\na/b(m-n)扩展编码：a、b是有相同长度的编码数目，m、n是码长。\n\n比如2/7、2-4代表的是同一种编码。\n\n其中，比较短的编码的全1（比如：1111）一般用于作为前缀，代表切换至更长长度的编码。\n\n算编码数：以编码为3-6-9-扩展编码为例\n\n$$S_9 = ((2^3-S_3)\\cdot2^{6-3}-S_6)\\cdot2^{9-6}$$\n\n其中，Sn代表码长为n的编码数目。\n\n解释：$$2^3-S_3$$ 表示了在表示完码长为3的编码后，剩余的前缀数目。这些前缀可以用来拓展到6位。如果剩余的前缀越多，可以拓展出的组也就越多，然后再乘以每组可以表示的6码长编码数目（由于前3位是前缀，实际上只有$$2^{6-3}$$种结果），得到一共可以表示多少码长为6编码，再减去实际的，得到前缀数，以此类推，得到码长为9的编码可以表示的数目。\n\n# 控制器\n\n## 控制器基础\n\n### 控制器组成\n\n程序计数器PC：存指令的地址\n\n指令寄存器IR：保存指令的内容\n\n指令译码器ID：分析识别是怎样的指令\n\n地址形成部件：根据不同的寻址方式形成操作数的有效地址。\n\n脉冲源：作为时钟脉冲\n\n启停线路：计算机启动信号，启动后时钟脉冲才能进入，然后启动节拍信号发生器开始工作。\n\n节拍信号发生器：将脉冲转换为各个设备所需要的节拍信号\n\n控制单元：将指令发出的各种控制信号按节拍分配。\n\n中断控制逻辑：控制中断。\n\n### 寄存器：\n\n通用+PC+IR+AR（记录主存单元地址）+DR（数据缓冲寄存器，在CPU和主存间形成缓冲）+PSW（记录各种条件码，比如进位）\n\n## 微程序控制\n\n### 关于容量：\n\nCS容量：$$2^{N_{AR}} \\cdot N_{IR} $$，前者代表多少指令，后者代表每条指令多少位\n\nIR位数：微程序位数，否则放不下\n\nAR位数：下址位数\n\n### 微指令编码方式：\n\n直接控制法：每一位代表一个微命令\n\n字段直接编译法：\n\n1、微命令数=$$2^n-1$$，因000要代表不发出微命令。\n\n2、每个互斥类可能有多个编码，但是互斥类之间是平行排布的，平铺在控制字段。下址字段则是固定的，存下条指令地址。\n\n例如：\n\n```\n组1|组2|组3|......|判别码|下址|\n每个组是一个互斥类，代表2^n-1个指令。\n```\n\n### 微指令执行方式：\n\n串行方式：在一条微指令执行完毕后才会执行下一条\n\n并行方式：在一条微指令执行时，就取下一条微指令\n","source":"_posts/2021-7-9-计算机组成复习.markdown","raw":"---\nlayout:     post\ntitle:      \"计算机组成复习\"\nintro:   \"\"\ndate:       2021-7-9 21:00:01\nauthor:     \"Makinohara\"\ncatalog: true\ntags:\n    - 计算机基础\n    \n---\n\n# 计算机技术指标\n\n## CPU执行时间：\n\n$$Te = m/F$$\n\n$$Te = m*T$$\n\nm：CPU时钟周期数；T：时钟周期；F：频率\n\n## CPI 每条指令平均时钟周期数：\n\n$$CPI = m/IC$$\n\n$$CPI = \\sum\\limits_{i=1}^N (CPI_i*IC_i)/IC$$\n\nIC：指令条数(总的)\n\n## MIPS每秒百万条指令数：\n\n$$MIPS = IC/(Te*10^6)$$\n\n$$MIPS = F/(CPI*10^6)$$\n\n# 存储系统\n\n## 半导体容量扩展：\n\n1.线选法\n\n用一根地址线选择一块芯片\n\n2.全译码法\n\n将全部地址线译码，地位直接用于片内寻址，高位用译码器译码后进行片选。（地址唯一、连续、没有地址重叠）\n\n3.部分译码法：\n\n将高位地址的部分地址线用于译码，部分不参与译码（所以可能会产生地址重叠，比如最高位为1和为0选择同一芯片，所以地址就重叠了）。\n\n### 拓展方式：\n\n1.位拓展方式\n\n拓展每个字的位数\n\n将芯片的地址线、片选信号和读写控制并联（视为一个芯片），然后将数据线分别连到各个芯片。\n\n2.字拓展方式\n\n拓展字数\n\n将芯片的地址线、数据线和读写控制并联，然后将片选信号连到各个芯片。\n\n3.字位拓展方式\n\n同时拓展字数和位数\n\n将所有芯片的读写控制线连到一起\n\n将同一区域（位扩展）的芯片片选信号连到一起，不同区域的片选信号分开\n\n将同一区域中不同芯片的数据线分别连接到应有的位置上\n\n## Cache：\n\n读：\n\nCPU发出读请求后，先由Cache控制器判断请求的字是否在Cache中，若命中，则对Cache读，否则从主存读所需字送CPU，并把该字所在块送Cache，如果Cache已满，则调用替换算法。\n\n写：\n\n1、写直达：\n\n在写数据时既写入主存又写入Cache。\n\n2、写回法：\n\n在写入数据时先写入Cache，直到该块被替换时才写入主存。每个块需要设置一个“修改位”来判断是否要将这个块存回主存原来位置。\n\n### Cache主存地址映像与变换\n\n1.全相连映像：\n\n将主存中的块映射到Cache中的任意一块，使用相联存储器按内容寻址。\n\n```\n主存:   主存块号+块内地址\n          ↓      ↓\n查不到  ←相连比较   ↓\n         ↓       ↓\n        查到      ↓\n         ↓       ↓\nCache: Cache块号+块内地址\n```\n\n2.直接映像：\n\n将主存映射到Cache中的一个固定块位置\n\n$$i = j mod C $$\n\n$$i = j mod 2^c$$\n\ni:Cache块号；j:主存块号 C:块数 c：Cache位数\n\n```\n主存：主存字块标记(t位)+Cache字块地址(c位)+块内地址(b位)\nCache：块号(c位)+块内地址(b位)\n其中，在主存通过Cache字块地址找到对应到Cache中哪一块后，\n再通过标记表的t位标记是否和主存字块t位标记相等判断是否命中。\n```\n\n3.组相连映像：\n\n先把Cache分为Q组，每组R块\n\n$$k = j\\ mod\\ Q$$\n\nk:Cache组号；j:主存块号\n\n块号为j的主存块影响到Cache中的块号为：\n\n$$i = k*2^r+h$$\n\n$$2^r$$:组内块号。r= 1, 每组2块；h:组内偏移，这个值是随机的，由于主存的一块会映射到Cache某组的任意一块。\n\nr=0:每组1块，此时直接映像；r=c:每组$$2^c$$块，也就是只分一组，此时组内块号就是块号（Cache块号与主存块号），此时为全相连映像。\n\n```\n主存:主存字块标记(t+r)+组号(c-r)+块内地址(b)\n         ↓         ↓            ↓ \n      相联比较↘     ↓            ↓\n         ←←←←←←←←←←←            ↓             \n         ↓       ↘              ↓ \nCache:组号(c-r)+组内块号(r)+块内地址(b)\n\n备注：r越大，组越少，r=c，全是主存字块标记，此时全相连;\nr=0，组号为c，此时组号等同于块号(每组只有一块)，而主存的t位标记仍然通过标记表的t位比较是否相等，相等则命中。\n```\n\n```\n在此种模式中，每组有一个相连比较表（只有一组就只有一个，即全相连），\n首先先得出是哪一组的相连比较表，用主存标记t位相连比较，如相等，则得出组内块号，命中，如不相等，失效。\n\n主要思想：分组进行组内的全相连，c=0就是只分一组，也就是正统的全相连。\n```\n\n# 指令系统\n\n1、指令根据操作码数目分为零地址、一地址、二地址、三地址指令等。\n\n## 指令系统设计\n\n固定长编码：所有操作码的长度都是相等的。\n\nHuffman编码：根据指令的出现概率编码，概率大的长，概率小的短。\n\n编码过程：按出现概率自左向右排序，然后抽出概率最低的两个形成一个树，根节点是两者之和。然后重复，直到根节点概率为1。\n\n指令由Huffman树确定，左边的子节点为0，右边为1，以此类推。\n\n### 扩展编码：\n\na/b(m-n)扩展编码：a、b是有相同长度的编码数目，m、n是码长。\n\n比如2/7、2-4代表的是同一种编码。\n\n其中，比较短的编码的全1（比如：1111）一般用于作为前缀，代表切换至更长长度的编码。\n\n算编码数：以编码为3-6-9-扩展编码为例\n\n$$S_9 = ((2^3-S_3)\\cdot2^{6-3}-S_6)\\cdot2^{9-6}$$\n\n其中，Sn代表码长为n的编码数目。\n\n解释：$$2^3-S_3$$ 表示了在表示完码长为3的编码后，剩余的前缀数目。这些前缀可以用来拓展到6位。如果剩余的前缀越多，可以拓展出的组也就越多，然后再乘以每组可以表示的6码长编码数目（由于前3位是前缀，实际上只有$$2^{6-3}$$种结果），得到一共可以表示多少码长为6编码，再减去实际的，得到前缀数，以此类推，得到码长为9的编码可以表示的数目。\n\n# 控制器\n\n## 控制器基础\n\n### 控制器组成\n\n程序计数器PC：存指令的地址\n\n指令寄存器IR：保存指令的内容\n\n指令译码器ID：分析识别是怎样的指令\n\n地址形成部件：根据不同的寻址方式形成操作数的有效地址。\n\n脉冲源：作为时钟脉冲\n\n启停线路：计算机启动信号，启动后时钟脉冲才能进入，然后启动节拍信号发生器开始工作。\n\n节拍信号发生器：将脉冲转换为各个设备所需要的节拍信号\n\n控制单元：将指令发出的各种控制信号按节拍分配。\n\n中断控制逻辑：控制中断。\n\n### 寄存器：\n\n通用+PC+IR+AR（记录主存单元地址）+DR（数据缓冲寄存器，在CPU和主存间形成缓冲）+PSW（记录各种条件码，比如进位）\n\n## 微程序控制\n\n### 关于容量：\n\nCS容量：$$2^{N_{AR}} \\cdot N_{IR} $$，前者代表多少指令，后者代表每条指令多少位\n\nIR位数：微程序位数，否则放不下\n\nAR位数：下址位数\n\n### 微指令编码方式：\n\n直接控制法：每一位代表一个微命令\n\n字段直接编译法：\n\n1、微命令数=$$2^n-1$$，因000要代表不发出微命令。\n\n2、每个互斥类可能有多个编码，但是互斥类之间是平行排布的，平铺在控制字段。下址字段则是固定的，存下条指令地址。\n\n例如：\n\n```\n组1|组2|组3|......|判别码|下址|\n每个组是一个互斥类，代表2^n-1个指令。\n```\n\n### 微指令执行方式：\n\n串行方式：在一条微指令执行完毕后才会执行下一条\n\n并行方式：在一条微指令执行时，就取下一条微指令\n","slug":"2021-7-9-计算机组成复习","published":1,"updated":"2022-01-02T13:02:14.544Z","_id":"ckv4pvovy000d24peb3x170tz","comments":1,"photos":[],"link":"","content":"<h1 id=\"计算机技术指标\"><a href=\"#计算机技术指标\" class=\"headerlink\" title=\"计算机技术指标\"></a>计算机技术指标</h1><h2 id=\"CPU执行时间：\"><a href=\"#CPU执行时间：\" class=\"headerlink\" title=\"CPU执行时间：\"></a>CPU执行时间：</h2><p>$$Te = m/F$$</p>\n<p>$$Te = m*T$$</p>\n<p>m：CPU时钟周期数；T：时钟周期；F：频率</p>\n<h2 id=\"CPI-每条指令平均时钟周期数：\"><a href=\"#CPI-每条指令平均时钟周期数：\" class=\"headerlink\" title=\"CPI 每条指令平均时钟周期数：\"></a>CPI 每条指令平均时钟周期数：</h2><p>$$CPI = m/IC$$</p>\n<p>$$CPI = \\sum\\limits_{i=1}^N (CPI_i*IC_i)/IC$$</p>\n<p>IC：指令条数(总的)</p>\n<h2 id=\"MIPS每秒百万条指令数：\"><a href=\"#MIPS每秒百万条指令数：\" class=\"headerlink\" title=\"MIPS每秒百万条指令数：\"></a>MIPS每秒百万条指令数：</h2><p>$$MIPS = IC/(Te*10^6)$$</p>\n<p>$$MIPS = F/(CPI*10^6)$$</p>\n<h1 id=\"存储系统\"><a href=\"#存储系统\" class=\"headerlink\" title=\"存储系统\"></a>存储系统</h1><h2 id=\"半导体容量扩展：\"><a href=\"#半导体容量扩展：\" class=\"headerlink\" title=\"半导体容量扩展：\"></a>半导体容量扩展：</h2><p>1.线选法</p>\n<p>用一根地址线选择一块芯片</p>\n<p>2.全译码法</p>\n<p>将全部地址线译码，地位直接用于片内寻址，高位用译码器译码后进行片选。（地址唯一、连续、没有地址重叠）</p>\n<p>3.部分译码法：</p>\n<p>将高位地址的部分地址线用于译码，部分不参与译码（所以可能会产生地址重叠，比如最高位为1和为0选择同一芯片，所以地址就重叠了）。</p>\n<h3 id=\"拓展方式：\"><a href=\"#拓展方式：\" class=\"headerlink\" title=\"拓展方式：\"></a>拓展方式：</h3><p>1.位拓展方式</p>\n<p>拓展每个字的位数</p>\n<p>将芯片的地址线、片选信号和读写控制并联（视为一个芯片），然后将数据线分别连到各个芯片。</p>\n<p>2.字拓展方式</p>\n<p>拓展字数</p>\n<p>将芯片的地址线、数据线和读写控制并联，然后将片选信号连到各个芯片。</p>\n<p>3.字位拓展方式</p>\n<p>同时拓展字数和位数</p>\n<p>将所有芯片的读写控制线连到一起</p>\n<p>将同一区域（位扩展）的芯片片选信号连到一起，不同区域的片选信号分开</p>\n<p>将同一区域中不同芯片的数据线分别连接到应有的位置上</p>\n<h2 id=\"Cache：\"><a href=\"#Cache：\" class=\"headerlink\" title=\"Cache：\"></a>Cache：</h2><p>读：</p>\n<p>CPU发出读请求后，先由Cache控制器判断请求的字是否在Cache中，若命中，则对Cache读，否则从主存读所需字送CPU，并把该字所在块送Cache，如果Cache已满，则调用替换算法。</p>\n<p>写：</p>\n<p>1、写直达：</p>\n<p>在写数据时既写入主存又写入Cache。</p>\n<p>2、写回法：</p>\n<p>在写入数据时先写入Cache，直到该块被替换时才写入主存。每个块需要设置一个“修改位”来判断是否要将这个块存回主存原来位置。</p>\n<h3 id=\"Cache主存地址映像与变换\"><a href=\"#Cache主存地址映像与变换\" class=\"headerlink\" title=\"Cache主存地址映像与变换\"></a>Cache主存地址映像与变换</h3><p>1.全相连映像：</p>\n<p>将主存中的块映射到Cache中的任意一块，使用相联存储器按内容寻址。</p>\n<figure class=\"highlight lasso\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs lasso\">主存:   主存块号+块内地址<br>          ↓      ↓<br>查不到  ←相连比较   ↓<br>         ↓       ↓<br>        查到      ↓<br>         ↓       ↓<br><span class=\"hljs-keyword\">Cache</span>: <span class=\"hljs-keyword\">Cache</span>块号+块内地址<br></code></pre></td></tr></table></figure>\n\n<p>2.直接映像：</p>\n<p>将主存映射到Cache中的一个固定块位置</p>\n<p>$$i = j mod C $$</p>\n<p>$$i = j mod 2^c$$</p>\n<p>i:Cache块号；j:主存块号 C:块数 c：Cache位数</p>\n<figure class=\"highlight gcode\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gcode\">主存：主存字块标记<span class=\"hljs-comment\">(t位)</span>+Cache字块地址<span class=\"hljs-comment\">(c位)</span>+块内地址<span class=\"hljs-comment\">(b位)</span><br>Cache：块号<span class=\"hljs-comment\">(c位)</span>+块内地址<span class=\"hljs-comment\">(b位)</span><br>其中，在主存通过Cache字块地址找到对应到Cache中哪一块后，<br>再通过标记表的t位标记是否和主存字块t位标记相等判断是否命中。<br></code></pre></td></tr></table></figure>\n\n<p>3.组相连映像：</p>\n<p>先把Cache分为Q组，每组R块</p>\n<p>$$k = j\\ mod\\ Q$$</p>\n<p>k:Cache组号；j:主存块号</p>\n<p>块号为j的主存块影响到Cache中的块号为：</p>\n<p>$$i = k*2^r+h$$</p>\n<p>$$2^r$$:组内块号。r= 1, 每组2块；h:组内偏移，这个值是随机的，由于主存的一块会映射到Cache某组的任意一块。</p>\n<p>r=0:每组1块，此时直接映像；r=c:每组$$2^c$$块，也就是只分一组，此时组内块号就是块号（Cache块号与主存块号），此时为全相连映像。</p>\n<figure class=\"highlight gcode\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gcode\">主存:主存字块标记<span class=\"hljs-comment\">(t+r)</span>+组号<span class=\"hljs-comment\">(c-r)</span>+块内地址<span class=\"hljs-comment\">(b)</span><br>         ↓         ↓            ↓ <br>      相联比较↘     ↓            ↓<br>         ←←←←←←←←←←←            ↓             <br>         ↓       ↘              ↓ <br>Cache:组号<span class=\"hljs-comment\">(c-r)</span>+组内块号<span class=\"hljs-comment\">(r)</span>+块内地址<span class=\"hljs-comment\">(b)</span><br><br>备注：r越大，组越少，r=c，全是主存字块标记，此时全相连;<br>r=<span class=\"hljs-number\">0</span>，组号为c，此时组号等同于块号<span class=\"hljs-comment\">(每组只有一块)</span>，而主存的t位标记仍然通过标记表的t位比较是否相等，相等则命中。<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\">在此种模式中，每组有一个相连比较表（只有一组就只有一个，即全相连），<br>首先先得出是哪一组的相连比较表，用主存标记t位相连比较，如相等，则得出组内块号，命中，如不相等，失效。<br><br>主要思想：分组进行组内的全相连，<span class=\"hljs-attribute\">c</span>=0就是只分一组，也就是正统的全相连。<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"指令系统\"><a href=\"#指令系统\" class=\"headerlink\" title=\"指令系统\"></a>指令系统</h1><p>1、指令根据操作码数目分为零地址、一地址、二地址、三地址指令等。</p>\n<h2 id=\"指令系统设计\"><a href=\"#指令系统设计\" class=\"headerlink\" title=\"指令系统设计\"></a>指令系统设计</h2><p>固定长编码：所有操作码的长度都是相等的。</p>\n<p>Huffman编码：根据指令的出现概率编码，概率大的长，概率小的短。</p>\n<p>编码过程：按出现概率自左向右排序，然后抽出概率最低的两个形成一个树，根节点是两者之和。然后重复，直到根节点概率为1。</p>\n<p>指令由Huffman树确定，左边的子节点为0，右边为1，以此类推。</p>\n<h3 id=\"扩展编码：\"><a href=\"#扩展编码：\" class=\"headerlink\" title=\"扩展编码：\"></a>扩展编码：</h3><p>a/b(m-n)扩展编码：a、b是有相同长度的编码数目，m、n是码长。</p>\n<p>比如2/7、2-4代表的是同一种编码。</p>\n<p>其中，比较短的编码的全1（比如：1111）一般用于作为前缀，代表切换至更长长度的编码。</p>\n<p>算编码数：以编码为3-6-9-扩展编码为例</p>\n<p>$$S_9 = ((2^3-S_3)\\cdot2^{6-3}-S_6)\\cdot2^{9-6}$$</p>\n<p>其中，Sn代表码长为n的编码数目。</p>\n<p>解释：$$2^3-S_3$$ 表示了在表示完码长为3的编码后，剩余的前缀数目。这些前缀可以用来拓展到6位。如果剩余的前缀越多，可以拓展出的组也就越多，然后再乘以每组可以表示的6码长编码数目（由于前3位是前缀，实际上只有$$2^{6-3}$$种结果），得到一共可以表示多少码长为6编码，再减去实际的，得到前缀数，以此类推，得到码长为9的编码可以表示的数目。</p>\n<h1 id=\"控制器\"><a href=\"#控制器\" class=\"headerlink\" title=\"控制器\"></a>控制器</h1><h2 id=\"控制器基础\"><a href=\"#控制器基础\" class=\"headerlink\" title=\"控制器基础\"></a>控制器基础</h2><h3 id=\"控制器组成\"><a href=\"#控制器组成\" class=\"headerlink\" title=\"控制器组成\"></a>控制器组成</h3><p>程序计数器PC：存指令的地址</p>\n<p>指令寄存器IR：保存指令的内容</p>\n<p>指令译码器ID：分析识别是怎样的指令</p>\n<p>地址形成部件：根据不同的寻址方式形成操作数的有效地址。</p>\n<p>脉冲源：作为时钟脉冲</p>\n<p>启停线路：计算机启动信号，启动后时钟脉冲才能进入，然后启动节拍信号发生器开始工作。</p>\n<p>节拍信号发生器：将脉冲转换为各个设备所需要的节拍信号</p>\n<p>控制单元：将指令发出的各种控制信号按节拍分配。</p>\n<p>中断控制逻辑：控制中断。</p>\n<h3 id=\"寄存器：\"><a href=\"#寄存器：\" class=\"headerlink\" title=\"寄存器：\"></a>寄存器：</h3><p>通用+PC+IR+AR（记录主存单元地址）+DR（数据缓冲寄存器，在CPU和主存间形成缓冲）+PSW（记录各种条件码，比如进位）</p>\n<h2 id=\"微程序控制\"><a href=\"#微程序控制\" class=\"headerlink\" title=\"微程序控制\"></a>微程序控制</h2><h3 id=\"关于容量：\"><a href=\"#关于容量：\" class=\"headerlink\" title=\"关于容量：\"></a>关于容量：</h3><p>CS容量：$$2^{N_{AR}} \\cdot N_{IR} $$，前者代表多少指令，后者代表每条指令多少位</p>\n<p>IR位数：微程序位数，否则放不下</p>\n<p>AR位数：下址位数</p>\n<h3 id=\"微指令编码方式：\"><a href=\"#微指令编码方式：\" class=\"headerlink\" title=\"微指令编码方式：\"></a>微指令编码方式：</h3><p>直接控制法：每一位代表一个微命令</p>\n<p>字段直接编译法：</p>\n<p>1、微命令数=$$2^n-1$$，因000要代表不发出微命令。</p>\n<p>2、每个互斥类可能有多个编码，但是互斥类之间是平行排布的，平铺在控制字段。下址字段则是固定的，存下条指令地址。</p>\n<p>例如：</p>\n<figure class=\"highlight gherkin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gherkin\">组1|<span class=\"hljs-string\">组2</span>|<span class=\"hljs-string\">组3</span>|<span class=\"hljs-string\">......</span>|<span class=\"hljs-string\">判别码</span>|<span class=\"hljs-string\">下址</span>|<br>每个组是一个互斥类，代表2^n-1个指令。<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"微指令执行方式：\"><a href=\"#微指令执行方式：\" class=\"headerlink\" title=\"微指令执行方式：\"></a>微指令执行方式：</h3><p>串行方式：在一条微指令执行完毕后才会执行下一条</p>\n<p>并行方式：在一条微指令执行时，就取下一条微指令</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"计算机技术指标\"><a href=\"#计算机技术指标\" class=\"headerlink\" title=\"计算机技术指标\"></a>计算机技术指标</h1><h2 id=\"CPU执行时间：\"><a href=\"#CPU执行时间：\" class=\"headerlink\" title=\"CPU执行时间：\"></a>CPU执行时间：</h2><p>$$Te = m/F$$</p>\n<p>$$Te = m*T$$</p>\n<p>m：CPU时钟周期数；T：时钟周期；F：频率</p>\n<h2 id=\"CPI-每条指令平均时钟周期数：\"><a href=\"#CPI-每条指令平均时钟周期数：\" class=\"headerlink\" title=\"CPI 每条指令平均时钟周期数：\"></a>CPI 每条指令平均时钟周期数：</h2><p>$$CPI = m/IC$$</p>\n<p>$$CPI = \\sum\\limits_{i=1}^N (CPI_i*IC_i)/IC$$</p>\n<p>IC：指令条数(总的)</p>\n<h2 id=\"MIPS每秒百万条指令数：\"><a href=\"#MIPS每秒百万条指令数：\" class=\"headerlink\" title=\"MIPS每秒百万条指令数：\"></a>MIPS每秒百万条指令数：</h2><p>$$MIPS = IC/(Te*10^6)$$</p>\n<p>$$MIPS = F/(CPI*10^6)$$</p>\n<h1 id=\"存储系统\"><a href=\"#存储系统\" class=\"headerlink\" title=\"存储系统\"></a>存储系统</h1><h2 id=\"半导体容量扩展：\"><a href=\"#半导体容量扩展：\" class=\"headerlink\" title=\"半导体容量扩展：\"></a>半导体容量扩展：</h2><p>1.线选法</p>\n<p>用一根地址线选择一块芯片</p>\n<p>2.全译码法</p>\n<p>将全部地址线译码，地位直接用于片内寻址，高位用译码器译码后进行片选。（地址唯一、连续、没有地址重叠）</p>\n<p>3.部分译码法：</p>\n<p>将高位地址的部分地址线用于译码，部分不参与译码（所以可能会产生地址重叠，比如最高位为1和为0选择同一芯片，所以地址就重叠了）。</p>\n<h3 id=\"拓展方式：\"><a href=\"#拓展方式：\" class=\"headerlink\" title=\"拓展方式：\"></a>拓展方式：</h3><p>1.位拓展方式</p>\n<p>拓展每个字的位数</p>\n<p>将芯片的地址线、片选信号和读写控制并联（视为一个芯片），然后将数据线分别连到各个芯片。</p>\n<p>2.字拓展方式</p>\n<p>拓展字数</p>\n<p>将芯片的地址线、数据线和读写控制并联，然后将片选信号连到各个芯片。</p>\n<p>3.字位拓展方式</p>\n<p>同时拓展字数和位数</p>\n<p>将所有芯片的读写控制线连到一起</p>\n<p>将同一区域（位扩展）的芯片片选信号连到一起，不同区域的片选信号分开</p>\n<p>将同一区域中不同芯片的数据线分别连接到应有的位置上</p>\n<h2 id=\"Cache：\"><a href=\"#Cache：\" class=\"headerlink\" title=\"Cache：\"></a>Cache：</h2><p>读：</p>\n<p>CPU发出读请求后，先由Cache控制器判断请求的字是否在Cache中，若命中，则对Cache读，否则从主存读所需字送CPU，并把该字所在块送Cache，如果Cache已满，则调用替换算法。</p>\n<p>写：</p>\n<p>1、写直达：</p>\n<p>在写数据时既写入主存又写入Cache。</p>\n<p>2、写回法：</p>\n<p>在写入数据时先写入Cache，直到该块被替换时才写入主存。每个块需要设置一个“修改位”来判断是否要将这个块存回主存原来位置。</p>\n<h3 id=\"Cache主存地址映像与变换\"><a href=\"#Cache主存地址映像与变换\" class=\"headerlink\" title=\"Cache主存地址映像与变换\"></a>Cache主存地址映像与变换</h3><p>1.全相连映像：</p>\n<p>将主存中的块映射到Cache中的任意一块，使用相联存储器按内容寻址。</p>\n<figure class=\"highlight lasso\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs lasso\">主存:   主存块号+块内地址<br>          ↓      ↓<br>查不到  ←相连比较   ↓<br>         ↓       ↓<br>        查到      ↓<br>         ↓       ↓<br><span class=\"hljs-keyword\">Cache</span>: <span class=\"hljs-keyword\">Cache</span>块号+块内地址<br></code></pre></td></tr></table></figure>\n\n<p>2.直接映像：</p>\n<p>将主存映射到Cache中的一个固定块位置</p>\n<p>$$i = j mod C $$</p>\n<p>$$i = j mod 2^c$$</p>\n<p>i:Cache块号；j:主存块号 C:块数 c：Cache位数</p>\n<figure class=\"highlight gcode\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gcode\">主存：主存字块标记<span class=\"hljs-comment\">(t位)</span>+Cache字块地址<span class=\"hljs-comment\">(c位)</span>+块内地址<span class=\"hljs-comment\">(b位)</span><br>Cache：块号<span class=\"hljs-comment\">(c位)</span>+块内地址<span class=\"hljs-comment\">(b位)</span><br>其中，在主存通过Cache字块地址找到对应到Cache中哪一块后，<br>再通过标记表的t位标记是否和主存字块t位标记相等判断是否命中。<br></code></pre></td></tr></table></figure>\n\n<p>3.组相连映像：</p>\n<p>先把Cache分为Q组，每组R块</p>\n<p>$$k = j\\ mod\\ Q$$</p>\n<p>k:Cache组号；j:主存块号</p>\n<p>块号为j的主存块影响到Cache中的块号为：</p>\n<p>$$i = k*2^r+h$$</p>\n<p>$$2^r$$:组内块号。r= 1, 每组2块；h:组内偏移，这个值是随机的，由于主存的一块会映射到Cache某组的任意一块。</p>\n<p>r=0:每组1块，此时直接映像；r=c:每组$$2^c$$块，也就是只分一组，此时组内块号就是块号（Cache块号与主存块号），此时为全相连映像。</p>\n<figure class=\"highlight gcode\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gcode\">主存:主存字块标记<span class=\"hljs-comment\">(t+r)</span>+组号<span class=\"hljs-comment\">(c-r)</span>+块内地址<span class=\"hljs-comment\">(b)</span><br>         ↓         ↓            ↓ <br>      相联比较↘     ↓            ↓<br>         ←←←←←←←←←←←            ↓             <br>         ↓       ↘              ↓ <br>Cache:组号<span class=\"hljs-comment\">(c-r)</span>+组内块号<span class=\"hljs-comment\">(r)</span>+块内地址<span class=\"hljs-comment\">(b)</span><br><br>备注：r越大，组越少，r=c，全是主存字块标记，此时全相连;<br>r=<span class=\"hljs-number\">0</span>，组号为c，此时组号等同于块号<span class=\"hljs-comment\">(每组只有一块)</span>，而主存的t位标记仍然通过标记表的t位比较是否相等，相等则命中。<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\">在此种模式中，每组有一个相连比较表（只有一组就只有一个，即全相连），<br>首先先得出是哪一组的相连比较表，用主存标记t位相连比较，如相等，则得出组内块号，命中，如不相等，失效。<br><br>主要思想：分组进行组内的全相连，<span class=\"hljs-attribute\">c</span>=0就是只分一组，也就是正统的全相连。<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"指令系统\"><a href=\"#指令系统\" class=\"headerlink\" title=\"指令系统\"></a>指令系统</h1><p>1、指令根据操作码数目分为零地址、一地址、二地址、三地址指令等。</p>\n<h2 id=\"指令系统设计\"><a href=\"#指令系统设计\" class=\"headerlink\" title=\"指令系统设计\"></a>指令系统设计</h2><p>固定长编码：所有操作码的长度都是相等的。</p>\n<p>Huffman编码：根据指令的出现概率编码，概率大的长，概率小的短。</p>\n<p>编码过程：按出现概率自左向右排序，然后抽出概率最低的两个形成一个树，根节点是两者之和。然后重复，直到根节点概率为1。</p>\n<p>指令由Huffman树确定，左边的子节点为0，右边为1，以此类推。</p>\n<h3 id=\"扩展编码：\"><a href=\"#扩展编码：\" class=\"headerlink\" title=\"扩展编码：\"></a>扩展编码：</h3><p>a/b(m-n)扩展编码：a、b是有相同长度的编码数目，m、n是码长。</p>\n<p>比如2/7、2-4代表的是同一种编码。</p>\n<p>其中，比较短的编码的全1（比如：1111）一般用于作为前缀，代表切换至更长长度的编码。</p>\n<p>算编码数：以编码为3-6-9-扩展编码为例</p>\n<p>$$S_9 = ((2^3-S_3)\\cdot2^{6-3}-S_6)\\cdot2^{9-6}$$</p>\n<p>其中，Sn代表码长为n的编码数目。</p>\n<p>解释：$$2^3-S_3$$ 表示了在表示完码长为3的编码后，剩余的前缀数目。这些前缀可以用来拓展到6位。如果剩余的前缀越多，可以拓展出的组也就越多，然后再乘以每组可以表示的6码长编码数目（由于前3位是前缀，实际上只有$$2^{6-3}$$种结果），得到一共可以表示多少码长为6编码，再减去实际的，得到前缀数，以此类推，得到码长为9的编码可以表示的数目。</p>\n<h1 id=\"控制器\"><a href=\"#控制器\" class=\"headerlink\" title=\"控制器\"></a>控制器</h1><h2 id=\"控制器基础\"><a href=\"#控制器基础\" class=\"headerlink\" title=\"控制器基础\"></a>控制器基础</h2><h3 id=\"控制器组成\"><a href=\"#控制器组成\" class=\"headerlink\" title=\"控制器组成\"></a>控制器组成</h3><p>程序计数器PC：存指令的地址</p>\n<p>指令寄存器IR：保存指令的内容</p>\n<p>指令译码器ID：分析识别是怎样的指令</p>\n<p>地址形成部件：根据不同的寻址方式形成操作数的有效地址。</p>\n<p>脉冲源：作为时钟脉冲</p>\n<p>启停线路：计算机启动信号，启动后时钟脉冲才能进入，然后启动节拍信号发生器开始工作。</p>\n<p>节拍信号发生器：将脉冲转换为各个设备所需要的节拍信号</p>\n<p>控制单元：将指令发出的各种控制信号按节拍分配。</p>\n<p>中断控制逻辑：控制中断。</p>\n<h3 id=\"寄存器：\"><a href=\"#寄存器：\" class=\"headerlink\" title=\"寄存器：\"></a>寄存器：</h3><p>通用+PC+IR+AR（记录主存单元地址）+DR（数据缓冲寄存器，在CPU和主存间形成缓冲）+PSW（记录各种条件码，比如进位）</p>\n<h2 id=\"微程序控制\"><a href=\"#微程序控制\" class=\"headerlink\" title=\"微程序控制\"></a>微程序控制</h2><h3 id=\"关于容量：\"><a href=\"#关于容量：\" class=\"headerlink\" title=\"关于容量：\"></a>关于容量：</h3><p>CS容量：$$2^{N_{AR}} \\cdot N_{IR} $$，前者代表多少指令，后者代表每条指令多少位</p>\n<p>IR位数：微程序位数，否则放不下</p>\n<p>AR位数：下址位数</p>\n<h3 id=\"微指令编码方式：\"><a href=\"#微指令编码方式：\" class=\"headerlink\" title=\"微指令编码方式：\"></a>微指令编码方式：</h3><p>直接控制法：每一位代表一个微命令</p>\n<p>字段直接编译法：</p>\n<p>1、微命令数=$$2^n-1$$，因000要代表不发出微命令。</p>\n<p>2、每个互斥类可能有多个编码，但是互斥类之间是平行排布的，平铺在控制字段。下址字段则是固定的，存下条指令地址。</p>\n<p>例如：</p>\n<figure class=\"highlight gherkin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gherkin\">组1|<span class=\"hljs-string\">组2</span>|<span class=\"hljs-string\">组3</span>|<span class=\"hljs-string\">......</span>|<span class=\"hljs-string\">判别码</span>|<span class=\"hljs-string\">下址</span>|<br>每个组是一个互斥类，代表2^n-1个指令。<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"微指令执行方式：\"><a href=\"#微指令执行方式：\" class=\"headerlink\" title=\"微指令执行方式：\"></a>微指令执行方式：</h3><p>串行方式：在一条微指令执行完毕后才会执行下一条</p>\n<p>并行方式：在一条微指令执行时，就取下一条微指令</p>\n"},{"layout":"post","title":"数据库复习","intro":"","date":"2021-07-01T13:00:01.000Z","author":"Makinohara","catalog":true,"_content":"\n# SQL语句\n\n1、创建与删除\n\n```sql\n#数据库\ncreate database 数据库;\ndrop database 数据库;\n\n#表\ncreate table table1 (\n    学号 char(4) primary key,\n    姓名 char(20) not null\n)\n\n#索引\ncreate unique index idx on S(Sno DESC);#降序排列\n\n#视图\ncreate view view_name as\nselect * from s where city = 'New York';\ndrop view view_name;\n\n#角色\ncreate role role_name;\ngrant all privileges on S to role_name with grant option;\ndrop role role_name;\n\n#索引：\ncreate [unique|cluster(聚集)]index Index_name on S(Sno);\ndrop index index_name;\n```\n\n2、查询与修改\n\n```sql\n#基本查询\nselect Sno from S;\n\n#带别名\nselect Sno 学号 , Grade 成绩 , joinGroup 加入社团 from S;\n\n#带条件\nselect Sno from S where Sage > 18;\nselect Sno from S where Sage between 18 and 20;\nselect Sno from S where name not in ('Yukinoshita','Yui');\nselect Sno from S where name like 'Yukinoshita%';\nselect Sno from S where joinGroup is not null;\n\n#带排序\nselect Sno from S order by Grade DESC;\nselect top 10 Sno from S order by Grade DESC;#选择前10名的学生。\n\n#聚集\nselect avg(Grade) from S;\nselect count(*) from S;\nselect count(distinct joinGroup) from S;#相同内容只计数一次\nselect Sno from S group by Sno having count(distinct chooseClass) > 3;\n\n#连接\nselect S.* , SC.* from S,SC where S.Cno = SC.Cno;\nselect S.Sno , S.name , S.city , SPJ.qty from s , SPJ \nwhere S.Sno = SPJ.Sno and SPJ.Jno = 'J001' and SPJ.qty >300;\n\n#嵌套\nselect Sname from S where Sno in (select Sno from SC where Cno = '1001');\n\n\n```\n\n3、修改\n\n```sql\n#插入\ninsert into S values('114514','李田所','C','回家部','24');\nselect * into S from 下北泽高 where Sname like '李田所';#把信息复制到大学\n\n#修改\nupdate S set Grade = 'B' where Sno = 114514;\n\n#删除\ndelete from S where Sno = 114514;\n\n#批量\nupdate S set Sage = Sage +1 ;\n\n#带子查询\nupdate SPJ set QTY = QTY - 50 where JNO in( select JNO from J \n                                           where City = '天津');\n  \n#alter\nalter table tableName drop column columnName;#删除列\nalter table tableName add column Sbirth char(20);#添加列\nalter table tableName alter column columnname datatype# 改变数据类型\n\n#drop\ndrop table user index role ......;#drop一般删除数据结构或对象（包括属性列）\t\t，\n#而delete则倾向于删除对象中的元组。\n```\n\n\n\n4、视图\n\n```sql\n#创建\ncreate view S_BJ_VIEW as \nselect * from S where city = '北京' with check option;\n\n#删除\ndrop view ViewName;\n\n#查询\nselect Sno,Sname from S_BJ_VIEW where STAT > 'B';\nselect * from S_AVGQTY where QAVG >=300;\n\n#视图消解法：\n#定义的视图：\ncreate view S_AVGQTY(SNO,PNO,QAVG)\nas select SNO,PNO,AVG(QTY) from SPJ group by SNO,PNO;\n#查询语句：select * from S_AVGQTY where QAVG >=300;\nselect * from S_AVGQTY where QAVG >=300;\n#转换后：\nselect SNO,PNO,AVG(QTY) from SPJ group by SNO,PNO having AVG(QTY)>=300;\n\n#更新数据：\ninsert into S_BJ_VIEW value('S7','北京114514电子厂','B','北京');\n\n#删除：\ndelete from S_BJ_VIEW where SNAME = '北京114514电子厂';\n```\n\n5、安全性\n\n```sql\n#创建用户\ncreate user userName for login loginName with default_schema = schName;\ncreate login loginName with password = ..., default_database = DB_NAME;\n\n#创建角色\ncreate role RoleName; \ngrant RoleName to UserName with admin option;\n\n#权限管理\ngrant all privileges on S to Rolename/Username; #with grant option:可以传递权限\nrevoke all privileges on S from Rolename/Username;\ndeny update on S to Rolename/Username;#拒绝这一权限，使其加入其他有update权限组后仍然不能执行该操作。\n```\n\n6、完整性：\n\n```sql\n#主码定义：\ncreate table s(\n    Sno char(4) primary key;\n    ......\n)\n\ncreate table s(\n    ......\n    primary key (Sno);\n)\ncreate table s (\n\t......\n    primary key(Sno,Pno,Jno);\n)\n\n#参照完整性：\ncreate table s(\n\t......\n    foreign key (SNO) references s(SNO);\n)\n\n#其他完整性：\nnot null #非空\nunique # 唯一\ndefault 'defaultValue' #默认值\n\n#check约束\ncreate table s(\n\t......\n    STAT Char(2) check(STAT in ('A','B','C')),\n    ......\n)\n\n#constraint命令\ncreate table s (\n\t......\n    Sname char(20) constraint c1 not null # 此时c1这一完整性约束(constraint)的值为not null\n)\nalter table s drop constraint c1;\nalter table s add constraint c2 check(......);\n\n```\n\n# 数据库概念复习\n\n## 关系运算\n\n1、选择\n\n$$\\sigma(R)_F=\\{t|t \\in R\\wedge F(t) = true\\}$$\n\n2、投影\n\n$$\\Pi_A(R)=\\{t[A]|t \\in R\\}$$\n\n3、连接\n\n等值连接：选取笛卡尔级中等值的那些元组\n\n自然连接：在等值连接的基础上去掉重复的属性列\n\n4、除运算\n\nR÷S:\n\n用于选出以下内容：\n\n属性：在R不在S的属性\n\n元组：删去的属性对得上在R中的值\n\n比如：\n\nR:\n\nSno Jno\n\na      1\n\nb      2\n\nc      3\n\nS:\n\n1\n\n3\n\nR÷S:\n\nSno\n\na\n\nc\n\n**其他较为重要的运算：交并减、笛卡尔积**\n\n## 数据库安全\n\n### 自主：\n\n授予权限的类型：\n\n| 基本表、视图                                          | 属性列                                         |\n| ----------------------------------------------------- | ---------------------------------------------- |\n| select insert update delete references all privileges | select insert update references all privileges |\n\n一个简单的例子：\n\ngrant update(Sno),select on table SC to User1;\n\n对属性列：权限后面加括号，表明该权限生效的属性列\n\n可传递：with grant option;\n\n收回权限：同grant，但有需要注意的地方：\n\n最后加 cascade/restrict：是否级联操作或约束操作。\n\n角色：\n\n创建：create role rolename ;\n\n授予权限同用户\n\n将角色权限授予用户：grant Rolename to User;\n\n解除权限：revoke Rolename from User;\n\n撤销授权同用户\n\n### 强制：\n\n设定若干级别：\n\nTS>=S>=C>=P\n\n访问规则：\n\n主体许可证等级大于等于客体，可以读。\n\n主体许可证等级小于等于客体，可以写。\n\n第二条解释：高许可证主体没有办法写出一个更低等级的客体。\n\n视图：\n\ncreate view as(select......);\n\ngrant select on view to ......;\n\n## 完整性：\n\n实体完整性：\n\n```sql\ncreate table ...(\n    ......\n    Sname char(20) primary key;#在列级\n    \n    ......\n    primary key (Sname);#在表级\n    \n    primary key (Sname,Sno);#在表级，多列\n\n)\n```\n\n参照完整性：\n\n```sql\ncreate table S2(\n    ......\n    foreign key (Sno) references S(Sno)#表级定义参照完整性\n    on delete cascade on update cascade,#级联删除、更新\n)\n```\n\n约束语句：\n\n```sql\ncreate table R1(\n    Sno char(20) not null,#非空\n    ...... unique,#列值唯一\n    ......check( ......in(......集合))\n    \n    check (Ssex = 'female'or Sname not like 'Ms.%');\n    \n    \n    #constraint\n    Sno char(20) constraint C1 check(......);#形成一个名为C1的约束条件\n    \n    ......\n    constraint C2 check(......)#在表级定义约束条件\n)\n\nalter table R1 drop constraint C1;#删除约束条件\nalter table R1 create constraint c3 check(......);#创建约束条件，表级。\n```\n\n### 断言\n\n在操作时，使断言不为真的操作拒绝执行。\n\n创建断言：\n\n```sql\ncreate assertion assertion_name check (......);\n\ncreate assertion A1 check(60>=select count(*) from SC where C = 'Cource1');\ncreate assertion A2 check(60>=all(select count(*) from SC group by ...));\n```\n\n### 触发器：\n\n触发器用于在某条件由于操作成立时触发其他操作。\n\n```sql\ncreate trigger trigger_name before/after update on SC\nreferencing new/old row as variable#触发器内设变量：原值和新值\nfor each row / statement#每行触发还是每条语句触发\nwhen(......)#触发条件，比如new.grade>=old.grade\ninsert into Table_name(......) values (......)\n\ndrop trigger trigger_name;#删除（删除对象用drop）\n```\n\n## 规范化\n\n1NF：不可分割\n\n2NF：属性由一码确定\n\n3NF：没有不完全函数依赖，没有传递函数依赖\n\nBCNF：每个决定因素都有码\n\n4NF：不存在非平凡、非函数依赖的多值依赖\n\n规范化的实质：概念的单一化\n\n## 数据库设计\n\n### E-R图\n\n联系：菱形，两侧写是1-1、1-n还是n-1的依赖。\n\n属性：圆形，属性不能有属性（不可再分）\n\n实体：矩形\n\n### 实体描述：\n\n实体{实体的主码（下划线），属性1，属性2，属性3}\n\n## 数据库的故障恢复、数据库的并发控制：\n\n### 事务\n\n事务：一个数据库操作序列，具有ACID特性，即原子性、一致性、隔离性、持续性（永久性）\n\n### 数据库的日志文件\n\n日志文件记录：\n\n事务标识、操作类型、操作对象、操作前值、操作后值。\n\n### 故障处理\n\n事务故障：反向扫描日志文件，撤销已经完成的操作\n\n系统故障：视事务完成情况选择是撤销还是重做，撤销：根据日志写更新前值；重做：根据日志写更新后值。\n\n介质故障：从恢复介质重装数据，然后重做已经完成的事务。\n\n### 并发控制\n\n#### 封锁\n\nX锁（写锁）：上X锁后，其他事务不能读写。\n\nS锁（读锁）：上S锁后，其他事务可以再上S锁，可以读，但是不能写。\n\n##### 封锁协议\n\n一级封锁协议：事务在修改数据前必须加X锁，直至事务结束释放。\n\n二级封锁协议：在一级的基础上，事务读要上S锁，读完释放。\n\n三级封锁协议：在一级的基础上，事务读要上S锁，且事务结束时才释放（解决了不可重复读问题）。\n\n### 活锁与死锁\n\n活锁：事务由于等待其他事务结束无法完成（解决：先来先服务）。\n\n死锁：事务间循环等待导致数个事务不能结束（解决：采取措施避免或每隔一段时间诊断死锁并清除）。\n\n### 意向锁（Intention Lock）\n\nIS锁：对一个对象加IS锁，意味着拟对其后裔结点加S锁。如果要对某个元组加S锁，必须先给关系加IS锁。\n\nIX锁：类似IS锁\n\nSIX锁：对这个对象加S锁，然后加IX锁，代表这个事务希望读这个对象，并可能更新个别元组。\n","source":"_posts/2021-7-1-sql.markdown","raw":"---\nlayout:     post\ntitle:      \"数据库复习\"\nintro:   \"\"\ndate:       2021-7-1 21:00:01\nauthor:     \"Makinohara\"\ncatalog: true\ntags:\n    - 计算机基础\n    \n---\n\n# SQL语句\n\n1、创建与删除\n\n```sql\n#数据库\ncreate database 数据库;\ndrop database 数据库;\n\n#表\ncreate table table1 (\n    学号 char(4) primary key,\n    姓名 char(20) not null\n)\n\n#索引\ncreate unique index idx on S(Sno DESC);#降序排列\n\n#视图\ncreate view view_name as\nselect * from s where city = 'New York';\ndrop view view_name;\n\n#角色\ncreate role role_name;\ngrant all privileges on S to role_name with grant option;\ndrop role role_name;\n\n#索引：\ncreate [unique|cluster(聚集)]index Index_name on S(Sno);\ndrop index index_name;\n```\n\n2、查询与修改\n\n```sql\n#基本查询\nselect Sno from S;\n\n#带别名\nselect Sno 学号 , Grade 成绩 , joinGroup 加入社团 from S;\n\n#带条件\nselect Sno from S where Sage > 18;\nselect Sno from S where Sage between 18 and 20;\nselect Sno from S where name not in ('Yukinoshita','Yui');\nselect Sno from S where name like 'Yukinoshita%';\nselect Sno from S where joinGroup is not null;\n\n#带排序\nselect Sno from S order by Grade DESC;\nselect top 10 Sno from S order by Grade DESC;#选择前10名的学生。\n\n#聚集\nselect avg(Grade) from S;\nselect count(*) from S;\nselect count(distinct joinGroup) from S;#相同内容只计数一次\nselect Sno from S group by Sno having count(distinct chooseClass) > 3;\n\n#连接\nselect S.* , SC.* from S,SC where S.Cno = SC.Cno;\nselect S.Sno , S.name , S.city , SPJ.qty from s , SPJ \nwhere S.Sno = SPJ.Sno and SPJ.Jno = 'J001' and SPJ.qty >300;\n\n#嵌套\nselect Sname from S where Sno in (select Sno from SC where Cno = '1001');\n\n\n```\n\n3、修改\n\n```sql\n#插入\ninsert into S values('114514','李田所','C','回家部','24');\nselect * into S from 下北泽高 where Sname like '李田所';#把信息复制到大学\n\n#修改\nupdate S set Grade = 'B' where Sno = 114514;\n\n#删除\ndelete from S where Sno = 114514;\n\n#批量\nupdate S set Sage = Sage +1 ;\n\n#带子查询\nupdate SPJ set QTY = QTY - 50 where JNO in( select JNO from J \n                                           where City = '天津');\n  \n#alter\nalter table tableName drop column columnName;#删除列\nalter table tableName add column Sbirth char(20);#添加列\nalter table tableName alter column columnname datatype# 改变数据类型\n\n#drop\ndrop table user index role ......;#drop一般删除数据结构或对象（包括属性列）\t\t，\n#而delete则倾向于删除对象中的元组。\n```\n\n\n\n4、视图\n\n```sql\n#创建\ncreate view S_BJ_VIEW as \nselect * from S where city = '北京' with check option;\n\n#删除\ndrop view ViewName;\n\n#查询\nselect Sno,Sname from S_BJ_VIEW where STAT > 'B';\nselect * from S_AVGQTY where QAVG >=300;\n\n#视图消解法：\n#定义的视图：\ncreate view S_AVGQTY(SNO,PNO,QAVG)\nas select SNO,PNO,AVG(QTY) from SPJ group by SNO,PNO;\n#查询语句：select * from S_AVGQTY where QAVG >=300;\nselect * from S_AVGQTY where QAVG >=300;\n#转换后：\nselect SNO,PNO,AVG(QTY) from SPJ group by SNO,PNO having AVG(QTY)>=300;\n\n#更新数据：\ninsert into S_BJ_VIEW value('S7','北京114514电子厂','B','北京');\n\n#删除：\ndelete from S_BJ_VIEW where SNAME = '北京114514电子厂';\n```\n\n5、安全性\n\n```sql\n#创建用户\ncreate user userName for login loginName with default_schema = schName;\ncreate login loginName with password = ..., default_database = DB_NAME;\n\n#创建角色\ncreate role RoleName; \ngrant RoleName to UserName with admin option;\n\n#权限管理\ngrant all privileges on S to Rolename/Username; #with grant option:可以传递权限\nrevoke all privileges on S from Rolename/Username;\ndeny update on S to Rolename/Username;#拒绝这一权限，使其加入其他有update权限组后仍然不能执行该操作。\n```\n\n6、完整性：\n\n```sql\n#主码定义：\ncreate table s(\n    Sno char(4) primary key;\n    ......\n)\n\ncreate table s(\n    ......\n    primary key (Sno);\n)\ncreate table s (\n\t......\n    primary key(Sno,Pno,Jno);\n)\n\n#参照完整性：\ncreate table s(\n\t......\n    foreign key (SNO) references s(SNO);\n)\n\n#其他完整性：\nnot null #非空\nunique # 唯一\ndefault 'defaultValue' #默认值\n\n#check约束\ncreate table s(\n\t......\n    STAT Char(2) check(STAT in ('A','B','C')),\n    ......\n)\n\n#constraint命令\ncreate table s (\n\t......\n    Sname char(20) constraint c1 not null # 此时c1这一完整性约束(constraint)的值为not null\n)\nalter table s drop constraint c1;\nalter table s add constraint c2 check(......);\n\n```\n\n# 数据库概念复习\n\n## 关系运算\n\n1、选择\n\n$$\\sigma(R)_F=\\{t|t \\in R\\wedge F(t) = true\\}$$\n\n2、投影\n\n$$\\Pi_A(R)=\\{t[A]|t \\in R\\}$$\n\n3、连接\n\n等值连接：选取笛卡尔级中等值的那些元组\n\n自然连接：在等值连接的基础上去掉重复的属性列\n\n4、除运算\n\nR÷S:\n\n用于选出以下内容：\n\n属性：在R不在S的属性\n\n元组：删去的属性对得上在R中的值\n\n比如：\n\nR:\n\nSno Jno\n\na      1\n\nb      2\n\nc      3\n\nS:\n\n1\n\n3\n\nR÷S:\n\nSno\n\na\n\nc\n\n**其他较为重要的运算：交并减、笛卡尔积**\n\n## 数据库安全\n\n### 自主：\n\n授予权限的类型：\n\n| 基本表、视图                                          | 属性列                                         |\n| ----------------------------------------------------- | ---------------------------------------------- |\n| select insert update delete references all privileges | select insert update references all privileges |\n\n一个简单的例子：\n\ngrant update(Sno),select on table SC to User1;\n\n对属性列：权限后面加括号，表明该权限生效的属性列\n\n可传递：with grant option;\n\n收回权限：同grant，但有需要注意的地方：\n\n最后加 cascade/restrict：是否级联操作或约束操作。\n\n角色：\n\n创建：create role rolename ;\n\n授予权限同用户\n\n将角色权限授予用户：grant Rolename to User;\n\n解除权限：revoke Rolename from User;\n\n撤销授权同用户\n\n### 强制：\n\n设定若干级别：\n\nTS>=S>=C>=P\n\n访问规则：\n\n主体许可证等级大于等于客体，可以读。\n\n主体许可证等级小于等于客体，可以写。\n\n第二条解释：高许可证主体没有办法写出一个更低等级的客体。\n\n视图：\n\ncreate view as(select......);\n\ngrant select on view to ......;\n\n## 完整性：\n\n实体完整性：\n\n```sql\ncreate table ...(\n    ......\n    Sname char(20) primary key;#在列级\n    \n    ......\n    primary key (Sname);#在表级\n    \n    primary key (Sname,Sno);#在表级，多列\n\n)\n```\n\n参照完整性：\n\n```sql\ncreate table S2(\n    ......\n    foreign key (Sno) references S(Sno)#表级定义参照完整性\n    on delete cascade on update cascade,#级联删除、更新\n)\n```\n\n约束语句：\n\n```sql\ncreate table R1(\n    Sno char(20) not null,#非空\n    ...... unique,#列值唯一\n    ......check( ......in(......集合))\n    \n    check (Ssex = 'female'or Sname not like 'Ms.%');\n    \n    \n    #constraint\n    Sno char(20) constraint C1 check(......);#形成一个名为C1的约束条件\n    \n    ......\n    constraint C2 check(......)#在表级定义约束条件\n)\n\nalter table R1 drop constraint C1;#删除约束条件\nalter table R1 create constraint c3 check(......);#创建约束条件，表级。\n```\n\n### 断言\n\n在操作时，使断言不为真的操作拒绝执行。\n\n创建断言：\n\n```sql\ncreate assertion assertion_name check (......);\n\ncreate assertion A1 check(60>=select count(*) from SC where C = 'Cource1');\ncreate assertion A2 check(60>=all(select count(*) from SC group by ...));\n```\n\n### 触发器：\n\n触发器用于在某条件由于操作成立时触发其他操作。\n\n```sql\ncreate trigger trigger_name before/after update on SC\nreferencing new/old row as variable#触发器内设变量：原值和新值\nfor each row / statement#每行触发还是每条语句触发\nwhen(......)#触发条件，比如new.grade>=old.grade\ninsert into Table_name(......) values (......)\n\ndrop trigger trigger_name;#删除（删除对象用drop）\n```\n\n## 规范化\n\n1NF：不可分割\n\n2NF：属性由一码确定\n\n3NF：没有不完全函数依赖，没有传递函数依赖\n\nBCNF：每个决定因素都有码\n\n4NF：不存在非平凡、非函数依赖的多值依赖\n\n规范化的实质：概念的单一化\n\n## 数据库设计\n\n### E-R图\n\n联系：菱形，两侧写是1-1、1-n还是n-1的依赖。\n\n属性：圆形，属性不能有属性（不可再分）\n\n实体：矩形\n\n### 实体描述：\n\n实体{实体的主码（下划线），属性1，属性2，属性3}\n\n## 数据库的故障恢复、数据库的并发控制：\n\n### 事务\n\n事务：一个数据库操作序列，具有ACID特性，即原子性、一致性、隔离性、持续性（永久性）\n\n### 数据库的日志文件\n\n日志文件记录：\n\n事务标识、操作类型、操作对象、操作前值、操作后值。\n\n### 故障处理\n\n事务故障：反向扫描日志文件，撤销已经完成的操作\n\n系统故障：视事务完成情况选择是撤销还是重做，撤销：根据日志写更新前值；重做：根据日志写更新后值。\n\n介质故障：从恢复介质重装数据，然后重做已经完成的事务。\n\n### 并发控制\n\n#### 封锁\n\nX锁（写锁）：上X锁后，其他事务不能读写。\n\nS锁（读锁）：上S锁后，其他事务可以再上S锁，可以读，但是不能写。\n\n##### 封锁协议\n\n一级封锁协议：事务在修改数据前必须加X锁，直至事务结束释放。\n\n二级封锁协议：在一级的基础上，事务读要上S锁，读完释放。\n\n三级封锁协议：在一级的基础上，事务读要上S锁，且事务结束时才释放（解决了不可重复读问题）。\n\n### 活锁与死锁\n\n活锁：事务由于等待其他事务结束无法完成（解决：先来先服务）。\n\n死锁：事务间循环等待导致数个事务不能结束（解决：采取措施避免或每隔一段时间诊断死锁并清除）。\n\n### 意向锁（Intention Lock）\n\nIS锁：对一个对象加IS锁，意味着拟对其后裔结点加S锁。如果要对某个元组加S锁，必须先给关系加IS锁。\n\nIX锁：类似IS锁\n\nSIX锁：对这个对象加S锁，然后加IX锁，代表这个事务希望读这个对象，并可能更新个别元组。\n","slug":"2021-7-1-sql","published":1,"updated":"2022-01-02T13:05:13.534Z","_id":"ckv4pvovz000f24ped1ks2008","comments":1,"photos":[],"link":"","content":"<h1 id=\"SQL语句\"><a href=\"#SQL语句\" class=\"headerlink\" title=\"SQL语句\"></a>SQL语句</h1><p>1、创建与删除</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-comment\">#数据库</span><br><span class=\"hljs-keyword\">create</span> <span class=\"hljs-keyword\">database</span> 数据库;<br><span class=\"hljs-keyword\">drop</span> <span class=\"hljs-keyword\">database</span> 数据库;<br><br><span class=\"hljs-comment\">#表</span><br><span class=\"hljs-keyword\">create</span> <span class=\"hljs-keyword\">table</span> table1 (<br>    学号 <span class=\"hljs-built_in\">char</span>(<span class=\"hljs-number\">4</span>) primary <span class=\"hljs-keyword\">key</span>,<br>    姓名 <span class=\"hljs-built_in\">char</span>(<span class=\"hljs-number\">20</span>) <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">null</span><br>)<br><br><span class=\"hljs-comment\">#索引</span><br><span class=\"hljs-keyword\">create</span> <span class=\"hljs-keyword\">unique</span> <span class=\"hljs-keyword\">index</span> idx <span class=\"hljs-keyword\">on</span> S(Sno <span class=\"hljs-keyword\">DESC</span>);<span class=\"hljs-comment\">#降序排列</span><br><br><span class=\"hljs-comment\">#视图</span><br><span class=\"hljs-keyword\">create</span> <span class=\"hljs-keyword\">view</span> view_name <span class=\"hljs-keyword\">as</span><br><span class=\"hljs-keyword\">select</span> * <span class=\"hljs-keyword\">from</span> s <span class=\"hljs-keyword\">where</span> city = <span class=\"hljs-string\">'New York'</span>;<br><span class=\"hljs-keyword\">drop</span> <span class=\"hljs-keyword\">view</span> view_name;<br><br><span class=\"hljs-comment\">#角色</span><br><span class=\"hljs-keyword\">create</span> <span class=\"hljs-keyword\">role</span> role_name;<br><span class=\"hljs-keyword\">grant</span> <span class=\"hljs-keyword\">all</span> <span class=\"hljs-keyword\">privileges</span> <span class=\"hljs-keyword\">on</span> S <span class=\"hljs-keyword\">to</span> role_name <span class=\"hljs-keyword\">with</span> <span class=\"hljs-keyword\">grant</span> <span class=\"hljs-keyword\">option</span>;<br><span class=\"hljs-keyword\">drop</span> <span class=\"hljs-keyword\">role</span> role_name;<br><br><span class=\"hljs-comment\">#索引：</span><br><span class=\"hljs-keyword\">create</span> [<span class=\"hljs-keyword\">unique</span>|cluster(聚集)]<span class=\"hljs-keyword\">index</span> Index_name <span class=\"hljs-keyword\">on</span> S(Sno);<br><span class=\"hljs-keyword\">drop</span> <span class=\"hljs-keyword\">index</span> index_name;<br></code></pre></td></tr></table></figure>\n\n<p>2、查询与修改</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-comment\">#基本查询</span><br><span class=\"hljs-keyword\">select</span> Sno <span class=\"hljs-keyword\">from</span> S;<br><br><span class=\"hljs-comment\">#带别名</span><br><span class=\"hljs-keyword\">select</span> Sno 学号 , Grade 成绩 , joinGroup 加入社团 <span class=\"hljs-keyword\">from</span> S;<br><br><span class=\"hljs-comment\">#带条件</span><br><span class=\"hljs-keyword\">select</span> Sno <span class=\"hljs-keyword\">from</span> S <span class=\"hljs-keyword\">where</span> Sage &gt; <span class=\"hljs-number\">18</span>;<br><span class=\"hljs-keyword\">select</span> Sno <span class=\"hljs-keyword\">from</span> S <span class=\"hljs-keyword\">where</span> Sage <span class=\"hljs-keyword\">between</span> <span class=\"hljs-number\">18</span> <span class=\"hljs-keyword\">and</span> <span class=\"hljs-number\">20</span>;<br><span class=\"hljs-keyword\">select</span> Sno <span class=\"hljs-keyword\">from</span> S <span class=\"hljs-keyword\">where</span> <span class=\"hljs-keyword\">name</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-keyword\">in</span> (<span class=\"hljs-string\">'Yukinoshita'</span>,<span class=\"hljs-string\">'Yui'</span>);<br><span class=\"hljs-keyword\">select</span> Sno <span class=\"hljs-keyword\">from</span> S <span class=\"hljs-keyword\">where</span> <span class=\"hljs-keyword\">name</span> <span class=\"hljs-keyword\">like</span> <span class=\"hljs-string\">'Yukinoshita%'</span>;<br><span class=\"hljs-keyword\">select</span> Sno <span class=\"hljs-keyword\">from</span> S <span class=\"hljs-keyword\">where</span> joinGroup <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">null</span>;<br><br><span class=\"hljs-comment\">#带排序</span><br><span class=\"hljs-keyword\">select</span> Sno <span class=\"hljs-keyword\">from</span> S <span class=\"hljs-keyword\">order</span> <span class=\"hljs-keyword\">by</span> Grade <span class=\"hljs-keyword\">DESC</span>;<br><span class=\"hljs-keyword\">select</span> top <span class=\"hljs-number\">10</span> Sno <span class=\"hljs-keyword\">from</span> S <span class=\"hljs-keyword\">order</span> <span class=\"hljs-keyword\">by</span> Grade <span class=\"hljs-keyword\">DESC</span>;<span class=\"hljs-comment\">#选择前10名的学生。</span><br><br><span class=\"hljs-comment\">#聚集</span><br><span class=\"hljs-keyword\">select</span> <span class=\"hljs-keyword\">avg</span>(Grade) <span class=\"hljs-keyword\">from</span> S;<br><span class=\"hljs-keyword\">select</span> <span class=\"hljs-keyword\">count</span>(*) <span class=\"hljs-keyword\">from</span> S;<br><span class=\"hljs-keyword\">select</span> <span class=\"hljs-keyword\">count</span>(<span class=\"hljs-keyword\">distinct</span> joinGroup) <span class=\"hljs-keyword\">from</span> S;<span class=\"hljs-comment\">#相同内容只计数一次</span><br><span class=\"hljs-keyword\">select</span> Sno <span class=\"hljs-keyword\">from</span> S <span class=\"hljs-keyword\">group</span> <span class=\"hljs-keyword\">by</span> Sno <span class=\"hljs-keyword\">having</span> <span class=\"hljs-keyword\">count</span>(<span class=\"hljs-keyword\">distinct</span> chooseClass) &gt; <span class=\"hljs-number\">3</span>;<br><br><span class=\"hljs-comment\">#连接</span><br><span class=\"hljs-keyword\">select</span> S.* , SC.* <span class=\"hljs-keyword\">from</span> S,SC <span class=\"hljs-keyword\">where</span> S.Cno = SC.Cno;<br><span class=\"hljs-keyword\">select</span> S.Sno , S.name , S.city , SPJ.qty <span class=\"hljs-keyword\">from</span> s , SPJ <br><span class=\"hljs-keyword\">where</span> S.Sno = SPJ.Sno <span class=\"hljs-keyword\">and</span> SPJ.Jno = <span class=\"hljs-string\">'J001'</span> <span class=\"hljs-keyword\">and</span> SPJ.qty &gt;<span class=\"hljs-number\">300</span>;<br><br><span class=\"hljs-comment\">#嵌套</span><br><span class=\"hljs-keyword\">select</span> Sname <span class=\"hljs-keyword\">from</span> S <span class=\"hljs-keyword\">where</span> Sno <span class=\"hljs-keyword\">in</span> (<span class=\"hljs-keyword\">select</span> Sno <span class=\"hljs-keyword\">from</span> SC <span class=\"hljs-keyword\">where</span> Cno = <span class=\"hljs-string\">'1001'</span>);<br></code></pre></td></tr></table></figure>\n\n<p>3、修改</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-comment\">#插入</span><br><span class=\"hljs-keyword\">insert</span> <span class=\"hljs-keyword\">into</span> S <span class=\"hljs-keyword\">values</span>(<span class=\"hljs-string\">'114514'</span>,<span class=\"hljs-string\">'李田所'</span>,<span class=\"hljs-string\">'C'</span>,<span class=\"hljs-string\">'回家部'</span>,<span class=\"hljs-string\">'24'</span>);<br><span class=\"hljs-keyword\">select</span> * <span class=\"hljs-keyword\">into</span> S <span class=\"hljs-keyword\">from</span> 下北泽高 <span class=\"hljs-keyword\">where</span> Sname <span class=\"hljs-keyword\">like</span> <span class=\"hljs-string\">'李田所'</span>;<span class=\"hljs-comment\">#把信息复制到大学</span><br><br><span class=\"hljs-comment\">#修改</span><br><span class=\"hljs-keyword\">update</span> S <span class=\"hljs-keyword\">set</span> Grade = <span class=\"hljs-string\">'B'</span> <span class=\"hljs-keyword\">where</span> Sno = <span class=\"hljs-number\">114514</span>;<br><br><span class=\"hljs-comment\">#删除</span><br><span class=\"hljs-keyword\">delete</span> <span class=\"hljs-keyword\">from</span> S <span class=\"hljs-keyword\">where</span> Sno = <span class=\"hljs-number\">114514</span>;<br><br><span class=\"hljs-comment\">#批量</span><br><span class=\"hljs-keyword\">update</span> S <span class=\"hljs-keyword\">set</span> Sage = Sage +<span class=\"hljs-number\">1</span> ;<br><br><span class=\"hljs-comment\">#带子查询</span><br><span class=\"hljs-keyword\">update</span> SPJ <span class=\"hljs-keyword\">set</span> QTY = QTY - <span class=\"hljs-number\">50</span> <span class=\"hljs-keyword\">where</span> JNO <span class=\"hljs-keyword\">in</span>( <span class=\"hljs-keyword\">select</span> JNO <span class=\"hljs-keyword\">from</span> J <br>                                           <span class=\"hljs-keyword\">where</span> City = <span class=\"hljs-string\">'天津'</span>);<br>  <br><span class=\"hljs-comment\">#alter</span><br><span class=\"hljs-keyword\">alter</span> <span class=\"hljs-keyword\">table</span> tableName <span class=\"hljs-keyword\">drop</span> <span class=\"hljs-keyword\">column</span> columnName;<span class=\"hljs-comment\">#删除列</span><br><span class=\"hljs-keyword\">alter</span> <span class=\"hljs-keyword\">table</span> tableName <span class=\"hljs-keyword\">add</span> <span class=\"hljs-keyword\">column</span> Sbirth <span class=\"hljs-built_in\">char</span>(<span class=\"hljs-number\">20</span>);<span class=\"hljs-comment\">#添加列</span><br><span class=\"hljs-keyword\">alter</span> <span class=\"hljs-keyword\">table</span> tableName <span class=\"hljs-keyword\">alter</span> <span class=\"hljs-keyword\">column</span> columnname datatype<span class=\"hljs-comment\"># 改变数据类型</span><br><br><span class=\"hljs-comment\">#drop</span><br><span class=\"hljs-keyword\">drop</span> <span class=\"hljs-keyword\">table</span> <span class=\"hljs-keyword\">user</span> <span class=\"hljs-keyword\">index</span> <span class=\"hljs-keyword\">role</span> ......;<span class=\"hljs-comment\">#drop一般删除数据结构或对象（包括属性列）\t\t，</span><br><span class=\"hljs-comment\">#而delete则倾向于删除对象中的元组。</span><br></code></pre></td></tr></table></figure>\n\n\n\n<p>4、视图</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-comment\">#创建</span><br><span class=\"hljs-keyword\">create</span> <span class=\"hljs-keyword\">view</span> S_BJ_VIEW <span class=\"hljs-keyword\">as</span> <br><span class=\"hljs-keyword\">select</span> * <span class=\"hljs-keyword\">from</span> S <span class=\"hljs-keyword\">where</span> city = <span class=\"hljs-string\">'北京'</span> <span class=\"hljs-keyword\">with</span> <span class=\"hljs-keyword\">check</span> <span class=\"hljs-keyword\">option</span>;<br><br><span class=\"hljs-comment\">#删除</span><br><span class=\"hljs-keyword\">drop</span> <span class=\"hljs-keyword\">view</span> ViewName;<br><br><span class=\"hljs-comment\">#查询</span><br><span class=\"hljs-keyword\">select</span> Sno,Sname <span class=\"hljs-keyword\">from</span> S_BJ_VIEW <span class=\"hljs-keyword\">where</span> STAT &gt; <span class=\"hljs-string\">'B'</span>;<br><span class=\"hljs-keyword\">select</span> * <span class=\"hljs-keyword\">from</span> S_AVGQTY <span class=\"hljs-keyword\">where</span> QAVG &gt;=<span class=\"hljs-number\">300</span>;<br><br><span class=\"hljs-comment\">#视图消解法：</span><br><span class=\"hljs-comment\">#定义的视图：</span><br><span class=\"hljs-keyword\">create</span> <span class=\"hljs-keyword\">view</span> S_AVGQTY(SNO,PNO,QAVG)<br><span class=\"hljs-keyword\">as</span> <span class=\"hljs-keyword\">select</span> SNO,PNO,<span class=\"hljs-keyword\">AVG</span>(QTY) <span class=\"hljs-keyword\">from</span> SPJ <span class=\"hljs-keyword\">group</span> <span class=\"hljs-keyword\">by</span> SNO,PNO;<br><span class=\"hljs-comment\">#查询语句：select * from S_AVGQTY where QAVG &gt;=300;</span><br><span class=\"hljs-keyword\">select</span> * <span class=\"hljs-keyword\">from</span> S_AVGQTY <span class=\"hljs-keyword\">where</span> QAVG &gt;=<span class=\"hljs-number\">300</span>;<br><span class=\"hljs-comment\">#转换后：</span><br><span class=\"hljs-keyword\">select</span> SNO,PNO,<span class=\"hljs-keyword\">AVG</span>(QTY) <span class=\"hljs-keyword\">from</span> SPJ <span class=\"hljs-keyword\">group</span> <span class=\"hljs-keyword\">by</span> SNO,PNO <span class=\"hljs-keyword\">having</span> <span class=\"hljs-keyword\">AVG</span>(QTY)&gt;=<span class=\"hljs-number\">300</span>;<br><br><span class=\"hljs-comment\">#更新数据：</span><br><span class=\"hljs-keyword\">insert</span> <span class=\"hljs-keyword\">into</span> S_BJ_VIEW <span class=\"hljs-keyword\">value</span>(<span class=\"hljs-string\">'S7'</span>,<span class=\"hljs-string\">'北京114514电子厂'</span>,<span class=\"hljs-string\">'B'</span>,<span class=\"hljs-string\">'北京'</span>);<br><br><span class=\"hljs-comment\">#删除：</span><br><span class=\"hljs-keyword\">delete</span> <span class=\"hljs-keyword\">from</span> S_BJ_VIEW <span class=\"hljs-keyword\">where</span> SNAME = <span class=\"hljs-string\">'北京114514电子厂'</span>;<br></code></pre></td></tr></table></figure>\n\n<p>5、安全性</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-comment\">#创建用户</span><br><span class=\"hljs-keyword\">create</span> <span class=\"hljs-keyword\">user</span> userName <span class=\"hljs-keyword\">for</span> login loginName <span class=\"hljs-keyword\">with</span> default_schema = schName;<br><span class=\"hljs-keyword\">create</span> login loginName <span class=\"hljs-keyword\">with</span> <span class=\"hljs-keyword\">password</span> = ..., default_database = DB_NAME;<br><br><span class=\"hljs-comment\">#创建角色</span><br><span class=\"hljs-keyword\">create</span> <span class=\"hljs-keyword\">role</span> RoleName; <br><span class=\"hljs-keyword\">grant</span> RoleName <span class=\"hljs-keyword\">to</span> UserName <span class=\"hljs-keyword\">with</span> <span class=\"hljs-keyword\">admin</span> <span class=\"hljs-keyword\">option</span>;<br><br><span class=\"hljs-comment\">#权限管理</span><br><span class=\"hljs-keyword\">grant</span> <span class=\"hljs-keyword\">all</span> <span class=\"hljs-keyword\">privileges</span> <span class=\"hljs-keyword\">on</span> S <span class=\"hljs-keyword\">to</span> Rolename/Username; <span class=\"hljs-comment\">#with grant option:可以传递权限</span><br><span class=\"hljs-keyword\">revoke</span> <span class=\"hljs-keyword\">all</span> <span class=\"hljs-keyword\">privileges</span> <span class=\"hljs-keyword\">on</span> S <span class=\"hljs-keyword\">from</span> Rolename/Username;<br>deny <span class=\"hljs-keyword\">update</span> <span class=\"hljs-keyword\">on</span> S <span class=\"hljs-keyword\">to</span> Rolename/Username;<span class=\"hljs-comment\">#拒绝这一权限，使其加入其他有update权限组后仍然不能执行该操作。</span><br></code></pre></td></tr></table></figure>\n\n<p>6、完整性：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-comment\">#主码定义：</span><br><span class=\"hljs-keyword\">create</span> <span class=\"hljs-keyword\">table</span> s(<br>    Sno <span class=\"hljs-built_in\">char</span>(<span class=\"hljs-number\">4</span>) primary <span class=\"hljs-keyword\">key</span>;<br>    ......<br>)<br><br><span class=\"hljs-keyword\">create</span> <span class=\"hljs-keyword\">table</span> s(<br>    ......<br>    primary <span class=\"hljs-keyword\">key</span> (Sno);<br>)<br><span class=\"hljs-keyword\">create</span> <span class=\"hljs-keyword\">table</span> s (<br>\t......<br>    primary <span class=\"hljs-keyword\">key</span>(Sno,Pno,Jno);<br>)<br><br><span class=\"hljs-comment\">#参照完整性：</span><br><span class=\"hljs-keyword\">create</span> <span class=\"hljs-keyword\">table</span> s(<br>\t......<br>    <span class=\"hljs-keyword\">foreign</span> <span class=\"hljs-keyword\">key</span> (SNO) <span class=\"hljs-keyword\">references</span> s(SNO);<br>)<br><br><span class=\"hljs-comment\">#其他完整性：</span><br>not null <span class=\"hljs-comment\">#非空</span><br>unique <span class=\"hljs-comment\"># 唯一</span><br>default 'defaultValue' <span class=\"hljs-comment\">#默认值</span><br><br><span class=\"hljs-comment\">#check约束</span><br><span class=\"hljs-keyword\">create</span> <span class=\"hljs-keyword\">table</span> s(<br>\t......<br>    STAT <span class=\"hljs-built_in\">Char</span>(<span class=\"hljs-number\">2</span>) <span class=\"hljs-keyword\">check</span>(STAT <span class=\"hljs-keyword\">in</span> (<span class=\"hljs-string\">'A'</span>,<span class=\"hljs-string\">'B'</span>,<span class=\"hljs-string\">'C'</span>)),<br>    ......<br>)<br><br><span class=\"hljs-comment\">#constraint命令</span><br><span class=\"hljs-keyword\">create</span> <span class=\"hljs-keyword\">table</span> s (<br>\t......<br>    Sname <span class=\"hljs-built_in\">char</span>(<span class=\"hljs-number\">20</span>) <span class=\"hljs-keyword\">constraint</span> c1 <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">null</span> <span class=\"hljs-comment\"># 此时c1这一完整性约束(constraint)的值为not null</span><br>)<br><span class=\"hljs-keyword\">alter</span> <span class=\"hljs-keyword\">table</span> s <span class=\"hljs-keyword\">drop</span> <span class=\"hljs-keyword\">constraint</span> c1;<br><span class=\"hljs-keyword\">alter</span> <span class=\"hljs-keyword\">table</span> s <span class=\"hljs-keyword\">add</span> <span class=\"hljs-keyword\">constraint</span> c2 <span class=\"hljs-keyword\">check</span>(......);<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"数据库概念复习\"><a href=\"#数据库概念复习\" class=\"headerlink\" title=\"数据库概念复习\"></a>数据库概念复习</h1><h2 id=\"关系运算\"><a href=\"#关系运算\" class=\"headerlink\" title=\"关系运算\"></a>关系运算</h2><p>1、选择</p>\n<p>$$\\sigma(R)_F={t|t \\in R\\wedge F(t) = true}$$</p>\n<p>2、投影</p>\n<p>$$\\Pi_A(R)={t[A]|t \\in R}$$</p>\n<p>3、连接</p>\n<p>等值连接：选取笛卡尔级中等值的那些元组</p>\n<p>自然连接：在等值连接的基础上去掉重复的属性列</p>\n<p>4、除运算</p>\n<p>R÷S:</p>\n<p>用于选出以下内容：</p>\n<p>属性：在R不在S的属性</p>\n<p>元组：删去的属性对得上在R中的值</p>\n<p>比如：</p>\n<p>R:</p>\n<p>Sno Jno</p>\n<p>a      1</p>\n<p>b      2</p>\n<p>c      3</p>\n<p>S:</p>\n<p>1</p>\n<p>3</p>\n<p>R÷S:</p>\n<p>Sno</p>\n<p>a</p>\n<p>c</p>\n<p><strong>其他较为重要的运算：交并减、笛卡尔积</strong></p>\n<h2 id=\"数据库安全\"><a href=\"#数据库安全\" class=\"headerlink\" title=\"数据库安全\"></a>数据库安全</h2><h3 id=\"自主：\"><a href=\"#自主：\" class=\"headerlink\" title=\"自主：\"></a>自主：</h3><p>授予权限的类型：</p>\n<table>\n<thead>\n<tr>\n<th>基本表、视图</th>\n<th>属性列</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>select insert update delete references all privileges</td>\n<td>select insert update references all privileges</td>\n</tr>\n</tbody></table>\n<p>一个简单的例子：</p>\n<p>grant update(Sno),select on table SC to User1;</p>\n<p>对属性列：权限后面加括号，表明该权限生效的属性列</p>\n<p>可传递：with grant option;</p>\n<p>收回权限：同grant，但有需要注意的地方：</p>\n<p>最后加 cascade/restrict：是否级联操作或约束操作。</p>\n<p>角色：</p>\n<p>创建：create role rolename ;</p>\n<p>授予权限同用户</p>\n<p>将角色权限授予用户：grant Rolename to User;</p>\n<p>解除权限：revoke Rolename from User;</p>\n<p>撤销授权同用户</p>\n<h3 id=\"强制：\"><a href=\"#强制：\" class=\"headerlink\" title=\"强制：\"></a>强制：</h3><p>设定若干级别：</p>\n<p>TS&gt;=S&gt;=C&gt;=P</p>\n<p>访问规则：</p>\n<p>主体许可证等级大于等于客体，可以读。</p>\n<p>主体许可证等级小于等于客体，可以写。</p>\n<p>第二条解释：高许可证主体没有办法写出一个更低等级的客体。</p>\n<p>视图：</p>\n<p>create view as(select……);</p>\n<p>grant select on view to ……;</p>\n<h2 id=\"完整性：\"><a href=\"#完整性：\" class=\"headerlink\" title=\"完整性：\"></a>完整性：</h2><p>实体完整性：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">create</span> <span class=\"hljs-keyword\">table</span> ...(<br>    ......<br>    Sname <span class=\"hljs-built_in\">char</span>(<span class=\"hljs-number\">20</span>) primary <span class=\"hljs-keyword\">key</span>;<span class=\"hljs-comment\">#在列级</span><br>    <br>    ......<br>    primary key (Sname);<span class=\"hljs-comment\">#在表级</span><br>    <br>    primary key (Sname,Sno);<span class=\"hljs-comment\">#在表级，多列</span><br><br>)<br></code></pre></td></tr></table></figure>\n\n<p>参照完整性：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">create</span> <span class=\"hljs-keyword\">table</span> S2(<br>    ......<br>    <span class=\"hljs-keyword\">foreign</span> <span class=\"hljs-keyword\">key</span> (Sno) <span class=\"hljs-keyword\">references</span> S(Sno)<span class=\"hljs-comment\">#表级定义参照完整性</span><br>    <span class=\"hljs-keyword\">on</span> <span class=\"hljs-keyword\">delete</span> <span class=\"hljs-keyword\">cascade</span> <span class=\"hljs-keyword\">on</span> <span class=\"hljs-keyword\">update</span> <span class=\"hljs-keyword\">cascade</span>,<span class=\"hljs-comment\">#级联删除、更新</span><br>)<br></code></pre></td></tr></table></figure>\n\n<p>约束语句：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">create</span> <span class=\"hljs-keyword\">table</span> R1(<br>    Sno <span class=\"hljs-built_in\">char</span>(<span class=\"hljs-number\">20</span>) <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">null</span>,<span class=\"hljs-comment\">#非空</span><br>    ...... <span class=\"hljs-keyword\">unique</span>,<span class=\"hljs-comment\">#列值唯一</span><br>    ......check( ......in(......集合))<br>    <br>    <span class=\"hljs-keyword\">check</span> (Ssex = <span class=\"hljs-string\">'female'</span><span class=\"hljs-keyword\">or</span> Sname <span class=\"hljs-keyword\">not</span> <span class=\"hljs-keyword\">like</span> <span class=\"hljs-string\">'Ms.%'</span>);<br>    <br>    <br>    <span class=\"hljs-comment\">#constraint</span><br>    Sno char(20) constraint C1 <span class=\"hljs-keyword\">check</span>(......);<span class=\"hljs-comment\">#形成一个名为C1的约束条件</span><br>    <br>    ......<br>    constraint C2 <span class=\"hljs-keyword\">check</span>(......)<span class=\"hljs-comment\">#在表级定义约束条件</span><br>)<br><br><span class=\"hljs-keyword\">alter</span> <span class=\"hljs-keyword\">table</span> R1 <span class=\"hljs-keyword\">drop</span> <span class=\"hljs-keyword\">constraint</span> C1;<span class=\"hljs-comment\">#删除约束条件</span><br><span class=\"hljs-keyword\">alter</span> <span class=\"hljs-keyword\">table</span> R1 <span class=\"hljs-keyword\">create</span> <span class=\"hljs-keyword\">constraint</span> c3 <span class=\"hljs-keyword\">check</span>(......);<span class=\"hljs-comment\">#创建约束条件，表级。</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"断言\"><a href=\"#断言\" class=\"headerlink\" title=\"断言\"></a>断言</h3><p>在操作时，使断言不为真的操作拒绝执行。</p>\n<p>创建断言：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">create</span> <span class=\"hljs-keyword\">assertion</span> assertion_name <span class=\"hljs-keyword\">check</span> (......);<br><br><span class=\"hljs-keyword\">create</span> <span class=\"hljs-keyword\">assertion</span> A1 <span class=\"hljs-keyword\">check</span>(<span class=\"hljs-number\">60</span>&gt;=<span class=\"hljs-keyword\">select</span> <span class=\"hljs-keyword\">count</span>(*) <span class=\"hljs-keyword\">from</span> SC <span class=\"hljs-keyword\">where</span> C = <span class=\"hljs-string\">'Cource1'</span>);<br><span class=\"hljs-keyword\">create</span> <span class=\"hljs-keyword\">assertion</span> A2 <span class=\"hljs-keyword\">check</span>(<span class=\"hljs-number\">60</span>&gt;=<span class=\"hljs-keyword\">all</span>(<span class=\"hljs-keyword\">select</span> <span class=\"hljs-keyword\">count</span>(*) <span class=\"hljs-keyword\">from</span> SC <span class=\"hljs-keyword\">group</span> <span class=\"hljs-keyword\">by</span> ...));<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"触发器：\"><a href=\"#触发器：\" class=\"headerlink\" title=\"触发器：\"></a>触发器：</h3><p>触发器用于在某条件由于操作成立时触发其他操作。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">create</span> <span class=\"hljs-keyword\">trigger</span> trigger_name <span class=\"hljs-keyword\">before</span>/<span class=\"hljs-keyword\">after</span> <span class=\"hljs-keyword\">update</span> <span class=\"hljs-keyword\">on</span> SC<br><span class=\"hljs-keyword\">referencing</span> <span class=\"hljs-keyword\">new</span>/<span class=\"hljs-keyword\">old</span> <span class=\"hljs-keyword\">row</span> <span class=\"hljs-keyword\">as</span> <span class=\"hljs-keyword\">variable</span><span class=\"hljs-comment\">#触发器内设变量：原值和新值</span><br><span class=\"hljs-keyword\">for</span> <span class=\"hljs-keyword\">each</span> <span class=\"hljs-keyword\">row</span> / <span class=\"hljs-keyword\">statement</span><span class=\"hljs-comment\">#每行触发还是每条语句触发</span><br><span class=\"hljs-keyword\">when</span>(......)<span class=\"hljs-comment\">#触发条件，比如new.grade&gt;=old.grade</span><br><span class=\"hljs-keyword\">insert</span> <span class=\"hljs-keyword\">into</span> Table_name(......) <span class=\"hljs-keyword\">values</span> (......)<br><br><span class=\"hljs-keyword\">drop</span> <span class=\"hljs-keyword\">trigger</span> trigger_name;<span class=\"hljs-comment\">#删除（删除对象用drop）</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"规范化\"><a href=\"#规范化\" class=\"headerlink\" title=\"规范化\"></a>规范化</h2><p>1NF：不可分割</p>\n<p>2NF：属性由一码确定</p>\n<p>3NF：没有不完全函数依赖，没有传递函数依赖</p>\n<p>BCNF：每个决定因素都有码</p>\n<p>4NF：不存在非平凡、非函数依赖的多值依赖</p>\n<p>规范化的实质：概念的单一化</p>\n<h2 id=\"数据库设计\"><a href=\"#数据库设计\" class=\"headerlink\" title=\"数据库设计\"></a>数据库设计</h2><h3 id=\"E-R图\"><a href=\"#E-R图\" class=\"headerlink\" title=\"E-R图\"></a>E-R图</h3><p>联系：菱形，两侧写是1-1、1-n还是n-1的依赖。</p>\n<p>属性：圆形，属性不能有属性（不可再分）</p>\n<p>实体：矩形</p>\n<h3 id=\"实体描述：\"><a href=\"#实体描述：\" class=\"headerlink\" title=\"实体描述：\"></a>实体描述：</h3><p>实体{实体的主码（下划线），属性1，属性2，属性3}</p>\n<h2 id=\"数据库的故障恢复、数据库的并发控制：\"><a href=\"#数据库的故障恢复、数据库的并发控制：\" class=\"headerlink\" title=\"数据库的故障恢复、数据库的并发控制：\"></a>数据库的故障恢复、数据库的并发控制：</h2><h3 id=\"事务\"><a href=\"#事务\" class=\"headerlink\" title=\"事务\"></a>事务</h3><p>事务：一个数据库操作序列，具有ACID特性，即原子性、一致性、隔离性、持续性（永久性）</p>\n<h3 id=\"数据库的日志文件\"><a href=\"#数据库的日志文件\" class=\"headerlink\" title=\"数据库的日志文件\"></a>数据库的日志文件</h3><p>日志文件记录：</p>\n<p>事务标识、操作类型、操作对象、操作前值、操作后值。</p>\n<h3 id=\"故障处理\"><a href=\"#故障处理\" class=\"headerlink\" title=\"故障处理\"></a>故障处理</h3><p>事务故障：反向扫描日志文件，撤销已经完成的操作</p>\n<p>系统故障：视事务完成情况选择是撤销还是重做，撤销：根据日志写更新前值；重做：根据日志写更新后值。</p>\n<p>介质故障：从恢复介质重装数据，然后重做已经完成的事务。</p>\n<h3 id=\"并发控制\"><a href=\"#并发控制\" class=\"headerlink\" title=\"并发控制\"></a>并发控制</h3><h4 id=\"封锁\"><a href=\"#封锁\" class=\"headerlink\" title=\"封锁\"></a>封锁</h4><p>X锁（写锁）：上X锁后，其他事务不能读写。</p>\n<p>S锁（读锁）：上S锁后，其他事务可以再上S锁，可以读，但是不能写。</p>\n<h5 id=\"封锁协议\"><a href=\"#封锁协议\" class=\"headerlink\" title=\"封锁协议\"></a>封锁协议</h5><p>一级封锁协议：事务在修改数据前必须加X锁，直至事务结束释放。</p>\n<p>二级封锁协议：在一级的基础上，事务读要上S锁，读完释放。</p>\n<p>三级封锁协议：在一级的基础上，事务读要上S锁，且事务结束时才释放（解决了不可重复读问题）。</p>\n<h3 id=\"活锁与死锁\"><a href=\"#活锁与死锁\" class=\"headerlink\" title=\"活锁与死锁\"></a>活锁与死锁</h3><p>活锁：事务由于等待其他事务结束无法完成（解决：先来先服务）。</p>\n<p>死锁：事务间循环等待导致数个事务不能结束（解决：采取措施避免或每隔一段时间诊断死锁并清除）。</p>\n<h3 id=\"意向锁（Intention-Lock）\"><a href=\"#意向锁（Intention-Lock）\" class=\"headerlink\" title=\"意向锁（Intention Lock）\"></a>意向锁（Intention Lock）</h3><p>IS锁：对一个对象加IS锁，意味着拟对其后裔结点加S锁。如果要对某个元组加S锁，必须先给关系加IS锁。</p>\n<p>IX锁：类似IS锁</p>\n<p>SIX锁：对这个对象加S锁，然后加IX锁，代表这个事务希望读这个对象，并可能更新个别元组。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"SQL语句\"><a href=\"#SQL语句\" class=\"headerlink\" title=\"SQL语句\"></a>SQL语句</h1><p>1、创建与删除</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-comment\">#数据库</span><br><span class=\"hljs-keyword\">create</span> <span class=\"hljs-keyword\">database</span> 数据库;<br><span class=\"hljs-keyword\">drop</span> <span class=\"hljs-keyword\">database</span> 数据库;<br><br><span class=\"hljs-comment\">#表</span><br><span class=\"hljs-keyword\">create</span> <span class=\"hljs-keyword\">table</span> table1 (<br>    学号 <span class=\"hljs-built_in\">char</span>(<span class=\"hljs-number\">4</span>) primary <span class=\"hljs-keyword\">key</span>,<br>    姓名 <span class=\"hljs-built_in\">char</span>(<span class=\"hljs-number\">20</span>) <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">null</span><br>)<br><br><span class=\"hljs-comment\">#索引</span><br><span class=\"hljs-keyword\">create</span> <span class=\"hljs-keyword\">unique</span> <span class=\"hljs-keyword\">index</span> idx <span class=\"hljs-keyword\">on</span> S(Sno <span class=\"hljs-keyword\">DESC</span>);<span class=\"hljs-comment\">#降序排列</span><br><br><span class=\"hljs-comment\">#视图</span><br><span class=\"hljs-keyword\">create</span> <span class=\"hljs-keyword\">view</span> view_name <span class=\"hljs-keyword\">as</span><br><span class=\"hljs-keyword\">select</span> * <span class=\"hljs-keyword\">from</span> s <span class=\"hljs-keyword\">where</span> city = <span class=\"hljs-string\">'New York'</span>;<br><span class=\"hljs-keyword\">drop</span> <span class=\"hljs-keyword\">view</span> view_name;<br><br><span class=\"hljs-comment\">#角色</span><br><span class=\"hljs-keyword\">create</span> <span class=\"hljs-keyword\">role</span> role_name;<br><span class=\"hljs-keyword\">grant</span> <span class=\"hljs-keyword\">all</span> <span class=\"hljs-keyword\">privileges</span> <span class=\"hljs-keyword\">on</span> S <span class=\"hljs-keyword\">to</span> role_name <span class=\"hljs-keyword\">with</span> <span class=\"hljs-keyword\">grant</span> <span class=\"hljs-keyword\">option</span>;<br><span class=\"hljs-keyword\">drop</span> <span class=\"hljs-keyword\">role</span> role_name;<br><br><span class=\"hljs-comment\">#索引：</span><br><span class=\"hljs-keyword\">create</span> [<span class=\"hljs-keyword\">unique</span>|cluster(聚集)]<span class=\"hljs-keyword\">index</span> Index_name <span class=\"hljs-keyword\">on</span> S(Sno);<br><span class=\"hljs-keyword\">drop</span> <span class=\"hljs-keyword\">index</span> index_name;<br></code></pre></td></tr></table></figure>\n\n<p>2、查询与修改</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-comment\">#基本查询</span><br><span class=\"hljs-keyword\">select</span> Sno <span class=\"hljs-keyword\">from</span> S;<br><br><span class=\"hljs-comment\">#带别名</span><br><span class=\"hljs-keyword\">select</span> Sno 学号 , Grade 成绩 , joinGroup 加入社团 <span class=\"hljs-keyword\">from</span> S;<br><br><span class=\"hljs-comment\">#带条件</span><br><span class=\"hljs-keyword\">select</span> Sno <span class=\"hljs-keyword\">from</span> S <span class=\"hljs-keyword\">where</span> Sage &gt; <span class=\"hljs-number\">18</span>;<br><span class=\"hljs-keyword\">select</span> Sno <span class=\"hljs-keyword\">from</span> S <span class=\"hljs-keyword\">where</span> Sage <span class=\"hljs-keyword\">between</span> <span class=\"hljs-number\">18</span> <span class=\"hljs-keyword\">and</span> <span class=\"hljs-number\">20</span>;<br><span class=\"hljs-keyword\">select</span> Sno <span class=\"hljs-keyword\">from</span> S <span class=\"hljs-keyword\">where</span> <span class=\"hljs-keyword\">name</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-keyword\">in</span> (<span class=\"hljs-string\">'Yukinoshita'</span>,<span class=\"hljs-string\">'Yui'</span>);<br><span class=\"hljs-keyword\">select</span> Sno <span class=\"hljs-keyword\">from</span> S <span class=\"hljs-keyword\">where</span> <span class=\"hljs-keyword\">name</span> <span class=\"hljs-keyword\">like</span> <span class=\"hljs-string\">'Yukinoshita%'</span>;<br><span class=\"hljs-keyword\">select</span> Sno <span class=\"hljs-keyword\">from</span> S <span class=\"hljs-keyword\">where</span> joinGroup <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">null</span>;<br><br><span class=\"hljs-comment\">#带排序</span><br><span class=\"hljs-keyword\">select</span> Sno <span class=\"hljs-keyword\">from</span> S <span class=\"hljs-keyword\">order</span> <span class=\"hljs-keyword\">by</span> Grade <span class=\"hljs-keyword\">DESC</span>;<br><span class=\"hljs-keyword\">select</span> top <span class=\"hljs-number\">10</span> Sno <span class=\"hljs-keyword\">from</span> S <span class=\"hljs-keyword\">order</span> <span class=\"hljs-keyword\">by</span> Grade <span class=\"hljs-keyword\">DESC</span>;<span class=\"hljs-comment\">#选择前10名的学生。</span><br><br><span class=\"hljs-comment\">#聚集</span><br><span class=\"hljs-keyword\">select</span> <span class=\"hljs-keyword\">avg</span>(Grade) <span class=\"hljs-keyword\">from</span> S;<br><span class=\"hljs-keyword\">select</span> <span class=\"hljs-keyword\">count</span>(*) <span class=\"hljs-keyword\">from</span> S;<br><span class=\"hljs-keyword\">select</span> <span class=\"hljs-keyword\">count</span>(<span class=\"hljs-keyword\">distinct</span> joinGroup) <span class=\"hljs-keyword\">from</span> S;<span class=\"hljs-comment\">#相同内容只计数一次</span><br><span class=\"hljs-keyword\">select</span> Sno <span class=\"hljs-keyword\">from</span> S <span class=\"hljs-keyword\">group</span> <span class=\"hljs-keyword\">by</span> Sno <span class=\"hljs-keyword\">having</span> <span class=\"hljs-keyword\">count</span>(<span class=\"hljs-keyword\">distinct</span> chooseClass) &gt; <span class=\"hljs-number\">3</span>;<br><br><span class=\"hljs-comment\">#连接</span><br><span class=\"hljs-keyword\">select</span> S.* , SC.* <span class=\"hljs-keyword\">from</span> S,SC <span class=\"hljs-keyword\">where</span> S.Cno = SC.Cno;<br><span class=\"hljs-keyword\">select</span> S.Sno , S.name , S.city , SPJ.qty <span class=\"hljs-keyword\">from</span> s , SPJ <br><span class=\"hljs-keyword\">where</span> S.Sno = SPJ.Sno <span class=\"hljs-keyword\">and</span> SPJ.Jno = <span class=\"hljs-string\">'J001'</span> <span class=\"hljs-keyword\">and</span> SPJ.qty &gt;<span class=\"hljs-number\">300</span>;<br><br><span class=\"hljs-comment\">#嵌套</span><br><span class=\"hljs-keyword\">select</span> Sname <span class=\"hljs-keyword\">from</span> S <span class=\"hljs-keyword\">where</span> Sno <span class=\"hljs-keyword\">in</span> (<span class=\"hljs-keyword\">select</span> Sno <span class=\"hljs-keyword\">from</span> SC <span class=\"hljs-keyword\">where</span> Cno = <span class=\"hljs-string\">'1001'</span>);<br></code></pre></td></tr></table></figure>\n\n<p>3、修改</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-comment\">#插入</span><br><span class=\"hljs-keyword\">insert</span> <span class=\"hljs-keyword\">into</span> S <span class=\"hljs-keyword\">values</span>(<span class=\"hljs-string\">'114514'</span>,<span class=\"hljs-string\">'李田所'</span>,<span class=\"hljs-string\">'C'</span>,<span class=\"hljs-string\">'回家部'</span>,<span class=\"hljs-string\">'24'</span>);<br><span class=\"hljs-keyword\">select</span> * <span class=\"hljs-keyword\">into</span> S <span class=\"hljs-keyword\">from</span> 下北泽高 <span class=\"hljs-keyword\">where</span> Sname <span class=\"hljs-keyword\">like</span> <span class=\"hljs-string\">'李田所'</span>;<span class=\"hljs-comment\">#把信息复制到大学</span><br><br><span class=\"hljs-comment\">#修改</span><br><span class=\"hljs-keyword\">update</span> S <span class=\"hljs-keyword\">set</span> Grade = <span class=\"hljs-string\">'B'</span> <span class=\"hljs-keyword\">where</span> Sno = <span class=\"hljs-number\">114514</span>;<br><br><span class=\"hljs-comment\">#删除</span><br><span class=\"hljs-keyword\">delete</span> <span class=\"hljs-keyword\">from</span> S <span class=\"hljs-keyword\">where</span> Sno = <span class=\"hljs-number\">114514</span>;<br><br><span class=\"hljs-comment\">#批量</span><br><span class=\"hljs-keyword\">update</span> S <span class=\"hljs-keyword\">set</span> Sage = Sage +<span class=\"hljs-number\">1</span> ;<br><br><span class=\"hljs-comment\">#带子查询</span><br><span class=\"hljs-keyword\">update</span> SPJ <span class=\"hljs-keyword\">set</span> QTY = QTY - <span class=\"hljs-number\">50</span> <span class=\"hljs-keyword\">where</span> JNO <span class=\"hljs-keyword\">in</span>( <span class=\"hljs-keyword\">select</span> JNO <span class=\"hljs-keyword\">from</span> J <br>                                           <span class=\"hljs-keyword\">where</span> City = <span class=\"hljs-string\">'天津'</span>);<br>  <br><span class=\"hljs-comment\">#alter</span><br><span class=\"hljs-keyword\">alter</span> <span class=\"hljs-keyword\">table</span> tableName <span class=\"hljs-keyword\">drop</span> <span class=\"hljs-keyword\">column</span> columnName;<span class=\"hljs-comment\">#删除列</span><br><span class=\"hljs-keyword\">alter</span> <span class=\"hljs-keyword\">table</span> tableName <span class=\"hljs-keyword\">add</span> <span class=\"hljs-keyword\">column</span> Sbirth <span class=\"hljs-built_in\">char</span>(<span class=\"hljs-number\">20</span>);<span class=\"hljs-comment\">#添加列</span><br><span class=\"hljs-keyword\">alter</span> <span class=\"hljs-keyword\">table</span> tableName <span class=\"hljs-keyword\">alter</span> <span class=\"hljs-keyword\">column</span> columnname datatype<span class=\"hljs-comment\"># 改变数据类型</span><br><br><span class=\"hljs-comment\">#drop</span><br><span class=\"hljs-keyword\">drop</span> <span class=\"hljs-keyword\">table</span> <span class=\"hljs-keyword\">user</span> <span class=\"hljs-keyword\">index</span> <span class=\"hljs-keyword\">role</span> ......;<span class=\"hljs-comment\">#drop一般删除数据结构或对象（包括属性列）\t\t，</span><br><span class=\"hljs-comment\">#而delete则倾向于删除对象中的元组。</span><br></code></pre></td></tr></table></figure>\n\n\n\n<p>4、视图</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-comment\">#创建</span><br><span class=\"hljs-keyword\">create</span> <span class=\"hljs-keyword\">view</span> S_BJ_VIEW <span class=\"hljs-keyword\">as</span> <br><span class=\"hljs-keyword\">select</span> * <span class=\"hljs-keyword\">from</span> S <span class=\"hljs-keyword\">where</span> city = <span class=\"hljs-string\">'北京'</span> <span class=\"hljs-keyword\">with</span> <span class=\"hljs-keyword\">check</span> <span class=\"hljs-keyword\">option</span>;<br><br><span class=\"hljs-comment\">#删除</span><br><span class=\"hljs-keyword\">drop</span> <span class=\"hljs-keyword\">view</span> ViewName;<br><br><span class=\"hljs-comment\">#查询</span><br><span class=\"hljs-keyword\">select</span> Sno,Sname <span class=\"hljs-keyword\">from</span> S_BJ_VIEW <span class=\"hljs-keyword\">where</span> STAT &gt; <span class=\"hljs-string\">'B'</span>;<br><span class=\"hljs-keyword\">select</span> * <span class=\"hljs-keyword\">from</span> S_AVGQTY <span class=\"hljs-keyword\">where</span> QAVG &gt;=<span class=\"hljs-number\">300</span>;<br><br><span class=\"hljs-comment\">#视图消解法：</span><br><span class=\"hljs-comment\">#定义的视图：</span><br><span class=\"hljs-keyword\">create</span> <span class=\"hljs-keyword\">view</span> S_AVGQTY(SNO,PNO,QAVG)<br><span class=\"hljs-keyword\">as</span> <span class=\"hljs-keyword\">select</span> SNO,PNO,<span class=\"hljs-keyword\">AVG</span>(QTY) <span class=\"hljs-keyword\">from</span> SPJ <span class=\"hljs-keyword\">group</span> <span class=\"hljs-keyword\">by</span> SNO,PNO;<br><span class=\"hljs-comment\">#查询语句：select * from S_AVGQTY where QAVG &gt;=300;</span><br><span class=\"hljs-keyword\">select</span> * <span class=\"hljs-keyword\">from</span> S_AVGQTY <span class=\"hljs-keyword\">where</span> QAVG &gt;=<span class=\"hljs-number\">300</span>;<br><span class=\"hljs-comment\">#转换后：</span><br><span class=\"hljs-keyword\">select</span> SNO,PNO,<span class=\"hljs-keyword\">AVG</span>(QTY) <span class=\"hljs-keyword\">from</span> SPJ <span class=\"hljs-keyword\">group</span> <span class=\"hljs-keyword\">by</span> SNO,PNO <span class=\"hljs-keyword\">having</span> <span class=\"hljs-keyword\">AVG</span>(QTY)&gt;=<span class=\"hljs-number\">300</span>;<br><br><span class=\"hljs-comment\">#更新数据：</span><br><span class=\"hljs-keyword\">insert</span> <span class=\"hljs-keyword\">into</span> S_BJ_VIEW <span class=\"hljs-keyword\">value</span>(<span class=\"hljs-string\">'S7'</span>,<span class=\"hljs-string\">'北京114514电子厂'</span>,<span class=\"hljs-string\">'B'</span>,<span class=\"hljs-string\">'北京'</span>);<br><br><span class=\"hljs-comment\">#删除：</span><br><span class=\"hljs-keyword\">delete</span> <span class=\"hljs-keyword\">from</span> S_BJ_VIEW <span class=\"hljs-keyword\">where</span> SNAME = <span class=\"hljs-string\">'北京114514电子厂'</span>;<br></code></pre></td></tr></table></figure>\n\n<p>5、安全性</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-comment\">#创建用户</span><br><span class=\"hljs-keyword\">create</span> <span class=\"hljs-keyword\">user</span> userName <span class=\"hljs-keyword\">for</span> login loginName <span class=\"hljs-keyword\">with</span> default_schema = schName;<br><span class=\"hljs-keyword\">create</span> login loginName <span class=\"hljs-keyword\">with</span> <span class=\"hljs-keyword\">password</span> = ..., default_database = DB_NAME;<br><br><span class=\"hljs-comment\">#创建角色</span><br><span class=\"hljs-keyword\">create</span> <span class=\"hljs-keyword\">role</span> RoleName; <br><span class=\"hljs-keyword\">grant</span> RoleName <span class=\"hljs-keyword\">to</span> UserName <span class=\"hljs-keyword\">with</span> <span class=\"hljs-keyword\">admin</span> <span class=\"hljs-keyword\">option</span>;<br><br><span class=\"hljs-comment\">#权限管理</span><br><span class=\"hljs-keyword\">grant</span> <span class=\"hljs-keyword\">all</span> <span class=\"hljs-keyword\">privileges</span> <span class=\"hljs-keyword\">on</span> S <span class=\"hljs-keyword\">to</span> Rolename/Username; <span class=\"hljs-comment\">#with grant option:可以传递权限</span><br><span class=\"hljs-keyword\">revoke</span> <span class=\"hljs-keyword\">all</span> <span class=\"hljs-keyword\">privileges</span> <span class=\"hljs-keyword\">on</span> S <span class=\"hljs-keyword\">from</span> Rolename/Username;<br>deny <span class=\"hljs-keyword\">update</span> <span class=\"hljs-keyword\">on</span> S <span class=\"hljs-keyword\">to</span> Rolename/Username;<span class=\"hljs-comment\">#拒绝这一权限，使其加入其他有update权限组后仍然不能执行该操作。</span><br></code></pre></td></tr></table></figure>\n\n<p>6、完整性：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-comment\">#主码定义：</span><br><span class=\"hljs-keyword\">create</span> <span class=\"hljs-keyword\">table</span> s(<br>    Sno <span class=\"hljs-built_in\">char</span>(<span class=\"hljs-number\">4</span>) primary <span class=\"hljs-keyword\">key</span>;<br>    ......<br>)<br><br><span class=\"hljs-keyword\">create</span> <span class=\"hljs-keyword\">table</span> s(<br>    ......<br>    primary <span class=\"hljs-keyword\">key</span> (Sno);<br>)<br><span class=\"hljs-keyword\">create</span> <span class=\"hljs-keyword\">table</span> s (<br>\t......<br>    primary <span class=\"hljs-keyword\">key</span>(Sno,Pno,Jno);<br>)<br><br><span class=\"hljs-comment\">#参照完整性：</span><br><span class=\"hljs-keyword\">create</span> <span class=\"hljs-keyword\">table</span> s(<br>\t......<br>    <span class=\"hljs-keyword\">foreign</span> <span class=\"hljs-keyword\">key</span> (SNO) <span class=\"hljs-keyword\">references</span> s(SNO);<br>)<br><br><span class=\"hljs-comment\">#其他完整性：</span><br>not null <span class=\"hljs-comment\">#非空</span><br>unique <span class=\"hljs-comment\"># 唯一</span><br>default 'defaultValue' <span class=\"hljs-comment\">#默认值</span><br><br><span class=\"hljs-comment\">#check约束</span><br><span class=\"hljs-keyword\">create</span> <span class=\"hljs-keyword\">table</span> s(<br>\t......<br>    STAT <span class=\"hljs-built_in\">Char</span>(<span class=\"hljs-number\">2</span>) <span class=\"hljs-keyword\">check</span>(STAT <span class=\"hljs-keyword\">in</span> (<span class=\"hljs-string\">'A'</span>,<span class=\"hljs-string\">'B'</span>,<span class=\"hljs-string\">'C'</span>)),<br>    ......<br>)<br><br><span class=\"hljs-comment\">#constraint命令</span><br><span class=\"hljs-keyword\">create</span> <span class=\"hljs-keyword\">table</span> s (<br>\t......<br>    Sname <span class=\"hljs-built_in\">char</span>(<span class=\"hljs-number\">20</span>) <span class=\"hljs-keyword\">constraint</span> c1 <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">null</span> <span class=\"hljs-comment\"># 此时c1这一完整性约束(constraint)的值为not null</span><br>)<br><span class=\"hljs-keyword\">alter</span> <span class=\"hljs-keyword\">table</span> s <span class=\"hljs-keyword\">drop</span> <span class=\"hljs-keyword\">constraint</span> c1;<br><span class=\"hljs-keyword\">alter</span> <span class=\"hljs-keyword\">table</span> s <span class=\"hljs-keyword\">add</span> <span class=\"hljs-keyword\">constraint</span> c2 <span class=\"hljs-keyword\">check</span>(......);<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"数据库概念复习\"><a href=\"#数据库概念复习\" class=\"headerlink\" title=\"数据库概念复习\"></a>数据库概念复习</h1><h2 id=\"关系运算\"><a href=\"#关系运算\" class=\"headerlink\" title=\"关系运算\"></a>关系运算</h2><p>1、选择</p>\n<p>$$\\sigma(R)_F={t|t \\in R\\wedge F(t) = true}$$</p>\n<p>2、投影</p>\n<p>$$\\Pi_A(R)={t[A]|t \\in R}$$</p>\n<p>3、连接</p>\n<p>等值连接：选取笛卡尔级中等值的那些元组</p>\n<p>自然连接：在等值连接的基础上去掉重复的属性列</p>\n<p>4、除运算</p>\n<p>R÷S:</p>\n<p>用于选出以下内容：</p>\n<p>属性：在R不在S的属性</p>\n<p>元组：删去的属性对得上在R中的值</p>\n<p>比如：</p>\n<p>R:</p>\n<p>Sno Jno</p>\n<p>a      1</p>\n<p>b      2</p>\n<p>c      3</p>\n<p>S:</p>\n<p>1</p>\n<p>3</p>\n<p>R÷S:</p>\n<p>Sno</p>\n<p>a</p>\n<p>c</p>\n<p><strong>其他较为重要的运算：交并减、笛卡尔积</strong></p>\n<h2 id=\"数据库安全\"><a href=\"#数据库安全\" class=\"headerlink\" title=\"数据库安全\"></a>数据库安全</h2><h3 id=\"自主：\"><a href=\"#自主：\" class=\"headerlink\" title=\"自主：\"></a>自主：</h3><p>授予权限的类型：</p>\n<table>\n<thead>\n<tr>\n<th>基本表、视图</th>\n<th>属性列</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>select insert update delete references all privileges</td>\n<td>select insert update references all privileges</td>\n</tr>\n</tbody></table>\n<p>一个简单的例子：</p>\n<p>grant update(Sno),select on table SC to User1;</p>\n<p>对属性列：权限后面加括号，表明该权限生效的属性列</p>\n<p>可传递：with grant option;</p>\n<p>收回权限：同grant，但有需要注意的地方：</p>\n<p>最后加 cascade/restrict：是否级联操作或约束操作。</p>\n<p>角色：</p>\n<p>创建：create role rolename ;</p>\n<p>授予权限同用户</p>\n<p>将角色权限授予用户：grant Rolename to User;</p>\n<p>解除权限：revoke Rolename from User;</p>\n<p>撤销授权同用户</p>\n<h3 id=\"强制：\"><a href=\"#强制：\" class=\"headerlink\" title=\"强制：\"></a>强制：</h3><p>设定若干级别：</p>\n<p>TS&gt;=S&gt;=C&gt;=P</p>\n<p>访问规则：</p>\n<p>主体许可证等级大于等于客体，可以读。</p>\n<p>主体许可证等级小于等于客体，可以写。</p>\n<p>第二条解释：高许可证主体没有办法写出一个更低等级的客体。</p>\n<p>视图：</p>\n<p>create view as(select……);</p>\n<p>grant select on view to ……;</p>\n<h2 id=\"完整性：\"><a href=\"#完整性：\" class=\"headerlink\" title=\"完整性：\"></a>完整性：</h2><p>实体完整性：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">create</span> <span class=\"hljs-keyword\">table</span> ...(<br>    ......<br>    Sname <span class=\"hljs-built_in\">char</span>(<span class=\"hljs-number\">20</span>) primary <span class=\"hljs-keyword\">key</span>;<span class=\"hljs-comment\">#在列级</span><br>    <br>    ......<br>    primary key (Sname);<span class=\"hljs-comment\">#在表级</span><br>    <br>    primary key (Sname,Sno);<span class=\"hljs-comment\">#在表级，多列</span><br><br>)<br></code></pre></td></tr></table></figure>\n\n<p>参照完整性：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">create</span> <span class=\"hljs-keyword\">table</span> S2(<br>    ......<br>    <span class=\"hljs-keyword\">foreign</span> <span class=\"hljs-keyword\">key</span> (Sno) <span class=\"hljs-keyword\">references</span> S(Sno)<span class=\"hljs-comment\">#表级定义参照完整性</span><br>    <span class=\"hljs-keyword\">on</span> <span class=\"hljs-keyword\">delete</span> <span class=\"hljs-keyword\">cascade</span> <span class=\"hljs-keyword\">on</span> <span class=\"hljs-keyword\">update</span> <span class=\"hljs-keyword\">cascade</span>,<span class=\"hljs-comment\">#级联删除、更新</span><br>)<br></code></pre></td></tr></table></figure>\n\n<p>约束语句：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">create</span> <span class=\"hljs-keyword\">table</span> R1(<br>    Sno <span class=\"hljs-built_in\">char</span>(<span class=\"hljs-number\">20</span>) <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">null</span>,<span class=\"hljs-comment\">#非空</span><br>    ...... <span class=\"hljs-keyword\">unique</span>,<span class=\"hljs-comment\">#列值唯一</span><br>    ......check( ......in(......集合))<br>    <br>    <span class=\"hljs-keyword\">check</span> (Ssex = <span class=\"hljs-string\">'female'</span><span class=\"hljs-keyword\">or</span> Sname <span class=\"hljs-keyword\">not</span> <span class=\"hljs-keyword\">like</span> <span class=\"hljs-string\">'Ms.%'</span>);<br>    <br>    <br>    <span class=\"hljs-comment\">#constraint</span><br>    Sno char(20) constraint C1 <span class=\"hljs-keyword\">check</span>(......);<span class=\"hljs-comment\">#形成一个名为C1的约束条件</span><br>    <br>    ......<br>    constraint C2 <span class=\"hljs-keyword\">check</span>(......)<span class=\"hljs-comment\">#在表级定义约束条件</span><br>)<br><br><span class=\"hljs-keyword\">alter</span> <span class=\"hljs-keyword\">table</span> R1 <span class=\"hljs-keyword\">drop</span> <span class=\"hljs-keyword\">constraint</span> C1;<span class=\"hljs-comment\">#删除约束条件</span><br><span class=\"hljs-keyword\">alter</span> <span class=\"hljs-keyword\">table</span> R1 <span class=\"hljs-keyword\">create</span> <span class=\"hljs-keyword\">constraint</span> c3 <span class=\"hljs-keyword\">check</span>(......);<span class=\"hljs-comment\">#创建约束条件，表级。</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"断言\"><a href=\"#断言\" class=\"headerlink\" title=\"断言\"></a>断言</h3><p>在操作时，使断言不为真的操作拒绝执行。</p>\n<p>创建断言：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">create</span> <span class=\"hljs-keyword\">assertion</span> assertion_name <span class=\"hljs-keyword\">check</span> (......);<br><br><span class=\"hljs-keyword\">create</span> <span class=\"hljs-keyword\">assertion</span> A1 <span class=\"hljs-keyword\">check</span>(<span class=\"hljs-number\">60</span>&gt;=<span class=\"hljs-keyword\">select</span> <span class=\"hljs-keyword\">count</span>(*) <span class=\"hljs-keyword\">from</span> SC <span class=\"hljs-keyword\">where</span> C = <span class=\"hljs-string\">'Cource1'</span>);<br><span class=\"hljs-keyword\">create</span> <span class=\"hljs-keyword\">assertion</span> A2 <span class=\"hljs-keyword\">check</span>(<span class=\"hljs-number\">60</span>&gt;=<span class=\"hljs-keyword\">all</span>(<span class=\"hljs-keyword\">select</span> <span class=\"hljs-keyword\">count</span>(*) <span class=\"hljs-keyword\">from</span> SC <span class=\"hljs-keyword\">group</span> <span class=\"hljs-keyword\">by</span> ...));<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"触发器：\"><a href=\"#触发器：\" class=\"headerlink\" title=\"触发器：\"></a>触发器：</h3><p>触发器用于在某条件由于操作成立时触发其他操作。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">create</span> <span class=\"hljs-keyword\">trigger</span> trigger_name <span class=\"hljs-keyword\">before</span>/<span class=\"hljs-keyword\">after</span> <span class=\"hljs-keyword\">update</span> <span class=\"hljs-keyword\">on</span> SC<br><span class=\"hljs-keyword\">referencing</span> <span class=\"hljs-keyword\">new</span>/<span class=\"hljs-keyword\">old</span> <span class=\"hljs-keyword\">row</span> <span class=\"hljs-keyword\">as</span> <span class=\"hljs-keyword\">variable</span><span class=\"hljs-comment\">#触发器内设变量：原值和新值</span><br><span class=\"hljs-keyword\">for</span> <span class=\"hljs-keyword\">each</span> <span class=\"hljs-keyword\">row</span> / <span class=\"hljs-keyword\">statement</span><span class=\"hljs-comment\">#每行触发还是每条语句触发</span><br><span class=\"hljs-keyword\">when</span>(......)<span class=\"hljs-comment\">#触发条件，比如new.grade&gt;=old.grade</span><br><span class=\"hljs-keyword\">insert</span> <span class=\"hljs-keyword\">into</span> Table_name(......) <span class=\"hljs-keyword\">values</span> (......)<br><br><span class=\"hljs-keyword\">drop</span> <span class=\"hljs-keyword\">trigger</span> trigger_name;<span class=\"hljs-comment\">#删除（删除对象用drop）</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"规范化\"><a href=\"#规范化\" class=\"headerlink\" title=\"规范化\"></a>规范化</h2><p>1NF：不可分割</p>\n<p>2NF：属性由一码确定</p>\n<p>3NF：没有不完全函数依赖，没有传递函数依赖</p>\n<p>BCNF：每个决定因素都有码</p>\n<p>4NF：不存在非平凡、非函数依赖的多值依赖</p>\n<p>规范化的实质：概念的单一化</p>\n<h2 id=\"数据库设计\"><a href=\"#数据库设计\" class=\"headerlink\" title=\"数据库设计\"></a>数据库设计</h2><h3 id=\"E-R图\"><a href=\"#E-R图\" class=\"headerlink\" title=\"E-R图\"></a>E-R图</h3><p>联系：菱形，两侧写是1-1、1-n还是n-1的依赖。</p>\n<p>属性：圆形，属性不能有属性（不可再分）</p>\n<p>实体：矩形</p>\n<h3 id=\"实体描述：\"><a href=\"#实体描述：\" class=\"headerlink\" title=\"实体描述：\"></a>实体描述：</h3><p>实体{实体的主码（下划线），属性1，属性2，属性3}</p>\n<h2 id=\"数据库的故障恢复、数据库的并发控制：\"><a href=\"#数据库的故障恢复、数据库的并发控制：\" class=\"headerlink\" title=\"数据库的故障恢复、数据库的并发控制：\"></a>数据库的故障恢复、数据库的并发控制：</h2><h3 id=\"事务\"><a href=\"#事务\" class=\"headerlink\" title=\"事务\"></a>事务</h3><p>事务：一个数据库操作序列，具有ACID特性，即原子性、一致性、隔离性、持续性（永久性）</p>\n<h3 id=\"数据库的日志文件\"><a href=\"#数据库的日志文件\" class=\"headerlink\" title=\"数据库的日志文件\"></a>数据库的日志文件</h3><p>日志文件记录：</p>\n<p>事务标识、操作类型、操作对象、操作前值、操作后值。</p>\n<h3 id=\"故障处理\"><a href=\"#故障处理\" class=\"headerlink\" title=\"故障处理\"></a>故障处理</h3><p>事务故障：反向扫描日志文件，撤销已经完成的操作</p>\n<p>系统故障：视事务完成情况选择是撤销还是重做，撤销：根据日志写更新前值；重做：根据日志写更新后值。</p>\n<p>介质故障：从恢复介质重装数据，然后重做已经完成的事务。</p>\n<h3 id=\"并发控制\"><a href=\"#并发控制\" class=\"headerlink\" title=\"并发控制\"></a>并发控制</h3><h4 id=\"封锁\"><a href=\"#封锁\" class=\"headerlink\" title=\"封锁\"></a>封锁</h4><p>X锁（写锁）：上X锁后，其他事务不能读写。</p>\n<p>S锁（读锁）：上S锁后，其他事务可以再上S锁，可以读，但是不能写。</p>\n<h5 id=\"封锁协议\"><a href=\"#封锁协议\" class=\"headerlink\" title=\"封锁协议\"></a>封锁协议</h5><p>一级封锁协议：事务在修改数据前必须加X锁，直至事务结束释放。</p>\n<p>二级封锁协议：在一级的基础上，事务读要上S锁，读完释放。</p>\n<p>三级封锁协议：在一级的基础上，事务读要上S锁，且事务结束时才释放（解决了不可重复读问题）。</p>\n<h3 id=\"活锁与死锁\"><a href=\"#活锁与死锁\" class=\"headerlink\" title=\"活锁与死锁\"></a>活锁与死锁</h3><p>活锁：事务由于等待其他事务结束无法完成（解决：先来先服务）。</p>\n<p>死锁：事务间循环等待导致数个事务不能结束（解决：采取措施避免或每隔一段时间诊断死锁并清除）。</p>\n<h3 id=\"意向锁（Intention-Lock）\"><a href=\"#意向锁（Intention-Lock）\" class=\"headerlink\" title=\"意向锁（Intention Lock）\"></a>意向锁（Intention Lock）</h3><p>IS锁：对一个对象加IS锁，意味着拟对其后裔结点加S锁。如果要对某个元组加S锁，必须先给关系加IS锁。</p>\n<p>IX锁：类似IS锁</p>\n<p>SIX锁：对这个对象加S锁，然后加IX锁，代表这个事务希望读这个对象，并可能更新个别元组。</p>\n"},{"layout":"post","title":"机器学习","intro":"","date":"2021-08-03T04:00:01.000Z","author":"Makinohara","catalog":true,"_content":"\n# 入门\n\n机器学习的基本方法：任务T在得到经验E后提高性能度量P\n\n## 监督学习\n\n监督学习：找正确答案\n\n1、回归问题：找函数，预测连续值\n\n2、分类问题：预测离散值\n\n## 无监督学习\n\n无监督学习：自己找数据的结构和规律（并不提前给出正确答案）\n\n聚类算法：将不同的内容整合为几个集合\n\n## 神经网络\n\n神经网络是一个可以学习模式的函数集合。\n\n## 卷积\n\n通过某种方式处理图像，使之呈现出某种特征\n\n## 池化\n\n处理图像的一种方式，取某些像素的最大、平均值或其他特征值\n\n# TensorFlow\n\n### 实例1：图像分类\n\n```python\nimport tensorflow as tf\nfrom tensorflow import keras\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n#回调，当准确度达到80%时停止训练\nclass callBack(tf.keras.callbacks.Callback):\n    def on_epoch_end(self, epoch, logs={}):\n        if(logs.get('loss')<0.2):\n            print('\\nReached 80%')\n            self.model.stop_training = True\ncb1 = callBack()\n\n#导入Fashion数据集\nmnist = tf.keras.datasets.fashion_mnist\n(training_images, training_labels), (test_images, test_labels) = mnist.load_data()\n\n#这里的没什么用\nplt.imshow(training_images[0])\nprint(training_images[0])\nprint((training_labels[0]))\n\n#将像素0-255表示转为更容易处理的0-1表示\ntraining_images = training_images/255\ntest_images = test_images/255\n\n#升维，以便卷积\ntraining_images = np.expand_dims(training_images, axis=3)\ntest_images = np.expand_dims(test_images, axis=3)\n\n#神经网络\nmodel = tf.keras.models.Sequential([\n    tf.keras.layers.Conv2D(64,(3,3),activation='relu',input_shape=(28,28,1)),#卷积1\n    tf.keras.layers.MaxPooling2D(2,2),#最大池化\n    tf.keras.layers.Conv2D(64,(3,3),activation='relu'),#卷积2\n    tf.keras.layers.MaxPooling2D(2,2),#最大池化\n    tf.keras.layers.Flatten(),\n    tf.keras.layers.Dense(256,activation=tf.nn.relu),#全连接层\n    tf.keras.layers.Dense(10,activation=tf.nn.softmax)]\n)\n\n#训练\nmodel.compile(optimizer=tf.optimizers.Adam(),\n              loss='sparse_categorical_crossentropy')\nmodel.summary()\nmodel.fit(training_images,training_labels,epochs=15,\n          callbacks=[cb1]\n          )\n\n#评估结果\nmodel.evaluate(test_images,test_labels)\n```\n\n","source":"_posts/2021-8-3-ML.markdown","raw":"---\nlayout:     post\ntitle:      机器学习\nintro:   \"\"\ndate:       2021-8-3 12:00:01\nauthor:     \"Makinohara\"\ncatalog: true\ntags:\n    - 科研应用\n    \n---\n\n# 入门\n\n机器学习的基本方法：任务T在得到经验E后提高性能度量P\n\n## 监督学习\n\n监督学习：找正确答案\n\n1、回归问题：找函数，预测连续值\n\n2、分类问题：预测离散值\n\n## 无监督学习\n\n无监督学习：自己找数据的结构和规律（并不提前给出正确答案）\n\n聚类算法：将不同的内容整合为几个集合\n\n## 神经网络\n\n神经网络是一个可以学习模式的函数集合。\n\n## 卷积\n\n通过某种方式处理图像，使之呈现出某种特征\n\n## 池化\n\n处理图像的一种方式，取某些像素的最大、平均值或其他特征值\n\n# TensorFlow\n\n### 实例1：图像分类\n\n```python\nimport tensorflow as tf\nfrom tensorflow import keras\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n#回调，当准确度达到80%时停止训练\nclass callBack(tf.keras.callbacks.Callback):\n    def on_epoch_end(self, epoch, logs={}):\n        if(logs.get('loss')<0.2):\n            print('\\nReached 80%')\n            self.model.stop_training = True\ncb1 = callBack()\n\n#导入Fashion数据集\nmnist = tf.keras.datasets.fashion_mnist\n(training_images, training_labels), (test_images, test_labels) = mnist.load_data()\n\n#这里的没什么用\nplt.imshow(training_images[0])\nprint(training_images[0])\nprint((training_labels[0]))\n\n#将像素0-255表示转为更容易处理的0-1表示\ntraining_images = training_images/255\ntest_images = test_images/255\n\n#升维，以便卷积\ntraining_images = np.expand_dims(training_images, axis=3)\ntest_images = np.expand_dims(test_images, axis=3)\n\n#神经网络\nmodel = tf.keras.models.Sequential([\n    tf.keras.layers.Conv2D(64,(3,3),activation='relu',input_shape=(28,28,1)),#卷积1\n    tf.keras.layers.MaxPooling2D(2,2),#最大池化\n    tf.keras.layers.Conv2D(64,(3,3),activation='relu'),#卷积2\n    tf.keras.layers.MaxPooling2D(2,2),#最大池化\n    tf.keras.layers.Flatten(),\n    tf.keras.layers.Dense(256,activation=tf.nn.relu),#全连接层\n    tf.keras.layers.Dense(10,activation=tf.nn.softmax)]\n)\n\n#训练\nmodel.compile(optimizer=tf.optimizers.Adam(),\n              loss='sparse_categorical_crossentropy')\nmodel.summary()\nmodel.fit(training_images,training_labels,epochs=15,\n          callbacks=[cb1]\n          )\n\n#评估结果\nmodel.evaluate(test_images,test_labels)\n```\n\n","slug":"2021-8-3-ML","published":1,"updated":"2021-10-24T02:04:35.830Z","comments":1,"photos":[],"link":"","_id":"ckv4pvow0000h24pe8lodccyp","content":"<h1 id=\"入门\"><a href=\"#入门\" class=\"headerlink\" title=\"入门\"></a>入门</h1><p>机器学习的基本方法：任务T在得到经验E后提高性能度量P</p>\n<h2 id=\"监督学习\"><a href=\"#监督学习\" class=\"headerlink\" title=\"监督学习\"></a>监督学习</h2><p>监督学习：找正确答案</p>\n<p>1、回归问题：找函数，预测连续值</p>\n<p>2、分类问题：预测离散值</p>\n<h2 id=\"无监督学习\"><a href=\"#无监督学习\" class=\"headerlink\" title=\"无监督学习\"></a>无监督学习</h2><p>无监督学习：自己找数据的结构和规律（并不提前给出正确答案）</p>\n<p>聚类算法：将不同的内容整合为几个集合</p>\n<h2 id=\"神经网络\"><a href=\"#神经网络\" class=\"headerlink\" title=\"神经网络\"></a>神经网络</h2><p>神经网络是一个可以学习模式的函数集合。</p>\n<h2 id=\"卷积\"><a href=\"#卷积\" class=\"headerlink\" title=\"卷积\"></a>卷积</h2><p>通过某种方式处理图像，使之呈现出某种特征</p>\n<h2 id=\"池化\"><a href=\"#池化\" class=\"headerlink\" title=\"池化\"></a>池化</h2><p>处理图像的一种方式，取某些像素的最大、平均值或其他特征值</p>\n<h1 id=\"TensorFlow\"><a href=\"#TensorFlow\" class=\"headerlink\" title=\"TensorFlow\"></a>TensorFlow</h1><h3 id=\"实例1：图像分类\"><a href=\"#实例1：图像分类\" class=\"headerlink\" title=\"实例1：图像分类\"></a>实例1：图像分类</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> tensorflow <span class=\"hljs-keyword\">as</span> tf<br><span class=\"hljs-keyword\">from</span> tensorflow <span class=\"hljs-keyword\">import</span> keras<br><span class=\"hljs-keyword\">import</span> matplotlib.pyplot <span class=\"hljs-keyword\">as</span> plt<br><span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np<br><br><span class=\"hljs-comment\">#回调，当准确度达到80%时停止训练</span><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">callBack</span><span class=\"hljs-params\">(tf.keras.callbacks.Callback)</span>:</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">on_epoch_end</span><span class=\"hljs-params\">(self, epoch, logs=&#123;&#125;)</span>:</span><br>        <span class=\"hljs-keyword\">if</span>(logs.get(<span class=\"hljs-string\">'loss'</span>)&lt;<span class=\"hljs-number\">0.2</span>):<br>            print(<span class=\"hljs-string\">'\\nReached 80%'</span>)<br>            self.model.stop_training = <span class=\"hljs-literal\">True</span><br>cb1 = callBack()<br><br><span class=\"hljs-comment\">#导入Fashion数据集</span><br>mnist = tf.keras.datasets.fashion_mnist<br>(training_images, training_labels), (test_images, test_labels) = mnist.load_data()<br><br><span class=\"hljs-comment\">#这里的没什么用</span><br>plt.imshow(training_images[<span class=\"hljs-number\">0</span>])<br>print(training_images[<span class=\"hljs-number\">0</span>])<br>print((training_labels[<span class=\"hljs-number\">0</span>]))<br><br><span class=\"hljs-comment\">#将像素0-255表示转为更容易处理的0-1表示</span><br>training_images = training_images/<span class=\"hljs-number\">255</span><br>test_images = test_images/<span class=\"hljs-number\">255</span><br><br><span class=\"hljs-comment\">#升维，以便卷积</span><br>training_images = np.expand_dims(training_images, axis=<span class=\"hljs-number\">3</span>)<br>test_images = np.expand_dims(test_images, axis=<span class=\"hljs-number\">3</span>)<br><br><span class=\"hljs-comment\">#神经网络</span><br>model = tf.keras.models.Sequential([<br>    tf.keras.layers.Conv2D(<span class=\"hljs-number\">64</span>,(<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">3</span>),activation=<span class=\"hljs-string\">'relu'</span>,input_shape=(<span class=\"hljs-number\">28</span>,<span class=\"hljs-number\">28</span>,<span class=\"hljs-number\">1</span>)),<span class=\"hljs-comment\">#卷积1</span><br>    tf.keras.layers.MaxPooling2D(<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">2</span>),<span class=\"hljs-comment\">#最大池化</span><br>    tf.keras.layers.Conv2D(<span class=\"hljs-number\">64</span>,(<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">3</span>),activation=<span class=\"hljs-string\">'relu'</span>),<span class=\"hljs-comment\">#卷积2</span><br>    tf.keras.layers.MaxPooling2D(<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">2</span>),<span class=\"hljs-comment\">#最大池化</span><br>    tf.keras.layers.Flatten(),<br>    tf.keras.layers.Dense(<span class=\"hljs-number\">256</span>,activation=tf.nn.relu),<span class=\"hljs-comment\">#全连接层</span><br>    tf.keras.layers.Dense(<span class=\"hljs-number\">10</span>,activation=tf.nn.softmax)]<br>)<br><br><span class=\"hljs-comment\">#训练</span><br>model.compile(optimizer=tf.optimizers.Adam(),<br>              loss=<span class=\"hljs-string\">'sparse_categorical_crossentropy'</span>)<br>model.summary()<br>model.fit(training_images,training_labels,epochs=<span class=\"hljs-number\">15</span>,<br>          callbacks=[cb1]<br>          )<br><br><span class=\"hljs-comment\">#评估结果</span><br>model.evaluate(test_images,test_labels)<br></code></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"入门\"><a href=\"#入门\" class=\"headerlink\" title=\"入门\"></a>入门</h1><p>机器学习的基本方法：任务T在得到经验E后提高性能度量P</p>\n<h2 id=\"监督学习\"><a href=\"#监督学习\" class=\"headerlink\" title=\"监督学习\"></a>监督学习</h2><p>监督学习：找正确答案</p>\n<p>1、回归问题：找函数，预测连续值</p>\n<p>2、分类问题：预测离散值</p>\n<h2 id=\"无监督学习\"><a href=\"#无监督学习\" class=\"headerlink\" title=\"无监督学习\"></a>无监督学习</h2><p>无监督学习：自己找数据的结构和规律（并不提前给出正确答案）</p>\n<p>聚类算法：将不同的内容整合为几个集合</p>\n<h2 id=\"神经网络\"><a href=\"#神经网络\" class=\"headerlink\" title=\"神经网络\"></a>神经网络</h2><p>神经网络是一个可以学习模式的函数集合。</p>\n<h2 id=\"卷积\"><a href=\"#卷积\" class=\"headerlink\" title=\"卷积\"></a>卷积</h2><p>通过某种方式处理图像，使之呈现出某种特征</p>\n<h2 id=\"池化\"><a href=\"#池化\" class=\"headerlink\" title=\"池化\"></a>池化</h2><p>处理图像的一种方式，取某些像素的最大、平均值或其他特征值</p>\n<h1 id=\"TensorFlow\"><a href=\"#TensorFlow\" class=\"headerlink\" title=\"TensorFlow\"></a>TensorFlow</h1><h3 id=\"实例1：图像分类\"><a href=\"#实例1：图像分类\" class=\"headerlink\" title=\"实例1：图像分类\"></a>实例1：图像分类</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> tensorflow <span class=\"hljs-keyword\">as</span> tf<br><span class=\"hljs-keyword\">from</span> tensorflow <span class=\"hljs-keyword\">import</span> keras<br><span class=\"hljs-keyword\">import</span> matplotlib.pyplot <span class=\"hljs-keyword\">as</span> plt<br><span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np<br><br><span class=\"hljs-comment\">#回调，当准确度达到80%时停止训练</span><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">callBack</span><span class=\"hljs-params\">(tf.keras.callbacks.Callback)</span>:</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">on_epoch_end</span><span class=\"hljs-params\">(self, epoch, logs=&#123;&#125;)</span>:</span><br>        <span class=\"hljs-keyword\">if</span>(logs.get(<span class=\"hljs-string\">'loss'</span>)&lt;<span class=\"hljs-number\">0.2</span>):<br>            print(<span class=\"hljs-string\">'\\nReached 80%'</span>)<br>            self.model.stop_training = <span class=\"hljs-literal\">True</span><br>cb1 = callBack()<br><br><span class=\"hljs-comment\">#导入Fashion数据集</span><br>mnist = tf.keras.datasets.fashion_mnist<br>(training_images, training_labels), (test_images, test_labels) = mnist.load_data()<br><br><span class=\"hljs-comment\">#这里的没什么用</span><br>plt.imshow(training_images[<span class=\"hljs-number\">0</span>])<br>print(training_images[<span class=\"hljs-number\">0</span>])<br>print((training_labels[<span class=\"hljs-number\">0</span>]))<br><br><span class=\"hljs-comment\">#将像素0-255表示转为更容易处理的0-1表示</span><br>training_images = training_images/<span class=\"hljs-number\">255</span><br>test_images = test_images/<span class=\"hljs-number\">255</span><br><br><span class=\"hljs-comment\">#升维，以便卷积</span><br>training_images = np.expand_dims(training_images, axis=<span class=\"hljs-number\">3</span>)<br>test_images = np.expand_dims(test_images, axis=<span class=\"hljs-number\">3</span>)<br><br><span class=\"hljs-comment\">#神经网络</span><br>model = tf.keras.models.Sequential([<br>    tf.keras.layers.Conv2D(<span class=\"hljs-number\">64</span>,(<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">3</span>),activation=<span class=\"hljs-string\">'relu'</span>,input_shape=(<span class=\"hljs-number\">28</span>,<span class=\"hljs-number\">28</span>,<span class=\"hljs-number\">1</span>)),<span class=\"hljs-comment\">#卷积1</span><br>    tf.keras.layers.MaxPooling2D(<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">2</span>),<span class=\"hljs-comment\">#最大池化</span><br>    tf.keras.layers.Conv2D(<span class=\"hljs-number\">64</span>,(<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">3</span>),activation=<span class=\"hljs-string\">'relu'</span>),<span class=\"hljs-comment\">#卷积2</span><br>    tf.keras.layers.MaxPooling2D(<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">2</span>),<span class=\"hljs-comment\">#最大池化</span><br>    tf.keras.layers.Flatten(),<br>    tf.keras.layers.Dense(<span class=\"hljs-number\">256</span>,activation=tf.nn.relu),<span class=\"hljs-comment\">#全连接层</span><br>    tf.keras.layers.Dense(<span class=\"hljs-number\">10</span>,activation=tf.nn.softmax)]<br>)<br><br><span class=\"hljs-comment\">#训练</span><br>model.compile(optimizer=tf.optimizers.Adam(),<br>              loss=<span class=\"hljs-string\">'sparse_categorical_crossentropy'</span>)<br>model.summary()<br>model.fit(training_images,training_labels,epochs=<span class=\"hljs-number\">15</span>,<br>          callbacks=[cb1]<br>          )<br><br><span class=\"hljs-comment\">#评估结果</span><br>model.evaluate(test_images,test_labels)<br></code></pre></td></tr></table></figure>\n"},{"layout":"post","title":"操作系统复习","intro":"","date":"2021-07-06T13:00:01.000Z","author":"Makinohara","catalog":true,"_content":"\n## 进程\n\n### 并发\n\n特征：间断性、失去封闭性、不可再现性\n\n### 进程描述\n\n1、定义：\n\n程序的一次执行、程序及数据在处理机上的活动、是系统分配和调度的独立单位\n\n2、特征：动态性、并发性、独立性、异步性\n\n3、状态：\n\n就绪、执行、阻塞\n\n挂起（变活动为静止）：静止就绪：在激活前不执行、静止阻塞：在得到条件前不会变为静止就绪。\n\n4、PCB\n\n包括：进程标识符、处理机状态、进程调度信息、进程控制信息\n\n定义：作为独立运行基本单位标志；能实现间断性运行方式；提供进程管理所需要信息；提供进程调度所需要信息；实现与其他进程的同步与通信\n\n### 进程控制\n\n状态转换：\n\n1、更新PCB信息\n\n2、PCB加入合适队列\n\n3、分配/回收资源\n\n进程切换：\n\n1、将运行环境存PCB\n\n2、PCB入响应队列\n\n3、选另一个进程运行，更新PCB\n\n4、根据PCB恢复进程运行环境。\n\n使用原语：block原语（阻塞）wakeup原语（唤醒）\n\n挂起原语：suspend、active\n\n### 进程同步（重点）\n\n机制：硬件同步、信号量、管程（不常用）\n\n间接相互制约：访问相同资源\n\n直接相互制约：源自进程间的合作，进程需要另一进程结果时发生。\n\n1、生产者——消费者问题\n\n```\nsemaphore empty = n缓冲区剩余空间,full = 0缓冲区已写入空间,mutex = 1缓冲区访问;\n\nvoid producer(){\n\twait(empty);\n\twait(mutex);\n\t//同时：使用and信号量\n\twait(empty,mutex);\n\t//使用信号量集\n\twait(empty,1,1,mutex,1,1)//信号量类型,至少为多少,需要多少（分配后为信号量-需要）\n\t...生产...\n\tbuffer[in] = 产物;\n\tin = (in+1)%n; //缓冲区是一个循环缓冲区\n\tsignal(mutex);\n\tsignam(full);\n}\nvoid customer(){\n\twait(full);//等到有东西\n\twait(mutex);\n\t...消费...\n\t消费 = buffer[out];\n\tout = (out+1)%n; //缓冲区是一个循环缓冲区\n\tsignal(mutex);\n\tsignam(empty);//腾出空间\n}\n```\n\n2、读者——写者问题\n\n```\nsemaphore L = Rn mutex = 1;//最多支持Rn读者\nreader(){\nwait(RN,1,1);\nwait(mutex,1,0);//不影响其他读者读\n...\nsignal(RN,1);\n}\nwriter(){\nwait(mutex,1,1；L,Rn,0);//写时不允许读，要求读者信号量数RN\n...\nsignal(mutex,1)\n}\n```\n\n3、哲♂学♂家问题\n\n```\n//使用and信号量防止死锁：\n\nvoid Van(){\n\t...Boy next door!...\n\t...Change the boss of gym...\n\t\n\tSwait(chopstick[(i+1)%5],chopstick[i]);//只有同时获得筷子，才进餐，否则不要占用筷子。\n\t...eat...\n\tSsignal(chopstick[(i+1)%5],chopstick[i]);\n}\n```\n\n\n\n### 进程消息传递、线程（不是重点）\n\n直接消息传递：\n\n```\n//缓冲区\nstruct buffer{\nint sender;\nint size;\nstring message;\nstruct buffer *next;//指向下一个缓冲区指针\n}\n\n//太难了，你要考我认了\n```\n\n## 作业调度\n\n平均周转时间Ti:从作业提交到完成消耗的时间\n\n$$1/n(\\sum\\limits_{i=1}^nT_i)$$\n\n平均带权周转时间：其中Ts为系统为其提供的时间\n\n$$1/n(\\sum\\limits_{i=1}^nT_i/T_s)$$\n\n高响应比优先算法：\n\n$$P=\\frac{Wait\\ time+need\\ time}{need \\ time}$$\n\n$$R_p = \\frac{Response\\ time}{need\\ time}$$\n\n表示的意思：作业等待时间相同时，要求时间越短越优先，而要求时间相同时，等待时间越长越优先。对于长作业，优先级会随着等待时间增加逐步提高。\n\n## 进程调度\n\n1、非抢占：进程不会被更高优先级的进程抢占\n\n2、抢占方式：\n\n优先级高的进程可以剥夺当前进程的运行\n\n### 轮转调度：\n\n将所有进程排成一个就绪队列，每隔一段时间产生一次中断，将CPU分给队首进程。如果当前进程运行完毕，直接进行调度，如果没有完成，重新排到队尾。\n\n### 优先级调度：\n\n非抢占：将处理机分配给优先级最高进程后，便运行到结束\n\n抢占：运行过程中如果有优先级更高的就绪进程，则停止原进程执行，将处理机分配给更优先进程。\n\n### 多级反馈队列：\n\n分多个队列，第i+1个队列的时间片长度是i的两倍，但是优先级更低。如果第i队列的进程没有完成，就入第i+1队列的队尾，以此类推，直至完成。系统只有在完成i队列进程后（i队列空闲），才开始处理i+1队列进程，如果此时有更高优先级队列有新进程加入，则停止处理，先处理优先级更高进程。\n\n## 实时调度\n\n### 最早截止时间优先：\n\n截止时间越早，优先级越高，其他同抢占式。\n\n### 最低松弛度优先：\n\n优先级取决于松弛程度\n\n松弛程度 = 完成时间（比如200ms内）-需要时间（比如需要执行100ms）\n\n松弛度越低，优先级越高。\n\n## 死锁问题\n\n产生死锁必要条件：\n\n1、互斥条件：资源排他性使用\n\n2、请求和保持条件：进程请求新的资源，又对已经有的资源保持不放\n\n3、不可抢占条件：资源没使用完不能抢占\n\n4、循环等待条件：存在进程—资源循环链。\n\n\n\n处理方法：预防死锁，避免死锁，检测死锁，解除死锁\n\n### 预防死锁\n\n破坏除互斥条件以外的所有条件。\n\n### 避免死锁：系统安全状态\n\n银行家算法：找出一个安全序列\n\n初始表：\n\nMax Need Allocation Available\n\n分配表：\n\nWork Allocation Need Work+Allocation Finish\n\n银行家算法：\n\n1）检测进程需要的资源数是否超过宣布最大值\n\n2）检测系统是否还有足够资源\n\n3）试分配资源\n\n4）进行安全性检查算法，安全再分配\n\n安全性检查算法：\n\n1）有足够资源时，Finish = true\n\n2）从进程集合中找到一个进程未完成，但是可完成\n\n3）进程完成后释放资源，跳回2\n\n4）Finish全为true，安全。\n\n## 存储器\n\n### 连续分配方式：\n\n固定分区分配：\n\n将内存分为几个固定分区，分区大小相等或不相等\n\n动态分区分配：\n\n需要数据结构：空闲分区表、空闲分区链\n\n分配算法：\n\n首次适应算法：找到一个适应大小的空间就分配\n\n循环首次适应算法：不是每次从链首，是从上一个找到的接下来找\n\n最佳适应：\n\n总能将能满足要求，又最小的分区分配出去\n\n最坏适应：\n\n总是挑最大的空闲区分配\n\n分配操作：\n\n分配：分配一个分区，剩余空间太小，就不切割，剩余空间大，就切割。\n\n回收操作：将回收的空间和空闲的空间合并\n\n### 伙伴系统：\n\n无论已分配还是空闲，大小都是$$2^n$$，分配长度n空间时找一个值，$$2^{i-1}<=n<=2^i$$，如果找不到，就找更大的，但是要将该分区分为两份，以此类推。\n\n### 紧凑：\n\n将小作业移动，使其相邻接，将原来的分散空闲小分区拼成大的。\n\n### 分页存储管理方式：\n\n将进程的逻辑地址分成若干页，地址为页号、位移量（页内地址）。\n\n页表：记录进程相应页对应内存中的物理块的一块表。\n\n访问内存有效时间：有快表的情况\n\n$$EAT = a\\cdot\\lambda+(t+\\lambda)\\cdot(1-a)+t$$\n\n其中，lambda为查找快表时间，a为命中率，t为访问内存时间（说明：如果不在快表内，那么很显然需要访问两次内存，一次找地址，一次是访问数据）\n\n两级和多级页表：\n\n将页表放在某一物理块，外层页表记录的就是页表在哪个物理块，页表记录的就是页和物理块的对应关系。\n\n地址变换：以页号为索引检索页表，找到在哪一页，然后将页表始址和页号与页表项长度的乘积相加，从页表中得到这一页的物理块号，与页内地址拼接得到物理地址。\n\n## 虚拟存储\n\n### 请求分页存储方式\n\n当需要访问的页不在内存，便产生缺页中断（第一次调入也算缺页中断），然后将页面调入内存。\n\n#### 页面置换算法\n\n1、最佳算法：被淘汰的页面是以后永不使用或是未来最长时间不会访问的页面。（理想算法）\n\n2、FIFO算法：被淘汰的页面是最先进入的页面\n\n3、LRU算法：被淘汰的页面是最近最久未使用的页面。（记录一个页面自从上次被访问经过的时间，调出是淘汰t最大的）\n\n4、LFU算法：被淘汰的页面是最近使用最少的页面\n\n5、Clock算法：将页面链接为一个循环队列，设置一个访问位，某页被访问时设为1，当这个页面被检查时，如果是1，就置0，如果是0，就换出。\n\n## I/O 系统\n\n### 磁盘调度\n\n1、先来先服务：仅仅适用于请求磁盘I/O较少场合\n\n2、最短寻道时间优先：寻道所需时间最短的I/O请求先服务\n\n3、扫描算法：磁盘磁头不停外向移动，处理请求，直至没有更外磁道的请求再内向移动，处理请求，直到没有更内磁道请求再外向移动。\n\n4、循环扫描算法：磁头移到最外磁道后立刻回到最里的欲访问磁道，这样可以大大降低请求的等待时间\n\nNStepSCAN和FSCAN算法：\n\nNStepSCAN：将请求分为N个子队列，对于每个子队列，用SCAN算法，对于不同子队列，用FCFS算法。\n\nFSCAN算法：对于当前请求的队列，用SCAN算法处理，而将在扫描期间的新请求，推迟到下一次扫描时再处理。\n\n## 文件目录\n\n文件控制块：包括文件名、拓展名、属性、时间日期、**第一块号、盘块数**等\n\n索引结点：将文件名与文件描述信息分开，使文件描述信息单独成为一个称为索引结点的数据结构。这样就可以只检索文件名，而在检索时忽视其他信息，减少内存占用。\n\n### 文件目录的类型\n\n单级文件目录：只有一级文件目录，存放所有文件。\n\n两级文件目录：每个用户拥有自己的用户目录。\n\n树形目录：将文件称为树叶，将目录称为结点。应允许一个目录文件中的目录项，既可以做目录文件的FCB，也可以做数据文件的FCB。\n\n## 磁盘存储器管理\n\n组织方式：\n\n连续组织方式:为每一个文件分配一组相邻接的盘块。\n\n#### 链接组织方式\n\n1、隐式链接：在文件系统的每个目录项都设置一个指向文件第一个盘块的最后一个盘块的指针，每个盘块中都有一个指向下一个盘块的指针。\n\n2、显式链接：将用于链接文件各物理块的指针显式地放在内存的一块链接表，整个磁盘只有一张。（这个表是文件分配表FAT）\n\n#### 索引组织方式\n\n单级索引：每个文件分配一个索引块，将分配给这个文件的所有盘块号记录在这个索引块中。\n\n多级索引：当一个索引块满事，再分配一个索引块，然后记录接下来分配的盘块，最后再为这些索引块建立一个索引，称为一级索引，多级以此类推。\n\n增量式索引组织方式：在索引结点中设置数个直接地址项，一次间接地址项，多次间接地址项。其中一次间接地址块是索引块。\n\n## 文件存储空间管理\n\n空闲表法：连续分配方式使用，记录空闲区域的第一空闲盘块号、空闲盘块数。\n\n空闲链表法：分为空闲盘块链和空闲盘区链，就是将空闲盘块和空闲盘区拉成一条链表。\n\n### 位示图法：\n\n用m*n个位构成示图，0未分配，1已分配。\n\n分配时：找到一个空闲的map[i,j],分配后改为map[i,j] = 1，盘块：b=n(i-1)+j。\n\n回收时：回收b号盘块，修改map[i,j] = 0；\n\n其中$$i=(b-1)\\ DIV\\ n+1$$ ; $$j=(b-1)\\ MOD\\ n+1$$（整除、模）\n\n### 成组链接法：\n\n建立空闲盘块号栈，组织如下\n\n| 属性:值                 |\n| ----------------------- |\n| N(空闲盘块数):100       |\n| S.free(0):pointer，File |\n| ...1:File               |\n| ...2:File               |\n| ...3:File               |\n| ......                  |\n| ...99:File              |\n\n其中N还作为栈顶指针，100代表还有100个空闲块，其指向S.free(99)\n\nS.free(0)是栈底（第一个盘块），除存储数据外，后一组的盘块总数N和该组具有的盘块号也被记录于前一组的此处。\n\n至于第一组，其分配叫做“空闲盘块号栈”\n\n最后一组仅有99个空闲盘块，因为S.free(0)=0代表没有后续盘块，作为空闲盘块链的结束标志。\n","source":"_posts/2021-7-6-操作系统复习.markdown","raw":"---\nlayout:     post\ntitle:      \"操作系统复习\"\nintro:   \"\"\ndate:       2021-7-6 21:00:01\nauthor:     \"Makinohara\"\ncatalog: true\ntags:\n    - 计算机基础\n    \n---\n\n## 进程\n\n### 并发\n\n特征：间断性、失去封闭性、不可再现性\n\n### 进程描述\n\n1、定义：\n\n程序的一次执行、程序及数据在处理机上的活动、是系统分配和调度的独立单位\n\n2、特征：动态性、并发性、独立性、异步性\n\n3、状态：\n\n就绪、执行、阻塞\n\n挂起（变活动为静止）：静止就绪：在激活前不执行、静止阻塞：在得到条件前不会变为静止就绪。\n\n4、PCB\n\n包括：进程标识符、处理机状态、进程调度信息、进程控制信息\n\n定义：作为独立运行基本单位标志；能实现间断性运行方式；提供进程管理所需要信息；提供进程调度所需要信息；实现与其他进程的同步与通信\n\n### 进程控制\n\n状态转换：\n\n1、更新PCB信息\n\n2、PCB加入合适队列\n\n3、分配/回收资源\n\n进程切换：\n\n1、将运行环境存PCB\n\n2、PCB入响应队列\n\n3、选另一个进程运行，更新PCB\n\n4、根据PCB恢复进程运行环境。\n\n使用原语：block原语（阻塞）wakeup原语（唤醒）\n\n挂起原语：suspend、active\n\n### 进程同步（重点）\n\n机制：硬件同步、信号量、管程（不常用）\n\n间接相互制约：访问相同资源\n\n直接相互制约：源自进程间的合作，进程需要另一进程结果时发生。\n\n1、生产者——消费者问题\n\n```\nsemaphore empty = n缓冲区剩余空间,full = 0缓冲区已写入空间,mutex = 1缓冲区访问;\n\nvoid producer(){\n\twait(empty);\n\twait(mutex);\n\t//同时：使用and信号量\n\twait(empty,mutex);\n\t//使用信号量集\n\twait(empty,1,1,mutex,1,1)//信号量类型,至少为多少,需要多少（分配后为信号量-需要）\n\t...生产...\n\tbuffer[in] = 产物;\n\tin = (in+1)%n; //缓冲区是一个循环缓冲区\n\tsignal(mutex);\n\tsignam(full);\n}\nvoid customer(){\n\twait(full);//等到有东西\n\twait(mutex);\n\t...消费...\n\t消费 = buffer[out];\n\tout = (out+1)%n; //缓冲区是一个循环缓冲区\n\tsignal(mutex);\n\tsignam(empty);//腾出空间\n}\n```\n\n2、读者——写者问题\n\n```\nsemaphore L = Rn mutex = 1;//最多支持Rn读者\nreader(){\nwait(RN,1,1);\nwait(mutex,1,0);//不影响其他读者读\n...\nsignal(RN,1);\n}\nwriter(){\nwait(mutex,1,1；L,Rn,0);//写时不允许读，要求读者信号量数RN\n...\nsignal(mutex,1)\n}\n```\n\n3、哲♂学♂家问题\n\n```\n//使用and信号量防止死锁：\n\nvoid Van(){\n\t...Boy next door!...\n\t...Change the boss of gym...\n\t\n\tSwait(chopstick[(i+1)%5],chopstick[i]);//只有同时获得筷子，才进餐，否则不要占用筷子。\n\t...eat...\n\tSsignal(chopstick[(i+1)%5],chopstick[i]);\n}\n```\n\n\n\n### 进程消息传递、线程（不是重点）\n\n直接消息传递：\n\n```\n//缓冲区\nstruct buffer{\nint sender;\nint size;\nstring message;\nstruct buffer *next;//指向下一个缓冲区指针\n}\n\n//太难了，你要考我认了\n```\n\n## 作业调度\n\n平均周转时间Ti:从作业提交到完成消耗的时间\n\n$$1/n(\\sum\\limits_{i=1}^nT_i)$$\n\n平均带权周转时间：其中Ts为系统为其提供的时间\n\n$$1/n(\\sum\\limits_{i=1}^nT_i/T_s)$$\n\n高响应比优先算法：\n\n$$P=\\frac{Wait\\ time+need\\ time}{need \\ time}$$\n\n$$R_p = \\frac{Response\\ time}{need\\ time}$$\n\n表示的意思：作业等待时间相同时，要求时间越短越优先，而要求时间相同时，等待时间越长越优先。对于长作业，优先级会随着等待时间增加逐步提高。\n\n## 进程调度\n\n1、非抢占：进程不会被更高优先级的进程抢占\n\n2、抢占方式：\n\n优先级高的进程可以剥夺当前进程的运行\n\n### 轮转调度：\n\n将所有进程排成一个就绪队列，每隔一段时间产生一次中断，将CPU分给队首进程。如果当前进程运行完毕，直接进行调度，如果没有完成，重新排到队尾。\n\n### 优先级调度：\n\n非抢占：将处理机分配给优先级最高进程后，便运行到结束\n\n抢占：运行过程中如果有优先级更高的就绪进程，则停止原进程执行，将处理机分配给更优先进程。\n\n### 多级反馈队列：\n\n分多个队列，第i+1个队列的时间片长度是i的两倍，但是优先级更低。如果第i队列的进程没有完成，就入第i+1队列的队尾，以此类推，直至完成。系统只有在完成i队列进程后（i队列空闲），才开始处理i+1队列进程，如果此时有更高优先级队列有新进程加入，则停止处理，先处理优先级更高进程。\n\n## 实时调度\n\n### 最早截止时间优先：\n\n截止时间越早，优先级越高，其他同抢占式。\n\n### 最低松弛度优先：\n\n优先级取决于松弛程度\n\n松弛程度 = 完成时间（比如200ms内）-需要时间（比如需要执行100ms）\n\n松弛度越低，优先级越高。\n\n## 死锁问题\n\n产生死锁必要条件：\n\n1、互斥条件：资源排他性使用\n\n2、请求和保持条件：进程请求新的资源，又对已经有的资源保持不放\n\n3、不可抢占条件：资源没使用完不能抢占\n\n4、循环等待条件：存在进程—资源循环链。\n\n\n\n处理方法：预防死锁，避免死锁，检测死锁，解除死锁\n\n### 预防死锁\n\n破坏除互斥条件以外的所有条件。\n\n### 避免死锁：系统安全状态\n\n银行家算法：找出一个安全序列\n\n初始表：\n\nMax Need Allocation Available\n\n分配表：\n\nWork Allocation Need Work+Allocation Finish\n\n银行家算法：\n\n1）检测进程需要的资源数是否超过宣布最大值\n\n2）检测系统是否还有足够资源\n\n3）试分配资源\n\n4）进行安全性检查算法，安全再分配\n\n安全性检查算法：\n\n1）有足够资源时，Finish = true\n\n2）从进程集合中找到一个进程未完成，但是可完成\n\n3）进程完成后释放资源，跳回2\n\n4）Finish全为true，安全。\n\n## 存储器\n\n### 连续分配方式：\n\n固定分区分配：\n\n将内存分为几个固定分区，分区大小相等或不相等\n\n动态分区分配：\n\n需要数据结构：空闲分区表、空闲分区链\n\n分配算法：\n\n首次适应算法：找到一个适应大小的空间就分配\n\n循环首次适应算法：不是每次从链首，是从上一个找到的接下来找\n\n最佳适应：\n\n总能将能满足要求，又最小的分区分配出去\n\n最坏适应：\n\n总是挑最大的空闲区分配\n\n分配操作：\n\n分配：分配一个分区，剩余空间太小，就不切割，剩余空间大，就切割。\n\n回收操作：将回收的空间和空闲的空间合并\n\n### 伙伴系统：\n\n无论已分配还是空闲，大小都是$$2^n$$，分配长度n空间时找一个值，$$2^{i-1}<=n<=2^i$$，如果找不到，就找更大的，但是要将该分区分为两份，以此类推。\n\n### 紧凑：\n\n将小作业移动，使其相邻接，将原来的分散空闲小分区拼成大的。\n\n### 分页存储管理方式：\n\n将进程的逻辑地址分成若干页，地址为页号、位移量（页内地址）。\n\n页表：记录进程相应页对应内存中的物理块的一块表。\n\n访问内存有效时间：有快表的情况\n\n$$EAT = a\\cdot\\lambda+(t+\\lambda)\\cdot(1-a)+t$$\n\n其中，lambda为查找快表时间，a为命中率，t为访问内存时间（说明：如果不在快表内，那么很显然需要访问两次内存，一次找地址，一次是访问数据）\n\n两级和多级页表：\n\n将页表放在某一物理块，外层页表记录的就是页表在哪个物理块，页表记录的就是页和物理块的对应关系。\n\n地址变换：以页号为索引检索页表，找到在哪一页，然后将页表始址和页号与页表项长度的乘积相加，从页表中得到这一页的物理块号，与页内地址拼接得到物理地址。\n\n## 虚拟存储\n\n### 请求分页存储方式\n\n当需要访问的页不在内存，便产生缺页中断（第一次调入也算缺页中断），然后将页面调入内存。\n\n#### 页面置换算法\n\n1、最佳算法：被淘汰的页面是以后永不使用或是未来最长时间不会访问的页面。（理想算法）\n\n2、FIFO算法：被淘汰的页面是最先进入的页面\n\n3、LRU算法：被淘汰的页面是最近最久未使用的页面。（记录一个页面自从上次被访问经过的时间，调出是淘汰t最大的）\n\n4、LFU算法：被淘汰的页面是最近使用最少的页面\n\n5、Clock算法：将页面链接为一个循环队列，设置一个访问位，某页被访问时设为1，当这个页面被检查时，如果是1，就置0，如果是0，就换出。\n\n## I/O 系统\n\n### 磁盘调度\n\n1、先来先服务：仅仅适用于请求磁盘I/O较少场合\n\n2、最短寻道时间优先：寻道所需时间最短的I/O请求先服务\n\n3、扫描算法：磁盘磁头不停外向移动，处理请求，直至没有更外磁道的请求再内向移动，处理请求，直到没有更内磁道请求再外向移动。\n\n4、循环扫描算法：磁头移到最外磁道后立刻回到最里的欲访问磁道，这样可以大大降低请求的等待时间\n\nNStepSCAN和FSCAN算法：\n\nNStepSCAN：将请求分为N个子队列，对于每个子队列，用SCAN算法，对于不同子队列，用FCFS算法。\n\nFSCAN算法：对于当前请求的队列，用SCAN算法处理，而将在扫描期间的新请求，推迟到下一次扫描时再处理。\n\n## 文件目录\n\n文件控制块：包括文件名、拓展名、属性、时间日期、**第一块号、盘块数**等\n\n索引结点：将文件名与文件描述信息分开，使文件描述信息单独成为一个称为索引结点的数据结构。这样就可以只检索文件名，而在检索时忽视其他信息，减少内存占用。\n\n### 文件目录的类型\n\n单级文件目录：只有一级文件目录，存放所有文件。\n\n两级文件目录：每个用户拥有自己的用户目录。\n\n树形目录：将文件称为树叶，将目录称为结点。应允许一个目录文件中的目录项，既可以做目录文件的FCB，也可以做数据文件的FCB。\n\n## 磁盘存储器管理\n\n组织方式：\n\n连续组织方式:为每一个文件分配一组相邻接的盘块。\n\n#### 链接组织方式\n\n1、隐式链接：在文件系统的每个目录项都设置一个指向文件第一个盘块的最后一个盘块的指针，每个盘块中都有一个指向下一个盘块的指针。\n\n2、显式链接：将用于链接文件各物理块的指针显式地放在内存的一块链接表，整个磁盘只有一张。（这个表是文件分配表FAT）\n\n#### 索引组织方式\n\n单级索引：每个文件分配一个索引块，将分配给这个文件的所有盘块号记录在这个索引块中。\n\n多级索引：当一个索引块满事，再分配一个索引块，然后记录接下来分配的盘块，最后再为这些索引块建立一个索引，称为一级索引，多级以此类推。\n\n增量式索引组织方式：在索引结点中设置数个直接地址项，一次间接地址项，多次间接地址项。其中一次间接地址块是索引块。\n\n## 文件存储空间管理\n\n空闲表法：连续分配方式使用，记录空闲区域的第一空闲盘块号、空闲盘块数。\n\n空闲链表法：分为空闲盘块链和空闲盘区链，就是将空闲盘块和空闲盘区拉成一条链表。\n\n### 位示图法：\n\n用m*n个位构成示图，0未分配，1已分配。\n\n分配时：找到一个空闲的map[i,j],分配后改为map[i,j] = 1，盘块：b=n(i-1)+j。\n\n回收时：回收b号盘块，修改map[i,j] = 0；\n\n其中$$i=(b-1)\\ DIV\\ n+1$$ ; $$j=(b-1)\\ MOD\\ n+1$$（整除、模）\n\n### 成组链接法：\n\n建立空闲盘块号栈，组织如下\n\n| 属性:值                 |\n| ----------------------- |\n| N(空闲盘块数):100       |\n| S.free(0):pointer，File |\n| ...1:File               |\n| ...2:File               |\n| ...3:File               |\n| ......                  |\n| ...99:File              |\n\n其中N还作为栈顶指针，100代表还有100个空闲块，其指向S.free(99)\n\nS.free(0)是栈底（第一个盘块），除存储数据外，后一组的盘块总数N和该组具有的盘块号也被记录于前一组的此处。\n\n至于第一组，其分配叫做“空闲盘块号栈”\n\n最后一组仅有99个空闲盘块，因为S.free(0)=0代表没有后续盘块，作为空闲盘块链的结束标志。\n","slug":"2021-7-6-操作系统复习","published":1,"updated":"2022-01-02T13:04:43.895Z","_id":"ckv4pvow1000i24pehprz3qd5","comments":1,"photos":[],"link":"","content":"<h2 id=\"进程\"><a href=\"#进程\" class=\"headerlink\" title=\"进程\"></a>进程</h2><h3 id=\"并发\"><a href=\"#并发\" class=\"headerlink\" title=\"并发\"></a>并发</h3><p>特征：间断性、失去封闭性、不可再现性</p>\n<h3 id=\"进程描述\"><a href=\"#进程描述\" class=\"headerlink\" title=\"进程描述\"></a>进程描述</h3><p>1、定义：</p>\n<p>程序的一次执行、程序及数据在处理机上的活动、是系统分配和调度的独立单位</p>\n<p>2、特征：动态性、并发性、独立性、异步性</p>\n<p>3、状态：</p>\n<p>就绪、执行、阻塞</p>\n<p>挂起（变活动为静止）：静止就绪：在激活前不执行、静止阻塞：在得到条件前不会变为静止就绪。</p>\n<p>4、PCB</p>\n<p>包括：进程标识符、处理机状态、进程调度信息、进程控制信息</p>\n<p>定义：作为独立运行基本单位标志；能实现间断性运行方式；提供进程管理所需要信息；提供进程调度所需要信息；实现与其他进程的同步与通信</p>\n<h3 id=\"进程控制\"><a href=\"#进程控制\" class=\"headerlink\" title=\"进程控制\"></a>进程控制</h3><p>状态转换：</p>\n<p>1、更新PCB信息</p>\n<p>2、PCB加入合适队列</p>\n<p>3、分配/回收资源</p>\n<p>进程切换：</p>\n<p>1、将运行环境存PCB</p>\n<p>2、PCB入响应队列</p>\n<p>3、选另一个进程运行，更新PCB</p>\n<p>4、根据PCB恢复进程运行环境。</p>\n<p>使用原语：block原语（阻塞）wakeup原语（唤醒）</p>\n<p>挂起原语：suspend、active</p>\n<h3 id=\"进程同步（重点）\"><a href=\"#进程同步（重点）\" class=\"headerlink\" title=\"进程同步（重点）\"></a>进程同步（重点）</h3><p>机制：硬件同步、信号量、管程（不常用）</p>\n<p>间接相互制约：访问相同资源</p>\n<p>直接相互制约：源自进程间的合作，进程需要另一进程结果时发生。</p>\n<p>1、生产者——消费者问题</p>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs angelscript\">semaphore empty = n缓冲区剩余空间,full = <span class=\"hljs-number\">0</span>缓冲区已写入空间,mutex = <span class=\"hljs-number\">1</span>缓冲区访问;<br><br><span class=\"hljs-built_in\">void</span> producer()&#123;<br>\twait(empty);<br>\twait(mutex);<br>\t<span class=\"hljs-comment\">//同时：使用and信号量</span><br>\twait(empty,mutex);<br>\t<span class=\"hljs-comment\">//使用信号量集</span><br>\twait(empty,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">1</span>,mutex,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">1</span>)<span class=\"hljs-comment\">//信号量类型,至少为多少,需要多少（分配后为信号量-需要）</span><br>\t...生产...<br>\tbuffer[<span class=\"hljs-keyword\">in</span>] = 产物;<br>\t<span class=\"hljs-keyword\">in</span> = (<span class=\"hljs-keyword\">in</span>+<span class=\"hljs-number\">1</span>)%n; <span class=\"hljs-comment\">//缓冲区是一个循环缓冲区</span><br>\tsignal(mutex);<br>\tsignam(full);<br>&#125;<br><span class=\"hljs-built_in\">void</span> customer()&#123;<br>\twait(full);<span class=\"hljs-comment\">//等到有东西</span><br>\twait(mutex);<br>\t...消费...<br>\t消费 = buffer[<span class=\"hljs-keyword\">out</span>];<br>\t<span class=\"hljs-keyword\">out</span> = (<span class=\"hljs-keyword\">out</span>+<span class=\"hljs-number\">1</span>)%n; <span class=\"hljs-comment\">//缓冲区是一个循环缓冲区</span><br>\tsignal(mutex);<br>\tsignam(empty);<span class=\"hljs-comment\">//腾出空间</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>2、读者——写者问题</p>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs angelscript\">semaphore L = Rn mutex = <span class=\"hljs-number\">1</span>;<span class=\"hljs-comment\">//最多支持Rn读者</span><br>reader()&#123;<br>wait(RN,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">1</span>);<br>wait(mutex,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">0</span>);<span class=\"hljs-comment\">//不影响其他读者读</span><br>...<br>signal(RN,<span class=\"hljs-number\">1</span>);<br>&#125;<br>writer()&#123;<br>wait(mutex,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">1</span>；L,Rn,<span class=\"hljs-number\">0</span>);<span class=\"hljs-comment\">//写时不允许读，要求读者信号量数RN</span><br>...<br>signal(mutex,<span class=\"hljs-number\">1</span>)<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>3、哲♂学♂家问题</p>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\"><span class=\"hljs-comment\">//使用and信号量防止死锁：</span><br><br>void <span class=\"hljs-constructor\">Van()</span>&#123;<br>\t...Boy next door!...<br>\t...Change the boss <span class=\"hljs-keyword\">of</span> gym...<br>\t<br>\t<span class=\"hljs-constructor\">Swait(<span class=\"hljs-params\">chopstick</span>[(<span class=\"hljs-params\">i</span>+1)</span>%<span class=\"hljs-number\">5</span>],chopstick<span class=\"hljs-literal\">[<span class=\"hljs-identifier\">i</span>]</span>);<span class=\"hljs-comment\">//只有同时获得筷子，才进餐，否则不要占用筷子。</span><br>\t...eat...<br>\t<span class=\"hljs-constructor\">Ssignal(<span class=\"hljs-params\">chopstick</span>[(<span class=\"hljs-params\">i</span>+1)</span>%<span class=\"hljs-number\">5</span>],chopstick<span class=\"hljs-literal\">[<span class=\"hljs-identifier\">i</span>]</span>);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"进程消息传递、线程（不是重点）\"><a href=\"#进程消息传递、线程（不是重点）\" class=\"headerlink\" title=\"进程消息传递、线程（不是重点）\"></a>进程消息传递、线程（不是重点）</h3><p>直接消息传递：</p>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs arduino\"><span class=\"hljs-comment\">//缓冲区</span><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">buffer</span>&#123;</span><br><span class=\"hljs-keyword\">int</span> sender;<br><span class=\"hljs-keyword\">int</span> <span class=\"hljs-built_in\">size</span>;<br><span class=\"hljs-built_in\">string</span> message;<br><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">buffer</span> *<span class=\"hljs-title\">next</span>;</span><span class=\"hljs-comment\">//指向下一个缓冲区指针</span><br>&#125;<br><br><span class=\"hljs-comment\">//太难了，你要考我认了</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"作业调度\"><a href=\"#作业调度\" class=\"headerlink\" title=\"作业调度\"></a>作业调度</h2><p>平均周转时间Ti:从作业提交到完成消耗的时间</p>\n<p>$$1/n(\\sum\\limits_{i=1}^nT_i)$$</p>\n<p>平均带权周转时间：其中Ts为系统为其提供的时间</p>\n<p>$$1/n(\\sum\\limits_{i=1}^nT_i/T_s)$$</p>\n<p>高响应比优先算法：</p>\n<p>$$P=\\frac{Wait\\ time+need\\ time}{need \\ time}$$</p>\n<p>$$R_p = \\frac{Response\\ time}{need\\ time}$$</p>\n<p>表示的意思：作业等待时间相同时，要求时间越短越优先，而要求时间相同时，等待时间越长越优先。对于长作业，优先级会随着等待时间增加逐步提高。</p>\n<h2 id=\"进程调度\"><a href=\"#进程调度\" class=\"headerlink\" title=\"进程调度\"></a>进程调度</h2><p>1、非抢占：进程不会被更高优先级的进程抢占</p>\n<p>2、抢占方式：</p>\n<p>优先级高的进程可以剥夺当前进程的运行</p>\n<h3 id=\"轮转调度：\"><a href=\"#轮转调度：\" class=\"headerlink\" title=\"轮转调度：\"></a>轮转调度：</h3><p>将所有进程排成一个就绪队列，每隔一段时间产生一次中断，将CPU分给队首进程。如果当前进程运行完毕，直接进行调度，如果没有完成，重新排到队尾。</p>\n<h3 id=\"优先级调度：\"><a href=\"#优先级调度：\" class=\"headerlink\" title=\"优先级调度：\"></a>优先级调度：</h3><p>非抢占：将处理机分配给优先级最高进程后，便运行到结束</p>\n<p>抢占：运行过程中如果有优先级更高的就绪进程，则停止原进程执行，将处理机分配给更优先进程。</p>\n<h3 id=\"多级反馈队列：\"><a href=\"#多级反馈队列：\" class=\"headerlink\" title=\"多级反馈队列：\"></a>多级反馈队列：</h3><p>分多个队列，第i+1个队列的时间片长度是i的两倍，但是优先级更低。如果第i队列的进程没有完成，就入第i+1队列的队尾，以此类推，直至完成。系统只有在完成i队列进程后（i队列空闲），才开始处理i+1队列进程，如果此时有更高优先级队列有新进程加入，则停止处理，先处理优先级更高进程。</p>\n<h2 id=\"实时调度\"><a href=\"#实时调度\" class=\"headerlink\" title=\"实时调度\"></a>实时调度</h2><h3 id=\"最早截止时间优先：\"><a href=\"#最早截止时间优先：\" class=\"headerlink\" title=\"最早截止时间优先：\"></a>最早截止时间优先：</h3><p>截止时间越早，优先级越高，其他同抢占式。</p>\n<h3 id=\"最低松弛度优先：\"><a href=\"#最低松弛度优先：\" class=\"headerlink\" title=\"最低松弛度优先：\"></a>最低松弛度优先：</h3><p>优先级取决于松弛程度</p>\n<p>松弛程度 = 完成时间（比如200ms内）-需要时间（比如需要执行100ms）</p>\n<p>松弛度越低，优先级越高。</p>\n<h2 id=\"死锁问题\"><a href=\"#死锁问题\" class=\"headerlink\" title=\"死锁问题\"></a>死锁问题</h2><p>产生死锁必要条件：</p>\n<p>1、互斥条件：资源排他性使用</p>\n<p>2、请求和保持条件：进程请求新的资源，又对已经有的资源保持不放</p>\n<p>3、不可抢占条件：资源没使用完不能抢占</p>\n<p>4、循环等待条件：存在进程—资源循环链。</p>\n<p>处理方法：预防死锁，避免死锁，检测死锁，解除死锁</p>\n<h3 id=\"预防死锁\"><a href=\"#预防死锁\" class=\"headerlink\" title=\"预防死锁\"></a>预防死锁</h3><p>破坏除互斥条件以外的所有条件。</p>\n<h3 id=\"避免死锁：系统安全状态\"><a href=\"#避免死锁：系统安全状态\" class=\"headerlink\" title=\"避免死锁：系统安全状态\"></a>避免死锁：系统安全状态</h3><p>银行家算法：找出一个安全序列</p>\n<p>初始表：</p>\n<p>Max Need Allocation Available</p>\n<p>分配表：</p>\n<p>Work Allocation Need Work+Allocation Finish</p>\n<p>银行家算法：</p>\n<p>1）检测进程需要的资源数是否超过宣布最大值</p>\n<p>2）检测系统是否还有足够资源</p>\n<p>3）试分配资源</p>\n<p>4）进行安全性检查算法，安全再分配</p>\n<p>安全性检查算法：</p>\n<p>1）有足够资源时，Finish = true</p>\n<p>2）从进程集合中找到一个进程未完成，但是可完成</p>\n<p>3）进程完成后释放资源，跳回2</p>\n<p>4）Finish全为true，安全。</p>\n<h2 id=\"存储器\"><a href=\"#存储器\" class=\"headerlink\" title=\"存储器\"></a>存储器</h2><h3 id=\"连续分配方式：\"><a href=\"#连续分配方式：\" class=\"headerlink\" title=\"连续分配方式：\"></a>连续分配方式：</h3><p>固定分区分配：</p>\n<p>将内存分为几个固定分区，分区大小相等或不相等</p>\n<p>动态分区分配：</p>\n<p>需要数据结构：空闲分区表、空闲分区链</p>\n<p>分配算法：</p>\n<p>首次适应算法：找到一个适应大小的空间就分配</p>\n<p>循环首次适应算法：不是每次从链首，是从上一个找到的接下来找</p>\n<p>最佳适应：</p>\n<p>总能将能满足要求，又最小的分区分配出去</p>\n<p>最坏适应：</p>\n<p>总是挑最大的空闲区分配</p>\n<p>分配操作：</p>\n<p>分配：分配一个分区，剩余空间太小，就不切割，剩余空间大，就切割。</p>\n<p>回收操作：将回收的空间和空闲的空间合并</p>\n<h3 id=\"伙伴系统：\"><a href=\"#伙伴系统：\" class=\"headerlink\" title=\"伙伴系统：\"></a>伙伴系统：</h3><p>无论已分配还是空闲，大小都是$$2^n$$，分配长度n空间时找一个值，$$2^{i-1}&lt;=n&lt;=2^i$$，如果找不到，就找更大的，但是要将该分区分为两份，以此类推。</p>\n<h3 id=\"紧凑：\"><a href=\"#紧凑：\" class=\"headerlink\" title=\"紧凑：\"></a>紧凑：</h3><p>将小作业移动，使其相邻接，将原来的分散空闲小分区拼成大的。</p>\n<h3 id=\"分页存储管理方式：\"><a href=\"#分页存储管理方式：\" class=\"headerlink\" title=\"分页存储管理方式：\"></a>分页存储管理方式：</h3><p>将进程的逻辑地址分成若干页，地址为页号、位移量（页内地址）。</p>\n<p>页表：记录进程相应页对应内存中的物理块的一块表。</p>\n<p>访问内存有效时间：有快表的情况</p>\n<p>$$EAT = a\\cdot\\lambda+(t+\\lambda)\\cdot(1-a)+t$$</p>\n<p>其中，lambda为查找快表时间，a为命中率，t为访问内存时间（说明：如果不在快表内，那么很显然需要访问两次内存，一次找地址，一次是访问数据）</p>\n<p>两级和多级页表：</p>\n<p>将页表放在某一物理块，外层页表记录的就是页表在哪个物理块，页表记录的就是页和物理块的对应关系。</p>\n<p>地址变换：以页号为索引检索页表，找到在哪一页，然后将页表始址和页号与页表项长度的乘积相加，从页表中得到这一页的物理块号，与页内地址拼接得到物理地址。</p>\n<h2 id=\"虚拟存储\"><a href=\"#虚拟存储\" class=\"headerlink\" title=\"虚拟存储\"></a>虚拟存储</h2><h3 id=\"请求分页存储方式\"><a href=\"#请求分页存储方式\" class=\"headerlink\" title=\"请求分页存储方式\"></a>请求分页存储方式</h3><p>当需要访问的页不在内存，便产生缺页中断（第一次调入也算缺页中断），然后将页面调入内存。</p>\n<h4 id=\"页面置换算法\"><a href=\"#页面置换算法\" class=\"headerlink\" title=\"页面置换算法\"></a>页面置换算法</h4><p>1、最佳算法：被淘汰的页面是以后永不使用或是未来最长时间不会访问的页面。（理想算法）</p>\n<p>2、FIFO算法：被淘汰的页面是最先进入的页面</p>\n<p>3、LRU算法：被淘汰的页面是最近最久未使用的页面。（记录一个页面自从上次被访问经过的时间，调出是淘汰t最大的）</p>\n<p>4、LFU算法：被淘汰的页面是最近使用最少的页面</p>\n<p>5、Clock算法：将页面链接为一个循环队列，设置一个访问位，某页被访问时设为1，当这个页面被检查时，如果是1，就置0，如果是0，就换出。</p>\n<h2 id=\"I-O-系统\"><a href=\"#I-O-系统\" class=\"headerlink\" title=\"I/O 系统\"></a>I/O 系统</h2><h3 id=\"磁盘调度\"><a href=\"#磁盘调度\" class=\"headerlink\" title=\"磁盘调度\"></a>磁盘调度</h3><p>1、先来先服务：仅仅适用于请求磁盘I/O较少场合</p>\n<p>2、最短寻道时间优先：寻道所需时间最短的I/O请求先服务</p>\n<p>3、扫描算法：磁盘磁头不停外向移动，处理请求，直至没有更外磁道的请求再内向移动，处理请求，直到没有更内磁道请求再外向移动。</p>\n<p>4、循环扫描算法：磁头移到最外磁道后立刻回到最里的欲访问磁道，这样可以大大降低请求的等待时间</p>\n<p>NStepSCAN和FSCAN算法：</p>\n<p>NStepSCAN：将请求分为N个子队列，对于每个子队列，用SCAN算法，对于不同子队列，用FCFS算法。</p>\n<p>FSCAN算法：对于当前请求的队列，用SCAN算法处理，而将在扫描期间的新请求，推迟到下一次扫描时再处理。</p>\n<h2 id=\"文件目录\"><a href=\"#文件目录\" class=\"headerlink\" title=\"文件目录\"></a>文件目录</h2><p>文件控制块：包括文件名、拓展名、属性、时间日期、<strong>第一块号、盘块数</strong>等</p>\n<p>索引结点：将文件名与文件描述信息分开，使文件描述信息单独成为一个称为索引结点的数据结构。这样就可以只检索文件名，而在检索时忽视其他信息，减少内存占用。</p>\n<h3 id=\"文件目录的类型\"><a href=\"#文件目录的类型\" class=\"headerlink\" title=\"文件目录的类型\"></a>文件目录的类型</h3><p>单级文件目录：只有一级文件目录，存放所有文件。</p>\n<p>两级文件目录：每个用户拥有自己的用户目录。</p>\n<p>树形目录：将文件称为树叶，将目录称为结点。应允许一个目录文件中的目录项，既可以做目录文件的FCB，也可以做数据文件的FCB。</p>\n<h2 id=\"磁盘存储器管理\"><a href=\"#磁盘存储器管理\" class=\"headerlink\" title=\"磁盘存储器管理\"></a>磁盘存储器管理</h2><p>组织方式：</p>\n<p>连续组织方式:为每一个文件分配一组相邻接的盘块。</p>\n<h4 id=\"链接组织方式\"><a href=\"#链接组织方式\" class=\"headerlink\" title=\"链接组织方式\"></a>链接组织方式</h4><p>1、隐式链接：在文件系统的每个目录项都设置一个指向文件第一个盘块的最后一个盘块的指针，每个盘块中都有一个指向下一个盘块的指针。</p>\n<p>2、显式链接：将用于链接文件各物理块的指针显式地放在内存的一块链接表，整个磁盘只有一张。（这个表是文件分配表FAT）</p>\n<h4 id=\"索引组织方式\"><a href=\"#索引组织方式\" class=\"headerlink\" title=\"索引组织方式\"></a>索引组织方式</h4><p>单级索引：每个文件分配一个索引块，将分配给这个文件的所有盘块号记录在这个索引块中。</p>\n<p>多级索引：当一个索引块满事，再分配一个索引块，然后记录接下来分配的盘块，最后再为这些索引块建立一个索引，称为一级索引，多级以此类推。</p>\n<p>增量式索引组织方式：在索引结点中设置数个直接地址项，一次间接地址项，多次间接地址项。其中一次间接地址块是索引块。</p>\n<h2 id=\"文件存储空间管理\"><a href=\"#文件存储空间管理\" class=\"headerlink\" title=\"文件存储空间管理\"></a>文件存储空间管理</h2><p>空闲表法：连续分配方式使用，记录空闲区域的第一空闲盘块号、空闲盘块数。</p>\n<p>空闲链表法：分为空闲盘块链和空闲盘区链，就是将空闲盘块和空闲盘区拉成一条链表。</p>\n<h3 id=\"位示图法：\"><a href=\"#位示图法：\" class=\"headerlink\" title=\"位示图法：\"></a>位示图法：</h3><p>用m*n个位构成示图，0未分配，1已分配。</p>\n<p>分配时：找到一个空闲的map[i,j],分配后改为map[i,j] = 1，盘块：b=n(i-1)+j。</p>\n<p>回收时：回收b号盘块，修改map[i,j] = 0；</p>\n<p>其中$$i=(b-1)\\ DIV\\ n+1$$ ; $$j=(b-1)\\ MOD\\ n+1$$（整除、模）</p>\n<h3 id=\"成组链接法：\"><a href=\"#成组链接法：\" class=\"headerlink\" title=\"成组链接法：\"></a>成组链接法：</h3><p>建立空闲盘块号栈，组织如下</p>\n<table>\n<thead>\n<tr>\n<th>属性:值</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>N(空闲盘块数):100</td>\n</tr>\n<tr>\n<td>S.free(0):pointer，File</td>\n</tr>\n<tr>\n<td>…1:File</td>\n</tr>\n<tr>\n<td>…2:File</td>\n</tr>\n<tr>\n<td>…3:File</td>\n</tr>\n<tr>\n<td>……</td>\n</tr>\n<tr>\n<td>…99:File</td>\n</tr>\n</tbody></table>\n<p>其中N还作为栈顶指针，100代表还有100个空闲块，其指向S.free(99)</p>\n<p>S.free(0)是栈底（第一个盘块），除存储数据外，后一组的盘块总数N和该组具有的盘块号也被记录于前一组的此处。</p>\n<p>至于第一组，其分配叫做“空闲盘块号栈”</p>\n<p>最后一组仅有99个空闲盘块，因为S.free(0)=0代表没有后续盘块，作为空闲盘块链的结束标志。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"进程\"><a href=\"#进程\" class=\"headerlink\" title=\"进程\"></a>进程</h2><h3 id=\"并发\"><a href=\"#并发\" class=\"headerlink\" title=\"并发\"></a>并发</h3><p>特征：间断性、失去封闭性、不可再现性</p>\n<h3 id=\"进程描述\"><a href=\"#进程描述\" class=\"headerlink\" title=\"进程描述\"></a>进程描述</h3><p>1、定义：</p>\n<p>程序的一次执行、程序及数据在处理机上的活动、是系统分配和调度的独立单位</p>\n<p>2、特征：动态性、并发性、独立性、异步性</p>\n<p>3、状态：</p>\n<p>就绪、执行、阻塞</p>\n<p>挂起（变活动为静止）：静止就绪：在激活前不执行、静止阻塞：在得到条件前不会变为静止就绪。</p>\n<p>4、PCB</p>\n<p>包括：进程标识符、处理机状态、进程调度信息、进程控制信息</p>\n<p>定义：作为独立运行基本单位标志；能实现间断性运行方式；提供进程管理所需要信息；提供进程调度所需要信息；实现与其他进程的同步与通信</p>\n<h3 id=\"进程控制\"><a href=\"#进程控制\" class=\"headerlink\" title=\"进程控制\"></a>进程控制</h3><p>状态转换：</p>\n<p>1、更新PCB信息</p>\n<p>2、PCB加入合适队列</p>\n<p>3、分配/回收资源</p>\n<p>进程切换：</p>\n<p>1、将运行环境存PCB</p>\n<p>2、PCB入响应队列</p>\n<p>3、选另一个进程运行，更新PCB</p>\n<p>4、根据PCB恢复进程运行环境。</p>\n<p>使用原语：block原语（阻塞）wakeup原语（唤醒）</p>\n<p>挂起原语：suspend、active</p>\n<h3 id=\"进程同步（重点）\"><a href=\"#进程同步（重点）\" class=\"headerlink\" title=\"进程同步（重点）\"></a>进程同步（重点）</h3><p>机制：硬件同步、信号量、管程（不常用）</p>\n<p>间接相互制约：访问相同资源</p>\n<p>直接相互制约：源自进程间的合作，进程需要另一进程结果时发生。</p>\n<p>1、生产者——消费者问题</p>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs angelscript\">semaphore empty = n缓冲区剩余空间,full = <span class=\"hljs-number\">0</span>缓冲区已写入空间,mutex = <span class=\"hljs-number\">1</span>缓冲区访问;<br><br><span class=\"hljs-built_in\">void</span> producer()&#123;<br>\twait(empty);<br>\twait(mutex);<br>\t<span class=\"hljs-comment\">//同时：使用and信号量</span><br>\twait(empty,mutex);<br>\t<span class=\"hljs-comment\">//使用信号量集</span><br>\twait(empty,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">1</span>,mutex,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">1</span>)<span class=\"hljs-comment\">//信号量类型,至少为多少,需要多少（分配后为信号量-需要）</span><br>\t...生产...<br>\tbuffer[<span class=\"hljs-keyword\">in</span>] = 产物;<br>\t<span class=\"hljs-keyword\">in</span> = (<span class=\"hljs-keyword\">in</span>+<span class=\"hljs-number\">1</span>)%n; <span class=\"hljs-comment\">//缓冲区是一个循环缓冲区</span><br>\tsignal(mutex);<br>\tsignam(full);<br>&#125;<br><span class=\"hljs-built_in\">void</span> customer()&#123;<br>\twait(full);<span class=\"hljs-comment\">//等到有东西</span><br>\twait(mutex);<br>\t...消费...<br>\t消费 = buffer[<span class=\"hljs-keyword\">out</span>];<br>\t<span class=\"hljs-keyword\">out</span> = (<span class=\"hljs-keyword\">out</span>+<span class=\"hljs-number\">1</span>)%n; <span class=\"hljs-comment\">//缓冲区是一个循环缓冲区</span><br>\tsignal(mutex);<br>\tsignam(empty);<span class=\"hljs-comment\">//腾出空间</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>2、读者——写者问题</p>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs angelscript\">semaphore L = Rn mutex = <span class=\"hljs-number\">1</span>;<span class=\"hljs-comment\">//最多支持Rn读者</span><br>reader()&#123;<br>wait(RN,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">1</span>);<br>wait(mutex,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">0</span>);<span class=\"hljs-comment\">//不影响其他读者读</span><br>...<br>signal(RN,<span class=\"hljs-number\">1</span>);<br>&#125;<br>writer()&#123;<br>wait(mutex,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">1</span>；L,Rn,<span class=\"hljs-number\">0</span>);<span class=\"hljs-comment\">//写时不允许读，要求读者信号量数RN</span><br>...<br>signal(mutex,<span class=\"hljs-number\">1</span>)<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>3、哲♂学♂家问题</p>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\"><span class=\"hljs-comment\">//使用and信号量防止死锁：</span><br><br>void <span class=\"hljs-constructor\">Van()</span>&#123;<br>\t...Boy next door!...<br>\t...Change the boss <span class=\"hljs-keyword\">of</span> gym...<br>\t<br>\t<span class=\"hljs-constructor\">Swait(<span class=\"hljs-params\">chopstick</span>[(<span class=\"hljs-params\">i</span>+1)</span>%<span class=\"hljs-number\">5</span>],chopstick<span class=\"hljs-literal\">[<span class=\"hljs-identifier\">i</span>]</span>);<span class=\"hljs-comment\">//只有同时获得筷子，才进餐，否则不要占用筷子。</span><br>\t...eat...<br>\t<span class=\"hljs-constructor\">Ssignal(<span class=\"hljs-params\">chopstick</span>[(<span class=\"hljs-params\">i</span>+1)</span>%<span class=\"hljs-number\">5</span>],chopstick<span class=\"hljs-literal\">[<span class=\"hljs-identifier\">i</span>]</span>);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"进程消息传递、线程（不是重点）\"><a href=\"#进程消息传递、线程（不是重点）\" class=\"headerlink\" title=\"进程消息传递、线程（不是重点）\"></a>进程消息传递、线程（不是重点）</h3><p>直接消息传递：</p>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs arduino\"><span class=\"hljs-comment\">//缓冲区</span><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">buffer</span>&#123;</span><br><span class=\"hljs-keyword\">int</span> sender;<br><span class=\"hljs-keyword\">int</span> <span class=\"hljs-built_in\">size</span>;<br><span class=\"hljs-built_in\">string</span> message;<br><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">buffer</span> *<span class=\"hljs-title\">next</span>;</span><span class=\"hljs-comment\">//指向下一个缓冲区指针</span><br>&#125;<br><br><span class=\"hljs-comment\">//太难了，你要考我认了</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"作业调度\"><a href=\"#作业调度\" class=\"headerlink\" title=\"作业调度\"></a>作业调度</h2><p>平均周转时间Ti:从作业提交到完成消耗的时间</p>\n<p>$$1/n(\\sum\\limits_{i=1}^nT_i)$$</p>\n<p>平均带权周转时间：其中Ts为系统为其提供的时间</p>\n<p>$$1/n(\\sum\\limits_{i=1}^nT_i/T_s)$$</p>\n<p>高响应比优先算法：</p>\n<p>$$P=\\frac{Wait\\ time+need\\ time}{need \\ time}$$</p>\n<p>$$R_p = \\frac{Response\\ time}{need\\ time}$$</p>\n<p>表示的意思：作业等待时间相同时，要求时间越短越优先，而要求时间相同时，等待时间越长越优先。对于长作业，优先级会随着等待时间增加逐步提高。</p>\n<h2 id=\"进程调度\"><a href=\"#进程调度\" class=\"headerlink\" title=\"进程调度\"></a>进程调度</h2><p>1、非抢占：进程不会被更高优先级的进程抢占</p>\n<p>2、抢占方式：</p>\n<p>优先级高的进程可以剥夺当前进程的运行</p>\n<h3 id=\"轮转调度：\"><a href=\"#轮转调度：\" class=\"headerlink\" title=\"轮转调度：\"></a>轮转调度：</h3><p>将所有进程排成一个就绪队列，每隔一段时间产生一次中断，将CPU分给队首进程。如果当前进程运行完毕，直接进行调度，如果没有完成，重新排到队尾。</p>\n<h3 id=\"优先级调度：\"><a href=\"#优先级调度：\" class=\"headerlink\" title=\"优先级调度：\"></a>优先级调度：</h3><p>非抢占：将处理机分配给优先级最高进程后，便运行到结束</p>\n<p>抢占：运行过程中如果有优先级更高的就绪进程，则停止原进程执行，将处理机分配给更优先进程。</p>\n<h3 id=\"多级反馈队列：\"><a href=\"#多级反馈队列：\" class=\"headerlink\" title=\"多级反馈队列：\"></a>多级反馈队列：</h3><p>分多个队列，第i+1个队列的时间片长度是i的两倍，但是优先级更低。如果第i队列的进程没有完成，就入第i+1队列的队尾，以此类推，直至完成。系统只有在完成i队列进程后（i队列空闲），才开始处理i+1队列进程，如果此时有更高优先级队列有新进程加入，则停止处理，先处理优先级更高进程。</p>\n<h2 id=\"实时调度\"><a href=\"#实时调度\" class=\"headerlink\" title=\"实时调度\"></a>实时调度</h2><h3 id=\"最早截止时间优先：\"><a href=\"#最早截止时间优先：\" class=\"headerlink\" title=\"最早截止时间优先：\"></a>最早截止时间优先：</h3><p>截止时间越早，优先级越高，其他同抢占式。</p>\n<h3 id=\"最低松弛度优先：\"><a href=\"#最低松弛度优先：\" class=\"headerlink\" title=\"最低松弛度优先：\"></a>最低松弛度优先：</h3><p>优先级取决于松弛程度</p>\n<p>松弛程度 = 完成时间（比如200ms内）-需要时间（比如需要执行100ms）</p>\n<p>松弛度越低，优先级越高。</p>\n<h2 id=\"死锁问题\"><a href=\"#死锁问题\" class=\"headerlink\" title=\"死锁问题\"></a>死锁问题</h2><p>产生死锁必要条件：</p>\n<p>1、互斥条件：资源排他性使用</p>\n<p>2、请求和保持条件：进程请求新的资源，又对已经有的资源保持不放</p>\n<p>3、不可抢占条件：资源没使用完不能抢占</p>\n<p>4、循环等待条件：存在进程—资源循环链。</p>\n<p>处理方法：预防死锁，避免死锁，检测死锁，解除死锁</p>\n<h3 id=\"预防死锁\"><a href=\"#预防死锁\" class=\"headerlink\" title=\"预防死锁\"></a>预防死锁</h3><p>破坏除互斥条件以外的所有条件。</p>\n<h3 id=\"避免死锁：系统安全状态\"><a href=\"#避免死锁：系统安全状态\" class=\"headerlink\" title=\"避免死锁：系统安全状态\"></a>避免死锁：系统安全状态</h3><p>银行家算法：找出一个安全序列</p>\n<p>初始表：</p>\n<p>Max Need Allocation Available</p>\n<p>分配表：</p>\n<p>Work Allocation Need Work+Allocation Finish</p>\n<p>银行家算法：</p>\n<p>1）检测进程需要的资源数是否超过宣布最大值</p>\n<p>2）检测系统是否还有足够资源</p>\n<p>3）试分配资源</p>\n<p>4）进行安全性检查算法，安全再分配</p>\n<p>安全性检查算法：</p>\n<p>1）有足够资源时，Finish = true</p>\n<p>2）从进程集合中找到一个进程未完成，但是可完成</p>\n<p>3）进程完成后释放资源，跳回2</p>\n<p>4）Finish全为true，安全。</p>\n<h2 id=\"存储器\"><a href=\"#存储器\" class=\"headerlink\" title=\"存储器\"></a>存储器</h2><h3 id=\"连续分配方式：\"><a href=\"#连续分配方式：\" class=\"headerlink\" title=\"连续分配方式：\"></a>连续分配方式：</h3><p>固定分区分配：</p>\n<p>将内存分为几个固定分区，分区大小相等或不相等</p>\n<p>动态分区分配：</p>\n<p>需要数据结构：空闲分区表、空闲分区链</p>\n<p>分配算法：</p>\n<p>首次适应算法：找到一个适应大小的空间就分配</p>\n<p>循环首次适应算法：不是每次从链首，是从上一个找到的接下来找</p>\n<p>最佳适应：</p>\n<p>总能将能满足要求，又最小的分区分配出去</p>\n<p>最坏适应：</p>\n<p>总是挑最大的空闲区分配</p>\n<p>分配操作：</p>\n<p>分配：分配一个分区，剩余空间太小，就不切割，剩余空间大，就切割。</p>\n<p>回收操作：将回收的空间和空闲的空间合并</p>\n<h3 id=\"伙伴系统：\"><a href=\"#伙伴系统：\" class=\"headerlink\" title=\"伙伴系统：\"></a>伙伴系统：</h3><p>无论已分配还是空闲，大小都是$$2^n$$，分配长度n空间时找一个值，$$2^{i-1}&lt;=n&lt;=2^i$$，如果找不到，就找更大的，但是要将该分区分为两份，以此类推。</p>\n<h3 id=\"紧凑：\"><a href=\"#紧凑：\" class=\"headerlink\" title=\"紧凑：\"></a>紧凑：</h3><p>将小作业移动，使其相邻接，将原来的分散空闲小分区拼成大的。</p>\n<h3 id=\"分页存储管理方式：\"><a href=\"#分页存储管理方式：\" class=\"headerlink\" title=\"分页存储管理方式：\"></a>分页存储管理方式：</h3><p>将进程的逻辑地址分成若干页，地址为页号、位移量（页内地址）。</p>\n<p>页表：记录进程相应页对应内存中的物理块的一块表。</p>\n<p>访问内存有效时间：有快表的情况</p>\n<p>$$EAT = a\\cdot\\lambda+(t+\\lambda)\\cdot(1-a)+t$$</p>\n<p>其中，lambda为查找快表时间，a为命中率，t为访问内存时间（说明：如果不在快表内，那么很显然需要访问两次内存，一次找地址，一次是访问数据）</p>\n<p>两级和多级页表：</p>\n<p>将页表放在某一物理块，外层页表记录的就是页表在哪个物理块，页表记录的就是页和物理块的对应关系。</p>\n<p>地址变换：以页号为索引检索页表，找到在哪一页，然后将页表始址和页号与页表项长度的乘积相加，从页表中得到这一页的物理块号，与页内地址拼接得到物理地址。</p>\n<h2 id=\"虚拟存储\"><a href=\"#虚拟存储\" class=\"headerlink\" title=\"虚拟存储\"></a>虚拟存储</h2><h3 id=\"请求分页存储方式\"><a href=\"#请求分页存储方式\" class=\"headerlink\" title=\"请求分页存储方式\"></a>请求分页存储方式</h3><p>当需要访问的页不在内存，便产生缺页中断（第一次调入也算缺页中断），然后将页面调入内存。</p>\n<h4 id=\"页面置换算法\"><a href=\"#页面置换算法\" class=\"headerlink\" title=\"页面置换算法\"></a>页面置换算法</h4><p>1、最佳算法：被淘汰的页面是以后永不使用或是未来最长时间不会访问的页面。（理想算法）</p>\n<p>2、FIFO算法：被淘汰的页面是最先进入的页面</p>\n<p>3、LRU算法：被淘汰的页面是最近最久未使用的页面。（记录一个页面自从上次被访问经过的时间，调出是淘汰t最大的）</p>\n<p>4、LFU算法：被淘汰的页面是最近使用最少的页面</p>\n<p>5、Clock算法：将页面链接为一个循环队列，设置一个访问位，某页被访问时设为1，当这个页面被检查时，如果是1，就置0，如果是0，就换出。</p>\n<h2 id=\"I-O-系统\"><a href=\"#I-O-系统\" class=\"headerlink\" title=\"I/O 系统\"></a>I/O 系统</h2><h3 id=\"磁盘调度\"><a href=\"#磁盘调度\" class=\"headerlink\" title=\"磁盘调度\"></a>磁盘调度</h3><p>1、先来先服务：仅仅适用于请求磁盘I/O较少场合</p>\n<p>2、最短寻道时间优先：寻道所需时间最短的I/O请求先服务</p>\n<p>3、扫描算法：磁盘磁头不停外向移动，处理请求，直至没有更外磁道的请求再内向移动，处理请求，直到没有更内磁道请求再外向移动。</p>\n<p>4、循环扫描算法：磁头移到最外磁道后立刻回到最里的欲访问磁道，这样可以大大降低请求的等待时间</p>\n<p>NStepSCAN和FSCAN算法：</p>\n<p>NStepSCAN：将请求分为N个子队列，对于每个子队列，用SCAN算法，对于不同子队列，用FCFS算法。</p>\n<p>FSCAN算法：对于当前请求的队列，用SCAN算法处理，而将在扫描期间的新请求，推迟到下一次扫描时再处理。</p>\n<h2 id=\"文件目录\"><a href=\"#文件目录\" class=\"headerlink\" title=\"文件目录\"></a>文件目录</h2><p>文件控制块：包括文件名、拓展名、属性、时间日期、<strong>第一块号、盘块数</strong>等</p>\n<p>索引结点：将文件名与文件描述信息分开，使文件描述信息单独成为一个称为索引结点的数据结构。这样就可以只检索文件名，而在检索时忽视其他信息，减少内存占用。</p>\n<h3 id=\"文件目录的类型\"><a href=\"#文件目录的类型\" class=\"headerlink\" title=\"文件目录的类型\"></a>文件目录的类型</h3><p>单级文件目录：只有一级文件目录，存放所有文件。</p>\n<p>两级文件目录：每个用户拥有自己的用户目录。</p>\n<p>树形目录：将文件称为树叶，将目录称为结点。应允许一个目录文件中的目录项，既可以做目录文件的FCB，也可以做数据文件的FCB。</p>\n<h2 id=\"磁盘存储器管理\"><a href=\"#磁盘存储器管理\" class=\"headerlink\" title=\"磁盘存储器管理\"></a>磁盘存储器管理</h2><p>组织方式：</p>\n<p>连续组织方式:为每一个文件分配一组相邻接的盘块。</p>\n<h4 id=\"链接组织方式\"><a href=\"#链接组织方式\" class=\"headerlink\" title=\"链接组织方式\"></a>链接组织方式</h4><p>1、隐式链接：在文件系统的每个目录项都设置一个指向文件第一个盘块的最后一个盘块的指针，每个盘块中都有一个指向下一个盘块的指针。</p>\n<p>2、显式链接：将用于链接文件各物理块的指针显式地放在内存的一块链接表，整个磁盘只有一张。（这个表是文件分配表FAT）</p>\n<h4 id=\"索引组织方式\"><a href=\"#索引组织方式\" class=\"headerlink\" title=\"索引组织方式\"></a>索引组织方式</h4><p>单级索引：每个文件分配一个索引块，将分配给这个文件的所有盘块号记录在这个索引块中。</p>\n<p>多级索引：当一个索引块满事，再分配一个索引块，然后记录接下来分配的盘块，最后再为这些索引块建立一个索引，称为一级索引，多级以此类推。</p>\n<p>增量式索引组织方式：在索引结点中设置数个直接地址项，一次间接地址项，多次间接地址项。其中一次间接地址块是索引块。</p>\n<h2 id=\"文件存储空间管理\"><a href=\"#文件存储空间管理\" class=\"headerlink\" title=\"文件存储空间管理\"></a>文件存储空间管理</h2><p>空闲表法：连续分配方式使用，记录空闲区域的第一空闲盘块号、空闲盘块数。</p>\n<p>空闲链表法：分为空闲盘块链和空闲盘区链，就是将空闲盘块和空闲盘区拉成一条链表。</p>\n<h3 id=\"位示图法：\"><a href=\"#位示图法：\" class=\"headerlink\" title=\"位示图法：\"></a>位示图法：</h3><p>用m*n个位构成示图，0未分配，1已分配。</p>\n<p>分配时：找到一个空闲的map[i,j],分配后改为map[i,j] = 1，盘块：b=n(i-1)+j。</p>\n<p>回收时：回收b号盘块，修改map[i,j] = 0；</p>\n<p>其中$$i=(b-1)\\ DIV\\ n+1$$ ; $$j=(b-1)\\ MOD\\ n+1$$（整除、模）</p>\n<h3 id=\"成组链接法：\"><a href=\"#成组链接法：\" class=\"headerlink\" title=\"成组链接法：\"></a>成组链接法：</h3><p>建立空闲盘块号栈，组织如下</p>\n<table>\n<thead>\n<tr>\n<th>属性:值</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>N(空闲盘块数):100</td>\n</tr>\n<tr>\n<td>S.free(0):pointer，File</td>\n</tr>\n<tr>\n<td>…1:File</td>\n</tr>\n<tr>\n<td>…2:File</td>\n</tr>\n<tr>\n<td>…3:File</td>\n</tr>\n<tr>\n<td>……</td>\n</tr>\n<tr>\n<td>…99:File</td>\n</tr>\n</tbody></table>\n<p>其中N还作为栈顶指针，100代表还有100个空闲块，其指向S.free(99)</p>\n<p>S.free(0)是栈底（第一个盘块），除存储数据外，后一组的盘块总数N和该组具有的盘块号也被记录于前一组的此处。</p>\n<p>至于第一组，其分配叫做“空闲盘块号栈”</p>\n<p>最后一组仅有99个空闲盘块，因为S.free(0)=0代表没有后续盘块，作为空闲盘块链的结束标志。</p>\n"},{"layout":"post","title":"React","intro":"","date":"2021-09-17T04:00:01.000Z","author":"Makinohara","catalog":true,"_content":"\n```js\nfunction Hello(props) {\n    return <div>Hello,{props.name}</div>\n}\n\nlet elementList = [];\nfor (let i = 0;i<3;i++){\n    elementList.push(<Hello name={i}/>);\n}\n\nlet element = <div>{elementList}</div>\n\nfunction Time(props){\n    let now = new Date();\n    now = now.toLocaleTimeString();\n    return <div>{now}</div>;\n}\n\nReactDOM.render(element,document.getElementById('root'));\nReactDOM.render(<Time/>,document.getElementById('time'));\n\nfunction tick() {\n    const element = <Time/>\n    ReactDOM.render(element, document.getElementById('time'));\n}\n\nvar interval = setInterval(tick, 1000);\n\n```\n\n定义一个组件类：\n\n```js\nclass Clock extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {date: new Date()};\n  }\n\n  componentDidMount() {\n    this.timerID = setInterval(\n      () => this.tick(),\n      1000\n    );\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timerID);\n  }\n\n  tick() {\n    this.setState({\n      date: new Date()\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>Hello, world!</h1>\n        <h2>It is {this.state.date.toLocaleTimeString()}.</h2>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(\n  <Clock />,\n  document.getElementById('root')\n);\n```\n\n","source":"_posts/2021-9-17-React.markdown","raw":"---\nlayout:     post\ntitle:      React\nintro:   \"\"\ndate:       2021-9-17 12:00:01\nauthor:     \"Makinohara\"\ncatalog: true\ntags:\n    - 工程开发\n    \n---\n\n```js\nfunction Hello(props) {\n    return <div>Hello,{props.name}</div>\n}\n\nlet elementList = [];\nfor (let i = 0;i<3;i++){\n    elementList.push(<Hello name={i}/>);\n}\n\nlet element = <div>{elementList}</div>\n\nfunction Time(props){\n    let now = new Date();\n    now = now.toLocaleTimeString();\n    return <div>{now}</div>;\n}\n\nReactDOM.render(element,document.getElementById('root'));\nReactDOM.render(<Time/>,document.getElementById('time'));\n\nfunction tick() {\n    const element = <Time/>\n    ReactDOM.render(element, document.getElementById('time'));\n}\n\nvar interval = setInterval(tick, 1000);\n\n```\n\n定义一个组件类：\n\n```js\nclass Clock extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {date: new Date()};\n  }\n\n  componentDidMount() {\n    this.timerID = setInterval(\n      () => this.tick(),\n      1000\n    );\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timerID);\n  }\n\n  tick() {\n    this.setState({\n      date: new Date()\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>Hello, world!</h1>\n        <h2>It is {this.state.date.toLocaleTimeString()}.</h2>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(\n  <Clock />,\n  document.getElementById('root')\n);\n```\n\n","slug":"2021-9-17-React","published":1,"updated":"2021-10-24T02:04:35.830Z","comments":1,"photos":[],"link":"","_id":"ckv4pvow2000k24pe2koq4um4","content":"<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Hello</span>(<span class=\"hljs-params\">props</span>) </span>&#123;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>Hello,&#123;props.name&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br>&#125;<br><br><span class=\"hljs-keyword\">let</span> elementList = [];<br><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>;i&lt;<span class=\"hljs-number\">3</span>;i++)&#123;<br>    elementList.push(<span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Hello</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&#123;i&#125;/</span>&gt;</span></span>);<br>&#125;<br><br><span class=\"hljs-keyword\">let</span> element = <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>&#123;elementList&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Time</span>(<span class=\"hljs-params\">props</span>)</span>&#123;<br>    <span class=\"hljs-keyword\">let</span> now = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>();<br>    now = now.toLocaleTimeString();<br>    <span class=\"hljs-keyword\">return</span> <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>&#123;now&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>;<br>&#125;<br><br>ReactDOM.render(element,<span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">'root'</span>));<br>ReactDOM.render(<span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Time</span>/&gt;</span></span>,<span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">'time'</span>));<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">tick</span>(<span class=\"hljs-params\"></span>) </span>&#123;<br>    <span class=\"hljs-keyword\">const</span> element = <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Time</span>/&gt;</span></span><br>    ReactDOM.render(element, <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">'time'</span>));<br>&#125;<br><br><span class=\"hljs-keyword\">var</span> interval = setInterval(tick, <span class=\"hljs-number\">1000</span>);<br></code></pre></td></tr></table></figure>\n<p>定义一个组件类：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Clock</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">React</span>.<span class=\"hljs-title\">Component</span> </span>&#123;<br>  <span class=\"hljs-keyword\">constructor</span>(props) &#123;<br>    <span class=\"hljs-keyword\">super</span>(props);<br>    <span class=\"hljs-keyword\">this</span>.state = &#123;<span class=\"hljs-attr\">date</span>: <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>()&#125;;<br>  &#125;<br><br>  componentDidMount() &#123;<br>    <span class=\"hljs-keyword\">this</span>.timerID = setInterval(<br>      <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> <span class=\"hljs-keyword\">this</span>.tick(),<br>      <span class=\"hljs-number\">1000</span><br>    );<br>  &#125;<br><br>  componentWillUnmount() &#123;<br>    clearInterval(<span class=\"hljs-keyword\">this</span>.timerID);<br>  &#125;<br><br>  tick() &#123;<br>    <span class=\"hljs-keyword\">this</span>.setState(&#123;<br>      <span class=\"hljs-attr\">date</span>: <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>()<br>    &#125;);<br>  &#125;<br><br>  render() &#123;<br>    <span class=\"hljs-keyword\">return</span> (<br>      <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>Hello, world!<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span>&gt;</span>It is &#123;this.state.date.toLocaleTimeString()&#125;.<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br><br>ReactDOM.render(<br>  <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Clock</span> /&gt;</span></span>,<br>  <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">'root'</span>)<br>);<br></code></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Hello</span>(<span class=\"hljs-params\">props</span>) </span>&#123;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>Hello,&#123;props.name&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br>&#125;<br><br><span class=\"hljs-keyword\">let</span> elementList = [];<br><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>;i&lt;<span class=\"hljs-number\">3</span>;i++)&#123;<br>    elementList.push(<span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Hello</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&#123;i&#125;/</span>&gt;</span></span>);<br>&#125;<br><br><span class=\"hljs-keyword\">let</span> element = <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>&#123;elementList&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Time</span>(<span class=\"hljs-params\">props</span>)</span>&#123;<br>    <span class=\"hljs-keyword\">let</span> now = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>();<br>    now = now.toLocaleTimeString();<br>    <span class=\"hljs-keyword\">return</span> <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>&#123;now&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>;<br>&#125;<br><br>ReactDOM.render(element,<span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">'root'</span>));<br>ReactDOM.render(<span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Time</span>/&gt;</span></span>,<span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">'time'</span>));<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">tick</span>(<span class=\"hljs-params\"></span>) </span>&#123;<br>    <span class=\"hljs-keyword\">const</span> element = <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Time</span>/&gt;</span></span><br>    ReactDOM.render(element, <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">'time'</span>));<br>&#125;<br><br><span class=\"hljs-keyword\">var</span> interval = setInterval(tick, <span class=\"hljs-number\">1000</span>);<br></code></pre></td></tr></table></figure>\n<p>定义一个组件类：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Clock</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">React</span>.<span class=\"hljs-title\">Component</span> </span>&#123;<br>  <span class=\"hljs-keyword\">constructor</span>(props) &#123;<br>    <span class=\"hljs-keyword\">super</span>(props);<br>    <span class=\"hljs-keyword\">this</span>.state = &#123;<span class=\"hljs-attr\">date</span>: <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>()&#125;;<br>  &#125;<br><br>  componentDidMount() &#123;<br>    <span class=\"hljs-keyword\">this</span>.timerID = setInterval(<br>      <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> <span class=\"hljs-keyword\">this</span>.tick(),<br>      <span class=\"hljs-number\">1000</span><br>    );<br>  &#125;<br><br>  componentWillUnmount() &#123;<br>    clearInterval(<span class=\"hljs-keyword\">this</span>.timerID);<br>  &#125;<br><br>  tick() &#123;<br>    <span class=\"hljs-keyword\">this</span>.setState(&#123;<br>      <span class=\"hljs-attr\">date</span>: <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>()<br>    &#125;);<br>  &#125;<br><br>  render() &#123;<br>    <span class=\"hljs-keyword\">return</span> (<br>      <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>Hello, world!<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span>&gt;</span>It is &#123;this.state.date.toLocaleTimeString()&#125;.<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br><br>ReactDOM.render(<br>  <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Clock</span> /&gt;</span></span>,<br>  <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">'root'</span>)<br>);<br></code></pre></td></tr></table></figure>\n"},{"layout":"post","title":"没有什么道德","intro":"","date":"2021-07-07T08:00:01.000Z","author":"Makinohara","catalog":true,"_content":"\n今天是七七事件84周年，本来这是一个很例行的纪念日，用来警醒我们勿忘国耻。但是，我却从其中联想到了其他的一些事。\n\n那就是：没有什么道德，拳头就是道德。\n\n回想七七事件时的日本多牛逼，说进攻就进攻，根本不把蒋介石当回事。再看看今天的日本，给美国当狗，美国叫他往东就不敢往西。但是为什么日本就不愿意给中国当狗？因为那个原子弹是美国扔的，李梅烧烤也是美国人开的，所以日本人认为自己是被美国人打败的，而不是中国人。反观蒋介石那边，1945年还在丢地，真是令人啼笑皆非。所以日本人当然不承认中国人打败了日本人，靖国神社也没有拆掉的想法。我看，除非要扔几个中国的原子弹，扔中国的凝固汽油弹，或者把航母刷成黑色开到东京湾，日本人才能听话。\n\n其实并非是在国际社会上如此，在日常生活中也是如此，如果你自己没有什么价值，当你想找别人办事的时候，还要求爹爹告奶奶的；如果你有等量的价值，你们就能合作地很好；如果你自身的能力足够强大，就变成别人求爹爹告奶奶地求着与你合作了。那些所谓的道德、所谓的互相尊重，只不过是狗屁罢了。真正意味上的尊重，永远只建立在实力的基础上。只要自身足够强大，那别人不尊重你，你也能用拳头让他尊重。\n\n但是很显然，用拳头这种东西太暴力了，有违社会主义核心价值观。但是现实社会中，我们通常不用这种方式，而是通过拉帮结派的方式来互吐口水，让人少的那一方闭嘴。无论是网上的骂战，还是显现实生活中的挂人，取胜的基础都是人足够多。只要你掌握了舆论的主动权，说服（或者是蒙蔽）让大多数人帮你说话，那你就赢了，至于另一方，无论你想让他道歉、社死还是咋地，就任你处置了。那没有势力的人怎么办呢？最好的方法就是保持中立，或者换句话说就是当缩头乌龟，我惹不起还躲不起吗？但很显然，这种方法还是治标不治本。当时的中国也不是惹不起日本就能躲得了的，日本说进攻你还是拿他没办法。总不能把河北也让出去吧。\n\n所以，最后得出一个结论：想要获得尊严，还是要靠“拳头”。这个拳头可以是你掌握的技术（这个不一定靠谱，别人可以用拳头逼你把技术交给他），也可以是真的“拳头”，也可以是掌控的利益集团（这个狠，很多事情根本不用劳烦自己动手了）。但是作为一个rat man，想要组建利益集团、或者练“拳头”都是不靠谱的（整天996，不被熬夜熬死就不错了，还去练“拳头”）。那么还有什么靠谱的方式吗？那就是掌握技术，然后投靠有“拳头”的人，让他保护你，如果那个人保护不了你，就趁早开溜，然后去投靠另一个人。没办法，作为rat man，学会随时run是一项必备的技能。\n\n现在的中国互联网环境，极端主义盛行。一方面，由于资本家之间拉帮结派，雇佣水军，导致大量的本来与其没啥关系的人，由于太肤浅，太容易受到他人影响，便加入了各种骂战中。结党营私、党同伐异，这就是中国互联网现在的环境。由于网民的素质持续下降，小学生与初中生大规模通过手机这种方式上网，再加上有不少没素质的无业游民也学会了用手机上网，现在的互联网环境一团乱。但是如果只是这样还好，被骂几句又不能伤者着几块肉。但是现在由于我国（大多数国家都差不多）互联网对用户隐私的保护能力极差，差到令人无法相信的程度（直接往外面卖信息了），所以被开盒（人肉搜索）也是常有的事。因此，我们可以得到结论，互联网不仅是法外之地，其还能把一些本不是法外之地的地方变成法外之地（比如说你家，因为他能找到你家在哪）。如此看来，想要获得尊严，还是得靠“拳头”，比如用技术去开开盒人的盒，比如建立自己的利益团体，但我看，这些都太麻烦了，还不如就当透明人，不要让任何人（尤其是网上的人）知道你在干什么，否则他们会指责你干什么都不对的。\n\n如此，我们可以得出结论：如何获得尊严（哪怕是有限的）\n\n1、掌握足够的技术和资源。\n\n2、隐藏自己的想法。\n\n3、不要参与极端主义讨论。\n\n4、隐藏自己的行为。\n\n5、保持独立性，不要太容易受他人影响，能自己做的事最好亲力亲为，不要让自己的命脉被掌握在别人的手上。\n\n","source":"_posts/2021-7-7-没有什么道德.markdown","raw":"---\nlayout:     post\ntitle:      \"没有什么道德\"\nintro:   \"\"\ndate:       2021-7-7 16:00:01\nauthor:     \"Makinohara\"\ncatalog: true\ntags:\n    - 生活感想\n    \n---\n\n今天是七七事件84周年，本来这是一个很例行的纪念日，用来警醒我们勿忘国耻。但是，我却从其中联想到了其他的一些事。\n\n那就是：没有什么道德，拳头就是道德。\n\n回想七七事件时的日本多牛逼，说进攻就进攻，根本不把蒋介石当回事。再看看今天的日本，给美国当狗，美国叫他往东就不敢往西。但是为什么日本就不愿意给中国当狗？因为那个原子弹是美国扔的，李梅烧烤也是美国人开的，所以日本人认为自己是被美国人打败的，而不是中国人。反观蒋介石那边，1945年还在丢地，真是令人啼笑皆非。所以日本人当然不承认中国人打败了日本人，靖国神社也没有拆掉的想法。我看，除非要扔几个中国的原子弹，扔中国的凝固汽油弹，或者把航母刷成黑色开到东京湾，日本人才能听话。\n\n其实并非是在国际社会上如此，在日常生活中也是如此，如果你自己没有什么价值，当你想找别人办事的时候，还要求爹爹告奶奶的；如果你有等量的价值，你们就能合作地很好；如果你自身的能力足够强大，就变成别人求爹爹告奶奶地求着与你合作了。那些所谓的道德、所谓的互相尊重，只不过是狗屁罢了。真正意味上的尊重，永远只建立在实力的基础上。只要自身足够强大，那别人不尊重你，你也能用拳头让他尊重。\n\n但是很显然，用拳头这种东西太暴力了，有违社会主义核心价值观。但是现实社会中，我们通常不用这种方式，而是通过拉帮结派的方式来互吐口水，让人少的那一方闭嘴。无论是网上的骂战，还是显现实生活中的挂人，取胜的基础都是人足够多。只要你掌握了舆论的主动权，说服（或者是蒙蔽）让大多数人帮你说话，那你就赢了，至于另一方，无论你想让他道歉、社死还是咋地，就任你处置了。那没有势力的人怎么办呢？最好的方法就是保持中立，或者换句话说就是当缩头乌龟，我惹不起还躲不起吗？但很显然，这种方法还是治标不治本。当时的中国也不是惹不起日本就能躲得了的，日本说进攻你还是拿他没办法。总不能把河北也让出去吧。\n\n所以，最后得出一个结论：想要获得尊严，还是要靠“拳头”。这个拳头可以是你掌握的技术（这个不一定靠谱，别人可以用拳头逼你把技术交给他），也可以是真的“拳头”，也可以是掌控的利益集团（这个狠，很多事情根本不用劳烦自己动手了）。但是作为一个rat man，想要组建利益集团、或者练“拳头”都是不靠谱的（整天996，不被熬夜熬死就不错了，还去练“拳头”）。那么还有什么靠谱的方式吗？那就是掌握技术，然后投靠有“拳头”的人，让他保护你，如果那个人保护不了你，就趁早开溜，然后去投靠另一个人。没办法，作为rat man，学会随时run是一项必备的技能。\n\n现在的中国互联网环境，极端主义盛行。一方面，由于资本家之间拉帮结派，雇佣水军，导致大量的本来与其没啥关系的人，由于太肤浅，太容易受到他人影响，便加入了各种骂战中。结党营私、党同伐异，这就是中国互联网现在的环境。由于网民的素质持续下降，小学生与初中生大规模通过手机这种方式上网，再加上有不少没素质的无业游民也学会了用手机上网，现在的互联网环境一团乱。但是如果只是这样还好，被骂几句又不能伤者着几块肉。但是现在由于我国（大多数国家都差不多）互联网对用户隐私的保护能力极差，差到令人无法相信的程度（直接往外面卖信息了），所以被开盒（人肉搜索）也是常有的事。因此，我们可以得到结论，互联网不仅是法外之地，其还能把一些本不是法外之地的地方变成法外之地（比如说你家，因为他能找到你家在哪）。如此看来，想要获得尊严，还是得靠“拳头”，比如用技术去开开盒人的盒，比如建立自己的利益团体，但我看，这些都太麻烦了，还不如就当透明人，不要让任何人（尤其是网上的人）知道你在干什么，否则他们会指责你干什么都不对的。\n\n如此，我们可以得出结论：如何获得尊严（哪怕是有限的）\n\n1、掌握足够的技术和资源。\n\n2、隐藏自己的想法。\n\n3、不要参与极端主义讨论。\n\n4、隐藏自己的行为。\n\n5、保持独立性，不要太容易受他人影响，能自己做的事最好亲力亲为，不要让自己的命脉被掌握在别人的手上。\n\n","slug":"2021-7-7-没有什么道德","published":1,"updated":"2022-01-02T12:53:30.634Z","_id":"ckv4pvow3000n24peeroe6sqi","comments":1,"photos":[],"link":"","content":"<p>今天是七七事件84周年，本来这是一个很例行的纪念日，用来警醒我们勿忘国耻。但是，我却从其中联想到了其他的一些事。</p>\n<p>那就是：没有什么道德，拳头就是道德。</p>\n<p>回想七七事件时的日本多牛逼，说进攻就进攻，根本不把蒋介石当回事。再看看今天的日本，给美国当狗，美国叫他往东就不敢往西。但是为什么日本就不愿意给中国当狗？因为那个原子弹是美国扔的，李梅烧烤也是美国人开的，所以日本人认为自己是被美国人打败的，而不是中国人。反观蒋介石那边，1945年还在丢地，真是令人啼笑皆非。所以日本人当然不承认中国人打败了日本人，靖国神社也没有拆掉的想法。我看，除非要扔几个中国的原子弹，扔中国的凝固汽油弹，或者把航母刷成黑色开到东京湾，日本人才能听话。</p>\n<p>其实并非是在国际社会上如此，在日常生活中也是如此，如果你自己没有什么价值，当你想找别人办事的时候，还要求爹爹告奶奶的；如果你有等量的价值，你们就能合作地很好；如果你自身的能力足够强大，就变成别人求爹爹告奶奶地求着与你合作了。那些所谓的道德、所谓的互相尊重，只不过是狗屁罢了。真正意味上的尊重，永远只建立在实力的基础上。只要自身足够强大，那别人不尊重你，你也能用拳头让他尊重。</p>\n<p>但是很显然，用拳头这种东西太暴力了，有违社会主义核心价值观。但是现实社会中，我们通常不用这种方式，而是通过拉帮结派的方式来互吐口水，让人少的那一方闭嘴。无论是网上的骂战，还是显现实生活中的挂人，取胜的基础都是人足够多。只要你掌握了舆论的主动权，说服（或者是蒙蔽）让大多数人帮你说话，那你就赢了，至于另一方，无论你想让他道歉、社死还是咋地，就任你处置了。那没有势力的人怎么办呢？最好的方法就是保持中立，或者换句话说就是当缩头乌龟，我惹不起还躲不起吗？但很显然，这种方法还是治标不治本。当时的中国也不是惹不起日本就能躲得了的，日本说进攻你还是拿他没办法。总不能把河北也让出去吧。</p>\n<p>所以，最后得出一个结论：想要获得尊严，还是要靠“拳头”。这个拳头可以是你掌握的技术（这个不一定靠谱，别人可以用拳头逼你把技术交给他），也可以是真的“拳头”，也可以是掌控的利益集团（这个狠，很多事情根本不用劳烦自己动手了）。但是作为一个rat man，想要组建利益集团、或者练“拳头”都是不靠谱的（整天996，不被熬夜熬死就不错了，还去练“拳头”）。那么还有什么靠谱的方式吗？那就是掌握技术，然后投靠有“拳头”的人，让他保护你，如果那个人保护不了你，就趁早开溜，然后去投靠另一个人。没办法，作为rat man，学会随时run是一项必备的技能。</p>\n<p>现在的中国互联网环境，极端主义盛行。一方面，由于资本家之间拉帮结派，雇佣水军，导致大量的本来与其没啥关系的人，由于太肤浅，太容易受到他人影响，便加入了各种骂战中。结党营私、党同伐异，这就是中国互联网现在的环境。由于网民的素质持续下降，小学生与初中生大规模通过手机这种方式上网，再加上有不少没素质的无业游民也学会了用手机上网，现在的互联网环境一团乱。但是如果只是这样还好，被骂几句又不能伤者着几块肉。但是现在由于我国（大多数国家都差不多）互联网对用户隐私的保护能力极差，差到令人无法相信的程度（直接往外面卖信息了），所以被开盒（人肉搜索）也是常有的事。因此，我们可以得到结论，互联网不仅是法外之地，其还能把一些本不是法外之地的地方变成法外之地（比如说你家，因为他能找到你家在哪）。如此看来，想要获得尊严，还是得靠“拳头”，比如用技术去开开盒人的盒，比如建立自己的利益团体，但我看，这些都太麻烦了，还不如就当透明人，不要让任何人（尤其是网上的人）知道你在干什么，否则他们会指责你干什么都不对的。</p>\n<p>如此，我们可以得出结论：如何获得尊严（哪怕是有限的）</p>\n<p>1、掌握足够的技术和资源。</p>\n<p>2、隐藏自己的想法。</p>\n<p>3、不要参与极端主义讨论。</p>\n<p>4、隐藏自己的行为。</p>\n<p>5、保持独立性，不要太容易受他人影响，能自己做的事最好亲力亲为，不要让自己的命脉被掌握在别人的手上。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>今天是七七事件84周年，本来这是一个很例行的纪念日，用来警醒我们勿忘国耻。但是，我却从其中联想到了其他的一些事。</p>\n<p>那就是：没有什么道德，拳头就是道德。</p>\n<p>回想七七事件时的日本多牛逼，说进攻就进攻，根本不把蒋介石当回事。再看看今天的日本，给美国当狗，美国叫他往东就不敢往西。但是为什么日本就不愿意给中国当狗？因为那个原子弹是美国扔的，李梅烧烤也是美国人开的，所以日本人认为自己是被美国人打败的，而不是中国人。反观蒋介石那边，1945年还在丢地，真是令人啼笑皆非。所以日本人当然不承认中国人打败了日本人，靖国神社也没有拆掉的想法。我看，除非要扔几个中国的原子弹，扔中国的凝固汽油弹，或者把航母刷成黑色开到东京湾，日本人才能听话。</p>\n<p>其实并非是在国际社会上如此，在日常生活中也是如此，如果你自己没有什么价值，当你想找别人办事的时候，还要求爹爹告奶奶的；如果你有等量的价值，你们就能合作地很好；如果你自身的能力足够强大，就变成别人求爹爹告奶奶地求着与你合作了。那些所谓的道德、所谓的互相尊重，只不过是狗屁罢了。真正意味上的尊重，永远只建立在实力的基础上。只要自身足够强大，那别人不尊重你，你也能用拳头让他尊重。</p>\n<p>但是很显然，用拳头这种东西太暴力了，有违社会主义核心价值观。但是现实社会中，我们通常不用这种方式，而是通过拉帮结派的方式来互吐口水，让人少的那一方闭嘴。无论是网上的骂战，还是显现实生活中的挂人，取胜的基础都是人足够多。只要你掌握了舆论的主动权，说服（或者是蒙蔽）让大多数人帮你说话，那你就赢了，至于另一方，无论你想让他道歉、社死还是咋地，就任你处置了。那没有势力的人怎么办呢？最好的方法就是保持中立，或者换句话说就是当缩头乌龟，我惹不起还躲不起吗？但很显然，这种方法还是治标不治本。当时的中国也不是惹不起日本就能躲得了的，日本说进攻你还是拿他没办法。总不能把河北也让出去吧。</p>\n<p>所以，最后得出一个结论：想要获得尊严，还是要靠“拳头”。这个拳头可以是你掌握的技术（这个不一定靠谱，别人可以用拳头逼你把技术交给他），也可以是真的“拳头”，也可以是掌控的利益集团（这个狠，很多事情根本不用劳烦自己动手了）。但是作为一个rat man，想要组建利益集团、或者练“拳头”都是不靠谱的（整天996，不被熬夜熬死就不错了，还去练“拳头”）。那么还有什么靠谱的方式吗？那就是掌握技术，然后投靠有“拳头”的人，让他保护你，如果那个人保护不了你，就趁早开溜，然后去投靠另一个人。没办法，作为rat man，学会随时run是一项必备的技能。</p>\n<p>现在的中国互联网环境，极端主义盛行。一方面，由于资本家之间拉帮结派，雇佣水军，导致大量的本来与其没啥关系的人，由于太肤浅，太容易受到他人影响，便加入了各种骂战中。结党营私、党同伐异，这就是中国互联网现在的环境。由于网民的素质持续下降，小学生与初中生大规模通过手机这种方式上网，再加上有不少没素质的无业游民也学会了用手机上网，现在的互联网环境一团乱。但是如果只是这样还好，被骂几句又不能伤者着几块肉。但是现在由于我国（大多数国家都差不多）互联网对用户隐私的保护能力极差，差到令人无法相信的程度（直接往外面卖信息了），所以被开盒（人肉搜索）也是常有的事。因此，我们可以得到结论，互联网不仅是法外之地，其还能把一些本不是法外之地的地方变成法外之地（比如说你家，因为他能找到你家在哪）。如此看来，想要获得尊严，还是得靠“拳头”，比如用技术去开开盒人的盒，比如建立自己的利益团体，但我看，这些都太麻烦了，还不如就当透明人，不要让任何人（尤其是网上的人）知道你在干什么，否则他们会指责你干什么都不对的。</p>\n<p>如此，我们可以得出结论：如何获得尊严（哪怕是有限的）</p>\n<p>1、掌握足够的技术和资源。</p>\n<p>2、隐藏自己的想法。</p>\n<p>3、不要参与极端主义讨论。</p>\n<p>4、隐藏自己的行为。</p>\n<p>5、保持独立性，不要太容易受他人影响，能自己做的事最好亲力亲为，不要让自己的命脉被掌握在别人的手上。</p>\n"},{"layout":"post","title":"Node.js","intro":"","date":"2021-09-12T04:00:01.000Z","author":"Makinohara","catalog":true,"_content":"\n## Node.js 服务端开发\n\n### 使用express搭建基础服务器并处理请求\n\n```javascript\n//initialize\nconst Port = 3000;//设置端口号，一般是3000\nconst express = require('express');\nconst { fstat } = require('fs');\nconst app = express();\nprocess.env.PORT = Port;\napp.use(express.static('public'))//allow browser access resources\n\n//err catch\nprocess.on('uncaughtException',function(err){}) //监听未捕获的异常\nprocess.on('unhandledRejection',function(err,promise){}) //监听Promise没有被捕获的失败函数\n\n//传送文件的方法\napp.get('/borrow', (req, res) => {\n  res.setHeader('Content-Type','text/html');\n  res.sendFile('public/borrow/borrow.html',{ root : __dirname});\n  //由于sendFile要求使用绝对地址，所以要将根目录设置为当前文件夹\n})\n\napp.listen(Port, () => console.log('服务器已就绪，运行在端口'+Port))//输出服务器启动信息\n```\n\n### 基本的请求处理方式（以数据库为例）：\n\n```javascript\n//database\nconst mysql = require('mysql');\nlet databaseConnection = mysql.createConnection({\n  host: 'localhost',\n  user: 'root',\n  password: '123456',\n  database: 'books',\n  port: 3306\n});\ndatabaseConnection.connect();\n\napp.get('/userinfo/*', (req, res) => {\n  let info = req.url;\n  let infoS = info.split('/');\n  let user = infoS[2];\n\n  let returnUser;\n  let userSelect = 'SELECT name from users where ID = ' + user;\n  databaseConnection.query(userSelect, function (error, results, fields) {\n    if (error) throw error;\n    returnUser = results[0].name;\n    res.send(returnUser);\n  });\n\n})\n```\n\n处理表单，返回token：\n\n```js\napp.post('/test_postForm', function (req, res) {\n  let receivedForm = req.body;\n  console.log('表单已获取');\n  let token = receivedForm['user_name'];\n  let resUrl = '/userMain?token='+token;\n  res.redirect(resUrl);\n});\n```\n\n","source":"_posts/2021-9-12-nodeJs.markdown","raw":"---\nlayout:     post\ntitle:      Node.js\nintro:   \"\"\ndate:       2021-9-12 12:00:01\nauthor:     \"Makinohara\"\ncatalog: true\ntags:\n    - 工程开发\n    \n---\n\n## Node.js 服务端开发\n\n### 使用express搭建基础服务器并处理请求\n\n```javascript\n//initialize\nconst Port = 3000;//设置端口号，一般是3000\nconst express = require('express');\nconst { fstat } = require('fs');\nconst app = express();\nprocess.env.PORT = Port;\napp.use(express.static('public'))//allow browser access resources\n\n//err catch\nprocess.on('uncaughtException',function(err){}) //监听未捕获的异常\nprocess.on('unhandledRejection',function(err,promise){}) //监听Promise没有被捕获的失败函数\n\n//传送文件的方法\napp.get('/borrow', (req, res) => {\n  res.setHeader('Content-Type','text/html');\n  res.sendFile('public/borrow/borrow.html',{ root : __dirname});\n  //由于sendFile要求使用绝对地址，所以要将根目录设置为当前文件夹\n})\n\napp.listen(Port, () => console.log('服务器已就绪，运行在端口'+Port))//输出服务器启动信息\n```\n\n### 基本的请求处理方式（以数据库为例）：\n\n```javascript\n//database\nconst mysql = require('mysql');\nlet databaseConnection = mysql.createConnection({\n  host: 'localhost',\n  user: 'root',\n  password: '123456',\n  database: 'books',\n  port: 3306\n});\ndatabaseConnection.connect();\n\napp.get('/userinfo/*', (req, res) => {\n  let info = req.url;\n  let infoS = info.split('/');\n  let user = infoS[2];\n\n  let returnUser;\n  let userSelect = 'SELECT name from users where ID = ' + user;\n  databaseConnection.query(userSelect, function (error, results, fields) {\n    if (error) throw error;\n    returnUser = results[0].name;\n    res.send(returnUser);\n  });\n\n})\n```\n\n处理表单，返回token：\n\n```js\napp.post('/test_postForm', function (req, res) {\n  let receivedForm = req.body;\n  console.log('表单已获取');\n  let token = receivedForm['user_name'];\n  let resUrl = '/userMain?token='+token;\n  res.redirect(resUrl);\n});\n```\n\n","slug":"2021-9-12-nodeJs","published":1,"updated":"2021-10-24T02:04:35.830Z","comments":1,"photos":[],"link":"","_id":"ckv4pvow4000p24pebm8w70p3","content":"<h2 id=\"Node-js-服务端开发\"><a href=\"#Node-js-服务端开发\" class=\"headerlink\" title=\"Node.js 服务端开发\"></a>Node.js 服务端开发</h2><h3 id=\"使用express搭建基础服务器并处理请求\"><a href=\"#使用express搭建基础服务器并处理请求\" class=\"headerlink\" title=\"使用express搭建基础服务器并处理请求\"></a>使用express搭建基础服务器并处理请求</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">//initialize</span><br><span class=\"hljs-keyword\">const</span> Port = <span class=\"hljs-number\">3000</span>;<span class=\"hljs-comment\">//设置端口号，一般是3000</span><br><span class=\"hljs-keyword\">const</span> express = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'express'</span>);<br><span class=\"hljs-keyword\">const</span> &#123; fstat &#125; = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'fs'</span>);<br><span class=\"hljs-keyword\">const</span> app = express();<br>process.env.PORT = Port;<br>app.use(express.static(<span class=\"hljs-string\">'public'</span>))<span class=\"hljs-comment\">//allow browser access resources</span><br><br><span class=\"hljs-comment\">//err catch</span><br>process.on(<span class=\"hljs-string\">'uncaughtException'</span>,<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err</span>)</span>&#123;&#125;) <span class=\"hljs-comment\">//监听未捕获的异常</span><br>process.on(<span class=\"hljs-string\">'unhandledRejection'</span>,<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err,promise</span>)</span>&#123;&#125;) <span class=\"hljs-comment\">//监听Promise没有被捕获的失败函数</span><br><br><span class=\"hljs-comment\">//传送文件的方法</span><br>app.get(<span class=\"hljs-string\">'/borrow'</span>, (req, res) =&gt; &#123;<br>  res.setHeader(<span class=\"hljs-string\">'Content-Type'</span>,<span class=\"hljs-string\">'text/html'</span>);<br>  res.sendFile(<span class=\"hljs-string\">'public/borrow/borrow.html'</span>,&#123; <span class=\"hljs-attr\">root</span> : __dirname&#125;);<br>  <span class=\"hljs-comment\">//由于sendFile要求使用绝对地址，所以要将根目录设置为当前文件夹</span><br>&#125;)<br><br>app.listen(Port, () =&gt; <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'服务器已就绪，运行在端口'</span>+Port))<span class=\"hljs-comment\">//输出服务器启动信息</span><br></code></pre></td></tr></table></figure>\n<h3 id=\"基本的请求处理方式（以数据库为例）：\"><a href=\"#基本的请求处理方式（以数据库为例）：\" class=\"headerlink\" title=\"基本的请求处理方式（以数据库为例）：\"></a>基本的请求处理方式（以数据库为例）：</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">//database</span><br><span class=\"hljs-keyword\">const</span> mysql = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'mysql'</span>);<br><span class=\"hljs-keyword\">let</span> databaseConnection = mysql.createConnection(&#123;<br>  <span class=\"hljs-attr\">host</span>: <span class=\"hljs-string\">'localhost'</span>,<br>  <span class=\"hljs-attr\">user</span>: <span class=\"hljs-string\">'root'</span>,<br>  <span class=\"hljs-attr\">password</span>: <span class=\"hljs-string\">'123456'</span>,<br>  <span class=\"hljs-attr\">database</span>: <span class=\"hljs-string\">'books'</span>,<br>  <span class=\"hljs-attr\">port</span>: <span class=\"hljs-number\">3306</span><br>&#125;);<br>databaseConnection.connect();<br><br>app.get(<span class=\"hljs-string\">'/userinfo/*'</span>, (req, res) =&gt; &#123;<br>  <span class=\"hljs-keyword\">let</span> info = req.url;<br>  <span class=\"hljs-keyword\">let</span> infoS = info.split(<span class=\"hljs-string\">'/'</span>);<br>  <span class=\"hljs-keyword\">let</span> user = infoS[<span class=\"hljs-number\">2</span>];<br><br>  <span class=\"hljs-keyword\">let</span> returnUser;<br>  <span class=\"hljs-keyword\">let</span> userSelect = <span class=\"hljs-string\">'SELECT name from users where ID = '</span> + user;<br>  databaseConnection.query(userSelect, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">error, results, fields</span>) </span>&#123;<br>    <span class=\"hljs-keyword\">if</span> (error) <span class=\"hljs-keyword\">throw</span> error;<br>    returnUser = results[<span class=\"hljs-number\">0</span>].name;<br>    res.send(returnUser);<br>  &#125;);<br><br>&#125;)<br></code></pre></td></tr></table></figure>\n<p>处理表单，返回token：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">app.post(<span class=\"hljs-string\">'/test_postForm'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">req, res</span>) </span>&#123;<br>  <span class=\"hljs-keyword\">let</span> receivedForm = req.body;<br>  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'表单已获取'</span>);<br>  <span class=\"hljs-keyword\">let</span> token = receivedForm[<span class=\"hljs-string\">'user_name'</span>];<br>  <span class=\"hljs-keyword\">let</span> resUrl = <span class=\"hljs-string\">'/userMain?token='</span>+token;<br>  res.redirect(resUrl);<br>&#125;);<br></code></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Node-js-服务端开发\"><a href=\"#Node-js-服务端开发\" class=\"headerlink\" title=\"Node.js 服务端开发\"></a>Node.js 服务端开发</h2><h3 id=\"使用express搭建基础服务器并处理请求\"><a href=\"#使用express搭建基础服务器并处理请求\" class=\"headerlink\" title=\"使用express搭建基础服务器并处理请求\"></a>使用express搭建基础服务器并处理请求</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">//initialize</span><br><span class=\"hljs-keyword\">const</span> Port = <span class=\"hljs-number\">3000</span>;<span class=\"hljs-comment\">//设置端口号，一般是3000</span><br><span class=\"hljs-keyword\">const</span> express = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'express'</span>);<br><span class=\"hljs-keyword\">const</span> &#123; fstat &#125; = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'fs'</span>);<br><span class=\"hljs-keyword\">const</span> app = express();<br>process.env.PORT = Port;<br>app.use(express.static(<span class=\"hljs-string\">'public'</span>))<span class=\"hljs-comment\">//allow browser access resources</span><br><br><span class=\"hljs-comment\">//err catch</span><br>process.on(<span class=\"hljs-string\">'uncaughtException'</span>,<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err</span>)</span>&#123;&#125;) <span class=\"hljs-comment\">//监听未捕获的异常</span><br>process.on(<span class=\"hljs-string\">'unhandledRejection'</span>,<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err,promise</span>)</span>&#123;&#125;) <span class=\"hljs-comment\">//监听Promise没有被捕获的失败函数</span><br><br><span class=\"hljs-comment\">//传送文件的方法</span><br>app.get(<span class=\"hljs-string\">'/borrow'</span>, (req, res) =&gt; &#123;<br>  res.setHeader(<span class=\"hljs-string\">'Content-Type'</span>,<span class=\"hljs-string\">'text/html'</span>);<br>  res.sendFile(<span class=\"hljs-string\">'public/borrow/borrow.html'</span>,&#123; <span class=\"hljs-attr\">root</span> : __dirname&#125;);<br>  <span class=\"hljs-comment\">//由于sendFile要求使用绝对地址，所以要将根目录设置为当前文件夹</span><br>&#125;)<br><br>app.listen(Port, () =&gt; <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'服务器已就绪，运行在端口'</span>+Port))<span class=\"hljs-comment\">//输出服务器启动信息</span><br></code></pre></td></tr></table></figure>\n<h3 id=\"基本的请求处理方式（以数据库为例）：\"><a href=\"#基本的请求处理方式（以数据库为例）：\" class=\"headerlink\" title=\"基本的请求处理方式（以数据库为例）：\"></a>基本的请求处理方式（以数据库为例）：</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">//database</span><br><span class=\"hljs-keyword\">const</span> mysql = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'mysql'</span>);<br><span class=\"hljs-keyword\">let</span> databaseConnection = mysql.createConnection(&#123;<br>  <span class=\"hljs-attr\">host</span>: <span class=\"hljs-string\">'localhost'</span>,<br>  <span class=\"hljs-attr\">user</span>: <span class=\"hljs-string\">'root'</span>,<br>  <span class=\"hljs-attr\">password</span>: <span class=\"hljs-string\">'123456'</span>,<br>  <span class=\"hljs-attr\">database</span>: <span class=\"hljs-string\">'books'</span>,<br>  <span class=\"hljs-attr\">port</span>: <span class=\"hljs-number\">3306</span><br>&#125;);<br>databaseConnection.connect();<br><br>app.get(<span class=\"hljs-string\">'/userinfo/*'</span>, (req, res) =&gt; &#123;<br>  <span class=\"hljs-keyword\">let</span> info = req.url;<br>  <span class=\"hljs-keyword\">let</span> infoS = info.split(<span class=\"hljs-string\">'/'</span>);<br>  <span class=\"hljs-keyword\">let</span> user = infoS[<span class=\"hljs-number\">2</span>];<br><br>  <span class=\"hljs-keyword\">let</span> returnUser;<br>  <span class=\"hljs-keyword\">let</span> userSelect = <span class=\"hljs-string\">'SELECT name from users where ID = '</span> + user;<br>  databaseConnection.query(userSelect, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">error, results, fields</span>) </span>&#123;<br>    <span class=\"hljs-keyword\">if</span> (error) <span class=\"hljs-keyword\">throw</span> error;<br>    returnUser = results[<span class=\"hljs-number\">0</span>].name;<br>    res.send(returnUser);<br>  &#125;);<br><br>&#125;)<br></code></pre></td></tr></table></figure>\n<p>处理表单，返回token：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">app.post(<span class=\"hljs-string\">'/test_postForm'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">req, res</span>) </span>&#123;<br>  <span class=\"hljs-keyword\">let</span> receivedForm = req.body;<br>  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'表单已获取'</span>);<br>  <span class=\"hljs-keyword\">let</span> token = receivedForm[<span class=\"hljs-string\">'user_name'</span>];<br>  <span class=\"hljs-keyword\">let</span> resUrl = <span class=\"hljs-string\">'/userMain?token='</span>+token;<br>  res.redirect(resUrl);<br>&#125;);<br></code></pre></td></tr></table></figure>\n"},{"layout":"post","title":"WebGAL开发日志1：我如何打造一个网页版的Galgame游戏引擎","intro":"","date":"2021-09-27T04:00:01.000Z","author":"Makinohara","catalog":true,"_content":"\n项目地址：[https://github.com/MakinoharaShoko/WebGAL](http://link.zhihu.com/?target=https%3A//github.com/MakinoharaShoko/WebGAL)\n演示地址（可能需要科学冲浪）：[http://msfasr.com/WebGAL_Demo_Page/](http://link.zhihu.com/?target=http%3A//msfasr.com/WebGAL_Demo_Page/)\n\n正文：\n作为一个 Galgame 爱好者，我一直有一个设想，未来的 Galgame 能否做到仅需要一个浏览器就可以访问并随时游玩？答案是肯定的，并且也已经有先行者在这方面做出了尝试。橙光游戏早就做到了在网页上实现文字冒险游戏的运行，并打造了自己的社区；bilibili也通过推出互动视频的方式，让无数up主可以使用互动视频制作 galgame 。\n\n但是，这两者都存在部分缺陷。橙光游戏的引擎并非完全基于浏览器，其对于多设备的适应性并不好，对于屏幕缩放比例的更改也缺乏页面自适应。bilibili 的互动视频由于是以视频为载体，相对来说更难制作（因为你需要视频制作的基础），并且更加消耗流量。更致命的是，你只能按章节存档，而不能像真正的 Galgame 一样做到更加自由的存档。因此，我便产生了用 React 打造一个完全基于 Web 的 Galgame 游戏引擎的想法，并尽可能简化制作难度，使得大多数语句只需要1分钟即可学会，从而让这项成果能够惠及所有热爱 Galgame 的人。\n\n目前，基础界面的设计已经基本完成，场景跳转的分支选择已经可用。接下来没有完成的工作主要是存档与读档模块、设置界面的完善、自动播放、快进、剧本回溯等功能。接下来请允许我介绍基本功能的实现情况：\n\n![img](/img/WebGAL_0.png)\n\n![img](/img/WebGAL_0.png)\n\n![img](/img/WebGAL_0.png)\n\n现在，基本的文字显示功能已经几乎完全实现，分支选择的功能也已经几乎完全实现。切换背景和立绘的功能也几乎完全实现。它们的语法也极其简单：\n\n```text\n人物对话语法：\n人物:要说的话;\n例如:\n雪之下雪乃:良好的显示效果能够使玩家在游玩时感到赏心悦目，与此相对的，如果渐变显示过于僵硬、或是喧宾夺主，都会大幅降低游戏体验;\n切换背景语法:\nchangeBG:背景.jpg;\n切换立绘语法:\nchangeP:立绘.png;\n切换场景语法:\nchangeScene:场景2.txt;\n分支选择语法:\nchoose:{选择分支1:分支1.txt,选择分支2:分支2.txt};\n```\n\n我希望通过减小语法的难度，来简化开发者的开发成本，使得他们无需关心如何实现，只需要将注意力放在编写有趣的剧本和绘制精美的立绘上。相比于互动视频和橙光游戏的要求，使用这套引擎只需要你有一个 idea ，有背景和立绘的素材，即可立刻开始制作，并将你的制作成果轻易地与全世界的爱好者分享。（通过免费的GitHub Pages部署）。如果开发者有自己的 Web 服务器，那部署就更加容易了。但为了能够让所有人都能体验制作 Galgame 的乐趣，我今后可能会发表一篇教程，讲述如何部署到GitHub Pages。\n\n这个项目是我学习 React 的练手项目，所以许多地方可能都有欠考虑和需要优化的点，我相信随着该工程的持续开发与我前端水平的提高，这个引擎会变得越来越好。虽然 Galgame 注定是一个只属于死宅的小众游戏类别，但是我还是想为此尽一份绵薄之力。\n\n共勉！\n\n","source":"_posts/2021-9-27-WG_1.markdown","raw":"---\nlayout:     post\ntitle:      WebGAL开发日志1：我如何打造一个网页版的Galgame游戏引擎\nintro:   \"\"\ndate:       2021-9-27 12:00:01\nauthor:     \"Makinohara\"\ncatalog: true\ntags:\n    - 工程开发\n    \n---\n\n项目地址：[https://github.com/MakinoharaShoko/WebGAL](http://link.zhihu.com/?target=https%3A//github.com/MakinoharaShoko/WebGAL)\n演示地址（可能需要科学冲浪）：[http://msfasr.com/WebGAL_Demo_Page/](http://link.zhihu.com/?target=http%3A//msfasr.com/WebGAL_Demo_Page/)\n\n正文：\n作为一个 Galgame 爱好者，我一直有一个设想，未来的 Galgame 能否做到仅需要一个浏览器就可以访问并随时游玩？答案是肯定的，并且也已经有先行者在这方面做出了尝试。橙光游戏早就做到了在网页上实现文字冒险游戏的运行，并打造了自己的社区；bilibili也通过推出互动视频的方式，让无数up主可以使用互动视频制作 galgame 。\n\n但是，这两者都存在部分缺陷。橙光游戏的引擎并非完全基于浏览器，其对于多设备的适应性并不好，对于屏幕缩放比例的更改也缺乏页面自适应。bilibili 的互动视频由于是以视频为载体，相对来说更难制作（因为你需要视频制作的基础），并且更加消耗流量。更致命的是，你只能按章节存档，而不能像真正的 Galgame 一样做到更加自由的存档。因此，我便产生了用 React 打造一个完全基于 Web 的 Galgame 游戏引擎的想法，并尽可能简化制作难度，使得大多数语句只需要1分钟即可学会，从而让这项成果能够惠及所有热爱 Galgame 的人。\n\n目前，基础界面的设计已经基本完成，场景跳转的分支选择已经可用。接下来没有完成的工作主要是存档与读档模块、设置界面的完善、自动播放、快进、剧本回溯等功能。接下来请允许我介绍基本功能的实现情况：\n\n![img](/img/WebGAL_0.png)\n\n![img](/img/WebGAL_0.png)\n\n![img](/img/WebGAL_0.png)\n\n现在，基本的文字显示功能已经几乎完全实现，分支选择的功能也已经几乎完全实现。切换背景和立绘的功能也几乎完全实现。它们的语法也极其简单：\n\n```text\n人物对话语法：\n人物:要说的话;\n例如:\n雪之下雪乃:良好的显示效果能够使玩家在游玩时感到赏心悦目，与此相对的，如果渐变显示过于僵硬、或是喧宾夺主，都会大幅降低游戏体验;\n切换背景语法:\nchangeBG:背景.jpg;\n切换立绘语法:\nchangeP:立绘.png;\n切换场景语法:\nchangeScene:场景2.txt;\n分支选择语法:\nchoose:{选择分支1:分支1.txt,选择分支2:分支2.txt};\n```\n\n我希望通过减小语法的难度，来简化开发者的开发成本，使得他们无需关心如何实现，只需要将注意力放在编写有趣的剧本和绘制精美的立绘上。相比于互动视频和橙光游戏的要求，使用这套引擎只需要你有一个 idea ，有背景和立绘的素材，即可立刻开始制作，并将你的制作成果轻易地与全世界的爱好者分享。（通过免费的GitHub Pages部署）。如果开发者有自己的 Web 服务器，那部署就更加容易了。但为了能够让所有人都能体验制作 Galgame 的乐趣，我今后可能会发表一篇教程，讲述如何部署到GitHub Pages。\n\n这个项目是我学习 React 的练手项目，所以许多地方可能都有欠考虑和需要优化的点，我相信随着该工程的持续开发与我前端水平的提高，这个引擎会变得越来越好。虽然 Galgame 注定是一个只属于死宅的小众游戏类别，但是我还是想为此尽一份绵薄之力。\n\n共勉！\n\n","slug":"2021-9-27-WG_1","published":1,"updated":"2021-10-24T02:04:35.830Z","comments":1,"photos":[],"link":"","_id":"ckv4pvow7000v24peg0q0boa0","content":"<p>项目地址：<a href=\"http://link.zhihu.com/?target=https%3A//github.com/MakinoharaShoko/WebGAL\">https://github.com/MakinoharaShoko/WebGAL</a><br>演示地址（可能需要科学冲浪）：<a href=\"http://link.zhihu.com/?target=http%3A//msfasr.com/WebGAL_Demo_Page/\">http://msfasr.com/WebGAL_Demo_Page/</a></p>\n<p>正文：<br>作为一个 Galgame 爱好者，我一直有一个设想，未来的 Galgame 能否做到仅需要一个浏览器就可以访问并随时游玩？答案是肯定的，并且也已经有先行者在这方面做出了尝试。橙光游戏早就做到了在网页上实现文字冒险游戏的运行，并打造了自己的社区；bilibili也通过推出互动视频的方式，让无数up主可以使用互动视频制作 galgame 。</p>\n<p>但是，这两者都存在部分缺陷。橙光游戏的引擎并非完全基于浏览器，其对于多设备的适应性并不好，对于屏幕缩放比例的更改也缺乏页面自适应。bilibili 的互动视频由于是以视频为载体，相对来说更难制作（因为你需要视频制作的基础），并且更加消耗流量。更致命的是，你只能按章节存档，而不能像真正的 Galgame 一样做到更加自由的存档。因此，我便产生了用 React 打造一个完全基于 Web 的 Galgame 游戏引擎的想法，并尽可能简化制作难度，使得大多数语句只需要1分钟即可学会，从而让这项成果能够惠及所有热爱 Galgame 的人。</p>\n<p>目前，基础界面的设计已经基本完成，场景跳转的分支选择已经可用。接下来没有完成的工作主要是存档与读档模块、设置界面的完善、自动播放、快进、剧本回溯等功能。接下来请允许我介绍基本功能的实现情况：</p>\n<p><img src=\"/img/WebGAL_0.png\" alt=\"img\"></p>\n<p><img src=\"/img/WebGAL_0.png\" alt=\"img\"></p>\n<p><img src=\"/img/WebGAL_0.png\" alt=\"img\"></p>\n<p>现在，基本的文字显示功能已经几乎完全实现，分支选择的功能也已经几乎完全实现。切换背景和立绘的功能也几乎完全实现。它们的语法也极其简单：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs text\">人物对话语法：<br>人物:要说的话;<br>例如:<br>雪之下雪乃:良好的显示效果能够使玩家在游玩时感到赏心悦目，与此相对的，如果渐变显示过于僵硬、或是喧宾夺主，都会大幅降低游戏体验;<br>切换背景语法:<br>changeBG:背景.jpg;<br>切换立绘语法:<br>changeP:立绘.png;<br>切换场景语法:<br>changeScene:场景2.txt;<br>分支选择语法:<br>choose:&#123;选择分支1:分支1.txt,选择分支2:分支2.txt&#125;;<br></code></pre></td></tr></table></figure>\n<p>我希望通过减小语法的难度，来简化开发者的开发成本，使得他们无需关心如何实现，只需要将注意力放在编写有趣的剧本和绘制精美的立绘上。相比于互动视频和橙光游戏的要求，使用这套引擎只需要你有一个 idea ，有背景和立绘的素材，即可立刻开始制作，并将你的制作成果轻易地与全世界的爱好者分享。（通过免费的GitHub Pages部署）。如果开发者有自己的 Web 服务器，那部署就更加容易了。但为了能够让所有人都能体验制作 Galgame 的乐趣，我今后可能会发表一篇教程，讲述如何部署到GitHub Pages。</p>\n<p>这个项目是我学习 React 的练手项目，所以许多地方可能都有欠考虑和需要优化的点，我相信随着该工程的持续开发与我前端水平的提高，这个引擎会变得越来越好。虽然 Galgame 注定是一个只属于死宅的小众游戏类别，但是我还是想为此尽一份绵薄之力。</p>\n<p>共勉！</p>\n","site":{"data":{}},"excerpt":"","more":"<p>项目地址：<a href=\"http://link.zhihu.com/?target=https%3A//github.com/MakinoharaShoko/WebGAL\">https://github.com/MakinoharaShoko/WebGAL</a><br>演示地址（可能需要科学冲浪）：<a href=\"http://link.zhihu.com/?target=http%3A//msfasr.com/WebGAL_Demo_Page/\">http://msfasr.com/WebGAL_Demo_Page/</a></p>\n<p>正文：<br>作为一个 Galgame 爱好者，我一直有一个设想，未来的 Galgame 能否做到仅需要一个浏览器就可以访问并随时游玩？答案是肯定的，并且也已经有先行者在这方面做出了尝试。橙光游戏早就做到了在网页上实现文字冒险游戏的运行，并打造了自己的社区；bilibili也通过推出互动视频的方式，让无数up主可以使用互动视频制作 galgame 。</p>\n<p>但是，这两者都存在部分缺陷。橙光游戏的引擎并非完全基于浏览器，其对于多设备的适应性并不好，对于屏幕缩放比例的更改也缺乏页面自适应。bilibili 的互动视频由于是以视频为载体，相对来说更难制作（因为你需要视频制作的基础），并且更加消耗流量。更致命的是，你只能按章节存档，而不能像真正的 Galgame 一样做到更加自由的存档。因此，我便产生了用 React 打造一个完全基于 Web 的 Galgame 游戏引擎的想法，并尽可能简化制作难度，使得大多数语句只需要1分钟即可学会，从而让这项成果能够惠及所有热爱 Galgame 的人。</p>\n<p>目前，基础界面的设计已经基本完成，场景跳转的分支选择已经可用。接下来没有完成的工作主要是存档与读档模块、设置界面的完善、自动播放、快进、剧本回溯等功能。接下来请允许我介绍基本功能的实现情况：</p>\n<p><img src=\"/img/WebGAL_0.png\" alt=\"img\"></p>\n<p><img src=\"/img/WebGAL_0.png\" alt=\"img\"></p>\n<p><img src=\"/img/WebGAL_0.png\" alt=\"img\"></p>\n<p>现在，基本的文字显示功能已经几乎完全实现，分支选择的功能也已经几乎完全实现。切换背景和立绘的功能也几乎完全实现。它们的语法也极其简单：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs text\">人物对话语法：<br>人物:要说的话;<br>例如:<br>雪之下雪乃:良好的显示效果能够使玩家在游玩时感到赏心悦目，与此相对的，如果渐变显示过于僵硬、或是喧宾夺主，都会大幅降低游戏体验;<br>切换背景语法:<br>changeBG:背景.jpg;<br>切换立绘语法:<br>changeP:立绘.png;<br>切换场景语法:<br>changeScene:场景2.txt;<br>分支选择语法:<br>choose:&#123;选择分支1:分支1.txt,选择分支2:分支2.txt&#125;;<br></code></pre></td></tr></table></figure>\n<p>我希望通过减小语法的难度，来简化开发者的开发成本，使得他们无需关心如何实现，只需要将注意力放在编写有趣的剧本和绘制精美的立绘上。相比于互动视频和橙光游戏的要求，使用这套引擎只需要你有一个 idea ，有背景和立绘的素材，即可立刻开始制作，并将你的制作成果轻易地与全世界的爱好者分享。（通过免费的GitHub Pages部署）。如果开发者有自己的 Web 服务器，那部署就更加容易了。但为了能够让所有人都能体验制作 Galgame 的乐趣，我今后可能会发表一篇教程，讲述如何部署到GitHub Pages。</p>\n<p>这个项目是我学习 React 的练手项目，所以许多地方可能都有欠考虑和需要优化的点，我相信随着该工程的持续开发与我前端水平的提高，这个引擎会变得越来越好。虽然 Galgame 注定是一个只属于死宅的小众游戏类别，但是我还是想为此尽一份绵薄之力。</p>\n<p>共勉！</p>\n"},{"layout":"post","title":"JavaScript高级程序设计","intro":"","date":"2021-11-02T00:00:00.000Z","author":"Makinohara","featured_image":"http://msfasr.com/img/py.jfif","catalog":true,"_content":"\n> 为系统学习 JavaScript ，重写有关 JavaScript 的笔记，使用教材《JavaScript高级程序设计》第四版。\n\n# 新笔记：直接使用代码描述笔记\n\n注意：因此本博文不再更新\n\nhttps://github.com/MakinoharaShoko/Learning-Code/tree/main/JS\n\n# 基础概念\n\n## 1、DOM & BOM\n\nDOM通过创建表示文档的树，让开发者可以随心所欲地控制网页的内容和结构。使用DOM API， 可以轻松地删除、添加、替换、修改节点。\n\n总体来说，BOM 主要针对浏览器窗口和子窗口（frame），不过人们通常会把任何特定于浏览器的 扩展都归在BOM的范畴内。比如，下面就是这样一些扩展：\n\n 弹出新浏览器窗口的能力；\n\n 移动、缩放和关闭浏览器窗口的能力；\n\n navigator 对象，提供关于浏览器的详尽信息；\n location 对象，提供浏览器加载页面的详尽信息；\n\n screen 对象，提供关于用户屏幕分辨率的详尽信息；\n\n performance 对象，提供浏览器内存占用、导航行为和时间统计的详尽信息；\n\n 对 cookie的支持；\n 其他自定义对象，如 XMLHttpRequest 和 IE的 ActiveXObject。\n\n## 2、加载方式\n\n### 1、行内\n\n```\n<script> \nfunction sayHi() { \n\tconsole.log(\"Hi!\");\n}\n</script>\n```\n\n### 2、外部文件\n\n```\n<script src=\"example.js\"></script>\n```\n\n### 3、加载位置\n\n推荐加载在 body 内容的最后，这样就会在渲染界面后加载JavaScript\n\n```\n<!DOCTYPE html> \n<html>\n\t<head>\n\t\t<title>Example HTML Page</title> \n\t</head> \n\t<body> \n\t<!-- 这里是页面内容 -->\n\t<script src=\"example1.js\"></script> \n\t<script src=\"example2.js\"></script> \n\t</body>\n</html>\n```\n\n推迟到解析到结束标签 \\</html> 执行（只对外部脚本文件才有效）：\n\n```\n<script defer src=\"example1.js\"></script>\n```\n\n# 语言基础\n\n### 变量声明提升\n\nvar 提升，let不提升\n\n```\nconsole.log(name);//undefined\nvar name = 'Matt';\n\nconsole.log(age);//ReferenceError,暂时性死区\nlet age = 26;\n```\n\nlet：声明范围是块作用域，所以不会造成循环定义的迭代变量渗透到外部。\n\nconst声明：限制不能修改其值或引用的对象，但是可以修改该对象的内部属性。\n\n**尽可能使用let、const，避免使用var，const优先**\n\n### 变量类型\n\n```\nUndefined\nNull//typeof Null ==='object'\nBoolean\nNumber\nString\nSymbol\n(Object)\n```\n\nundefined 是一个特殊值，在if判断为假\n\nnull：可以看做是空对象指针\n\n### 数值\n\n特殊：NaN:not a number\n\n#### 转换函数：\n\n```\nNumber()\nparseInt()\nparseFloat()\n```\n\n### 字符串\n\n字符串的特点：不可变，如果要修改只能销毁原有的字符串。\n\n转换函数：\n\n```\ntoString()\nString()\nString(null) === 'null'\nString(undefined) === 'undefined'\n```\n\n#### 模板字面量\n\n模板字面量可用于字符串插值：\n\n```\nlet value1 = 233;\nlet value2 = 'sec'\nlet str1 = `now is ${value1} ${value2}.`\n```\n\n模板字面量可以跨行定义字符串\n\n```\nlet str2 = `the\nKamome's humble abode`\n```\n\n原始字符串：\n\n```\nString.raw`\\u00a9`\n```\n\n### Symbol\n\nTODO:写关于symbol的笔记\n\n### Object\n\nObject 的属性和方法\n\n```\nconstructor:创建\nhasOwnProperty(propertyName):判断当前对象是否存在给定属性\nisPrototypeOf:\npropertyIsEnumerable(propertyName):判断给定的属性是否可用\ntoLocaleString():返回对象的字符串表示（反映本地化执行环境）\ntoString:返回对象的字符串表示\nvalueOf():返回对应的字符串\n```\n\n### 算符\n\n一元算符\n\n```\n//一元运算符\nlet str1 = '123';\nstr1 = +str1;\nconsole.log(typeof str1);//number\n```\n\n# 异步编程\n\n## Promise\n\n### Promise的基本使用\n\n```\nlet myFirstPromise = new Promise(function(resolve, reject){\n    //当异步代码执行成功时，我们才会调用resolve(...), 当异步代码失败时就会调用reject(...)\n    //在本例中，我们使用setTimeout(...)来模拟异步代码，实际编码时可能是XHR请求或是HTML5的一些API方法.\n    setTimeout(function(){\n        resolve(\"成功!\"); //代码正常执行！\n    }, 250);\n});\n```\n\n### 函数返回Promise\n\n```\nfunction getUserInfo() {\n\t//获取个人信息\n\treturn new Promise((resolve, reject) => {\n\t\tdbo.collection('users').find({ eid: userEID }).toArray((err, result) => {\n\t\t\tif (err) throw err;\n            returnMessage['userInfo'] = result;\n            resolve();\n        })\n    })\n}\n```\n\n### Promise.all的使用\n\n```\n//执行查询\nPromise.all([getUserInfo(), getMessage(), getFriendReq(), getFriendList()]).then(() => { closeAndSend() })\n```\n\n# 函数\n\n### 函数的几种描述：\n\n```\nfunction func1(){\n\treturn 1;\n}\n\nlet func2 = function(){\n\treturn 1;\n}\n\nlet func3 = () => {\n\treturn 1;\n}\n\n//立即执行的函数\n(()=>1)();\n```\n\n箭头函数(Lambda)\n\n```\n(param1, param2, …, paramN) => { statements }\n(param1, param2, …, paramN) => expression\n//相当于：(param1, param2, …, paramN) =>{ return expression; }\n\n// 当只有一个参数时，圆括号是可选的：\n(singleParam) => { statements }\nsingleParam => { statements }\n\n// 没有参数的函数应该写成一对圆括号。\n() => { statements }\n```\n\n","source":"_posts/2021-11-2-JavaScript2.markdown","raw":"---\nlayout:     post\ntitle:      \"JavaScript高级程序设计\"\nintro:   \"\"\ndate:       2021-11-2 08:00:00\nauthor:     \"Makinohara\"\nfeatured_image: http://msfasr.com/img/py.jfif\ncatalog: true\ntags:\n    - 编程语言\n---\n\n> 为系统学习 JavaScript ，重写有关 JavaScript 的笔记，使用教材《JavaScript高级程序设计》第四版。\n\n# 新笔记：直接使用代码描述笔记\n\n注意：因此本博文不再更新\n\nhttps://github.com/MakinoharaShoko/Learning-Code/tree/main/JS\n\n# 基础概念\n\n## 1、DOM & BOM\n\nDOM通过创建表示文档的树，让开发者可以随心所欲地控制网页的内容和结构。使用DOM API， 可以轻松地删除、添加、替换、修改节点。\n\n总体来说，BOM 主要针对浏览器窗口和子窗口（frame），不过人们通常会把任何特定于浏览器的 扩展都归在BOM的范畴内。比如，下面就是这样一些扩展：\n\n 弹出新浏览器窗口的能力；\n\n 移动、缩放和关闭浏览器窗口的能力；\n\n navigator 对象，提供关于浏览器的详尽信息；\n location 对象，提供浏览器加载页面的详尽信息；\n\n screen 对象，提供关于用户屏幕分辨率的详尽信息；\n\n performance 对象，提供浏览器内存占用、导航行为和时间统计的详尽信息；\n\n 对 cookie的支持；\n 其他自定义对象，如 XMLHttpRequest 和 IE的 ActiveXObject。\n\n## 2、加载方式\n\n### 1、行内\n\n```\n<script> \nfunction sayHi() { \n\tconsole.log(\"Hi!\");\n}\n</script>\n```\n\n### 2、外部文件\n\n```\n<script src=\"example.js\"></script>\n```\n\n### 3、加载位置\n\n推荐加载在 body 内容的最后，这样就会在渲染界面后加载JavaScript\n\n```\n<!DOCTYPE html> \n<html>\n\t<head>\n\t\t<title>Example HTML Page</title> \n\t</head> \n\t<body> \n\t<!-- 这里是页面内容 -->\n\t<script src=\"example1.js\"></script> \n\t<script src=\"example2.js\"></script> \n\t</body>\n</html>\n```\n\n推迟到解析到结束标签 \\</html> 执行（只对外部脚本文件才有效）：\n\n```\n<script defer src=\"example1.js\"></script>\n```\n\n# 语言基础\n\n### 变量声明提升\n\nvar 提升，let不提升\n\n```\nconsole.log(name);//undefined\nvar name = 'Matt';\n\nconsole.log(age);//ReferenceError,暂时性死区\nlet age = 26;\n```\n\nlet：声明范围是块作用域，所以不会造成循环定义的迭代变量渗透到外部。\n\nconst声明：限制不能修改其值或引用的对象，但是可以修改该对象的内部属性。\n\n**尽可能使用let、const，避免使用var，const优先**\n\n### 变量类型\n\n```\nUndefined\nNull//typeof Null ==='object'\nBoolean\nNumber\nString\nSymbol\n(Object)\n```\n\nundefined 是一个特殊值，在if判断为假\n\nnull：可以看做是空对象指针\n\n### 数值\n\n特殊：NaN:not a number\n\n#### 转换函数：\n\n```\nNumber()\nparseInt()\nparseFloat()\n```\n\n### 字符串\n\n字符串的特点：不可变，如果要修改只能销毁原有的字符串。\n\n转换函数：\n\n```\ntoString()\nString()\nString(null) === 'null'\nString(undefined) === 'undefined'\n```\n\n#### 模板字面量\n\n模板字面量可用于字符串插值：\n\n```\nlet value1 = 233;\nlet value2 = 'sec'\nlet str1 = `now is ${value1} ${value2}.`\n```\n\n模板字面量可以跨行定义字符串\n\n```\nlet str2 = `the\nKamome's humble abode`\n```\n\n原始字符串：\n\n```\nString.raw`\\u00a9`\n```\n\n### Symbol\n\nTODO:写关于symbol的笔记\n\n### Object\n\nObject 的属性和方法\n\n```\nconstructor:创建\nhasOwnProperty(propertyName):判断当前对象是否存在给定属性\nisPrototypeOf:\npropertyIsEnumerable(propertyName):判断给定的属性是否可用\ntoLocaleString():返回对象的字符串表示（反映本地化执行环境）\ntoString:返回对象的字符串表示\nvalueOf():返回对应的字符串\n```\n\n### 算符\n\n一元算符\n\n```\n//一元运算符\nlet str1 = '123';\nstr1 = +str1;\nconsole.log(typeof str1);//number\n```\n\n# 异步编程\n\n## Promise\n\n### Promise的基本使用\n\n```\nlet myFirstPromise = new Promise(function(resolve, reject){\n    //当异步代码执行成功时，我们才会调用resolve(...), 当异步代码失败时就会调用reject(...)\n    //在本例中，我们使用setTimeout(...)来模拟异步代码，实际编码时可能是XHR请求或是HTML5的一些API方法.\n    setTimeout(function(){\n        resolve(\"成功!\"); //代码正常执行！\n    }, 250);\n});\n```\n\n### 函数返回Promise\n\n```\nfunction getUserInfo() {\n\t//获取个人信息\n\treturn new Promise((resolve, reject) => {\n\t\tdbo.collection('users').find({ eid: userEID }).toArray((err, result) => {\n\t\t\tif (err) throw err;\n            returnMessage['userInfo'] = result;\n            resolve();\n        })\n    })\n}\n```\n\n### Promise.all的使用\n\n```\n//执行查询\nPromise.all([getUserInfo(), getMessage(), getFriendReq(), getFriendList()]).then(() => { closeAndSend() })\n```\n\n# 函数\n\n### 函数的几种描述：\n\n```\nfunction func1(){\n\treturn 1;\n}\n\nlet func2 = function(){\n\treturn 1;\n}\n\nlet func3 = () => {\n\treturn 1;\n}\n\n//立即执行的函数\n(()=>1)();\n```\n\n箭头函数(Lambda)\n\n```\n(param1, param2, …, paramN) => { statements }\n(param1, param2, …, paramN) => expression\n//相当于：(param1, param2, …, paramN) =>{ return expression; }\n\n// 当只有一个参数时，圆括号是可选的：\n(singleParam) => { statements }\nsingleParam => { statements }\n\n// 没有参数的函数应该写成一对圆括号。\n() => { statements }\n```\n\n","slug":"2021-11-2-JavaScript2","published":1,"updated":"2022-01-02T12:56:29.377Z","_id":"ckwz1bgt7000004pehkt7dme6","comments":1,"photos":[],"link":"","content":"<blockquote>\n<p>为系统学习 JavaScript ，重写有关 JavaScript 的笔记，使用教材《JavaScript高级程序设计》第四版。</p>\n</blockquote>\n<h1 id=\"新笔记：直接使用代码描述笔记\"><a href=\"#新笔记：直接使用代码描述笔记\" class=\"headerlink\" title=\"新笔记：直接使用代码描述笔记\"></a>新笔记：直接使用代码描述笔记</h1><p>注意：因此本博文不再更新</p>\n<p><a href=\"https://github.com/MakinoharaShoko/Learning-Code/tree/main/JS\" target=\"_blank\" rel=\"noopener\">https://github.com/MakinoharaShoko/Learning-Code/tree/main/JS</a></p>\n<h1 id=\"基础概念\"><a href=\"#基础概念\" class=\"headerlink\" title=\"基础概念\"></a>基础概念</h1><h2 id=\"1、DOM-amp-BOM\"><a href=\"#1、DOM-amp-BOM\" class=\"headerlink\" title=\"1、DOM &amp; BOM\"></a>1、DOM &amp; BOM</h2><p>DOM通过创建表示文档的树，让开发者可以随心所欲地控制网页的内容和结构。使用DOM API， 可以轻松地删除、添加、替换、修改节点。</p>\n<p>总体来说，BOM 主要针对浏览器窗口和子窗口（frame），不过人们通常会把任何特定于浏览器的 扩展都归在BOM的范畴内。比如，下面就是这样一些扩展：</p>\n<p> 弹出新浏览器窗口的能力；</p>\n<p> 移动、缩放和关闭浏览器窗口的能力；</p>\n<p> navigator 对象，提供关于浏览器的详尽信息；<br> location 对象，提供浏览器加载页面的详尽信息；</p>\n<p> screen 对象，提供关于用户屏幕分辨率的详尽信息；</p>\n<p> performance 对象，提供浏览器内存占用、导航行为和时间统计的详尽信息；</p>\n<p> 对 cookie的支持；<br> 其他自定义对象，如 XMLHttpRequest 和 IE的 ActiveXObject。</p>\n<h2 id=\"2、加载方式\"><a href=\"#2、加载方式\" class=\"headerlink\" title=\"2、加载方式\"></a>2、加载方式</h2><h3 id=\"1、行内\"><a href=\"#1、行内\" class=\"headerlink\" title=\"1、行内\"></a>1、行内</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span> <br><span class=\"actionscript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">sayHi</span><span class=\"hljs-params\">()</span> </span>&#123; </span><br><span class=\"javascript\">\t<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Hi!\"</span>);</span><br>&#125;<br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"2、外部文件\"><a href=\"#2、外部文件\" class=\"headerlink\" title=\"2、外部文件\"></a>2、外部文件</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"example.js\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"3、加载位置\"><a href=\"#3、加载位置\" class=\"headerlink\" title=\"3、加载位置\"></a>3、加载位置</h3><p>推荐加载在 body 内容的最后，这样就会在渲染界面后加载JavaScript</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-meta-keyword\">html</span>&gt;</span> <br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span>&gt;</span><br>\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span><br>\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>Example HTML Page<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span> <br>\t<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span> <br>\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span> <br>\t<span class=\"hljs-comment\">&lt;!-- 这里是页面内容 --&gt;</span><br>\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"example1.js\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span> <br>\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"example2.js\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span> <br>\t<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>推迟到解析到结束标签 &lt;/html&gt; 执行（只对外部脚本文件才有效）：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">defer</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"example1.js\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h1 id=\"语言基础\"><a href=\"#语言基础\" class=\"headerlink\" title=\"语言基础\"></a>语言基础</h1><h3 id=\"变量声明提升\"><a href=\"#变量声明提升\" class=\"headerlink\" title=\"变量声明提升\"></a>变量声明提升</h3><p>var 提升，let不提升</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-built_in\">console</span>.log(name);<span class=\"hljs-comment\">//undefined</span><br><span class=\"hljs-keyword\">var</span> name = <span class=\"hljs-string\">'Matt'</span>;<br><br><span class=\"hljs-built_in\">console</span>.log(age);<span class=\"hljs-comment\">//ReferenceError,暂时性死区</span><br><span class=\"hljs-keyword\">let</span> age = <span class=\"hljs-number\">26</span>;<br></code></pre></td></tr></table></figure>\n\n<p>let：声明范围是块作用域，所以不会造成循环定义的迭代变量渗透到外部。</p>\n<p>const声明：限制不能修改其值或引用的对象，但是可以修改该对象的内部属性。</p>\n<p><strong>尽可能使用let、const，避免使用var，const优先</strong></p>\n<h3 id=\"变量类型\"><a href=\"#变量类型\" class=\"headerlink\" title=\"变量类型\"></a>变量类型</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\">Undefined<br>Null<span class=\"hljs-comment\">//typeof Null ==='object'</span><br><span class=\"hljs-built_in\">Boolean</span><br><span class=\"hljs-built_in\">Number</span><br><span class=\"hljs-built_in\">String</span><br><span class=\"hljs-built_in\">Symbol</span><br>(<span class=\"hljs-built_in\">Object</span>)<br></code></pre></td></tr></table></figure>\n\n<p>undefined 是一个特殊值，在if判断为假</p>\n<p>null：可以看做是空对象指针</p>\n<h3 id=\"数值\"><a href=\"#数值\" class=\"headerlink\" title=\"数值\"></a>数值</h3><p>特殊：NaN:not a number</p>\n<h4 id=\"转换函数：\"><a href=\"#转换函数：\" class=\"headerlink\" title=\"转换函数：\"></a>转换函数：</h4><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs stylus\"><span class=\"hljs-function\"><span class=\"hljs-title\">Number</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"><span class=\"hljs-title\">parseInt</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"><span class=\"hljs-title\">parseFloat</span><span class=\"hljs-params\">()</span></span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a>字符串</h3><p>字符串的特点：不可变，如果要修改只能销毁原有的字符串。</p>\n<p>转换函数：</p>\n<figure class=\"highlight isbl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs isbl\"><span class=\"hljs-function\"><span class=\"hljs-title\">toString</span>()</span><br><span class=\"hljs-function\"><span class=\"hljs-title\">String</span>()</span><br><span class=\"hljs-function\"><span class=\"hljs-title\">String</span>(<span class=\"hljs-variable\"><span class=\"hljs-literal\">null</span></span>) === <span class=\"hljs-string\">'null'</span></span><br><span class=\"hljs-function\"><span class=\"hljs-title\">String</span>(<span class=\"hljs-variable\">undefined</span>) === <span class=\"hljs-string\">'undefined'</span></span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"模板字面量\"><a href=\"#模板字面量\" class=\"headerlink\" title=\"模板字面量\"></a>模板字面量</h4><p>模板字面量可用于字符串插值：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">let</span> value1 = <span class=\"hljs-number\">233</span>;<br><span class=\"hljs-keyword\">let</span> value2 = <span class=\"hljs-string\">'sec'</span><br><span class=\"hljs-keyword\">let</span> str1 = <span class=\"hljs-string\">`now is <span class=\"hljs-subst\">$&#123;value1&#125;</span> <span class=\"hljs-subst\">$&#123;value2&#125;</span>.`</span><br></code></pre></td></tr></table></figure>\n\n<p>模板字面量可以跨行定义字符串</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">let</span> str2 = <span class=\"hljs-string\">`the</span><br><span class=\"hljs-string\">Kamome's humble abode`</span><br></code></pre></td></tr></table></figure>\n\n<p>原始字符串：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-built_in\">String</span>.raw<span class=\"hljs-string\">`\\u00a9`</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"Symbol\"><a href=\"#Symbol\" class=\"headerlink\" title=\"Symbol\"></a>Symbol</h3><p>TODO:写关于symbol的笔记</p>\n<h3 id=\"Object\"><a href=\"#Object\" class=\"headerlink\" title=\"Object\"></a>Object</h3><p>Object 的属性和方法</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs stylus\">constructor:创建<br><span class=\"hljs-function\"><span class=\"hljs-title\">hasOwnProperty</span><span class=\"hljs-params\">(propertyName)</span></span>:判断当前对象是否存在给定属性<br>isPrototypeOf:<br><span class=\"hljs-function\"><span class=\"hljs-title\">propertyIsEnumerable</span><span class=\"hljs-params\">(propertyName)</span></span>:判断给定的属性是否可用<br><span class=\"hljs-function\"><span class=\"hljs-title\">toLocaleString</span><span class=\"hljs-params\">()</span></span>:返回对象的字符串表示（反映本地化执行环境）<br>toString:返回对象的字符串表示<br><span class=\"hljs-function\"><span class=\"hljs-title\">valueOf</span><span class=\"hljs-params\">()</span></span>:返回对应的字符串<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"算符\"><a href=\"#算符\" class=\"headerlink\" title=\"算符\"></a>算符</h3><p>一元算符</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">//一元运算符</span><br><span class=\"hljs-keyword\">let</span> str1 = <span class=\"hljs-string\">'123'</span>;<br>str1 = +str1;<br><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">typeof</span> str1);<span class=\"hljs-comment\">//number</span><br></code></pre></td></tr></table></figure>\n\n<h1 id=\"异步编程\"><a href=\"#异步编程\" class=\"headerlink\" title=\"异步编程\"></a>异步编程</h1><h2 id=\"Promise\"><a href=\"#Promise\" class=\"headerlink\" title=\"Promise\"></a>Promise</h2><h3 id=\"Promise的基本使用\"><a href=\"#Promise的基本使用\" class=\"headerlink\" title=\"Promise的基本使用\"></a>Promise的基本使用</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">let</span> myFirstPromise = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">resolve, reject</span>)</span>&#123;<br>    <span class=\"hljs-comment\">//当异步代码执行成功时，我们才会调用resolve(...), 当异步代码失败时就会调用reject(...)</span><br>    <span class=\"hljs-comment\">//在本例中，我们使用setTimeout(...)来模拟异步代码，实际编码时可能是XHR请求或是HTML5的一些API方法.</span><br>    setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;<br>        resolve(<span class=\"hljs-string\">\"成功!\"</span>); <span class=\"hljs-comment\">//代码正常执行！</span><br>    &#125;, <span class=\"hljs-number\">250</span>);<br>&#125;);<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"函数返回Promise\"><a href=\"#函数返回Promise\" class=\"headerlink\" title=\"函数返回Promise\"></a>函数返回Promise</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getUserInfo</span>(<span class=\"hljs-params\"></span>) </span>&#123;<br>\t<span class=\"hljs-comment\">//获取个人信息</span><br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject</span>) =&gt;</span> &#123;<br>\t\tdbo.collection(<span class=\"hljs-string\">'users'</span>).find(&#123; <span class=\"hljs-attr\">eid</span>: userEID &#125;).toArray(<span class=\"hljs-function\">(<span class=\"hljs-params\">err, result</span>) =&gt;</span> &#123;<br>\t\t\t<span class=\"hljs-keyword\">if</span> (err) <span class=\"hljs-keyword\">throw</span> err;<br>            returnMessage[<span class=\"hljs-string\">'userInfo'</span>] = result;<br>            resolve();<br>        &#125;)<br>    &#125;)<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"Promise-all的使用\"><a href=\"#Promise-all的使用\" class=\"headerlink\" title=\"Promise.all的使用\"></a>Promise.all的使用</h3><figure class=\"highlight perl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs perl\">//执行查询<br>Promise.all([getUserInfo(), getMessage(), getFriendRe<span class=\"hljs-string\">q()</span>, getFriendList()]).then(() =&gt; &#123; closeAndSend() &#125;)<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h1><h3 id=\"函数的几种描述：\"><a href=\"#函数的几种描述：\" class=\"headerlink\" title=\"函数的几种描述：\"></a>函数的几种描述：</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">func1</span>(<span class=\"hljs-params\"></span>)</span>&#123;<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>;<br>&#125;<br><br><span class=\"hljs-keyword\">let</span> func2 = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>;<br>&#125;<br><br><span class=\"hljs-keyword\">let</span> func3 = <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> &#123;<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>;<br>&#125;<br><br><span class=\"hljs-comment\">//立即执行的函数</span><br>(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span>=&gt;</span><span class=\"hljs-number\">1</span>)();<br></code></pre></td></tr></table></figure>\n\n<p>箭头函数(Lambda)</p>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\">(param1, param2, …, paramN) =&gt; &#123; statements &#125;<br>(param1, param2, …, paramN) =&gt; expression<br><span class=\"hljs-comment\">//相当于：(param1, param2, …, paramN) =&gt;&#123; return expression; &#125;</span><br><br><span class=\"hljs-comment\">// 当只有一个参数时，圆括号是可选的：</span><br>(singleParam) =&gt; &#123; statements &#125;<br>singleParam =&gt; &#123; statements &#125;<br><br><span class=\"hljs-comment\">// 没有参数的函数应该写成一对圆括号。</span><br><span class=\"hljs-literal\">()</span> =&gt; &#123; statements &#125;<br></code></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>为系统学习 JavaScript ，重写有关 JavaScript 的笔记，使用教材《JavaScript高级程序设计》第四版。</p>\n</blockquote>\n<h1 id=\"新笔记：直接使用代码描述笔记\"><a href=\"#新笔记：直接使用代码描述笔记\" class=\"headerlink\" title=\"新笔记：直接使用代码描述笔记\"></a>新笔记：直接使用代码描述笔记</h1><p>注意：因此本博文不再更新</p>\n<p><a href=\"https://github.com/MakinoharaShoko/Learning-Code/tree/main/JS\" target=\"_blank\" rel=\"noopener\">https://github.com/MakinoharaShoko/Learning-Code/tree/main/JS</a></p>\n<h1 id=\"基础概念\"><a href=\"#基础概念\" class=\"headerlink\" title=\"基础概念\"></a>基础概念</h1><h2 id=\"1、DOM-amp-BOM\"><a href=\"#1、DOM-amp-BOM\" class=\"headerlink\" title=\"1、DOM &amp; BOM\"></a>1、DOM &amp; BOM</h2><p>DOM通过创建表示文档的树，让开发者可以随心所欲地控制网页的内容和结构。使用DOM API， 可以轻松地删除、添加、替换、修改节点。</p>\n<p>总体来说，BOM 主要针对浏览器窗口和子窗口（frame），不过人们通常会把任何特定于浏览器的 扩展都归在BOM的范畴内。比如，下面就是这样一些扩展：</p>\n<p> 弹出新浏览器窗口的能力；</p>\n<p> 移动、缩放和关闭浏览器窗口的能力；</p>\n<p> navigator 对象，提供关于浏览器的详尽信息；<br> location 对象，提供浏览器加载页面的详尽信息；</p>\n<p> screen 对象，提供关于用户屏幕分辨率的详尽信息；</p>\n<p> performance 对象，提供浏览器内存占用、导航行为和时间统计的详尽信息；</p>\n<p> 对 cookie的支持；<br> 其他自定义对象，如 XMLHttpRequest 和 IE的 ActiveXObject。</p>\n<h2 id=\"2、加载方式\"><a href=\"#2、加载方式\" class=\"headerlink\" title=\"2、加载方式\"></a>2、加载方式</h2><h3 id=\"1、行内\"><a href=\"#1、行内\" class=\"headerlink\" title=\"1、行内\"></a>1、行内</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span> <br><span class=\"actionscript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">sayHi</span><span class=\"hljs-params\">()</span> </span>&#123; </span><br><span class=\"javascript\">\t<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Hi!\"</span>);</span><br>&#125;<br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"2、外部文件\"><a href=\"#2、外部文件\" class=\"headerlink\" title=\"2、外部文件\"></a>2、外部文件</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"example.js\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"3、加载位置\"><a href=\"#3、加载位置\" class=\"headerlink\" title=\"3、加载位置\"></a>3、加载位置</h3><p>推荐加载在 body 内容的最后，这样就会在渲染界面后加载JavaScript</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-meta-keyword\">html</span>&gt;</span> <br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span>&gt;</span><br>\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span><br>\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>Example HTML Page<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span> <br>\t<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span> <br>\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span> <br>\t<span class=\"hljs-comment\">&lt;!-- 这里是页面内容 --&gt;</span><br>\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"example1.js\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span> <br>\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"example2.js\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span> <br>\t<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>推迟到解析到结束标签 &lt;/html&gt; 执行（只对外部脚本文件才有效）：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">defer</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"example1.js\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h1 id=\"语言基础\"><a href=\"#语言基础\" class=\"headerlink\" title=\"语言基础\"></a>语言基础</h1><h3 id=\"变量声明提升\"><a href=\"#变量声明提升\" class=\"headerlink\" title=\"变量声明提升\"></a>变量声明提升</h3><p>var 提升，let不提升</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-built_in\">console</span>.log(name);<span class=\"hljs-comment\">//undefined</span><br><span class=\"hljs-keyword\">var</span> name = <span class=\"hljs-string\">'Matt'</span>;<br><br><span class=\"hljs-built_in\">console</span>.log(age);<span class=\"hljs-comment\">//ReferenceError,暂时性死区</span><br><span class=\"hljs-keyword\">let</span> age = <span class=\"hljs-number\">26</span>;<br></code></pre></td></tr></table></figure>\n\n<p>let：声明范围是块作用域，所以不会造成循环定义的迭代变量渗透到外部。</p>\n<p>const声明：限制不能修改其值或引用的对象，但是可以修改该对象的内部属性。</p>\n<p><strong>尽可能使用let、const，避免使用var，const优先</strong></p>\n<h3 id=\"变量类型\"><a href=\"#变量类型\" class=\"headerlink\" title=\"变量类型\"></a>变量类型</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\">Undefined<br>Null<span class=\"hljs-comment\">//typeof Null ==='object'</span><br><span class=\"hljs-built_in\">Boolean</span><br><span class=\"hljs-built_in\">Number</span><br><span class=\"hljs-built_in\">String</span><br><span class=\"hljs-built_in\">Symbol</span><br>(<span class=\"hljs-built_in\">Object</span>)<br></code></pre></td></tr></table></figure>\n\n<p>undefined 是一个特殊值，在if判断为假</p>\n<p>null：可以看做是空对象指针</p>\n<h3 id=\"数值\"><a href=\"#数值\" class=\"headerlink\" title=\"数值\"></a>数值</h3><p>特殊：NaN:not a number</p>\n<h4 id=\"转换函数：\"><a href=\"#转换函数：\" class=\"headerlink\" title=\"转换函数：\"></a>转换函数：</h4><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs stylus\"><span class=\"hljs-function\"><span class=\"hljs-title\">Number</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"><span class=\"hljs-title\">parseInt</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"><span class=\"hljs-title\">parseFloat</span><span class=\"hljs-params\">()</span></span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a>字符串</h3><p>字符串的特点：不可变，如果要修改只能销毁原有的字符串。</p>\n<p>转换函数：</p>\n<figure class=\"highlight isbl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs isbl\"><span class=\"hljs-function\"><span class=\"hljs-title\">toString</span>()</span><br><span class=\"hljs-function\"><span class=\"hljs-title\">String</span>()</span><br><span class=\"hljs-function\"><span class=\"hljs-title\">String</span>(<span class=\"hljs-variable\"><span class=\"hljs-literal\">null</span></span>) === <span class=\"hljs-string\">'null'</span></span><br><span class=\"hljs-function\"><span class=\"hljs-title\">String</span>(<span class=\"hljs-variable\">undefined</span>) === <span class=\"hljs-string\">'undefined'</span></span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"模板字面量\"><a href=\"#模板字面量\" class=\"headerlink\" title=\"模板字面量\"></a>模板字面量</h4><p>模板字面量可用于字符串插值：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">let</span> value1 = <span class=\"hljs-number\">233</span>;<br><span class=\"hljs-keyword\">let</span> value2 = <span class=\"hljs-string\">'sec'</span><br><span class=\"hljs-keyword\">let</span> str1 = <span class=\"hljs-string\">`now is <span class=\"hljs-subst\">$&#123;value1&#125;</span> <span class=\"hljs-subst\">$&#123;value2&#125;</span>.`</span><br></code></pre></td></tr></table></figure>\n\n<p>模板字面量可以跨行定义字符串</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">let</span> str2 = <span class=\"hljs-string\">`the</span><br><span class=\"hljs-string\">Kamome's humble abode`</span><br></code></pre></td></tr></table></figure>\n\n<p>原始字符串：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-built_in\">String</span>.raw<span class=\"hljs-string\">`\\u00a9`</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"Symbol\"><a href=\"#Symbol\" class=\"headerlink\" title=\"Symbol\"></a>Symbol</h3><p>TODO:写关于symbol的笔记</p>\n<h3 id=\"Object\"><a href=\"#Object\" class=\"headerlink\" title=\"Object\"></a>Object</h3><p>Object 的属性和方法</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs stylus\">constructor:创建<br><span class=\"hljs-function\"><span class=\"hljs-title\">hasOwnProperty</span><span class=\"hljs-params\">(propertyName)</span></span>:判断当前对象是否存在给定属性<br>isPrototypeOf:<br><span class=\"hljs-function\"><span class=\"hljs-title\">propertyIsEnumerable</span><span class=\"hljs-params\">(propertyName)</span></span>:判断给定的属性是否可用<br><span class=\"hljs-function\"><span class=\"hljs-title\">toLocaleString</span><span class=\"hljs-params\">()</span></span>:返回对象的字符串表示（反映本地化执行环境）<br>toString:返回对象的字符串表示<br><span class=\"hljs-function\"><span class=\"hljs-title\">valueOf</span><span class=\"hljs-params\">()</span></span>:返回对应的字符串<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"算符\"><a href=\"#算符\" class=\"headerlink\" title=\"算符\"></a>算符</h3><p>一元算符</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">//一元运算符</span><br><span class=\"hljs-keyword\">let</span> str1 = <span class=\"hljs-string\">'123'</span>;<br>str1 = +str1;<br><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">typeof</span> str1);<span class=\"hljs-comment\">//number</span><br></code></pre></td></tr></table></figure>\n\n<h1 id=\"异步编程\"><a href=\"#异步编程\" class=\"headerlink\" title=\"异步编程\"></a>异步编程</h1><h2 id=\"Promise\"><a href=\"#Promise\" class=\"headerlink\" title=\"Promise\"></a>Promise</h2><h3 id=\"Promise的基本使用\"><a href=\"#Promise的基本使用\" class=\"headerlink\" title=\"Promise的基本使用\"></a>Promise的基本使用</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">let</span> myFirstPromise = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">resolve, reject</span>)</span>&#123;<br>    <span class=\"hljs-comment\">//当异步代码执行成功时，我们才会调用resolve(...), 当异步代码失败时就会调用reject(...)</span><br>    <span class=\"hljs-comment\">//在本例中，我们使用setTimeout(...)来模拟异步代码，实际编码时可能是XHR请求或是HTML5的一些API方法.</span><br>    setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;<br>        resolve(<span class=\"hljs-string\">\"成功!\"</span>); <span class=\"hljs-comment\">//代码正常执行！</span><br>    &#125;, <span class=\"hljs-number\">250</span>);<br>&#125;);<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"函数返回Promise\"><a href=\"#函数返回Promise\" class=\"headerlink\" title=\"函数返回Promise\"></a>函数返回Promise</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getUserInfo</span>(<span class=\"hljs-params\"></span>) </span>&#123;<br>\t<span class=\"hljs-comment\">//获取个人信息</span><br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject</span>) =&gt;</span> &#123;<br>\t\tdbo.collection(<span class=\"hljs-string\">'users'</span>).find(&#123; <span class=\"hljs-attr\">eid</span>: userEID &#125;).toArray(<span class=\"hljs-function\">(<span class=\"hljs-params\">err, result</span>) =&gt;</span> &#123;<br>\t\t\t<span class=\"hljs-keyword\">if</span> (err) <span class=\"hljs-keyword\">throw</span> err;<br>            returnMessage[<span class=\"hljs-string\">'userInfo'</span>] = result;<br>            resolve();<br>        &#125;)<br>    &#125;)<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"Promise-all的使用\"><a href=\"#Promise-all的使用\" class=\"headerlink\" title=\"Promise.all的使用\"></a>Promise.all的使用</h3><figure class=\"highlight perl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs perl\">//执行查询<br>Promise.all([getUserInfo(), getMessage(), getFriendRe<span class=\"hljs-string\">q()</span>, getFriendList()]).then(() =&gt; &#123; closeAndSend() &#125;)<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h1><h3 id=\"函数的几种描述：\"><a href=\"#函数的几种描述：\" class=\"headerlink\" title=\"函数的几种描述：\"></a>函数的几种描述：</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">func1</span>(<span class=\"hljs-params\"></span>)</span>&#123;<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>;<br>&#125;<br><br><span class=\"hljs-keyword\">let</span> func2 = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>;<br>&#125;<br><br><span class=\"hljs-keyword\">let</span> func3 = <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> &#123;<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>;<br>&#125;<br><br><span class=\"hljs-comment\">//立即执行的函数</span><br>(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span>=&gt;</span><span class=\"hljs-number\">1</span>)();<br></code></pre></td></tr></table></figure>\n\n<p>箭头函数(Lambda)</p>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\">(param1, param2, …, paramN) =&gt; &#123; statements &#125;<br>(param1, param2, …, paramN) =&gt; expression<br><span class=\"hljs-comment\">//相当于：(param1, param2, …, paramN) =&gt;&#123; return expression; &#125;</span><br><br><span class=\"hljs-comment\">// 当只有一个参数时，圆括号是可选的：</span><br>(singleParam) =&gt; &#123; statements &#125;<br>singleParam =&gt; &#123; statements &#125;<br><br><span class=\"hljs-comment\">// 没有参数的函数应该写成一对圆括号。</span><br><span class=\"hljs-literal\">()</span> =&gt; &#123; statements &#125;<br></code></pre></td></tr></table></figure>\n\n"},{"layout":"post","title":"KMP算法详解","intro":"","date":"2020-05-08T03:00:00.000Z","author":"Makinohara","catalog":true,"_content":"\n## KMP理论概要\n\nKMP字符串匹配算法是一种效率更高的字符串匹配算法。相比于传统算法，由于其主串指针不需要回溯，因此大大减少了匹配需要的时间。\n\n首先，让我们看看其是如何减少重复的步骤的：\n\n假如有一字符串S：\n\n| 1    | 2    | 3    | 4    | 5    | 6    | 7    | 8    |\n| ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- |\n| a    | a    | b    | c    | a    | a    | b    | a    |\n\n我们想要让字符串“aaba”与其匹配。\n\n那么，匹配看起来就是这样：\n\n第一次匹配：\n\n| 1    | 2    | 3    | 4             | 5    | 6    | 7    | 8    |\n| ---- | ---- | ---- | ------------- | ---- | ---- | ---- | ---- |\n| a    | a    | b    | **c**         | a    | a    | b    | a    |\n| a    | a    | b    | **a(不匹配)** |      |      |      |      |\n\n此时指针回退，主串指针回退至2，模式串回退至1。\n\n第二次匹配：\n\n| 1    | 2    | 3               | 4    | 5    | 6    | 7    | 8    |\n| ---- | ---- | --------------- | ---- | ---- | ---- | ---- | ---- |\n| a    | a    | **b**           | c    | a    | a    | b    | a    |\n|      | a    | **a（不匹配）** |      |      |      |      |      |\n\n此时主串指针再次回退。\n\n可以看出，我们的主串指针在匹配过程中一直在重复读取某一段内容，这是大大有损效率的。若是能使主串指针不回退，只控制模式串指针回退一段距离，这也许可以改善。\n\n实际上，第二次匹配可以简化为：\n\n| 1    | 2    | 3    | 4             | 5    | 6    | 7    | 8    |\n| ---- | ---- | ---- | ------------- | ---- | ---- | ---- | ---- |\n| a    | a    | b    | **c**         | a    | a    | b    | a    |\n|      |      |      | **a(不匹配)** |      |      |      |      |\n\n然后是第三次匹配：\n\n| 1    | 2    | 3    | 4    | 5    | 6    | 7    | 8               |\n| ---- | ---- | ---- | ---- | ---- | ---- | ---- | --------------- |\n| a    | a    | b    | c    | a    | a    | b    | **a**           |\n|      |      |      |      | a    | a    | b    | **a(匹配成功)** |\n\n那么，如何算出模式串指针应当回退多少呢？\n\n根据KMP算法的核心思想，模式串T拥有一个对应表，用于记录模式串T重复的部分。\n\n观察以下两个对应表：\n\n| 1    | 2    | 3    | 4    | 5    | 6    | 7    | 8    |\n| ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- |\n| a    | a    | b    | a    | a    | a    | b    | a    |\n| 0    | 1    | 2    | 1    | 2    | 3    | 3    | 4    |\n\n| 1    | 2    | 3    | 4    | 5    | 6    | 7    | 8    |\n| ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- |\n| a    | b    | c    | d    | e    | f    | g    | h    |\n| 0    | 1    | 1    | 1    | 1    | 1    | 1    | 1    |\n\n可以看出，1号表格中，在匹配到第8个位置时，若是不匹配，只需要回到4对应的位置继续匹配就可以了，但是2号表格中，每一次匹配都必须要回到位置1重新匹配。\n\n\n\n原因在于此：\n\n| 1       | 2       | 3       | 4    | 5       | 6       | 7       | 8    |\n| ------- | ------- | ------- | ---- | ------- | ------- | ------- | ---- |\n| ***a*** | ***a*** | ***b*** | a    | ***a*** | ***a*** | ***b*** | a    |\n| 0       | 1       | 2       | 1    | 2       | 3       | 3       | 4    |\n\n可以看到，若是第8个字符不匹配并不影响前3个字符已经匹配成功的事实。因为5、6、7三个字符与1、2、3无异。既然我们已经匹配过a、b、c三个字符了，何必再匹配一次？\n\n举例说明：\n\n匹配 “aabaaaabcaabaaaba”与“aabaaaba”\n\n| 1       | 2       | 3       | 4    | 5        | 6        | 7        | 8              | 9    | 10   | 11   | 12   | 13   | 14   | 15   | 16   |\n| ------- | ------- | ------- | ---- | -------- | -------- | -------- | -------------- | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- |\n| a       | a       | b       | a    | a        | a        | b        | **c**          | a    | a    | b    | a    | a    | a    | b    | a    |\n| a       | a       | b       | a    | **a**    | **a**    | **b**    | **a(不匹配）** |      |      |      |      |      |      |      |      |\n| 与5相同 | 与6相同 | 与7相同 |      | **匹配** | **匹配** | **匹配** |                |      |      |      |      |      |      |      |      |\n\n| 1    | 2    | 3    | 4    | 5    | 6    | 7    | 8                 | 9    | 10   | 11   | 12   | 13   | 14   | 15   | 16   |\n| ---- | ---- | ---- | ---- | ---- | ---- | ---- | ----------------- | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- |\n| a    | a    | b    | a    | a    | a    | b    | **c**             | a    | a    | b    | a    | a    | a    | b    | a    |\n|      |      |      |      | a    | a    | b    | **a（继续匹配）** | a    | a    | b    | a    |      |      |      |      |\n\n可以看到，由于我们已经在匹配5、6、7三个字符时确定a、a、b三个字符是匹配的，那么我们就不需要在匹配前三个字符上浪费时间了。\n\n那么，我们已经知道了如何使用模式串的“特性数组”来减少匹配重复字符上的浪费，但是这个数组怎样计算出来呢？\n\n综合来看，我们计算此数组的目的就在于减少重复匹配，那么此数组的最大目的就是找出在制定字母之前有多少重复部分。\n\n如：aabaaaba\n\n| 1                                                            | 2                      | 3            | 4             | 5            | 6             | 7             | 8              |\n| ------------------------------------------------------------ | ---------------------- | ------------ | ------------- | ------------ | ------------- | ------------- | -------------- |\n| a                                                            | a                      | b            | a             | a            | a             | b             | a              |\n| 0（因为每次匹配都是先使指针+1再匹配，若是第一个字符就不匹配，那么就使指针位置为0，匹配时从第一个开始匹配。） | 1（无论有无重复都为1） | 2（重复了a） | 1（没有重复） | 2（重复了a） | 3（重复了aa） | 3（重复了aa） | 4（重复了aab） |\n\n由此，推导程序如下：\n\n```c++\nstd::vector<int> getNext(std::string in) {\n        std::vector<int> res(in.length() + 1);\n        int i = 1, j = 0;\n        res[1] = 0;\n        while (i < in.length()) {\n            if (j == 0 || in[j - 1] == in[i - 1]) {\n                i++;\n                j++;\n                res[i] = j;\n            } else\n                j = res[j];\n        }\n        return res;\n    }\n```\n\n## KMP再优化：\n\n我们已经看出KMP算法是如何减少重复匹配来减少匹配时间的。但是，是否有一种更优化的方法呢？\n\n观察以下字符串：\n\n","source":"_posts/2020-5-8-ASR-E1.md","raw":"---\nlayout:     post\ntitle:      \"KMP算法详解\"\nintro:      \"\"\ndate:       2020-5-8 11:00:00\nauthor:     \"Makinohara\"\ncatalog: true\ntags:\n    - 计算机基础\n---\n\n## KMP理论概要\n\nKMP字符串匹配算法是一种效率更高的字符串匹配算法。相比于传统算法，由于其主串指针不需要回溯，因此大大减少了匹配需要的时间。\n\n首先，让我们看看其是如何减少重复的步骤的：\n\n假如有一字符串S：\n\n| 1    | 2    | 3    | 4    | 5    | 6    | 7    | 8    |\n| ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- |\n| a    | a    | b    | c    | a    | a    | b    | a    |\n\n我们想要让字符串“aaba”与其匹配。\n\n那么，匹配看起来就是这样：\n\n第一次匹配：\n\n| 1    | 2    | 3    | 4             | 5    | 6    | 7    | 8    |\n| ---- | ---- | ---- | ------------- | ---- | ---- | ---- | ---- |\n| a    | a    | b    | **c**         | a    | a    | b    | a    |\n| a    | a    | b    | **a(不匹配)** |      |      |      |      |\n\n此时指针回退，主串指针回退至2，模式串回退至1。\n\n第二次匹配：\n\n| 1    | 2    | 3               | 4    | 5    | 6    | 7    | 8    |\n| ---- | ---- | --------------- | ---- | ---- | ---- | ---- | ---- |\n| a    | a    | **b**           | c    | a    | a    | b    | a    |\n|      | a    | **a（不匹配）** |      |      |      |      |      |\n\n此时主串指针再次回退。\n\n可以看出，我们的主串指针在匹配过程中一直在重复读取某一段内容，这是大大有损效率的。若是能使主串指针不回退，只控制模式串指针回退一段距离，这也许可以改善。\n\n实际上，第二次匹配可以简化为：\n\n| 1    | 2    | 3    | 4             | 5    | 6    | 7    | 8    |\n| ---- | ---- | ---- | ------------- | ---- | ---- | ---- | ---- |\n| a    | a    | b    | **c**         | a    | a    | b    | a    |\n|      |      |      | **a(不匹配)** |      |      |      |      |\n\n然后是第三次匹配：\n\n| 1    | 2    | 3    | 4    | 5    | 6    | 7    | 8               |\n| ---- | ---- | ---- | ---- | ---- | ---- | ---- | --------------- |\n| a    | a    | b    | c    | a    | a    | b    | **a**           |\n|      |      |      |      | a    | a    | b    | **a(匹配成功)** |\n\n那么，如何算出模式串指针应当回退多少呢？\n\n根据KMP算法的核心思想，模式串T拥有一个对应表，用于记录模式串T重复的部分。\n\n观察以下两个对应表：\n\n| 1    | 2    | 3    | 4    | 5    | 6    | 7    | 8    |\n| ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- |\n| a    | a    | b    | a    | a    | a    | b    | a    |\n| 0    | 1    | 2    | 1    | 2    | 3    | 3    | 4    |\n\n| 1    | 2    | 3    | 4    | 5    | 6    | 7    | 8    |\n| ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- |\n| a    | b    | c    | d    | e    | f    | g    | h    |\n| 0    | 1    | 1    | 1    | 1    | 1    | 1    | 1    |\n\n可以看出，1号表格中，在匹配到第8个位置时，若是不匹配，只需要回到4对应的位置继续匹配就可以了，但是2号表格中，每一次匹配都必须要回到位置1重新匹配。\n\n\n\n原因在于此：\n\n| 1       | 2       | 3       | 4    | 5       | 6       | 7       | 8    |\n| ------- | ------- | ------- | ---- | ------- | ------- | ------- | ---- |\n| ***a*** | ***a*** | ***b*** | a    | ***a*** | ***a*** | ***b*** | a    |\n| 0       | 1       | 2       | 1    | 2       | 3       | 3       | 4    |\n\n可以看到，若是第8个字符不匹配并不影响前3个字符已经匹配成功的事实。因为5、6、7三个字符与1、2、3无异。既然我们已经匹配过a、b、c三个字符了，何必再匹配一次？\n\n举例说明：\n\n匹配 “aabaaaabcaabaaaba”与“aabaaaba”\n\n| 1       | 2       | 3       | 4    | 5        | 6        | 7        | 8              | 9    | 10   | 11   | 12   | 13   | 14   | 15   | 16   |\n| ------- | ------- | ------- | ---- | -------- | -------- | -------- | -------------- | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- |\n| a       | a       | b       | a    | a        | a        | b        | **c**          | a    | a    | b    | a    | a    | a    | b    | a    |\n| a       | a       | b       | a    | **a**    | **a**    | **b**    | **a(不匹配）** |      |      |      |      |      |      |      |      |\n| 与5相同 | 与6相同 | 与7相同 |      | **匹配** | **匹配** | **匹配** |                |      |      |      |      |      |      |      |      |\n\n| 1    | 2    | 3    | 4    | 5    | 6    | 7    | 8                 | 9    | 10   | 11   | 12   | 13   | 14   | 15   | 16   |\n| ---- | ---- | ---- | ---- | ---- | ---- | ---- | ----------------- | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- |\n| a    | a    | b    | a    | a    | a    | b    | **c**             | a    | a    | b    | a    | a    | a    | b    | a    |\n|      |      |      |      | a    | a    | b    | **a（继续匹配）** | a    | a    | b    | a    |      |      |      |      |\n\n可以看到，由于我们已经在匹配5、6、7三个字符时确定a、a、b三个字符是匹配的，那么我们就不需要在匹配前三个字符上浪费时间了。\n\n那么，我们已经知道了如何使用模式串的“特性数组”来减少匹配重复字符上的浪费，但是这个数组怎样计算出来呢？\n\n综合来看，我们计算此数组的目的就在于减少重复匹配，那么此数组的最大目的就是找出在制定字母之前有多少重复部分。\n\n如：aabaaaba\n\n| 1                                                            | 2                      | 3            | 4             | 5            | 6             | 7             | 8              |\n| ------------------------------------------------------------ | ---------------------- | ------------ | ------------- | ------------ | ------------- | ------------- | -------------- |\n| a                                                            | a                      | b            | a             | a            | a             | b             | a              |\n| 0（因为每次匹配都是先使指针+1再匹配，若是第一个字符就不匹配，那么就使指针位置为0，匹配时从第一个开始匹配。） | 1（无论有无重复都为1） | 2（重复了a） | 1（没有重复） | 2（重复了a） | 3（重复了aa） | 3（重复了aa） | 4（重复了aab） |\n\n由此，推导程序如下：\n\n```c++\nstd::vector<int> getNext(std::string in) {\n        std::vector<int> res(in.length() + 1);\n        int i = 1, j = 0;\n        res[1] = 0;\n        while (i < in.length()) {\n            if (j == 0 || in[j - 1] == in[i - 1]) {\n                i++;\n                j++;\n                res[i] = j;\n            } else\n                j = res[j];\n        }\n        return res;\n    }\n```\n\n## KMP再优化：\n\n我们已经看出KMP算法是如何减少重复匹配来减少匹配时间的。但是，是否有一种更优化的方法呢？\n\n观察以下字符串：\n\n","slug":"2020-5-8-ASR-E1","published":1,"updated":"2021-12-13T03:29:57.682Z","comments":1,"photos":[],"link":"","_id":"ckxx9go4z00008w8adu8dh3mf","content":"<h2 id=\"KMP理论概要\"><a href=\"#KMP理论概要\" class=\"headerlink\" title=\"KMP理论概要\"></a>KMP理论概要</h2><p>KMP字符串匹配算法是一种效率更高的字符串匹配算法。相比于传统算法，由于其主串指针不需要回溯，因此大大减少了匹配需要的时间。</p>\n<p>首先，让我们看看其是如何减少重复的步骤的：</p>\n<p>假如有一字符串S：</p>\n<table>\n<thead>\n<tr>\n<th>1</th>\n<th>2</th>\n<th>3</th>\n<th>4</th>\n<th>5</th>\n<th>6</th>\n<th>7</th>\n<th>8</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>a</td>\n<td>a</td>\n<td>b</td>\n<td>c</td>\n<td>a</td>\n<td>a</td>\n<td>b</td>\n<td>a</td>\n</tr>\n</tbody></table>\n<p>我们想要让字符串“aaba”与其匹配。</p>\n<p>那么，匹配看起来就是这样：</p>\n<p>第一次匹配：</p>\n<table>\n<thead>\n<tr>\n<th>1</th>\n<th>2</th>\n<th>3</th>\n<th>4</th>\n<th>5</th>\n<th>6</th>\n<th>7</th>\n<th>8</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>a</td>\n<td>a</td>\n<td>b</td>\n<td><strong>c</strong></td>\n<td>a</td>\n<td>a</td>\n<td>b</td>\n<td>a</td>\n</tr>\n<tr>\n<td>a</td>\n<td>a</td>\n<td>b</td>\n<td><strong>a(不匹配)</strong></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<p>此时指针回退，主串指针回退至2，模式串回退至1。</p>\n<p>第二次匹配：</p>\n<table>\n<thead>\n<tr>\n<th>1</th>\n<th>2</th>\n<th>3</th>\n<th>4</th>\n<th>5</th>\n<th>6</th>\n<th>7</th>\n<th>8</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>a</td>\n<td>a</td>\n<td><strong>b</strong></td>\n<td>c</td>\n<td>a</td>\n<td>a</td>\n<td>b</td>\n<td>a</td>\n</tr>\n<tr>\n<td></td>\n<td>a</td>\n<td><strong>a（不匹配）</strong></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<p>此时主串指针再次回退。</p>\n<p>可以看出，我们的主串指针在匹配过程中一直在重复读取某一段内容，这是大大有损效率的。若是能使主串指针不回退，只控制模式串指针回退一段距离，这也许可以改善。</p>\n<p>实际上，第二次匹配可以简化为：</p>\n<table>\n<thead>\n<tr>\n<th>1</th>\n<th>2</th>\n<th>3</th>\n<th>4</th>\n<th>5</th>\n<th>6</th>\n<th>7</th>\n<th>8</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>a</td>\n<td>a</td>\n<td>b</td>\n<td><strong>c</strong></td>\n<td>a</td>\n<td>a</td>\n<td>b</td>\n<td>a</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td><strong>a(不匹配)</strong></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<p>然后是第三次匹配：</p>\n<table>\n<thead>\n<tr>\n<th>1</th>\n<th>2</th>\n<th>3</th>\n<th>4</th>\n<th>5</th>\n<th>6</th>\n<th>7</th>\n<th>8</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>a</td>\n<td>a</td>\n<td>b</td>\n<td>c</td>\n<td>a</td>\n<td>a</td>\n<td>b</td>\n<td><strong>a</strong></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td>a</td>\n<td>a</td>\n<td>b</td>\n<td><strong>a(匹配成功)</strong></td>\n</tr>\n</tbody></table>\n<p>那么，如何算出模式串指针应当回退多少呢？</p>\n<p>根据KMP算法的核心思想，模式串T拥有一个对应表，用于记录模式串T重复的部分。</p>\n<p>观察以下两个对应表：</p>\n<table>\n<thead>\n<tr>\n<th>1</th>\n<th>2</th>\n<th>3</th>\n<th>4</th>\n<th>5</th>\n<th>6</th>\n<th>7</th>\n<th>8</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>a</td>\n<td>a</td>\n<td>b</td>\n<td>a</td>\n<td>a</td>\n<td>a</td>\n<td>b</td>\n<td>a</td>\n</tr>\n<tr>\n<td>0</td>\n<td>1</td>\n<td>2</td>\n<td>1</td>\n<td>2</td>\n<td>3</td>\n<td>3</td>\n<td>4</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>1</th>\n<th>2</th>\n<th>3</th>\n<th>4</th>\n<th>5</th>\n<th>6</th>\n<th>7</th>\n<th>8</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>a</td>\n<td>b</td>\n<td>c</td>\n<td>d</td>\n<td>e</td>\n<td>f</td>\n<td>g</td>\n<td>h</td>\n</tr>\n<tr>\n<td>0</td>\n<td>1</td>\n<td>1</td>\n<td>1</td>\n<td>1</td>\n<td>1</td>\n<td>1</td>\n<td>1</td>\n</tr>\n</tbody></table>\n<p>可以看出，1号表格中，在匹配到第8个位置时，若是不匹配，只需要回到4对应的位置继续匹配就可以了，但是2号表格中，每一次匹配都必须要回到位置1重新匹配。</p>\n<p>原因在于此：</p>\n<table>\n<thead>\n<tr>\n<th>1</th>\n<th>2</th>\n<th>3</th>\n<th>4</th>\n<th>5</th>\n<th>6</th>\n<th>7</th>\n<th>8</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><em><strong>a</strong></em></td>\n<td><em><strong>a</strong></em></td>\n<td><em><strong>b</strong></em></td>\n<td>a</td>\n<td><em><strong>a</strong></em></td>\n<td><em><strong>a</strong></em></td>\n<td><em><strong>b</strong></em></td>\n<td>a</td>\n</tr>\n<tr>\n<td>0</td>\n<td>1</td>\n<td>2</td>\n<td>1</td>\n<td>2</td>\n<td>3</td>\n<td>3</td>\n<td>4</td>\n</tr>\n</tbody></table>\n<p>可以看到，若是第8个字符不匹配并不影响前3个字符已经匹配成功的事实。因为5、6、7三个字符与1、2、3无异。既然我们已经匹配过a、b、c三个字符了，何必再匹配一次？</p>\n<p>举例说明：</p>\n<p>匹配 “aabaaaabcaabaaaba”与“aabaaaba”</p>\n<table>\n<thead>\n<tr>\n<th>1</th>\n<th>2</th>\n<th>3</th>\n<th>4</th>\n<th>5</th>\n<th>6</th>\n<th>7</th>\n<th>8</th>\n<th>9</th>\n<th>10</th>\n<th>11</th>\n<th>12</th>\n<th>13</th>\n<th>14</th>\n<th>15</th>\n<th>16</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>a</td>\n<td>a</td>\n<td>b</td>\n<td>a</td>\n<td>a</td>\n<td>a</td>\n<td>b</td>\n<td><strong>c</strong></td>\n<td>a</td>\n<td>a</td>\n<td>b</td>\n<td>a</td>\n<td>a</td>\n<td>a</td>\n<td>b</td>\n<td>a</td>\n</tr>\n<tr>\n<td>a</td>\n<td>a</td>\n<td>b</td>\n<td>a</td>\n<td><strong>a</strong></td>\n<td><strong>a</strong></td>\n<td><strong>b</strong></td>\n<td><strong>a(不匹配）</strong></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>与5相同</td>\n<td>与6相同</td>\n<td>与7相同</td>\n<td></td>\n<td><strong>匹配</strong></td>\n<td><strong>匹配</strong></td>\n<td><strong>匹配</strong></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>1</th>\n<th>2</th>\n<th>3</th>\n<th>4</th>\n<th>5</th>\n<th>6</th>\n<th>7</th>\n<th>8</th>\n<th>9</th>\n<th>10</th>\n<th>11</th>\n<th>12</th>\n<th>13</th>\n<th>14</th>\n<th>15</th>\n<th>16</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>a</td>\n<td>a</td>\n<td>b</td>\n<td>a</td>\n<td>a</td>\n<td>a</td>\n<td>b</td>\n<td><strong>c</strong></td>\n<td>a</td>\n<td>a</td>\n<td>b</td>\n<td>a</td>\n<td>a</td>\n<td>a</td>\n<td>b</td>\n<td>a</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td>a</td>\n<td>a</td>\n<td>b</td>\n<td><strong>a（继续匹配）</strong></td>\n<td>a</td>\n<td>a</td>\n<td>b</td>\n<td>a</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<p>可以看到，由于我们已经在匹配5、6、7三个字符时确定a、a、b三个字符是匹配的，那么我们就不需要在匹配前三个字符上浪费时间了。</p>\n<p>那么，我们已经知道了如何使用模式串的“特性数组”来减少匹配重复字符上的浪费，但是这个数组怎样计算出来呢？</p>\n<p>综合来看，我们计算此数组的目的就在于减少重复匹配，那么此数组的最大目的就是找出在制定字母之前有多少重复部分。</p>\n<p>如：aabaaaba</p>\n<table>\n<thead>\n<tr>\n<th>1</th>\n<th>2</th>\n<th>3</th>\n<th>4</th>\n<th>5</th>\n<th>6</th>\n<th>7</th>\n<th>8</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>a</td>\n<td>a</td>\n<td>b</td>\n<td>a</td>\n<td>a</td>\n<td>a</td>\n<td>b</td>\n<td>a</td>\n</tr>\n<tr>\n<td>0（因为每次匹配都是先使指针+1再匹配，若是第一个字符就不匹配，那么就使指针位置为0，匹配时从第一个开始匹配。）</td>\n<td>1（无论有无重复都为1）</td>\n<td>2（重复了a）</td>\n<td>1（没有重复）</td>\n<td>2（重复了a）</td>\n<td>3（重复了aa）</td>\n<td>3（重复了aa）</td>\n<td>4（重复了aab）</td>\n</tr>\n</tbody></table>\n<p>由此，推导程序如下：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-function\"><span class=\"hljs-built_in\">std</span>::<span class=\"hljs-built_in\">vector</span>&lt;<span class=\"hljs-keyword\">int</span>&gt; <span class=\"hljs-title\">getNext</span><span class=\"hljs-params\">(<span class=\"hljs-built_in\">std</span>::<span class=\"hljs-built_in\">string</span> in)</span> </span>&#123;<br>        <span class=\"hljs-function\"><span class=\"hljs-built_in\">std</span>::<span class=\"hljs-built_in\">vector</span>&lt;<span class=\"hljs-keyword\">int</span>&gt; <span class=\"hljs-title\">res</span><span class=\"hljs-params\">(in.length() + <span class=\"hljs-number\">1</span>)</span></span>;<br>        <span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">1</span>, j = <span class=\"hljs-number\">0</span>;<br>        res[<span class=\"hljs-number\">1</span>] = <span class=\"hljs-number\">0</span>;<br>        <span class=\"hljs-keyword\">while</span> (i &lt; in.length()) &#123;<br>            <span class=\"hljs-keyword\">if</span> (j == <span class=\"hljs-number\">0</span> || in[j - <span class=\"hljs-number\">1</span>] == in[i - <span class=\"hljs-number\">1</span>]) &#123;<br>                i++;<br>                j++;<br>                res[i] = j;<br>            &#125; <span class=\"hljs-keyword\">else</span><br>                j = res[j];<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> res;<br>    &#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"KMP再优化：\"><a href=\"#KMP再优化：\" class=\"headerlink\" title=\"KMP再优化：\"></a>KMP再优化：</h2><p>我们已经看出KMP算法是如何减少重复匹配来减少匹配时间的。但是，是否有一种更优化的方法呢？</p>\n<p>观察以下字符串：</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"KMP理论概要\"><a href=\"#KMP理论概要\" class=\"headerlink\" title=\"KMP理论概要\"></a>KMP理论概要</h2><p>KMP字符串匹配算法是一种效率更高的字符串匹配算法。相比于传统算法，由于其主串指针不需要回溯，因此大大减少了匹配需要的时间。</p>\n<p>首先，让我们看看其是如何减少重复的步骤的：</p>\n<p>假如有一字符串S：</p>\n<table>\n<thead>\n<tr>\n<th>1</th>\n<th>2</th>\n<th>3</th>\n<th>4</th>\n<th>5</th>\n<th>6</th>\n<th>7</th>\n<th>8</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>a</td>\n<td>a</td>\n<td>b</td>\n<td>c</td>\n<td>a</td>\n<td>a</td>\n<td>b</td>\n<td>a</td>\n</tr>\n</tbody></table>\n<p>我们想要让字符串“aaba”与其匹配。</p>\n<p>那么，匹配看起来就是这样：</p>\n<p>第一次匹配：</p>\n<table>\n<thead>\n<tr>\n<th>1</th>\n<th>2</th>\n<th>3</th>\n<th>4</th>\n<th>5</th>\n<th>6</th>\n<th>7</th>\n<th>8</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>a</td>\n<td>a</td>\n<td>b</td>\n<td><strong>c</strong></td>\n<td>a</td>\n<td>a</td>\n<td>b</td>\n<td>a</td>\n</tr>\n<tr>\n<td>a</td>\n<td>a</td>\n<td>b</td>\n<td><strong>a(不匹配)</strong></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<p>此时指针回退，主串指针回退至2，模式串回退至1。</p>\n<p>第二次匹配：</p>\n<table>\n<thead>\n<tr>\n<th>1</th>\n<th>2</th>\n<th>3</th>\n<th>4</th>\n<th>5</th>\n<th>6</th>\n<th>7</th>\n<th>8</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>a</td>\n<td>a</td>\n<td><strong>b</strong></td>\n<td>c</td>\n<td>a</td>\n<td>a</td>\n<td>b</td>\n<td>a</td>\n</tr>\n<tr>\n<td></td>\n<td>a</td>\n<td><strong>a（不匹配）</strong></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<p>此时主串指针再次回退。</p>\n<p>可以看出，我们的主串指针在匹配过程中一直在重复读取某一段内容，这是大大有损效率的。若是能使主串指针不回退，只控制模式串指针回退一段距离，这也许可以改善。</p>\n<p>实际上，第二次匹配可以简化为：</p>\n<table>\n<thead>\n<tr>\n<th>1</th>\n<th>2</th>\n<th>3</th>\n<th>4</th>\n<th>5</th>\n<th>6</th>\n<th>7</th>\n<th>8</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>a</td>\n<td>a</td>\n<td>b</td>\n<td><strong>c</strong></td>\n<td>a</td>\n<td>a</td>\n<td>b</td>\n<td>a</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td><strong>a(不匹配)</strong></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<p>然后是第三次匹配：</p>\n<table>\n<thead>\n<tr>\n<th>1</th>\n<th>2</th>\n<th>3</th>\n<th>4</th>\n<th>5</th>\n<th>6</th>\n<th>7</th>\n<th>8</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>a</td>\n<td>a</td>\n<td>b</td>\n<td>c</td>\n<td>a</td>\n<td>a</td>\n<td>b</td>\n<td><strong>a</strong></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td>a</td>\n<td>a</td>\n<td>b</td>\n<td><strong>a(匹配成功)</strong></td>\n</tr>\n</tbody></table>\n<p>那么，如何算出模式串指针应当回退多少呢？</p>\n<p>根据KMP算法的核心思想，模式串T拥有一个对应表，用于记录模式串T重复的部分。</p>\n<p>观察以下两个对应表：</p>\n<table>\n<thead>\n<tr>\n<th>1</th>\n<th>2</th>\n<th>3</th>\n<th>4</th>\n<th>5</th>\n<th>6</th>\n<th>7</th>\n<th>8</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>a</td>\n<td>a</td>\n<td>b</td>\n<td>a</td>\n<td>a</td>\n<td>a</td>\n<td>b</td>\n<td>a</td>\n</tr>\n<tr>\n<td>0</td>\n<td>1</td>\n<td>2</td>\n<td>1</td>\n<td>2</td>\n<td>3</td>\n<td>3</td>\n<td>4</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>1</th>\n<th>2</th>\n<th>3</th>\n<th>4</th>\n<th>5</th>\n<th>6</th>\n<th>7</th>\n<th>8</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>a</td>\n<td>b</td>\n<td>c</td>\n<td>d</td>\n<td>e</td>\n<td>f</td>\n<td>g</td>\n<td>h</td>\n</tr>\n<tr>\n<td>0</td>\n<td>1</td>\n<td>1</td>\n<td>1</td>\n<td>1</td>\n<td>1</td>\n<td>1</td>\n<td>1</td>\n</tr>\n</tbody></table>\n<p>可以看出，1号表格中，在匹配到第8个位置时，若是不匹配，只需要回到4对应的位置继续匹配就可以了，但是2号表格中，每一次匹配都必须要回到位置1重新匹配。</p>\n<p>原因在于此：</p>\n<table>\n<thead>\n<tr>\n<th>1</th>\n<th>2</th>\n<th>3</th>\n<th>4</th>\n<th>5</th>\n<th>6</th>\n<th>7</th>\n<th>8</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><em><strong>a</strong></em></td>\n<td><em><strong>a</strong></em></td>\n<td><em><strong>b</strong></em></td>\n<td>a</td>\n<td><em><strong>a</strong></em></td>\n<td><em><strong>a</strong></em></td>\n<td><em><strong>b</strong></em></td>\n<td>a</td>\n</tr>\n<tr>\n<td>0</td>\n<td>1</td>\n<td>2</td>\n<td>1</td>\n<td>2</td>\n<td>3</td>\n<td>3</td>\n<td>4</td>\n</tr>\n</tbody></table>\n<p>可以看到，若是第8个字符不匹配并不影响前3个字符已经匹配成功的事实。因为5、6、7三个字符与1、2、3无异。既然我们已经匹配过a、b、c三个字符了，何必再匹配一次？</p>\n<p>举例说明：</p>\n<p>匹配 “aabaaaabcaabaaaba”与“aabaaaba”</p>\n<table>\n<thead>\n<tr>\n<th>1</th>\n<th>2</th>\n<th>3</th>\n<th>4</th>\n<th>5</th>\n<th>6</th>\n<th>7</th>\n<th>8</th>\n<th>9</th>\n<th>10</th>\n<th>11</th>\n<th>12</th>\n<th>13</th>\n<th>14</th>\n<th>15</th>\n<th>16</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>a</td>\n<td>a</td>\n<td>b</td>\n<td>a</td>\n<td>a</td>\n<td>a</td>\n<td>b</td>\n<td><strong>c</strong></td>\n<td>a</td>\n<td>a</td>\n<td>b</td>\n<td>a</td>\n<td>a</td>\n<td>a</td>\n<td>b</td>\n<td>a</td>\n</tr>\n<tr>\n<td>a</td>\n<td>a</td>\n<td>b</td>\n<td>a</td>\n<td><strong>a</strong></td>\n<td><strong>a</strong></td>\n<td><strong>b</strong></td>\n<td><strong>a(不匹配）</strong></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>与5相同</td>\n<td>与6相同</td>\n<td>与7相同</td>\n<td></td>\n<td><strong>匹配</strong></td>\n<td><strong>匹配</strong></td>\n<td><strong>匹配</strong></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>1</th>\n<th>2</th>\n<th>3</th>\n<th>4</th>\n<th>5</th>\n<th>6</th>\n<th>7</th>\n<th>8</th>\n<th>9</th>\n<th>10</th>\n<th>11</th>\n<th>12</th>\n<th>13</th>\n<th>14</th>\n<th>15</th>\n<th>16</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>a</td>\n<td>a</td>\n<td>b</td>\n<td>a</td>\n<td>a</td>\n<td>a</td>\n<td>b</td>\n<td><strong>c</strong></td>\n<td>a</td>\n<td>a</td>\n<td>b</td>\n<td>a</td>\n<td>a</td>\n<td>a</td>\n<td>b</td>\n<td>a</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td>a</td>\n<td>a</td>\n<td>b</td>\n<td><strong>a（继续匹配）</strong></td>\n<td>a</td>\n<td>a</td>\n<td>b</td>\n<td>a</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<p>可以看到，由于我们已经在匹配5、6、7三个字符时确定a、a、b三个字符是匹配的，那么我们就不需要在匹配前三个字符上浪费时间了。</p>\n<p>那么，我们已经知道了如何使用模式串的“特性数组”来减少匹配重复字符上的浪费，但是这个数组怎样计算出来呢？</p>\n<p>综合来看，我们计算此数组的目的就在于减少重复匹配，那么此数组的最大目的就是找出在制定字母之前有多少重复部分。</p>\n<p>如：aabaaaba</p>\n<table>\n<thead>\n<tr>\n<th>1</th>\n<th>2</th>\n<th>3</th>\n<th>4</th>\n<th>5</th>\n<th>6</th>\n<th>7</th>\n<th>8</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>a</td>\n<td>a</td>\n<td>b</td>\n<td>a</td>\n<td>a</td>\n<td>a</td>\n<td>b</td>\n<td>a</td>\n</tr>\n<tr>\n<td>0（因为每次匹配都是先使指针+1再匹配，若是第一个字符就不匹配，那么就使指针位置为0，匹配时从第一个开始匹配。）</td>\n<td>1（无论有无重复都为1）</td>\n<td>2（重复了a）</td>\n<td>1（没有重复）</td>\n<td>2（重复了a）</td>\n<td>3（重复了aa）</td>\n<td>3（重复了aa）</td>\n<td>4（重复了aab）</td>\n</tr>\n</tbody></table>\n<p>由此，推导程序如下：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-function\"><span class=\"hljs-built_in\">std</span>::<span class=\"hljs-built_in\">vector</span>&lt;<span class=\"hljs-keyword\">int</span>&gt; <span class=\"hljs-title\">getNext</span><span class=\"hljs-params\">(<span class=\"hljs-built_in\">std</span>::<span class=\"hljs-built_in\">string</span> in)</span> </span>&#123;<br>        <span class=\"hljs-function\"><span class=\"hljs-built_in\">std</span>::<span class=\"hljs-built_in\">vector</span>&lt;<span class=\"hljs-keyword\">int</span>&gt; <span class=\"hljs-title\">res</span><span class=\"hljs-params\">(in.length() + <span class=\"hljs-number\">1</span>)</span></span>;<br>        <span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">1</span>, j = <span class=\"hljs-number\">0</span>;<br>        res[<span class=\"hljs-number\">1</span>] = <span class=\"hljs-number\">0</span>;<br>        <span class=\"hljs-keyword\">while</span> (i &lt; in.length()) &#123;<br>            <span class=\"hljs-keyword\">if</span> (j == <span class=\"hljs-number\">0</span> || in[j - <span class=\"hljs-number\">1</span>] == in[i - <span class=\"hljs-number\">1</span>]) &#123;<br>                i++;<br>                j++;<br>                res[i] = j;<br>            &#125; <span class=\"hljs-keyword\">else</span><br>                j = res[j];<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> res;<br>    &#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"KMP再优化：\"><a href=\"#KMP再优化：\" class=\"headerlink\" title=\"KMP再优化：\"></a>KMP再优化：</h2><p>我们已经看出KMP算法是如何减少重复匹配来减少匹配时间的。但是，是否有一种更优化的方法呢？</p>\n<p>观察以下字符串：</p>\n"},{"layout":"post","title":"前端学习拉清单","intro":"","date":"2021-12-14T04:00:01.000Z","author":"Makinohara","catalog":true,"_content":"\n# 前端技术学习清单\n\n按照紧迫程度，在技术上遵循以下清单系统学习前端技术：\n\n1、JS 基础\n\n2、Webpack\n\n3、HTML 语义化、SASS/LESS 等 CSS 拓展语言\n\n4、React 进一步学习，尤其是 Redux，其他生态相关的模块大概看看。\n\n5、TS 基础（具体的待拉清单）\n\n6、Next 的学习，到这一步基本上可以独立出页面了，SSR也要看看。\n\n7、express 的进一步学习（大概会用路由和中间件就行了，后面转 GO 后端）\n\n8、初步认识GO，大概了解其基本编程思路\n\n9、Redis Nginx\n\n10、待续......\n\n","source":"_posts/2021-12-14-FE_List.markdown","raw":"---\nlayout:     post\ntitle:      前端学习拉清单\nintro:   \"\"\ndate:       2021-12-14 12:00:01\nauthor:     \"Makinohara\"\ncatalog: true\ntags:\n    - 工程开发\n    \n---\n\n# 前端技术学习清单\n\n按照紧迫程度，在技术上遵循以下清单系统学习前端技术：\n\n1、JS 基础\n\n2、Webpack\n\n3、HTML 语义化、SASS/LESS 等 CSS 拓展语言\n\n4、React 进一步学习，尤其是 Redux，其他生态相关的模块大概看看。\n\n5、TS 基础（具体的待拉清单）\n\n6、Next 的学习，到这一步基本上可以独立出页面了，SSR也要看看。\n\n7、express 的进一步学习（大概会用路由和中间件就行了，后面转 GO 后端）\n\n8、初步认识GO，大概了解其基本编程思路\n\n9、Redis Nginx\n\n10、待续......\n\n","slug":"2021-12-14-FE_List","published":1,"updated":"2022-01-02T12:52:16.490Z","comments":1,"photos":[],"link":"","_id":"ckxx9go5v00028w8a4ubi0it1","content":"<h1 id=\"前端技术学习清单\"><a href=\"#前端技术学习清单\" class=\"headerlink\" title=\"前端技术学习清单\"></a>前端技术学习清单</h1><p>按照紧迫程度，在技术上遵循以下清单系统学习前端技术：</p>\n<p>1、JS 基础</p>\n<p>2、Webpack</p>\n<p>3、HTML 语义化、SASS/LESS 等 CSS 拓展语言</p>\n<p>4、React 进一步学习，尤其是 Redux，其他生态相关的模块大概看看。</p>\n<p>5、TS 基础（具体的待拉清单）</p>\n<p>6、Next 的学习，到这一步基本上可以独立出页面了，SSR也要看看。</p>\n<p>7、express 的进一步学习（大概会用路由和中间件就行了，后面转 GO 后端）</p>\n<p>8、初步认识GO，大概了解其基本编程思路</p>\n<p>9、Redis Nginx</p>\n<p>10、待续……</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"前端技术学习清单\"><a href=\"#前端技术学习清单\" class=\"headerlink\" title=\"前端技术学习清单\"></a>前端技术学习清单</h1><p>按照紧迫程度，在技术上遵循以下清单系统学习前端技术：</p>\n<p>1、JS 基础</p>\n<p>2、Webpack</p>\n<p>3、HTML 语义化、SASS/LESS 等 CSS 拓展语言</p>\n<p>4、React 进一步学习，尤其是 Redux，其他生态相关的模块大概看看。</p>\n<p>5、TS 基础（具体的待拉清单）</p>\n<p>6、Next 的学习，到这一步基本上可以独立出页面了，SSR也要看看。</p>\n<p>7、express 的进一步学习（大概会用路由和中间件就行了，后面转 GO 后端）</p>\n<p>8、初步认识GO，大概了解其基本编程思路</p>\n<p>9、Redis Nginx</p>\n<p>10、待续……</p>\n"},{"layout":"post","title":"Redux初体验","intro":"","date":"2021-12-18T04:00:01.000Z","author":"Makinohara","catalog":true,"_content":"\n# Redux初体验\n\n## 概念图\n\n![redux](/img/redux.jpg)\n\n## 1、创建Store（类似于全局变量存储仓库）\n\n```js\nimport {createStore} from \"redux\";\nimport reducer from \"./reducer\";\n\n//window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__() 是为了在DevTools调试，可以不加\nconst store = createStore(reducer,window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\n\nexport default store;\n```\n\n## 2、创建Reducer（相当于全局变量管理器）\n\n```js\nconst defaultStore = {\n    inputValue:'Write something',\n    list:[\n        '搞114514',\n        '坐下北泽JR'\n    ]\n};\n\nexport default (state = defaultStore,action)=>{\n    console.log(state);\n    console.log(action);\n    if(action.type === 'value/changeInput'){\n        let newState = JSON.parse(JSON.stringify(state));\n        newState.inputValue = action.payload;\n        return newState;\n    }\n    return state;\n}\n```\n\n## 3、在组件里调用仓库内容\n\n```jsx\nimport './App.css';\nimport store from \"./store\";\nimport {useState} from \"react\";\nimport { Input } from 'antd';\nimport 'antd/dist/antd.css';\n\nfunction App() {\n    //初始化HOOK：取出store里的state\n    const [appData,setAppData] = useState(store.getState());\n    //当store变动时，调用回调函数（这里是setAppData）\n    store.subscribe(()=>{setAppData(store.getState())});\n    let list = appData.list;\n    let inputValue = appData.inputValue;\n    let page = [];\n    console.log(store.getState())\n    for (let i = 0; i < list.length; i++) {\n        let temp = <div>{list[i]}</div>\n        page.push(temp);\n    }\n\n    const changeInputValue = (e)=>{\n        // 创建action\n        const action = {\n            type:'value/changeInput',\n            payload:e.target.value\n        }\n        // 使action生效（也就是传给reducer，判断后更新store中的state）\n        store.dispatch(action);\n    }\n\n    return (\n        <div>\n            <Input placeholder={\"Write Something\"} onChange={changeInputValue}/>\n            {page}\n            <div>\n                {inputValue}\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n\n```\n\n如此一来，就实现了类似于全局变量管理的模式（你可以为每一个需要管理的全局状态创建store）\n\n## 将Store和Reducer写到一起\n\n```js\nimport {createStore} from \"redux\";\n\n//初始化\nconst defaultStore = {\n    inputValue:'Write something',\n    list:[\n        '搞114514',\n        '坐下北泽JR'\n    ]\n};\n\nconst reducer =  (state = defaultStore,action)=>{\n    //判断action的类型，改变state的指定属性\n    if(action.type === 'value/changeInput'){\n        let newState = JSON.parse(JSON.stringify(state));\n        newState.inputValue = action.payload;\n        return newState;\n    }\n    return state;\n}\n\nconst appStore = createStore(reducer,window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\n\nexport default appStore;\n```\n\n**对应的App代码**\n\n```jsx\nimport './App.css';\nimport appStore from \"./store/appReducer\";\nimport {useState} from \"react\";\nimport { Input } from 'antd';\nimport 'antd/dist/antd.css';\n\nfunction App() {\n    //初始化HOOK：取出store里的state\n    const [appData,setAppData] = useState(appStore.getState());\n    //当store变动时，调用回调函数（这里是setAppData）\n    appStore.subscribe(()=>{setAppData(appStore.getState())});\n    let list = appData.list;\n    let inputValue = appData.inputValue;\n    let page = [];\n    console.log(appStore.getState())\n    for (let i = 0; i < list.length; i++) {\n        let temp = <div>{list[i]}</div>\n        page.push(temp);\n    }\n\n    const changeInputValue = (e)=>{\n        // 创建action\n        const action = {\n            type:'value/changeInput',\n            payload:e.target.value\n        }\n        // 使action生效（也就是传给reducer，判断后更新store中的state）\n        appStore.dispatch(action);\n    }\n\n    return (\n        <div>\n            <Input placeholder={\"Write Something\"} onChange={changeInputValue}/>\n            {page}\n            <div>\n                {inputValue}\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n\n```\n\n\n\n## Action Creator\n\n添加了 Action Creator 的处理方法：\n\n```js\n//初始化\nconst defaultStore ='Write something';\n\nconst inputValue =  (state = defaultStore, action)=>{\n    //判断action的类型，改变state的指定属性\n    if(action.type === 'value/changeInput'){\n        let newState = JSON.parse(JSON.stringify(state));\n        newState = action.payload;\n        return newState;\n    }\n    return state;\n}\n\nexport class inputValueAction{\n    static changeInput = (input) =>{\n        return {\n            type:'value/changeInput',\n            payload:input\n        }\n    }\n}\n\nexport default inputValue;\n```\n\n将所有相关与某个要发送数据的 action creator 放到一个类中，方便调用\n","source":"_posts/2021-12-18-Redux1.markdown","raw":"---\nlayout:     post\ntitle:      Redux初体验\nintro:   \"\"\ndate:       2021-12-18 12:00:01\nauthor:     \"Makinohara\"\ncatalog: true\ntags:\n    - 工程开发\n    \n---\n\n# Redux初体验\n\n## 概念图\n\n![redux](/img/redux.jpg)\n\n## 1、创建Store（类似于全局变量存储仓库）\n\n```js\nimport {createStore} from \"redux\";\nimport reducer from \"./reducer\";\n\n//window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__() 是为了在DevTools调试，可以不加\nconst store = createStore(reducer,window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\n\nexport default store;\n```\n\n## 2、创建Reducer（相当于全局变量管理器）\n\n```js\nconst defaultStore = {\n    inputValue:'Write something',\n    list:[\n        '搞114514',\n        '坐下北泽JR'\n    ]\n};\n\nexport default (state = defaultStore,action)=>{\n    console.log(state);\n    console.log(action);\n    if(action.type === 'value/changeInput'){\n        let newState = JSON.parse(JSON.stringify(state));\n        newState.inputValue = action.payload;\n        return newState;\n    }\n    return state;\n}\n```\n\n## 3、在组件里调用仓库内容\n\n```jsx\nimport './App.css';\nimport store from \"./store\";\nimport {useState} from \"react\";\nimport { Input } from 'antd';\nimport 'antd/dist/antd.css';\n\nfunction App() {\n    //初始化HOOK：取出store里的state\n    const [appData,setAppData] = useState(store.getState());\n    //当store变动时，调用回调函数（这里是setAppData）\n    store.subscribe(()=>{setAppData(store.getState())});\n    let list = appData.list;\n    let inputValue = appData.inputValue;\n    let page = [];\n    console.log(store.getState())\n    for (let i = 0; i < list.length; i++) {\n        let temp = <div>{list[i]}</div>\n        page.push(temp);\n    }\n\n    const changeInputValue = (e)=>{\n        // 创建action\n        const action = {\n            type:'value/changeInput',\n            payload:e.target.value\n        }\n        // 使action生效（也就是传给reducer，判断后更新store中的state）\n        store.dispatch(action);\n    }\n\n    return (\n        <div>\n            <Input placeholder={\"Write Something\"} onChange={changeInputValue}/>\n            {page}\n            <div>\n                {inputValue}\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n\n```\n\n如此一来，就实现了类似于全局变量管理的模式（你可以为每一个需要管理的全局状态创建store）\n\n## 将Store和Reducer写到一起\n\n```js\nimport {createStore} from \"redux\";\n\n//初始化\nconst defaultStore = {\n    inputValue:'Write something',\n    list:[\n        '搞114514',\n        '坐下北泽JR'\n    ]\n};\n\nconst reducer =  (state = defaultStore,action)=>{\n    //判断action的类型，改变state的指定属性\n    if(action.type === 'value/changeInput'){\n        let newState = JSON.parse(JSON.stringify(state));\n        newState.inputValue = action.payload;\n        return newState;\n    }\n    return state;\n}\n\nconst appStore = createStore(reducer,window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\n\nexport default appStore;\n```\n\n**对应的App代码**\n\n```jsx\nimport './App.css';\nimport appStore from \"./store/appReducer\";\nimport {useState} from \"react\";\nimport { Input } from 'antd';\nimport 'antd/dist/antd.css';\n\nfunction App() {\n    //初始化HOOK：取出store里的state\n    const [appData,setAppData] = useState(appStore.getState());\n    //当store变动时，调用回调函数（这里是setAppData）\n    appStore.subscribe(()=>{setAppData(appStore.getState())});\n    let list = appData.list;\n    let inputValue = appData.inputValue;\n    let page = [];\n    console.log(appStore.getState())\n    for (let i = 0; i < list.length; i++) {\n        let temp = <div>{list[i]}</div>\n        page.push(temp);\n    }\n\n    const changeInputValue = (e)=>{\n        // 创建action\n        const action = {\n            type:'value/changeInput',\n            payload:e.target.value\n        }\n        // 使action生效（也就是传给reducer，判断后更新store中的state）\n        appStore.dispatch(action);\n    }\n\n    return (\n        <div>\n            <Input placeholder={\"Write Something\"} onChange={changeInputValue}/>\n            {page}\n            <div>\n                {inputValue}\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n\n```\n\n\n\n## Action Creator\n\n添加了 Action Creator 的处理方法：\n\n```js\n//初始化\nconst defaultStore ='Write something';\n\nconst inputValue =  (state = defaultStore, action)=>{\n    //判断action的类型，改变state的指定属性\n    if(action.type === 'value/changeInput'){\n        let newState = JSON.parse(JSON.stringify(state));\n        newState = action.payload;\n        return newState;\n    }\n    return state;\n}\n\nexport class inputValueAction{\n    static changeInput = (input) =>{\n        return {\n            type:'value/changeInput',\n            payload:input\n        }\n    }\n}\n\nexport default inputValue;\n```\n\n将所有相关与某个要发送数据的 action creator 放到一个类中，方便调用\n","slug":"2021-12-18-Redux1","published":1,"updated":"2022-01-02T12:51:28.978Z","comments":1,"photos":[],"link":"","_id":"ckxx9go5x00038w8a3fe91fan","content":"<h1 id=\"Redux初体验\"><a href=\"#Redux初体验\" class=\"headerlink\" title=\"Redux初体验\"></a>Redux初体验</h1><h2 id=\"概念图\"><a href=\"#概念图\" class=\"headerlink\" title=\"概念图\"></a>概念图</h2><p><img src=\"/img/redux.jpg\" alt=\"redux\"></p>\n<h2 id=\"1、创建Store（类似于全局变量存储仓库）\"><a href=\"#1、创建Store（类似于全局变量存储仓库）\" class=\"headerlink\" title=\"1、创建Store（类似于全局变量存储仓库）\"></a>1、创建Store（类似于全局变量存储仓库）</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">import</span> &#123;createStore&#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"redux\"</span>;<br><span class=\"hljs-keyword\">import</span> reducer <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"./reducer\"</span>;<br><br><span class=\"hljs-comment\">//window.__REDUX_DEVTOOLS_EXTENSION__ &amp;&amp; window.__REDUX_DEVTOOLS_EXTENSION__() 是为了在DevTools调试，可以不加</span><br><span class=\"hljs-keyword\">const</span> store = createStore(reducer,<span class=\"hljs-built_in\">window</span>.__REDUX_DEVTOOLS_EXTENSION__ &amp;&amp; <span class=\"hljs-built_in\">window</span>.__REDUX_DEVTOOLS_EXTENSION__());<br><br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> store;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"2、创建Reducer（相当于全局变量管理器）\"><a href=\"#2、创建Reducer（相当于全局变量管理器）\" class=\"headerlink\" title=\"2、创建Reducer（相当于全局变量管理器）\"></a>2、创建Reducer（相当于全局变量管理器）</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> defaultStore = &#123;<br>    inputValue:<span class=\"hljs-string\">'Write something'</span>,<br>    list:[<br>        <span class=\"hljs-string\">'搞114514'</span>,<br>        <span class=\"hljs-string\">'坐下北泽JR'</span><br>    ]<br>&#125;;<br><br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> (state = defaultStore,action)=&gt;&#123;<br>    <span class=\"hljs-built_in\">console</span>.log(state);<br>    <span class=\"hljs-built_in\">console</span>.log(action);<br>    <span class=\"hljs-keyword\">if</span>(action.type === <span class=\"hljs-string\">'value/changeInput'</span>)&#123;<br>        <span class=\"hljs-keyword\">let</span> newState = <span class=\"hljs-built_in\">JSON</span>.parse(<span class=\"hljs-built_in\">JSON</span>.stringify(state));<br>        newState.inputValue = action.payload;<br>        <span class=\"hljs-keyword\">return</span> newState;<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> state;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"3、在组件里调用仓库内容\"><a href=\"#3、在组件里调用仓库内容\" class=\"headerlink\" title=\"3、在组件里调用仓库内容\"></a>3、在组件里调用仓库内容</h2><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs jsx\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">'./App.css'</span>;<br><span class=\"hljs-keyword\">import</span> store <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"./store\"</span>;<br><span class=\"hljs-keyword\">import</span> &#123;useState&#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"react\"</span>;<br><span class=\"hljs-keyword\">import</span> &#123; Input &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'antd'</span>;<br><span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">'antd/dist/antd.css'</span>;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">App</span>(<span class=\"hljs-params\"></span>) </span>&#123;<br>    <span class=\"hljs-comment\">//初始化HOOK：取出store里的state</span><br>    <span class=\"hljs-keyword\">const</span> [appData,setAppData] = useState(store.getState());<br>    <span class=\"hljs-comment\">//当store变动时，调用回调函数（这里是setAppData）</span><br>    store.subscribe(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span>=&gt;</span>&#123;setAppData(store.getState())&#125;);<br>    <span class=\"hljs-keyword\">let</span> list = appData.list;<br>    <span class=\"hljs-keyword\">let</span> inputValue = appData.inputValue;<br>    <span class=\"hljs-keyword\">let</span> page = [];<br>    <span class=\"hljs-built_in\">console</span>.log(store.getState())<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; list.length; i++) &#123;<br>        <span class=\"hljs-keyword\">let</span> temp = <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>&#123;list[i]&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br>        page.push(temp);<br>    &#125;<br><br>    <span class=\"hljs-keyword\">const</span> changeInputValue = <span class=\"hljs-function\">(<span class=\"hljs-params\">e</span>)=&gt;</span>&#123;<br>        <span class=\"hljs-comment\">// 创建action</span><br>        <span class=\"hljs-keyword\">const</span> action = &#123;<br>            type:<span class=\"hljs-string\">'value/changeInput'</span>,<br>            payload:e.target.value<br>        &#125;<br>        <span class=\"hljs-comment\">// 使action生效（也就是传给reducer，判断后更新store中的state）</span><br>        store.dispatch(action);<br>    &#125;<br><br>    <span class=\"hljs-keyword\">return</span> (<br>        &lt;div&gt;<br>            &lt;Input placeholder=&#123;<span class=\"hljs-string\">\"Write Something\"</span>&#125; onChange=&#123;changeInputValue&#125;/&gt;<br>            &#123;page&#125;<br>            &lt;div&gt;<br>                &#123;inputValue&#125;<br>            &lt;<span class=\"hljs-regexp\">/div&gt;</span><br><span class=\"hljs-regexp\">        &lt;/</span>div&gt;<br>    );<br>&#125;<br><br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> App;<br></code></pre></td></tr></table></figure>\n\n<p>如此一来，就实现了类似于全局变量管理的模式（你可以为每一个需要管理的全局状态创建store）</p>\n<h2 id=\"将Store和Reducer写到一起\"><a href=\"#将Store和Reducer写到一起\" class=\"headerlink\" title=\"将Store和Reducer写到一起\"></a>将Store和Reducer写到一起</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">import</span> &#123;createStore&#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"redux\"</span>;<br><br><span class=\"hljs-comment\">//初始化</span><br><span class=\"hljs-keyword\">const</span> defaultStore = &#123;<br>    inputValue:<span class=\"hljs-string\">'Write something'</span>,<br>    list:[<br>        <span class=\"hljs-string\">'搞114514'</span>,<br>        <span class=\"hljs-string\">'坐下北泽JR'</span><br>    ]<br>&#125;;<br><br><span class=\"hljs-keyword\">const</span> reducer =  <span class=\"hljs-function\">(<span class=\"hljs-params\">state = defaultStore,action</span>)=&gt;</span>&#123;<br>    <span class=\"hljs-comment\">//判断action的类型，改变state的指定属性</span><br>    <span class=\"hljs-keyword\">if</span>(action.type === <span class=\"hljs-string\">'value/changeInput'</span>)&#123;<br>        <span class=\"hljs-keyword\">let</span> newState = <span class=\"hljs-built_in\">JSON</span>.parse(<span class=\"hljs-built_in\">JSON</span>.stringify(state));<br>        newState.inputValue = action.payload;<br>        <span class=\"hljs-keyword\">return</span> newState;<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> state;<br>&#125;<br><br><span class=\"hljs-keyword\">const</span> appStore = createStore(reducer,<span class=\"hljs-built_in\">window</span>.__REDUX_DEVTOOLS_EXTENSION__ &amp;&amp; <span class=\"hljs-built_in\">window</span>.__REDUX_DEVTOOLS_EXTENSION__());<br><br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> appStore;<br></code></pre></td></tr></table></figure>\n\n<p><strong>对应的App代码</strong></p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs jsx\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">'./App.css'</span>;<br><span class=\"hljs-keyword\">import</span> appStore <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"./store/appReducer\"</span>;<br><span class=\"hljs-keyword\">import</span> &#123;useState&#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"react\"</span>;<br><span class=\"hljs-keyword\">import</span> &#123; Input &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'antd'</span>;<br><span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">'antd/dist/antd.css'</span>;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">App</span>(<span class=\"hljs-params\"></span>) </span>&#123;<br>    <span class=\"hljs-comment\">//初始化HOOK：取出store里的state</span><br>    <span class=\"hljs-keyword\">const</span> [appData,setAppData] = useState(appStore.getState());<br>    <span class=\"hljs-comment\">//当store变动时，调用回调函数（这里是setAppData）</span><br>    appStore.subscribe(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span>=&gt;</span>&#123;setAppData(appStore.getState())&#125;);<br>    <span class=\"hljs-keyword\">let</span> list = appData.list;<br>    <span class=\"hljs-keyword\">let</span> inputValue = appData.inputValue;<br>    <span class=\"hljs-keyword\">let</span> page = [];<br>    <span class=\"hljs-built_in\">console</span>.log(appStore.getState())<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; list.length; i++) &#123;<br>        <span class=\"hljs-keyword\">let</span> temp = <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>&#123;list[i]&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br>        page.push(temp);<br>    &#125;<br><br>    <span class=\"hljs-keyword\">const</span> changeInputValue = <span class=\"hljs-function\">(<span class=\"hljs-params\">e</span>)=&gt;</span>&#123;<br>        <span class=\"hljs-comment\">// 创建action</span><br>        <span class=\"hljs-keyword\">const</span> action = &#123;<br>            type:<span class=\"hljs-string\">'value/changeInput'</span>,<br>            payload:e.target.value<br>        &#125;<br>        <span class=\"hljs-comment\">// 使action生效（也就是传给reducer，判断后更新store中的state）</span><br>        appStore.dispatch(action);<br>    &#125;<br><br>    <span class=\"hljs-keyword\">return</span> (<br>        &lt;div&gt;<br>            &lt;Input placeholder=&#123;<span class=\"hljs-string\">\"Write Something\"</span>&#125; onChange=&#123;changeInputValue&#125;/&gt;<br>            &#123;page&#125;<br>            &lt;div&gt;<br>                &#123;inputValue&#125;<br>            &lt;<span class=\"hljs-regexp\">/div&gt;</span><br><span class=\"hljs-regexp\">        &lt;/</span>div&gt;<br>    );<br>&#125;<br><br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> App;<br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"Action-Creator\"><a href=\"#Action-Creator\" class=\"headerlink\" title=\"Action Creator\"></a>Action Creator</h2><p>添加了 Action Creator 的处理方法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">//初始化</span><br><span class=\"hljs-keyword\">const</span> defaultStore =<span class=\"hljs-string\">'Write something'</span>;<br><br><span class=\"hljs-keyword\">const</span> inputValue =  <span class=\"hljs-function\">(<span class=\"hljs-params\">state = defaultStore, action</span>)=&gt;</span>&#123;<br>    <span class=\"hljs-comment\">//判断action的类型，改变state的指定属性</span><br>    <span class=\"hljs-keyword\">if</span>(action.type === <span class=\"hljs-string\">'value/changeInput'</span>)&#123;<br>        <span class=\"hljs-keyword\">let</span> newState = <span class=\"hljs-built_in\">JSON</span>.parse(<span class=\"hljs-built_in\">JSON</span>.stringify(state));<br>        newState = action.payload;<br>        <span class=\"hljs-keyword\">return</span> newState;<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> state;<br>&#125;<br><br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">inputValueAction</span></span>&#123;<br>    <span class=\"hljs-keyword\">static</span> changeInput = <span class=\"hljs-function\">(<span class=\"hljs-params\">input</span>) =&gt;</span>&#123;<br>        <span class=\"hljs-keyword\">return</span> &#123;<br>            type:<span class=\"hljs-string\">'value/changeInput'</span>,<br>            payload:input<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> inputValue;<br></code></pre></td></tr></table></figure>\n\n<p>将所有相关与某个要发送数据的 action creator 放到一个类中，方便调用</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Redux初体验\"><a href=\"#Redux初体验\" class=\"headerlink\" title=\"Redux初体验\"></a>Redux初体验</h1><h2 id=\"概念图\"><a href=\"#概念图\" class=\"headerlink\" title=\"概念图\"></a>概念图</h2><p><img src=\"/img/redux.jpg\" alt=\"redux\"></p>\n<h2 id=\"1、创建Store（类似于全局变量存储仓库）\"><a href=\"#1、创建Store（类似于全局变量存储仓库）\" class=\"headerlink\" title=\"1、创建Store（类似于全局变量存储仓库）\"></a>1、创建Store（类似于全局变量存储仓库）</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">import</span> &#123;createStore&#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"redux\"</span>;<br><span class=\"hljs-keyword\">import</span> reducer <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"./reducer\"</span>;<br><br><span class=\"hljs-comment\">//window.__REDUX_DEVTOOLS_EXTENSION__ &amp;&amp; window.__REDUX_DEVTOOLS_EXTENSION__() 是为了在DevTools调试，可以不加</span><br><span class=\"hljs-keyword\">const</span> store = createStore(reducer,<span class=\"hljs-built_in\">window</span>.__REDUX_DEVTOOLS_EXTENSION__ &amp;&amp; <span class=\"hljs-built_in\">window</span>.__REDUX_DEVTOOLS_EXTENSION__());<br><br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> store;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"2、创建Reducer（相当于全局变量管理器）\"><a href=\"#2、创建Reducer（相当于全局变量管理器）\" class=\"headerlink\" title=\"2、创建Reducer（相当于全局变量管理器）\"></a>2、创建Reducer（相当于全局变量管理器）</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> defaultStore = &#123;<br>    inputValue:<span class=\"hljs-string\">'Write something'</span>,<br>    list:[<br>        <span class=\"hljs-string\">'搞114514'</span>,<br>        <span class=\"hljs-string\">'坐下北泽JR'</span><br>    ]<br>&#125;;<br><br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> (state = defaultStore,action)=&gt;&#123;<br>    <span class=\"hljs-built_in\">console</span>.log(state);<br>    <span class=\"hljs-built_in\">console</span>.log(action);<br>    <span class=\"hljs-keyword\">if</span>(action.type === <span class=\"hljs-string\">'value/changeInput'</span>)&#123;<br>        <span class=\"hljs-keyword\">let</span> newState = <span class=\"hljs-built_in\">JSON</span>.parse(<span class=\"hljs-built_in\">JSON</span>.stringify(state));<br>        newState.inputValue = action.payload;<br>        <span class=\"hljs-keyword\">return</span> newState;<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> state;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"3、在组件里调用仓库内容\"><a href=\"#3、在组件里调用仓库内容\" class=\"headerlink\" title=\"3、在组件里调用仓库内容\"></a>3、在组件里调用仓库内容</h2><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs jsx\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">'./App.css'</span>;<br><span class=\"hljs-keyword\">import</span> store <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"./store\"</span>;<br><span class=\"hljs-keyword\">import</span> &#123;useState&#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"react\"</span>;<br><span class=\"hljs-keyword\">import</span> &#123; Input &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'antd'</span>;<br><span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">'antd/dist/antd.css'</span>;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">App</span>(<span class=\"hljs-params\"></span>) </span>&#123;<br>    <span class=\"hljs-comment\">//初始化HOOK：取出store里的state</span><br>    <span class=\"hljs-keyword\">const</span> [appData,setAppData] = useState(store.getState());<br>    <span class=\"hljs-comment\">//当store变动时，调用回调函数（这里是setAppData）</span><br>    store.subscribe(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span>=&gt;</span>&#123;setAppData(store.getState())&#125;);<br>    <span class=\"hljs-keyword\">let</span> list = appData.list;<br>    <span class=\"hljs-keyword\">let</span> inputValue = appData.inputValue;<br>    <span class=\"hljs-keyword\">let</span> page = [];<br>    <span class=\"hljs-built_in\">console</span>.log(store.getState())<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; list.length; i++) &#123;<br>        <span class=\"hljs-keyword\">let</span> temp = <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>&#123;list[i]&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br>        page.push(temp);<br>    &#125;<br><br>    <span class=\"hljs-keyword\">const</span> changeInputValue = <span class=\"hljs-function\">(<span class=\"hljs-params\">e</span>)=&gt;</span>&#123;<br>        <span class=\"hljs-comment\">// 创建action</span><br>        <span class=\"hljs-keyword\">const</span> action = &#123;<br>            type:<span class=\"hljs-string\">'value/changeInput'</span>,<br>            payload:e.target.value<br>        &#125;<br>        <span class=\"hljs-comment\">// 使action生效（也就是传给reducer，判断后更新store中的state）</span><br>        store.dispatch(action);<br>    &#125;<br><br>    <span class=\"hljs-keyword\">return</span> (<br>        &lt;div&gt;<br>            &lt;Input placeholder=&#123;<span class=\"hljs-string\">\"Write Something\"</span>&#125; onChange=&#123;changeInputValue&#125;/&gt;<br>            &#123;page&#125;<br>            &lt;div&gt;<br>                &#123;inputValue&#125;<br>            &lt;<span class=\"hljs-regexp\">/div&gt;</span><br><span class=\"hljs-regexp\">        &lt;/</span>div&gt;<br>    );<br>&#125;<br><br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> App;<br></code></pre></td></tr></table></figure>\n\n<p>如此一来，就实现了类似于全局变量管理的模式（你可以为每一个需要管理的全局状态创建store）</p>\n<h2 id=\"将Store和Reducer写到一起\"><a href=\"#将Store和Reducer写到一起\" class=\"headerlink\" title=\"将Store和Reducer写到一起\"></a>将Store和Reducer写到一起</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">import</span> &#123;createStore&#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"redux\"</span>;<br><br><span class=\"hljs-comment\">//初始化</span><br><span class=\"hljs-keyword\">const</span> defaultStore = &#123;<br>    inputValue:<span class=\"hljs-string\">'Write something'</span>,<br>    list:[<br>        <span class=\"hljs-string\">'搞114514'</span>,<br>        <span class=\"hljs-string\">'坐下北泽JR'</span><br>    ]<br>&#125;;<br><br><span class=\"hljs-keyword\">const</span> reducer =  <span class=\"hljs-function\">(<span class=\"hljs-params\">state = defaultStore,action</span>)=&gt;</span>&#123;<br>    <span class=\"hljs-comment\">//判断action的类型，改变state的指定属性</span><br>    <span class=\"hljs-keyword\">if</span>(action.type === <span class=\"hljs-string\">'value/changeInput'</span>)&#123;<br>        <span class=\"hljs-keyword\">let</span> newState = <span class=\"hljs-built_in\">JSON</span>.parse(<span class=\"hljs-built_in\">JSON</span>.stringify(state));<br>        newState.inputValue = action.payload;<br>        <span class=\"hljs-keyword\">return</span> newState;<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> state;<br>&#125;<br><br><span class=\"hljs-keyword\">const</span> appStore = createStore(reducer,<span class=\"hljs-built_in\">window</span>.__REDUX_DEVTOOLS_EXTENSION__ &amp;&amp; <span class=\"hljs-built_in\">window</span>.__REDUX_DEVTOOLS_EXTENSION__());<br><br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> appStore;<br></code></pre></td></tr></table></figure>\n\n<p><strong>对应的App代码</strong></p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs jsx\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">'./App.css'</span>;<br><span class=\"hljs-keyword\">import</span> appStore <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"./store/appReducer\"</span>;<br><span class=\"hljs-keyword\">import</span> &#123;useState&#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"react\"</span>;<br><span class=\"hljs-keyword\">import</span> &#123; Input &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'antd'</span>;<br><span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">'antd/dist/antd.css'</span>;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">App</span>(<span class=\"hljs-params\"></span>) </span>&#123;<br>    <span class=\"hljs-comment\">//初始化HOOK：取出store里的state</span><br>    <span class=\"hljs-keyword\">const</span> [appData,setAppData] = useState(appStore.getState());<br>    <span class=\"hljs-comment\">//当store变动时，调用回调函数（这里是setAppData）</span><br>    appStore.subscribe(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span>=&gt;</span>&#123;setAppData(appStore.getState())&#125;);<br>    <span class=\"hljs-keyword\">let</span> list = appData.list;<br>    <span class=\"hljs-keyword\">let</span> inputValue = appData.inputValue;<br>    <span class=\"hljs-keyword\">let</span> page = [];<br>    <span class=\"hljs-built_in\">console</span>.log(appStore.getState())<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; list.length; i++) &#123;<br>        <span class=\"hljs-keyword\">let</span> temp = <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>&#123;list[i]&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br>        page.push(temp);<br>    &#125;<br><br>    <span class=\"hljs-keyword\">const</span> changeInputValue = <span class=\"hljs-function\">(<span class=\"hljs-params\">e</span>)=&gt;</span>&#123;<br>        <span class=\"hljs-comment\">// 创建action</span><br>        <span class=\"hljs-keyword\">const</span> action = &#123;<br>            type:<span class=\"hljs-string\">'value/changeInput'</span>,<br>            payload:e.target.value<br>        &#125;<br>        <span class=\"hljs-comment\">// 使action生效（也就是传给reducer，判断后更新store中的state）</span><br>        appStore.dispatch(action);<br>    &#125;<br><br>    <span class=\"hljs-keyword\">return</span> (<br>        &lt;div&gt;<br>            &lt;Input placeholder=&#123;<span class=\"hljs-string\">\"Write Something\"</span>&#125; onChange=&#123;changeInputValue&#125;/&gt;<br>            &#123;page&#125;<br>            &lt;div&gt;<br>                &#123;inputValue&#125;<br>            &lt;<span class=\"hljs-regexp\">/div&gt;</span><br><span class=\"hljs-regexp\">        &lt;/</span>div&gt;<br>    );<br>&#125;<br><br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> App;<br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"Action-Creator\"><a href=\"#Action-Creator\" class=\"headerlink\" title=\"Action Creator\"></a>Action Creator</h2><p>添加了 Action Creator 的处理方法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">//初始化</span><br><span class=\"hljs-keyword\">const</span> defaultStore =<span class=\"hljs-string\">'Write something'</span>;<br><br><span class=\"hljs-keyword\">const</span> inputValue =  <span class=\"hljs-function\">(<span class=\"hljs-params\">state = defaultStore, action</span>)=&gt;</span>&#123;<br>    <span class=\"hljs-comment\">//判断action的类型，改变state的指定属性</span><br>    <span class=\"hljs-keyword\">if</span>(action.type === <span class=\"hljs-string\">'value/changeInput'</span>)&#123;<br>        <span class=\"hljs-keyword\">let</span> newState = <span class=\"hljs-built_in\">JSON</span>.parse(<span class=\"hljs-built_in\">JSON</span>.stringify(state));<br>        newState = action.payload;<br>        <span class=\"hljs-keyword\">return</span> newState;<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> state;<br>&#125;<br><br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">inputValueAction</span></span>&#123;<br>    <span class=\"hljs-keyword\">static</span> changeInput = <span class=\"hljs-function\">(<span class=\"hljs-params\">input</span>) =&gt;</span>&#123;<br>        <span class=\"hljs-keyword\">return</span> &#123;<br>            type:<span class=\"hljs-string\">'value/changeInput'</span>,<br>            payload:input<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> inputValue;<br></code></pre></td></tr></table></figure>\n\n<p>将所有相关与某个要发送数据的 action creator 放到一个类中，方便调用</p>\n"},{"layout":"post","title":"测试公式输入","intro":"","date":"2021-07-01T04:00:01.000Z","author":"Makinohara","catalog":true,"_content":"\n\n\n测试LaTeX公式输入：\n\n此文档仅用于测试该博客系统能否接受数学公式输入。\n$$2^{3}+5$$\n\n$$2^{3}+5$$\n\n接下来测试复杂公式的输入：\n\n$$\\mathbf{X} = \\left( \\begin{array}{ccc} x_{11} & x_{12} & \\ldots \\\\ x_{21} & x_{22} & \\ldots \\\\ \\vdots & \\vdots & \\ddots \\end{array} \\right)$$\n\n\n$$\\mathop{\\mathrm{corr}}(X,Y)= \\frac{\\displaystyle \\sum_{i=1}^n(x_i-\\overline x) (y_i-\\overline y)} {\\displaystyle\\biggl[ \\sum_{i=1}^n(x_i-\\overline x)^2 \\sum_{i=1}^n(y_i-\\overline y)^2 \\biggr]^{1/2}} $$\n\n\n\n分段函数：\n\n$$ y = \\left\\{ \\begin{array}{ll} a & \\textrm{if $d>c$}\\\\ b+x & \\textrm{in the morning}\\\\ l & \\textrm{all day long} \\end{array} \\right. $$\n\n\n\n\n\n$$\\newcommand{\\ud}{\\mathrm{d}}  \\int\\!\\!\\!\\int_{D} g(x,y) \\, \\ud x\\, \\ud y \\\\  $$\n\ninstead of\n\n$$  \\\\\\int\\int_{D} g(x,y)\\ud x \\ud y$$\n\n\n\n等号对齐：\n\n$$\\begin{eqnarray} f(x) & = & \\cos x \\\\ f’(x) & = & -\\sin x \\\\ \\int_{0}^{x} f(y)dy & = & \\sin x \\end{eqnarray}$$\n\n","source":"_posts/2021-7-1-TestLatex.markdown","raw":"---\nlayout:     post\ntitle:      \"测试公式输入\"\nintro:   \"\"\ndate:       2021-7-1 12:00:01\nauthor:     \"Makinohara\"\ncatalog: true\ntags:\n    - 学习\n    \n---\n\n\n\n测试LaTeX公式输入：\n\n此文档仅用于测试该博客系统能否接受数学公式输入。\n$$2^{3}+5$$\n\n$$2^{3}+5$$\n\n接下来测试复杂公式的输入：\n\n$$\\mathbf{X} = \\left( \\begin{array}{ccc} x_{11} & x_{12} & \\ldots \\\\ x_{21} & x_{22} & \\ldots \\\\ \\vdots & \\vdots & \\ddots \\end{array} \\right)$$\n\n\n$$\\mathop{\\mathrm{corr}}(X,Y)= \\frac{\\displaystyle \\sum_{i=1}^n(x_i-\\overline x) (y_i-\\overline y)} {\\displaystyle\\biggl[ \\sum_{i=1}^n(x_i-\\overline x)^2 \\sum_{i=1}^n(y_i-\\overline y)^2 \\biggr]^{1/2}} $$\n\n\n\n分段函数：\n\n$$ y = \\left\\{ \\begin{array}{ll} a & \\textrm{if $d>c$}\\\\ b+x & \\textrm{in the morning}\\\\ l & \\textrm{all day long} \\end{array} \\right. $$\n\n\n\n\n\n$$\\newcommand{\\ud}{\\mathrm{d}}  \\int\\!\\!\\!\\int_{D} g(x,y) \\, \\ud x\\, \\ud y \\\\  $$\n\ninstead of\n\n$$  \\\\\\int\\int_{D} g(x,y)\\ud x \\ud y$$\n\n\n\n等号对齐：\n\n$$\\begin{eqnarray} f(x) & = & \\cos x \\\\ f’(x) & = & -\\sin x \\\\ \\int_{0}^{x} f(y)dy & = & \\sin x \\end{eqnarray}$$\n\n","slug":"2021-7-1-TestLatex","published":1,"updated":"2022-01-02T12:55:58.162Z","comments":1,"photos":[],"link":"","_id":"ckxx9go5z00058w8a5706ewa1","content":"<p>测试LaTeX公式输入：</p>\n<p>此文档仅用于测试该博客系统能否接受数学公式输入。<br>$$2^{3}+5$$</p>\n<p>$$2^{3}+5$$</p>\n<p>接下来测试复杂公式的输入：</p>\n<p>$$\\mathbf{X} = \\left( \\begin{array}{ccc} x_{11} &amp; x_{12} &amp; \\ldots \\ x_{21} &amp; x_{22} &amp; \\ldots \\ \\vdots &amp; \\vdots &amp; \\ddots \\end{array} \\right)$$</p>\n<p>$$\\mathop{\\mathrm{corr}}(X,Y)= \\frac{\\displaystyle \\sum_{i=1}^n(x_i-\\overline x) (y_i-\\overline y)} {\\displaystyle\\biggl[ \\sum_{i=1}^n(x_i-\\overline x)^2 \\sum_{i=1}^n(y_i-\\overline y)^2 \\biggr]^{1/2}} $$</p>\n<p>分段函数：</p>\n<p>$$ y = \\left{ \\begin{array}{ll} a &amp; \\textrm{if $d&gt;c$}\\ b+x &amp; \\textrm{in the morning}\\ l &amp; \\textrm{all day long} \\end{array} \\right. $$</p>\n<p>$$\\newcommand{\\ud}{\\mathrm{d}}  \\int!!!\\int_{D} g(x,y) , \\ud x, \\ud y \\  $$</p>\n<p>instead of</p>\n<p>$$  \\\\int\\int_{D} g(x,y)\\ud x \\ud y$$</p>\n<p>等号对齐：</p>\n<p>$$\\begin{eqnarray} f(x) &amp; = &amp; \\cos x \\ f’(x) &amp; = &amp; -\\sin x \\ \\int_{0}^{x} f(y)dy &amp; = &amp; \\sin x \\end{eqnarray}$$</p>\n","site":{"data":{}},"excerpt":"","more":"<p>测试LaTeX公式输入：</p>\n<p>此文档仅用于测试该博客系统能否接受数学公式输入。<br>$$2^{3}+5$$</p>\n<p>$$2^{3}+5$$</p>\n<p>接下来测试复杂公式的输入：</p>\n<p>$$\\mathbf{X} = \\left( \\begin{array}{ccc} x_{11} &amp; x_{12} &amp; \\ldots \\ x_{21} &amp; x_{22} &amp; \\ldots \\ \\vdots &amp; \\vdots &amp; \\ddots \\end{array} \\right)$$</p>\n<p>$$\\mathop{\\mathrm{corr}}(X,Y)= \\frac{\\displaystyle \\sum_{i=1}^n(x_i-\\overline x) (y_i-\\overline y)} {\\displaystyle\\biggl[ \\sum_{i=1}^n(x_i-\\overline x)^2 \\sum_{i=1}^n(y_i-\\overline y)^2 \\biggr]^{1/2}} $$</p>\n<p>分段函数：</p>\n<p>$$ y = \\left{ \\begin{array}{ll} a &amp; \\textrm{if $d&gt;c$}\\ b+x &amp; \\textrm{in the morning}\\ l &amp; \\textrm{all day long} \\end{array} \\right. $$</p>\n<p>$$\\newcommand{\\ud}{\\mathrm{d}}  \\int!!!\\int_{D} g(x,y) , \\ud x, \\ud y \\  $$</p>\n<p>instead of</p>\n<p>$$  \\\\int\\int_{D} g(x,y)\\ud x \\ud y$$</p>\n<p>等号对齐：</p>\n<p>$$\\begin{eqnarray} f(x) &amp; = &amp; \\cos x \\ f’(x) &amp; = &amp; -\\sin x \\ \\int_{0}^{x} f(y)dy &amp; = &amp; \\sin x \\end{eqnarray}$$</p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"ckv4pvoul000024pe4jq8dv12","tag_id":"ckv4pvouu000224pe1ah1gdyg","_id":"ckv4pvov7000624peeg5k3l37"},{"post_id":"ckv4pvous000124pe69o2hj0m","tag_id":"ckv4pvouu000224pe1ah1gdyg","_id":"ckv4pvov8000824pe2qii0y62"},{"post_id":"ckv4pvov2000324pe8r5w38bk","tag_id":"ckv4pvov8000724pe00uohi5q","_id":"ckv4pvov9000a24pebt2qf22j"},{"post_id":"ckv4pvov4000424peby1l6xl1","tag_id":"ckv4pvov9000924pe6bxy8ml5","_id":"ckv4pvova000b24pehmx25jsd"},{"post_id":"ckv4pvovw000c24pe90vkcadp","tag_id":"ckv4pvov8000724pe00uohi5q","_id":"ckv4pvovz000e24pe9r704k2g"},{"post_id":"ckv4pvow0000h24pe8lodccyp","tag_id":"ckv4pvov9000924pe6bxy8ml5","_id":"ckv4pvow2000j24pedmjr8aor"},{"post_id":"ckv4pvow1000i24pehprz3qd5","tag_id":"ckv4pvow0000g24pe8qq54q6z","_id":"ckv4pvow3000m24pe65qz5st2"},{"post_id":"ckv4pvovy000d24peb3x170tz","tag_id":"ckv4pvow0000g24pe8qq54q6z","_id":"ckv4pvow4000o24pe81xghsmj"},{"post_id":"ckv4pvow2000k24pe2koq4um4","tag_id":"ckv4pvov8000724pe00uohi5q","_id":"ckv4pvow5000q24pe7eibgs9p"},{"post_id":"ckv4pvow3000n24peeroe6sqi","tag_id":"ckv4pvouu000224pe1ah1gdyg","_id":"ckv4pvow6000s24pe7xx59kwb"},{"post_id":"ckv4pvovz000f24ped1ks2008","tag_id":"ckv4pvow0000g24pe8qq54q6z","_id":"ckv4pvow7000u24pe94xt1hzd"},{"post_id":"ckv4pvow4000p24pebm8w70p3","tag_id":"ckv4pvov8000724pe00uohi5q","_id":"ckv4pvow8000w24pefw3vd3id"},{"post_id":"ckv4pvow7000v24peg0q0boa0","tag_id":"ckv4pvov8000724pe00uohi5q","_id":"ckv4pvowb001124pegt292g2i"},{"post_id":"ckey85uj5000cho8aetqg09h7","tag_id":"ckv4pvouu000224pe1ah1gdyg","_id":"ckv4pvowc001224peekisd0ag"},{"post_id":"ckey85uiv0000ho8aejntcg0w","tag_id":"ckv4pvouu000224pe1ah1gdyg","_id":"ckv4pvowc001324peafov26kt"},{"post_id":"ckey85uj30006ho8ahh5pcmxe","tag_id":"ckv4pvouu000224pe1ah1gdyg","_id":"ckv4pvowf001524pegunz458r"},{"post_id":"ckey85uj20005ho8a850ccgjw","tag_id":"ckv4pvow9000z24pedr3f2dfq","_id":"ckv4pvowj001824pe2ntm0k99"},{"post_id":"ckey85uj30007ho8a9f3s3gik","tag_id":"ckv4pvowe001424pe1fzm6p7a","_id":"ckv4pvowl001924pe444a6izs"},{"post_id":"ckey85uiz0002ho8agejbbwsu","tag_id":"ckv4pvowe001424pe1fzm6p7a","_id":"ckv4pvowm001a24pe8ozb9sxx"},{"post_id":"ckey85ujg0010ho8a5gz6dp1c","tag_id":"ckv4pvow0000g24pe8qq54q6z","_id":"ckv4pvown001b24pe9he31na6"},{"post_id":"ckey85ujb000qho8a617v39cb","tag_id":"ckv4pvouu000224pe1ah1gdyg","_id":"ckv4pvown001c24pe45nh80v5"},{"post_id":"ckey85uj6000gho8afdbe56e8","tag_id":"ckv4pvowe001424pe1fzm6p7a","_id":"ckv4pvowo001d24pe71sfe6yb"},{"post_id":"ckey85uj7000jho8a8t0xan3p","tag_id":"ckv4pvowe001424pe1fzm6p7a","_id":"ckv4pvowq001e24pefgt51cxg"},{"post_id":"ckey85ujd000vho8a90aw8fyx","tag_id":"ckv4pvouu000224pe1ah1gdyg","_id":"ckv4pvowt001f24pegte21x5u"},{"post_id":"ckey85ujd000vho8a90aw8fyx","tag_id":"ckv4pvow0000g24pe8qq54q6z","_id":"ckv4pvowu001g24pe3wucbinx"},{"post_id":"ckey85uj8000lho8agl8oa2fs","tag_id":"ckv4pvov8000724pe00uohi5q","_id":"ckv4pvowv001h24pe3yifdulf"},{"post_id":"ckey85ujc000sho8acfwifpp2","tag_id":"ckv4pvow0000g24pe8qq54q6z","_id":"ckv4pvoww001i24peabm4e1wb"},{"post_id":"ckey85ujd000uho8a431rgx5e","tag_id":"ckv4pvov8000724pe00uohi5q","_id":"ckv4pvoww001j24pe2l1necil"},{"post_id":"ckey85ujh0013ho8a5b7r4zlx","tag_id":"ckv4pvow0000g24pe8qq54q6z","_id":"ckv4pvoww001k24pe8uona8ll"},{"post_id":"ckey85uj9000oho8a36nwg5tx","tag_id":"ckv4pvow0000g24pe8qq54q6z","_id":"ckv4pvowx001l24pe505s2qrq"},{"post_id":"ckey85uji0017ho8abdhbdilv","tag_id":"ckv4pvouu000224pe1ah1gdyg","_id":"ckv4pvowx001n24pe6krc61vy"},{"post_id":"ckey85uji0017ho8abdhbdilv","tag_id":"ckv4pvov8000724pe00uohi5q","_id":"ckv4pvowx001o24pehlighv1f"},{"post_id":"ckwz1bgt7000004pehkt7dme6","tag_id":"ckv4pvowe001424pe1fzm6p7a","_id":"ckwz1bgtj000104pe36z6a2sa"},{"post_id":"ckxx9go4z00008w8adu8dh3mf","tag_id":"ckv4pvow0000g24pe8qq54q6z","_id":"ckxx9go5600018w8a3ld760il"},{"post_id":"ckxx9go5v00028w8a4ubi0it1","tag_id":"ckv4pvov8000724pe00uohi5q","_id":"ckxx9go5y00048w8aa3cq9ff9"},{"post_id":"ckxx9go5x00038w8a3fe91fan","tag_id":"ckv4pvov8000724pe00uohi5q","_id":"ckxx9go6000068w8a9ej8ah62"},{"post_id":"ckxx9go5z00058w8a5706ewa1","tag_id":"ckv4pvow9000z24pedr3f2dfq","_id":"ckxx9go6100078w8a3uzha7ce"}],"Tag":[{"name":"Life","_id":"ckey85uj10004ho8a0oir5oi5"},{"name":"学习笔记","_id":"ckey85uj40008ho8ahc0w831y"},{"name":"Python","_id":"ckey85uj6000dho8abvwjf6fu"},{"name":"Study","_id":"ckey85uj7000hho8ae2gb5gtv"},{"name":"C","_id":"ckey85ujc000rho8a8e2uhlkj"},{"name":"Java","_id":"ckey85ujg0011ho8adntth440"},{"name":"C++","_id":"ckey85uji0016ho8a9q55g82z"},{"name":"Web Developing","_id":"ckey85ujk001bho8a3ynxflo5"},{"name":"Coding","_id":"ckey85ujl001eho8a1whhbmmm"},{"name":"Data Structure","_id":"ckey85ujl001fho8a0ya52x16"},{"name":"Algorithm","_id":"ckey85ujn001uho8aazkm30qj"},{"name":"生活感想","_id":"ckv4pvouu000224pe1ah1gdyg"},{"name":"工程开发","_id":"ckv4pvov8000724pe00uohi5q"},{"name":"科研应用","_id":"ckv4pvov9000924pe6bxy8ml5"},{"name":"计算机基础","_id":"ckv4pvow0000g24pe8qq54q6z"},{"name":"学习","_id":"ckv4pvow9000z24pedr3f2dfq"},{"name":"编程语言","_id":"ckv4pvowe001424pe1fzm6p7a"}]}}