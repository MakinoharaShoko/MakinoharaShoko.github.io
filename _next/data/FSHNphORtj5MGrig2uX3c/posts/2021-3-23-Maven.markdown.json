{"pageProps":{"post":"---\nlayout:     post\ntitle:      \"Maven\"\nintro:   \"\"\ndate:       2021-3-20 12:00:00\nauthor:     \"Makinohara\"\ncatalog: true\ntags:\n    - 工程开发\n  \n---\n\n\n\n\n\n# Maven基础内容\n\n## Maven构建\n\n清理、编译、测试、报告、打包、安装、（部署）\n\n编译命令：`mvn compile`\n\n换源 阿里源：\n\n```\n<mirror>\n        <id>nexus-aliyun</id>\n        <mirrorOf>central</mirrorOf>\n        <name>Nexus aliyun</name>\n        <url>http://maven.aliyun.com/nexus/content/groups/public</url>\n    </mirror>\n```\n\n仓库使用：\n\n本地仓库->私服->镜像->中央仓库\n\n常用命令：\n\n```\nmvn clean 清理\nmvn compile 编译主程序\n\tresources的文件会拷贝到target/classes/ 下\nmvn test-compile 编译测试程序\nmvn test 测试\nmvn package 打包主程序\nmvn install 安装主程序\nmvn deploy 部署主程序\n```\n\n\n\n## 项目对象模型pom\n\n```\nmodelVersion Maven模型版本\n坐标：\ngroupId 组织名称\nartifactId 项目名称\nversion 项目版本号 -SNAPSHOT不稳定版本\npackging 项目打包类型\ndependencies 依赖\nproperties 属性\nbuild 构建（一般涉及jdk版本等）\n```\n\n## Maven相关概念：\n\n生命周期：maven构建项目的过程：清理、编译、测试、报告、打包、安装、（部署）\n\nmaven命令：maven可以使用命令完成生命周期执行\n\nmaven插件：maven执行时完成功能的工具\n\n## 单元测试jUnit\n\n测试的类中的方法，方法是测试的基本单位（单元）。\n\nmaven可以借助单元测试测试类中方法。\n\n### 使用步骤\n\n1、加入Junit依赖\n\n```\n<dependency>\n<groupId>junit</groupId>\n<artifactId>junit</artifactId>\n<version>4.11</version>\n<scope>test</scope>\n</dependency>\n```\n\n2、创建测试类、测试程序（可以加入注解@Test）\n\n3、测试方法的限制：public；**没有返回值**；加@Test注解\n\n测试程序范例：\n\n```\npackage com.icsii.mavenlearn;\n\nimport org.junit.Assert;\nimport org.junit.Test;\n\npublic class TestDemo {\n    int add(int n1,int n2){\n        return n1+n2;\n    }\n    @Test //要在测试方法之前加上@Test\n    public void testAdd(){\n        TestDemo test = new TestDemo();\n        int res = test.add(10,20);\n        Assert.assertEquals(30,res);//期望值，实际值，相等正确，不等抛出异常\n    }\n}\n\n```\n\n## 打包\n\n将项目相关的资源和类等打包为压缩文件，存放才target内\n\n打包时不会包含测试文件\n\n## 安装\n\nmvn install 将项目打包后安装到仓库中\n\n## 部署\n\nmvn deploy 部署到远程私服仓库\n\n## 配置插件\n\n用于配置插件的一些设置\n\n```\n<build>\n        <plugins>\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-compiler-plugin</artifactId>\n                <version>3.8.1</version>\n                <configuration>\n                    <!-- 配置代码编译与运行的jdk版本-->\n                    <source>1.8</source>\n                    <target>1.8</target>\n                </configuration>\n            </plugin>\n        </plugins>\n    </build>\n```\n\n## 依赖、依赖范围\n\n```\n<dependency>\n<groupId>junit</groupId>\n<artifactId>junit</artifactId>\n<version>4.11</version>\n<!-- 依赖范围，指的是该依赖在项目中起作用的阶段 -->\n<!--test/compile/provided(提供者使用，打包后不依赖)/-->\n<scope>test</scope>\n</dependency>\n```\n\n## 属性设置、资源插件\n\n```\n<properties>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n        <maven.compiler.encoding>UTF-8</maven.compiler.encoding>\n        <java.version>16</java.version>\n        <!--jdk版本-->\n        <maven.compiler.source>16</maven.compiler.source>\n        <maven.compiler.target>16</maven.compiler.target>\n        <!--全局变量的使用-->\n        <spring.version>5.2.5</spring.version>\n        <!--使用：${spring.version}-->\n</properties>\n```\n\n```\n    <build>\n        <resources>\n            <resource>\n                <!--在以下目录中包含的文件种类，在编译时保留-->\n                <directory>src/main/java</directory>\n                <includes>\n                    <include>**/*.properties</include>\n                    <include>**/*.xml</include>\n                </includes>\n            </resource>\n        </resources>\n    </build>\n```\n\n"},"__N_SSG":true}