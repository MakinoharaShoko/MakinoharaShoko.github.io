{"pageProps":{"post":"---\nlayout:     post\ntitle:      Effective React Redux\nintro:   \"\"\ndate:       2022-5-10 17:00:00\nauthor:     \"Mahiru\"\ncatalog: true\ntags:\n    - 工程开发\n---\n\n## 高效使用 React + Redux\n\n### 使用 redux-toolkit 完成 reducer 的创建和 action 的创建\n\n```typescript\nimport {createSlice} from \"@reduxjs/toolkit\";\n\n// 初始状态\nconst initialState = {\n  count: 0\n}\n\n// 使用 createSlice 代替手动编写 reducer 和 action\nconst counterSlice = createSlice({\n  // reducer 的名称\n  name: 'counter',\n  // 初始状态\n  initialState,\n  // reducer，由于使用了 createSlice，因此我们可以用修改可变值的方法来得到新状态。\n  // 这是因为 createSlice 使用了 Immer 库来保证直接修改状态后得到的是一个全新的状态。\n  reducers: {\n    increment: state => {\n      state.count++;\n    }\n  }\n});\n\n// 导出 actions\nexport const {increment} = counterSlice.actions;\n// 导出 reducer\nexport default counterSlice.reducer;\n\n```\n\n### 使用 configureStore 来创建 store\n\n```typescript\nimport {configureStore} from \"@reduxjs/toolkit\";\nimport counterReducer from \"./counterReducer\";\n\n// 只需要传入一个对象，包括必要的属性（比如 reducer），就可以创建store 并自动配置 Redux DevTools\nexport const store = configureStore({\n  reducer: {\n    counter: counterReducer,\n  }\n})\n\n// 在 TS 中的类型声明\nexport type RootState = ReturnType<typeof store.getState>;\n\n```\n\n### 使用 react-redux 来使组件获得状态\n\n#### 使用 Provider 向组件提供状态\n\n```tsx\nimport './App.css'\nimport {Provider} from \"react-redux\";\nimport {TestReducer} from \"./components/testReducer\";\nimport {store} from './store';\nimport React from 'react';\n\nfunction App() {\n  // 使用 Provider 来提供 store，这样子组件都可以获取到状态\n  return (\n    <Provider store={store}>\n      <div className=\"App\">\n        <TestReducer/>\n      </div>\n    </Provider>\n  )\n}\n\nexport default App\n\n```\n\n#### 使用 useSelector 来在组件中获取状态，使用 useDispatch 来在组件中发送 action\n\n```tsx\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {RootState} from \"../store\";\nimport {increment} from \"../store/counterReducer\";\n\n\nexport const TestReducer = () => {\n  // 使用 useSelector 来在 state 中找到当前组件需要使用的状态\n  const count = useSelector((state: RootState) => state.counter.count);\n  // 使用 useDispatch 来获得向 store 的 dispatch 函数\n  const dispatch = useDispatch();\n  return <div>\n    <h1>TestReducer</h1>\n    <p>count: {count}</p>\n    {/*increase 是导出的 action creator，返回一个 action 对象*/}\n    {/*调用 dispatch 方法传入 action 对象就可以发送 action 了*/}\n    <button onClick={() => dispatch(increment())}>increment\n    </button>\n  </div>;\n}\n\n```\n\n"},"__N_SSG":true}