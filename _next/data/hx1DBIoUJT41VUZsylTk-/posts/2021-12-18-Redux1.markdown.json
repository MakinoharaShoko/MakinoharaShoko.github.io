{"pageProps":{"post":"---\nlayout:     post\ntitle:      Redux初体验\nintro:   \"\"\ndate:       2021-12-18 12:00:01\nauthor:     \"Makinohara\"\ncatalog: true\ntags:\n    - 工程开发\n    \n---\n\n# Redux初体验\n\n## 概念图\n\n![redux](/img/redux.jpg)\n\n## 1、创建Store（类似于全局变量存储仓库）\n\n```js\nimport {createStore} from \"redux\";\nimport reducer from \"./reducer\";\n\n//window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__() 是为了在DevTools调试，可以不加\nconst store = createStore(reducer,window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\n\nexport default store;\n```\n\n## 2、创建Reducer（相当于全局变量管理器）\n\n```js\nconst defaultStore = {\n    inputValue:'Write something',\n    list:[\n        '搞114514',\n        '坐下北泽JR'\n    ]\n};\n\nexport default (state = defaultStore,action)=>{\n    console.log(state);\n    console.log(action);\n    if(action.type === 'value/changeInput'){\n        let newState = JSON.parse(JSON.stringify(state));\n        newState.inputValue = action.payload;\n        return newState;\n    }\n    return state;\n}\n```\n\n## 3、在组件里调用仓库内容\n\n```jsx\nimport './App.css';\nimport store from \"./store\";\nimport {useState} from \"react\";\nimport { Input } from 'antd';\nimport 'antd/dist/antd.css';\n\nfunction App() {\n    //初始化HOOK：取出store里的state\n    const [appData,setAppData] = useState(store.getState());\n    //当store变动时，调用回调函数（这里是setAppData）\n    store.subscribe(()=>{setAppData(store.getState())});\n    let list = appData.list;\n    let inputValue = appData.inputValue;\n    let page = [];\n    console.log(store.getState())\n    for (let i = 0; i < list.length; i++) {\n        let temp = <div>{list[i]}</div>\n        page.push(temp);\n    }\n\n    const changeInputValue = (e)=>{\n        // 创建action\n        const action = {\n            type:'value/changeInput',\n            payload:e.target.value\n        }\n        // 使action生效（也就是传给reducer，判断后更新store中的state）\n        store.dispatch(action);\n    }\n\n    return (\n        <div>\n            <Input placeholder={\"Write Something\"} onChange={changeInputValue}/>\n            {page}\n            <div>\n                {inputValue}\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n\n```\n\n如此一来，就实现了类似于全局变量管理的模式（你可以为每一个需要管理的全局状态创建store）\n\n## 将Store和Reducer写到一起\n\n```js\nimport {createStore} from \"redux\";\n\n//初始化\nconst defaultStore = {\n    inputValue:'Write something',\n    list:[\n        '搞114514',\n        '坐下北泽JR'\n    ]\n};\n\nconst reducer =  (state = defaultStore,action)=>{\n    //判断action的类型，改变state的指定属性\n    if(action.type === 'value/changeInput'){\n        let newState = JSON.parse(JSON.stringify(state));\n        newState.inputValue = action.payload;\n        return newState;\n    }\n    return state;\n}\n\nconst appStore = createStore(reducer,window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\n\nexport default appStore;\n```\n\n**对应的App代码**\n\n```jsx\nimport './App.css';\nimport appStore from \"./store/appReducer\";\nimport {useState} from \"react\";\nimport { Input } from 'antd';\nimport 'antd/dist/antd.css';\n\nfunction App() {\n    //初始化HOOK：取出store里的state\n    const [appData,setAppData] = useState(appStore.getState());\n    //当store变动时，调用回调函数（这里是setAppData）\n    appStore.subscribe(()=>{setAppData(appStore.getState())});\n    let list = appData.list;\n    let inputValue = appData.inputValue;\n    let page = [];\n    console.log(appStore.getState())\n    for (let i = 0; i < list.length; i++) {\n        let temp = <div>{list[i]}</div>\n        page.push(temp);\n    }\n\n    const changeInputValue = (e)=>{\n        // 创建action\n        const action = {\n            type:'value/changeInput',\n            payload:e.target.value\n        }\n        // 使action生效（也就是传给reducer，判断后更新store中的state）\n        appStore.dispatch(action);\n    }\n\n    return (\n        <div>\n            <Input placeholder={\"Write Something\"} onChange={changeInputValue}/>\n            {page}\n            <div>\n                {inputValue}\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n\n```\n\n\n\n## Action Creator\n\n添加了 Action Creator 的处理方法：\n\n```js\n//初始化\nconst defaultStore ='Write something';\n\nconst inputValue =  (state = defaultStore, action)=>{\n    //判断action的类型，改变state的指定属性\n    if(action.type === 'value/changeInput'){\n        let newState = JSON.parse(JSON.stringify(state));\n        newState = action.payload;\n        return newState;\n    }\n    return state;\n}\n\nexport class inputValueAction{\n    static changeInput = (input) =>{\n        return {\n            type:'value/changeInput',\n            payload:input\n        }\n    }\n}\n\nexport default inputValue;\n```\n\n将所有相关与某个要发送数据的 action creator 放到一个类中，方便调用\n"},"__N_SSG":true}