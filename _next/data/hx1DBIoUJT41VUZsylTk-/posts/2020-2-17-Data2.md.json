{"pageProps":{"post":"---\nlayout:     post\ntitle:      \"数据结构2：树、散列、堆、图\"\nintro:      \"\"\ndate:       2020-2-17 16:13:00\nauthor:     \"Makinohara\"\ncatalog: true\ntags:\n\t- 计算机基础\n---\n\n\n\n\n\n# 树\n\n树的一些基本概念:\n\n1.一棵树是一些结点的集合\n\n2.树和子树之间通过有向的\"边\"连接.\n\n3.每一棵子树的根是父根的\"儿子\"而父根是子树的\"父亲\".\n\n4.没有儿子的结点叫做叶\n\n5.从一个结点到另一个结点的路径叫做\"序列\",序列的长是路径上边的个数,\n\n6.结点的深度是从根到结点唯一路径的长.\n\n7.如果存在一条n1到n2的路径,那么n1是n2的祖先,n2是n1的后裔.若n1!=n2,则n1是n2的真祖先.\n\n8.树的简单实现:\n\n```c++\nstruct node\n{\n    object element;\n    node *firstchild;\n    node *nextsibling;\n};\n```\n\n接下来看一个最基本的树型结构:\n\n## 二叉树\n\n二叉树的每一个结点都不能超过有两个儿子.但子树皆可能为空.\n\n二叉树的伪代码:\n\n```c++\nstruct node\n{\n    int a;\n    int b;//这些是结点包含的元素\n    node *left;\n    node *right;//这些是指向子树的指针\n};\n```\n\n表达式树的解释:\n\n![表达式树](/img/tree1.jpg)\n\n树有多种遍历方式:\n\n**中序遍历:**\n\n依次遍历左,结点,右,并且每一层都这么遍历,最终遍历结果为中缀表达式:\n\n(a+b\\*c)+((d\\*e+f)*g)\n\n**后序遍历:**\n\n先打印左右子树,再打印结点:\n\na b c * + d e * f + g * +\n\n构造一个后缀表达式树:\n\n原理:每读入一个表达式就形成一个新的树.\n\n参见      *数据结构与算法分析:树*     ,我们下面只考虑代码实现:\n\n```c++\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nstruct node //定义一个结点\n{\n    char elem;\n    node *left;\n    node *right;\n};\n\nint main()\n{\n    stack<node *> temp_in; //构建一个栈用于存放指针(建树压栈)\n    char char_in;          //构建一个临时变量用于读入(符号或数字)\n    node node_arr[10000];  //构建一个数组用于存放树\n    int pos = 0;           //构建的结点在数组中的位置(每构建一个结点时更新)\n    while (true)\n    {\n        cin >> char_in;\n        if (char_in == '!')\n            break;\n\n        if (char_in != '+' && char_in != '-' && char_in != '*' && char_in != '/') //读取非运算符(正常压栈)\n        {\n            node_arr[pos].elem = char_in; //把内容写入树\n            temp_in.push(&node_arr[pos]); //将指针压入栈\n        }\n        else\n        {\n            node_arr[pos].elem = char_in;        //将运算符写入树\n            node_arr[pos].right = temp_in.top(); //取为右儿子\n            temp_in.pop();                       //弹出\n            node_arr[pos].left = temp_in.top();  //取为左儿子\n            temp_in.pop();                       //弹出\n            //最后将这个树入栈\n            temp_in.push(&node_arr[pos]);\n        }\n        pos++;\n    }\n    //此时树已经建立成功!!!接下来我们需要尝试以中序遍历和后序遍历来输出这个表达式\n    node *print_node = temp_in.top(); //当前读出的根,先将栈顶的表达式读入\n    temp_in.pop();//待会还要压进去\n    while (true)\n    {\n        if ((*print_node).left == 0x0)\n        {\n            cout << (*print_node).elem;//若为最左叶,打印\n            if (temp_in.empty())//打印完了要是栈顶为空,则跳出循环\n            {\n                break;\n            }\n            cout<<(*temp_in.top()).elem;//将根打印出来\n            print_node = (*temp_in.top()).right;//修改读数为栈顶右儿子\n            temp_in.pop();//将根从栈顶取出\n        }\n        else\n        {\n            temp_in.push(print_node);\n            print_node = (*print_node).left;\n        }\n    } //找到最左侧元素\n\n    return 0;\n}\n```\n\n# 图论算法\n\n## 图的介绍\n\n图 G=(V,E)由顶点(vertex)的集V和边(edge)的集E组成.\n\n每一条边是一个点对(v,w),v,w∈V,如果点对有序,图就为有向图.\n\n当存在(v,w)∈E,v和w邻接.\n\n边可以有一个权或值.\n\n路径是一个顶点序列,路径的长为该路径上的边数.一个顶点到自身的路径长度为0.\n\n一个从顶点到自身的路径叫\"环\",不常见.\n\n回路指的是W1=Wn的长至少为1的路径,无向图要求边互异.\n\n## 图的表示\n\n先考虑有向图的表示:\n\n用数字对顶点标号:\n\n![图](/img/graph.jpg)\n\n1.使用二维数组(邻接矩阵)\n\nA\\[u][v]表示一条从u到v的边,A\\[u][v]=true指边存在,反之不存在.A\\[u][v]=2可以表示一个边的权.\n\n2.邻接表表示,若有权也可以附加进去\n\n| 序号 | 值    |\n| ---- | ----- |\n| 1    | 2,4,3 |\n| 2    | 4,5   |\n| 3    | 6     |\n| 4    | 6,7,3 |\n| 5    | 4,7   |\n| 6    | (空)  |\n| 7    | 6     |\n"},"__N_SSG":true}