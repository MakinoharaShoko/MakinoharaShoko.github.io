{"pageProps":{"post":"---\nlayout:     post\ntitle:      \"JavaScript高级程序设计\"\nintro:   \"\"\ndate:       2021-11-2 08:00:00\nauthor:     \"Makinohara\"\nfeatured_image: http://msfasr.com/img/py.jfif\ncatalog: true\ntags:\n    - 编程语言\n---\n\n> 为系统学习 JavaScript ，重写有关 JavaScript 的笔记，使用教材《JavaScript高级程序设计》第四版。\n\n# 新笔记：直接使用代码描述笔记\n\n注意：因此本博文不再更新\n\nhttps://github.com/MakinoharaShoko/Learning-Code/tree/main/JS\n\n# 基础概念\n\n## 1、DOM & BOM\n\nDOM通过创建表示文档的树，让开发者可以随心所欲地控制网页的内容和结构。使用DOM API， 可以轻松地删除、添加、替换、修改节点。\n\n总体来说，BOM 主要针对浏览器窗口和子窗口（frame），不过人们通常会把任何特定于浏览器的 扩展都归在BOM的范畴内。比如，下面就是这样一些扩展：\n\n 弹出新浏览器窗口的能力；\n\n 移动、缩放和关闭浏览器窗口的能力；\n\n navigator 对象，提供关于浏览器的详尽信息；\n location 对象，提供浏览器加载页面的详尽信息；\n\n screen 对象，提供关于用户屏幕分辨率的详尽信息；\n\n performance 对象，提供浏览器内存占用、导航行为和时间统计的详尽信息；\n\n 对 cookie的支持；\n 其他自定义对象，如 XMLHttpRequest 和 IE的 ActiveXObject。\n\n## 2、加载方式\n\n### 1、行内\n\n```\n<script> \nfunction sayHi() { \n\tconsole.log(\"Hi!\");\n}\n</script>\n```\n\n### 2、外部文件\n\n```\n<script src=\"example.js\"></script>\n```\n\n### 3、加载位置\n\n推荐加载在 body 内容的最后，这样就会在渲染界面后加载JavaScript\n\n```\n<!DOCTYPE html> \n<html>\n\t<head>\n\t\t<title>Example HTML Page</title> \n\t</head> \n\t<body> \n\t<!-- 这里是页面内容 -->\n\t<script src=\"example1.js\"></script> \n\t<script src=\"example2.js\"></script> \n\t</body>\n</html>\n```\n\n推迟到解析到结束标签 \\</html> 执行（只对外部脚本文件才有效）：\n\n```\n<script defer src=\"example1.js\"></script>\n```\n\n# 语言基础\n\n### 变量声明提升\n\nvar 提升，let不提升\n\n```\nconsole.log(name);//undefined\nvar name = 'Matt';\n\nconsole.log(age);//ReferenceError,暂时性死区\nlet age = 26;\n```\n\nlet：声明范围是块作用域，所以不会造成循环定义的迭代变量渗透到外部。\n\nconst声明：限制不能修改其值或引用的对象，但是可以修改该对象的内部属性。\n\n**尽可能使用let、const，避免使用var，const优先**\n\n### 变量类型\n\n```\nUndefined\nNull//typeof Null ==='object'\nBoolean\nNumber\nString\nSymbol\n(Object)\n```\n\nundefined 是一个特殊值，在if判断为假\n\nnull：可以看做是空对象指针\n\n### 数值\n\n特殊：NaN:not a number\n\n#### 转换函数：\n\n```\nNumber()\nparseInt()\nparseFloat()\n```\n\n### 字符串\n\n字符串的特点：不可变，如果要修改只能销毁原有的字符串。\n\n转换函数：\n\n```\ntoString()\nString()\nString(null) === 'null'\nString(undefined) === 'undefined'\n```\n\n#### 模板字面量\n\n模板字面量可用于字符串插值：\n\n```\nlet value1 = 233;\nlet value2 = 'sec'\nlet str1 = `now is ${value1} ${value2}.`\n```\n\n模板字面量可以跨行定义字符串\n\n```\nlet str2 = `the\nKamome's humble abode`\n```\n\n原始字符串：\n\n```\nString.raw`\\u00a9`\n```\n\n### Symbol\n\nTODO:写关于symbol的笔记\n\n### Object\n\nObject 的属性和方法\n\n```\nconstructor:创建\nhasOwnProperty(propertyName):判断当前对象是否存在给定属性\nisPrototypeOf:\npropertyIsEnumerable(propertyName):判断给定的属性是否可用\ntoLocaleString():返回对象的字符串表示（反映本地化执行环境）\ntoString:返回对象的字符串表示\nvalueOf():返回对应的字符串\n```\n\n### 算符\n\n一元算符\n\n```\n//一元运算符\nlet str1 = '123';\nstr1 = +str1;\nconsole.log(typeof str1);//number\n```\n\n# 异步编程\n\n## Promise\n\n### Promise的基本使用\n\n```\nlet myFirstPromise = new Promise(function(resolve, reject){\n    //当异步代码执行成功时，我们才会调用resolve(...), 当异步代码失败时就会调用reject(...)\n    //在本例中，我们使用setTimeout(...)来模拟异步代码，实际编码时可能是XHR请求或是HTML5的一些API方法.\n    setTimeout(function(){\n        resolve(\"成功!\"); //代码正常执行！\n    }, 250);\n});\n```\n\n### 函数返回Promise\n\n```\nfunction getUserInfo() {\n\t//获取个人信息\n\treturn new Promise((resolve, reject) => {\n\t\tdbo.collection('users').find({ eid: userEID }).toArray((err, result) => {\n\t\t\tif (err) throw err;\n            returnMessage['userInfo'] = result;\n            resolve();\n        })\n    })\n}\n```\n\n### Promise.all的使用\n\n```\n//执行查询\nPromise.all([getUserInfo(), getMessage(), getFriendReq(), getFriendList()]).then(() => { closeAndSend() })\n```\n\n# 函数\n\n### 函数的几种描述：\n\n```\nfunction func1(){\n\treturn 1;\n}\n\nlet func2 = function(){\n\treturn 1;\n}\n\nlet func3 = () => {\n\treturn 1;\n}\n\n//立即执行的函数\n(()=>1)();\n```\n\n箭头函数(Lambda)\n\n```\n(param1, param2, …, paramN) => { statements }\n(param1, param2, …, paramN) => expression\n//相当于：(param1, param2, …, paramN) =>{ return expression; }\n\n// 当只有一个参数时，圆括号是可选的：\n(singleParam) => { statements }\nsingleParam => { statements }\n\n// 没有参数的函数应该写成一对圆括号。\n() => { statements }\n```\n\n"},"__N_SSG":true}