{"pageProps":{"post":"---\nlayout:     post\ntitle:      \"算法分析（基础篇）\"\nintro:      \"\"\ndate:       2020-2-17 16:13:00\nauthor:     \"Makinohara\"\ncatalog: true\ntags:\n    - 计算机基础\n\n---\n\n\n\n## 枚举\n\n枚举可以说是算法中最最最最弱智的一种算法了,其基本原理就是根据题目意思将所有可能的情况都试一遍,如果达到题目要求就记录下来或者输出.没有达到题目要求就跳过.但是,枚举也是需要一些技巧的,否则你要把所有的情况都真的试一下后,会遭遇可怜的TLE.\n\n首先,如果遇到非正即反的枚举情况(即情况可以用0或1表示),可以尝试使用[bitset](#bitset)进行救命,因为bitset占用空间少,且只模拟0和1两种情况.\n\n对于某些特殊情况的枚举,可以考虑用前一层枚举的情况直接通过计算得出后面的枚举结果,比如说熄灯问题(这是一个我看过的MOOC的问题,现在不太好解释),这样可以大大减少枚举的时间复杂度.\n\n枚举的实现一般是通过循环实现的.至于怎么循环,怎么嵌套,我想我不必再过多解释**.但值得注意的是,循环变量一定要设置好!!!(尽量自己写循环结构,用vscode自动生成的可能会搞错)且一定要在此时记录循环变量的含义(最好注释下来).这样真的很有利于后面的判断和调试!**\n\n称硬币问题的枚举:(POJ1013)\n\n```c++\n#include <iostream>\n#include <stdio.h>\n#include <string.h>\n\nusing namespace std;\n\nchar eleft[3][7];   //the coin status of eleft\nchar eright[3][7];  //the coin status of eright\nchar eresult[3][7]; //the eresult of each try\n\nbool get_result(char coin, bool isLight)\n{\n    if (isLight)\n    {\n        for (int k = 0; k < 3; k++) //Judge 3 cases\n        {\n            if (eresult[k][0] == 'e') //this case is even\n            {\n                if (strchr(eleft[k], coin) != NULL || strchr(eright[k], coin) != NULL)\n                {\n                    return false;\n                }\n            }\n            if (eresult[k][0] == 'u') //this case is up\n            {\n                if (strchr(eright[k], coin) == NULL)\n                {\n                    return false;\n                }\n            }\n            if (eresult[k][0] == 'd') //this case is down\n            {\n                if (strchr(eleft[k], coin) == NULL)\n                {\n                    return false;\n                }\n            }\n        }\n    }\n    else\n    {\n        for (int k = 0; k < 3; k++) //Judge 3 cases\n        {\n            if (eresult[k][0] == 'e') //this case is even\n            {\n                if (strchr(eleft[k], coin) != NULL || strchr(eright[k], coin) != NULL)\n                {\n                    return false;\n                }\n            }\n            if (eresult[k][0] == 'u') //this case is up\n            {\n                if (strchr(eleft[k], coin) == NULL)\n                {\n                    return false;\n                }\n            }\n            if (eresult[k][0] == 'd') //this case is down\n            {\n                if (strchr(eright[k], coin) == NULL)\n                {\n                    return false;\n                }\n            }\n        }\n    }\n\n    return true;\n};\n\nint main()\n{\n    int case_number = 0;\n    cin >> case_number;                   //Get case number\n    for (int i = 0; i < case_number; i++) //Output the eresult of each case\n    {\n        for (int j = 0; j < 3; j++)\n        {\n            cin >> eleft[j] >> eright[j] >> eresult[j];\n        }\n\n        for (char j = 'A'; j <= 'L'; j++)\n        {\n            bool isLight = true; //The fake coin is light\n            if (get_result(j, isLight))\n                cout << j << \" is the counterfeit coin and it is light.\" << endl;\n            isLight = false;\n            if (get_result(j, isLight))\n                cout << j << \" is the counterfeit coin and it is heavy.\" << endl;\n        }\n    }\n\n    return 0;\n}\n```\n\n关于枚举,先写到这吧,后面如果遇到一些古怪的枚举方式,再补.\n\n## 模拟\n\n模拟,顾名思义,就是根据题目所给的实现方式和思想写代码,这种题目一般来说都伴随着大量的判断和循环,且隐含着一些算法思想.若是单纯的硬模拟可能会导致TLE.\n\n模拟题的数据一般而言会实现地十分古怪,所以你必须考虑一些特殊情况.所以写模拟题最烦人地地方就在于DEBUG!你怎么知道你是不是漏了情况!\n\n模拟题的写法比较灵活多样,并且需要很强的文字阅读能力来理解题意.而且模拟题容易转变为其他类型的算法题,所以也不好直接讨论.\n\n//举例几道题,凑合得了,模拟的笔记我没法写...\n\n## 贪心\n\n贪心算法就是在进行每一步操作时尽可能寻找最优解,此种算法可能需要依托一些数据结构(队列;优先队列<堆>)来实现.\n\n接下来看一道使用贪心算法的题目:\n\n此题使用了优先队列的思想.优先队列其实就是一种贪心,即:先取出优先级最大的元素.而贪心算法的原理就是先执行最优步骤,等到最优步骤执行完后再执行次优步骤.\n\n上代码:\n\n```c++\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nint main()\n{\n    int qty_apple;\n    cin>>qty_apple;\n    priority_queue<int, vector<int>, greater<int>> apples;\n    for (int i = 0; i < qty_apple; i++)\n    {\n        int temp_in;\n        cin >> temp_in;\n        apples.push(temp_in);\n    }\n    int sum = 0;\n    while (true)\n    {\n        int t_effort = 0;\n        t_effort += apples.top();\n        apples.pop();\n        t_effort += apples.top();\n        apples.pop();\n        sum += t_effort;\n        if (apples.empty())\n            break;\n        apples.push(t_effort);\n    }\n    cout << sum << endl;\n    return 0;\n}\n```\n\n\n\n## 递归\n\n递归就是函数自己调用自己.这样就能实现一些较为复杂且很难单纯用循环写出来的算法.\n\n递归的一个典型例子就是***汉诺塔问题***,这个问题不仅是一个对递归思想的很好解释,同时也有利于深刻了解递归的原理.\n\n接下来看汉诺塔问题\n\n汉诺塔 （ 又称河内塔 ） 问题是源于印度一个古老传说的益智玩具 。 古代有一个梵塔 ， 塔内有座 A 、 B 、 C ， A 座上有 64 个盘子 ， 盘子大小不等 ， 大的在下 ， 小的在上 。 有一个和尚想把盘子从 A 座移到 B 座 ， 但每次只能允许移动一个盘子 ， 并且在移动过程中 ， 3 个座上的盘始终保持大盘在下，小盘在上。在移动过程中可以利用 B 座.\n\n```c++\n#include <iostream>\nusing namespace std;\nvoid move(int n, char A, char B,char C);//声明函数(递归的调用)\nint main()\n{ \n\tint discCount;\n    cin>>discCount;\n    move(discCount,'A','B','C');\n\treturn 0;\n}\nvoid move(int n, char A, char B,char C)//自定义函数\n{\n\tif(n==0)//盘子为0的时候返回\n\t{\n\t\treturn;\n\t}\n\telse\n\t{\n\t\t//算法分析:要使得最底下最大的盘子能移到C,必须先把n-1个盘子移到B,于是有:\n        //我们不需要管下一个递归是怎么解决n-1个盘子移动问题的,我们只负责命令它执行:\n        move(n-1,A,C,B);//先把n-1个盘子从A移动到B,借助C\n        //(此时在递归程序里的调用依然是A移动到C,但盘子的序号变了)\n        //当作完成了n-1个盘子的移动,最后有:\n\t\tcout<<A<<\"-->\"<<C<<endl;//把最后一个盘子(相对最大的)从A移动到C\n\t\tmove(n-1,B,A,C);//最后把n-1个盘子从B移动到C,使用A作为中转.\n        //因为此时A上面已经没有比相对最大的盘子大的了\n\t\treturn;//移动完成,程序结束\n\t}\n}\n\n```\n\n\n\n## 深度优先搜索(DFS)\n\n深度优先搜索,即先想某一纵深进行搜索,由于主要是写给自己看的,所以就从简了,简而言之,其是隐式地运用了栈的思想实现的.\n\n先看一个八皇后的问题(洛谷P1219)\n\n------\n\n题目描述\n\n检查一个如下的6 x 6的跳棋棋盘，有六个棋子被放置在棋盘上，使得每行、每列有且只有一个，每条对角线(包括两条主对角线的所有平行线)上至多有一个棋子。\n\n![img](/img/60.png)\n\n上面的布局可以用序列2 4 6 1 3 5来描述，第i个数字表示在第i行的相应位置有一个棋子，如下：\n\n行号 1 2 3 4 5 6\n\n列号 2 4 6 1 3 5\n\n这只是跳棋放置的一个解。请编一个程序找出所有跳棋放置的解。并把它们以上面的序列方法输出。解按字典顺序排列。请输出前3个解。最后一行是解的总个数。\n\n输入格式\n\n一个数字N (6 <= N <= 13) 表示棋盘是N x N大小的。\n\n输出格式\n\n前三行为前三个解，每个解的两个数字之间用一个空格隔开。第四行只有一个数字，表示解的总数。\n\n------\n\n接下来请看代码\n\n```c++\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nint ans[14] = {0};\nint vline[14] = {0};\nint lcross[14] = {0};\nint rcross[114] = {0}; //分别对应列 左 右 对角线(对角线请注意加一个n，n=100)\nint sum = 0;\nvoid dfs(int width, int line)\n{\n    if (line > width) //达到结果就输出(深搜结束标识)\n    {\n        sum++;\n        if (sum <= 3)\n        {\n            for (int j = 1; j <= width; j++) //这里的i代表行号\n            {\n                cout << ans[j] << \" \";\n            }\n            cout << endl;\n        }\n        \n        return;\n    }\n    //正式算法\n    //占位\n    for (int i = 1; i <= width; i++) //排查未用然后使用\n    {\n        if (vline[i] != 1 && lcross[i + line] != 1 && rcross[i - line + 100] != 1)\n        {\n            //占用\n            ans[line] = i;\n            vline[i] = 1;\n            lcross[i + line] = 1;\n            rcross[i - line + 100] = 1;\n            dfs(width, line + 1);\n            //你应当特别注意这一步!这里是深搜向下扩展的重要步骤!!!\n            //回溯(在上面的程序结束后,意味着深搜已经完成并return,\n            //那么在return下面必须将程序的状态恢复到扩展下一层前的状态!!!\n            //注意这很重要,并且可能需要考虑如何做这样一件事)\n            vline[i] = 0;\n            lcross[i + line] = 0;\n            rcross[i - line + 100] = 0;\n        }\n    }\n};\n\nint main()\n{\n    int width = 0;\n    cin >> width;  //获取棋盘的宽度\n    dfs(width, 1); //从第1行开始\n    cout<<sum;\n\n    return 0;\n}\n```\n\n这只是一个深搜的例子,后面我会继续扩充一些其他的例子以及用法!\n\n## 广度优先搜索\n\n广度优先搜索使用了队列的思想.广度优先搜索总是先搜索步长最近的搜索结果,这样就可以求解一些类似于最短路径之类的问题.\n\n广度优先搜索的结果可以搜索到的结果保证步长最短.\n\n## 动态规划\n\n动态规划就是使用历史数据来避免重复计算,从而拆分求解一些复杂的问题.\n\n### 一维动态规划\n\n1.建立动态规划数组dp[]\n\n2.确定dp[i]的含义\n\n3.确定递推表达式\n\n4.找出初始值用于递推\n\n5.由是,可以求出dp[i]的值\n\n接下来看一道简单的动态规划题目:\n\n青蛙跳台阶问题:\n\n> 问题描述：一只青蛙一次可以跳上1级台阶，也可以跳上2级。求该青蛙跳上一个n级的台阶总共有多少种跳法。 \n\n1.建立dp[]\n\n2.确定dp[i] 的含义,这里的dp[i]的含义是第i个台阶青蛙要跳的步数.\n\n3.**找出关系式**:dp[i]=dp[i-2]+dp[i-1],由于青蛙可以从i-2级或i-1级跳上来,所以第i层的情况数就是i-2层的情况和i-1层相加.\n\n4.初始值:dp[0]=0,dp[1]=1,dp[2]=2,OK!\n\n5.编写程序运行:\n\n```c++\n#include <bits/stdc++.h>\nint main()\n{\n    int n;//the floor \n    std::cin >> n;\n    int dp[100] = {0};\n    dp[0] = 0;\n    dp[1] = 1;\n    dp[2] = 2;\n    for (int i = 3; i <= 100; i++)\n    {\n        dp[i] = dp[i - 2] + dp[i - 1];\n    }\n    std::cout << dp[n] << std::endl;\n    return 0;\n}\n```\n\n### 动态规划的背包问题\n\n**0-1背包问题的递推关系**\n\nf[j]=max(f[j],f[j-price[i]]+value[i])(考虑第i个产品的购买问题)\n\n​                ↑不改变背包       ↑改变背包,价值为钱减少后的背包里的价值(当作已算出)加上现有商品的价值\n\n最优方案就是比较这两种方案，哪个会更好些:\n\n题目:洛谷P1060\n\n上代码:\n\n```c++\n#include<iostream>\n#include<algorithm>\nusing namespace std;\nint w[30],v[30],f[50000];//w数组为重要度，v数组为money，f是用来dp的数组\nint n,m;//n是总物品个数，m是总钱数\nint main()\n{\n    cin>>m>>n;//输入\n    for(int i=1;i<=n;i++)\n    {\n        cin>>v[i]>>w[i];\n        w[i]*=v[i];//w数组在这里意义变为总收获（重要度*money）\n    }//将每件物品的价值算出来,保留每件物品的价格(消耗背包空间)\n    \n    //01背包\n    for(int i=1;i<=n;i++)//分别对n个物品单独分析,枚举放不放i号物品\n    {\n        for(int j=m;j>=v[i];j--)//注意从m开始,j>=v[i]的意思是:从大到小循环，\n                               //依次询问使用这么多钱可获得的最大重要度与价格的乘积，\n                              //循环到a[i]就行了,j代表的是使用j数量的钱的背包状况\n        {\n            if(j>=v[i])//剩的钱大于第i件产品的价格\n            {\n                f[j]=max(f[j],f[j-v[i]]+w[i]);//要不就不买,维持背包不变,\n                //若是决定购买,将花完这个钱的背包里的价值加上现在这件产品的价值\n            }\n        }\n    }\n    cout<<f[m]<<endl;//背包大小为m时最大值,注意这个m,m可泛化为金钱等\n    return 0;\n} \n```\n\n最长子序列和问题(HDU1003)\n\n```c++\n#include<iostream>\n\n\n\nusing namespace std;\n\nint main() \n{\n\t//获取情况数\n\tint case_number = 0;\n\tcin >> case_number;\n\tint number_of_sequence = 0;\n\tint sum = -1001;//输出的求和\n\tint temp_sum = 0;//临时求和\n\tint get_number = 0;//获得的数字\n\tint counter = 1;//序列长度\n\tint start_position;//起始位置\n\tint final_counter = 0;//最终序列长度\n\tint final_startpos = 0;//最终起始位置\n\tfor (int i = 0; i < case_number; i++)//每种情况对应的循环\n\t{\n\t\tcounter = 1;\n\t\tfinal_counter = 0;\n\t\tfinal_startpos = 0;\n\t\tsum = -1001;\n\t\tcin >> number_of_sequence;//获取数组数字数目\n\t\ttemp_sum = 0;\n\t\tstart_position = 1;\n\t\tfor (int j = 0; j < number_of_sequence; j++)//核心求和算法\n\t\t{\n\t\t\t\n\t\t\tcin >> get_number;\n\t\t\ttemp_sum += get_number;\n\t\t\t\n\t\t\tif (temp_sum> sum)\n\t\t\t{\n\t\t\t\tsum = temp_sum;\n\t\t\t\tfinal_counter = counter;\n\t\t\t\tfinal_startpos = start_position;\n\t\t\t}\n\t\t\tif (temp_sum <0)\n\t\t\t{\n\t\t\t\ttemp_sum = 0;\n\t\t\t\tcounter = 0;\n\t\t\t\tstart_position = j + 2;\n\t\t\t}\n\t\t\t\n\t\t\tcounter++;\n\t\t\n\t\t}\n\t\t\n\t\tcout << \"Case\" << \" \" << i+1 << \":\" << \"\\n\";\n\t\tcout << sum << \" \" << final_startpos << \" \" << final_startpos + final_counter - 1 ;\n\t\t//输出结束\n\t\tcout << \"\\n\";\n\t\t//空行\n\t\tif (i != (case_number - 1))\n\t\t{\n\t\t\tcout << \"\\n\";\n\t\t}\n\n\t}\n\n}\n```\n\n\n\n## 图论\n\n图论是一个很重要的把抽象问题转发为程序的思想.我们在此处会举一些例子来说明图论的应用.有关这个数据结构的解释可以在后面的[数据结构](#数据结构)章节找到\n\n图论的一些应用:\n\n//还没学,先放着.\n\n## 高精度算法\n\n高精度算法可用于求解大数运算,这是任何一种数据类型(包括longl ong)都无法做到的,接下来就先贴几个代码来解释,以后再来写详细的笔记.\n\n高精度加法(HDU1002)\n\n```c++\n#include <iostream>\n#include <cstdint>\n#include <string>\n#include <vector>\n\nusing namespace std;\n\nint main()\n{\n\t//Get case number\n\tint case_number = 0;\n\tcin >> case_number;\n\t//Get input numbers  of each case\n\t//开始输出结果\n\tfor (int i = 0; i < case_number; i++)\n\t{\n\n\t\tstring num_a;\n\t\tstring num_b;\n\t\tcin >> num_a;\n\t\tcin >> num_b;\n\t\t//Start caculate\n\t\t//Confirm length\n\t\tint length = 0;\n\t\tif (num_a.length() >= num_b.length())\n\t\t{\n\t\t\tlength = num_a.length() + 1;\n\t\t}\n\t\telse if (num_a.length() < num_b.length())\n\t\t{\n\t\t\tlength = num_b.length() + 1;\n\t\t}\n\t\t//Creat result\n\t\tvector<int> result(length);\n\t\tint nextline = 0; //进位\n\t\tint ifline = 0;\n\t\tint Tresult = 0; //每位结果\n\t\tint numberA = 0; //A的位\n\t\tint numberB = 0; //B的位\n\t\t//开始读数\n\t\tfor (int j = 0; j < length; j++)\n\t\t{\n\t\t\tnumberA = (num_a.length() - j - 1); //A读数的位\n\t\t\tnumberB = (num_b.length() - j - 1); //B读数的位\n\t\t\tint tempA = 0;\t\t\t\t\t\t//A临时读数\n\t\t\tint tempB = 0;\t\t\t\t\t\t//B临时读数\n\t\t\t//读A\n\t\t\tif (numberA >= 0)\n\t\t\t{\n\t\t\t\ttempA = num_a[numberA];\n\t\t\t\ttempA = tempA - '0';\n\t\t\t}\n\t\t\t//读B\n\t\t\tif (numberB >= 0)\n\t\t\t{\n\t\t\t\ttempB = num_b[numberB];\n\t\t\t\ttempB = tempB - '0';\n\t\t\t}\n\t\t\t//Input result\n\t\t\tint tempR = 0;\n\n\t\t\tif (j == 0)\n\t\t\t{\n\t\t\t\ttempR = tempA + tempB; //在不进位时结果\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\ttempR = tempA + tempB + nextline; //进位结果\n\t\t\t}\n\n\t\t\t//判断大于10\n\n\t\t\tif (j != (length - 1))\n\t\t\t{\n\t\t\t\tif (tempR >= 10)\n\t\t\t\t{\n\t\t\t\t\tifline = 1;\n\t\t\t\t\t//取模结果输出\n\t\t\t\t\ttempR = tempR % 10;\n\t\t\t\t}\n\t\t\t\telse if (tempR < 10)\n\t\t\t\t{\n\t\t\t\t\tifline = 0;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tint number = length - j - 1;\n\n\t\t\tTresult = tempR;\n\n\t\t\tresult[number] = Tresult;\n\t\t\tif (ifline == 1)\n\t\t\t{\n\t\t\t\tnextline = 1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tnextline = 0;\n\t\t\t}\n\t\t}\n\t\t//Output results\n\n\t\tcout << \"Case \" << i + 1 << \":\"\n\t\t\t << \"\\n\";\n\t\tcout << num_a << \" + \" << num_b << \" = \";\n\t\tint startout = 0;\n\n\t\tfor (int l = 1; l < length; l++) //输出一个数\n\t\t{\n\n\t\t\tif (result[0] != 0 && l == 1)\n\t\t\t{\n\t\t\t\tcout << result[0];\n\t\t\t\tstartout = 1;\n\t\t\t}\n\t\t\tif (result[l] != 0)\n\t\t\t{\n\t\t\t\tstartout = 1;\n\t\t\t}\n\t\t\telse if (l == (length - 1))\n\t\t\t{\n\t\t\t\tstartout = 1;\n\t\t\t}\n\n\t\t\tif (startout == 0)\n\t\t\t{\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tcout << result[l];\n\t\t}\n\t\t//输出结束\n\t\tcout << \"\\n\";\n\t\t//空行\n\t\tif (i != (case_number - 1))\n\t\t{\n\t\t\tcout << \"\\n\";\n\t\t}\n\n\t} //结束单个循环\n\treturn 0;\n}\n\n```\n\n这个算法嘛,写的其实很累赘,但是其中一些进位和控制输出体现了高精度算法所要求的强大的逻辑性\n\n高精度排序(洛谷P1781)\n\n```c++\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nchar president[20][101];\nint bits_number = 0;\n\nbool compare(int a, int b)\n{\n    return president[a][bits_number] > president[b][bits_number];\n};\n\nint main()\n{\n    int number = 0;\n    cin >> number;\n    for (int i = 0; i < number; i++) //Get the votes of president\n    {\n        cin >> president[i];\n    }\n    //ok,let's compare\n    queue<int> president_list; // the presidents left\n\n    int maxbit = 0; // the max votes bit president\n\n    for (int i = 0; i < number; i++) //get the bits of each president\n    {\n        int temp_bits = 0;\n        for (int j = 0; j < 100; j++) // get the bits\n        {\n            if (president[i][j] != 0)\n            {\n                temp_bits++;\n            }\n            else\n            {\n                break;\n            }\n        }\n        //this guy's bit has been recorded\n        if (temp_bits >= maxbit)\n        {\n            \n            president_list.push(i);\n            if (temp_bits > maxbit)\n            {\n                president_list = queue<int>();\n                president_list.push(i);\n            }\n            maxbit = temp_bits;\n        }\n    }\n    //WARNING: THE NUMBER OF PRESIDENT MUST BE PLUSED ONE!\n    //now,compare the president in queue!\n    vector<int> last_list;\n    while (!president_list.empty())\n    {\n        last_list.push_back(president_list.front());\n        president_list.pop();\n    }\n    for (int i = 0; i < maxbit; i++)\n    {\n        bits_number = i;\n        sort(last_list.begin(), last_list.end(), compare);\n        int erase_bit = president[last_list[0]][i];\n\n        for (auto it = last_list.begin(); it != last_list.end(); it++)\n        {\n            cout << \"\";\n            if (president[*it][i] < erase_bit)\n            {\n                last_list.erase(it);\n                it--;\n                cout << \"\";\n            }\n        }\n    }\n    cout << last_list[0] + 1 << endl;\n    for (int i = 0; i < maxbit; i++)\n    {\n        cout << president[last_list[0]][i];\n    }\n\n    return 0;\n}\n```\n\n当然,可以学一门Java/python来应付这个......\n\n这个我们后面可能会开Java/python的笔记.\n\n\n\n"},"__N_SSG":true}